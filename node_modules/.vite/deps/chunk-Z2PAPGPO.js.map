{
  "version": 3,
  "sources": ["../../monaco-editor/esm/vs/editor/browser/config/elementSizeObserver.js", "../../monaco-editor/esm/vs/editor/common/editorContextKeys.js", "../../monaco-editor/esm/vs/base/common/observableInternal/debugName.js", "../../monaco-editor/esm/vs/base/common/observableInternal/logging.js", "../../monaco-editor/esm/vs/base/common/observableInternal/base.js", "../../monaco-editor/esm/vs/base/common/observableInternal/derived.js", "../../monaco-editor/esm/vs/base/common/observableInternal/autorun.js", "../../monaco-editor/esm/vs/base/common/observableInternal/utils.js", "../../monaco-editor/esm/vs/base/common/observableInternal/promise.js", "../../monaco-editor/esm/vs/base/common/observable.js", "../../monaco-editor/esm/vs/base/common/hotReload.js", "../../monaco-editor/esm/vs/editor/browser/widget/diffEditor/utils.js", "../../monaco-editor/esm/vs/editor/browser/widget/diffEditor/features/hideUnchangedRegionsFeature.js", "../../monaco-editor/esm/vs/editor/contrib/editorState/browser/keybindingCancellation.js", "../../monaco-editor/esm/vs/editor/contrib/editorState/browser/editorState.js", "../../monaco-editor/esm/vs/editor/editor.api.js", "../../monaco-editor/esm/vs/editor/standalone/browser/standaloneEditor.js", "../../monaco-editor/esm/vs/editor/browser/config/fontMeasurements.js", "../../monaco-editor/esm/vs/base/browser/pixelRatio.js", "../../monaco-editor/esm/vs/editor/browser/config/charWidthReader.js", "../../monaco-editor/esm/vs/editor/common/config/fontInfo.js", "../../monaco-editor/esm/vs/editor/common/config/editorZoom.js", "../../monaco-editor/esm/vs/editor/browser/services/webWorker.js", "../../monaco-editor/esm/vs/editor/common/editorCommon.js", "../../monaco-editor/esm/vs/editor/standalone/browser/colorizer.js", "../../monaco-editor/esm/vs/editor/common/viewLayout/viewLineRenderer.js", "../../monaco-editor/esm/vs/editor/common/viewLayout/lineDecorations.js", "../../monaco-editor/esm/vs/editor/common/viewLayout/linePart.js", "../../monaco-editor/esm/vs/editor/common/viewModel.js", "../../monaco-editor/esm/vs/editor/standalone/common/monarch/monarchLexer.js", "../../monaco-editor/esm/vs/editor/standalone/common/monarch/monarchCommon.js", "../../monaco-editor/esm/vs/editor/standalone/browser/standaloneCodeEditor.js", "../../monaco-editor/esm/vs/editor/browser/services/markerDecorations.js", "../../monaco-editor/esm/vs/editor/browser/widget/codeEditorWidget.js", "../../monaco-editor/esm/vs/editor/browser/config/editorConfiguration.js", "../../monaco-editor/esm/vs/editor/browser/config/migrateOptions.js", "../../monaco-editor/esm/vs/editor/browser/config/tabFocus.js", "../../monaco-editor/esm/vs/editor/browser/view.js", "../../monaco-editor/esm/vs/base/browser/performance.js", "../../monaco-editor/esm/vs/editor/browser/editorDom.js", "../../monaco-editor/esm/vs/editor/common/viewEventHandler.js", "../../monaco-editor/esm/vs/editor/browser/view/viewPart.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/lines/viewLine.js", "../../monaco-editor/esm/vs/editor/browser/view/renderingContext.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/lines/rangeUtil.js", "../../monaco-editor/esm/vs/editor/browser/controller/mouseTarget.js", "../../monaco-editor/esm/vs/editor/common/cursor/cursorAtomicMoveOperations.js", "../../monaco-editor/esm/vs/editor/browser/controller/pointerHandler.js", "../../monaco-editor/esm/vs/editor/browser/controller/mouseHandler.js", "../../monaco-editor/esm/vs/editor/browser/controller/textAreaInput.js", "../../monaco-editor/esm/vs/editor/browser/controller/textAreaState.js", "../../monaco-editor/esm/vs/editor/browser/controller/textAreaHandler.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/lineNumbers/lineNumbers.js", "../../monaco-editor/esm/vs/editor/browser/view/dynamicViewOverlay.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/margin/margin.js", "../../monaco-editor/esm/vs/base/browser/ui/mouseCursor/mouseCursor.js", "../../monaco-editor/esm/vs/editor/browser/coreCommands.js", "../../monaco-editor/esm/vs/editor/common/cursorCommon.js", "../../monaco-editor/esm/vs/editor/common/cursor/cursorColumnSelection.js", "../../monaco-editor/esm/vs/editor/common/cursor/cursorDeleteOperations.js", "../../monaco-editor/esm/vs/editor/common/commands/replaceCommand.js", "../../monaco-editor/esm/vs/editor/common/cursor/cursorMoveOperations.js", "../../monaco-editor/esm/vs/editor/common/cursor/cursorMoveCommands.js", "../../monaco-editor/esm/vs/editor/common/cursor/cursorWordOperations.js", "../../monaco-editor/esm/vs/editor/common/cursor/cursorTypeOperations.js", "../../monaco-editor/esm/vs/editor/common/commands/shiftCommand.js", "../../monaco-editor/esm/vs/editor/common/languages/enterAction.js", "../../monaco-editor/esm/vs/editor/common/commands/surroundSelectionCommand.js", "../../monaco-editor/esm/vs/editor/common/languages/autoIndent.js", "../../monaco-editor/esm/vs/editor/browser/view/viewController.js", "../../monaco-editor/esm/vs/editor/browser/view/viewLayer.js", "../../monaco-editor/esm/vs/editor/browser/view/viewOverlays.js", "../../monaco-editor/esm/vs/editor/browser/view/viewUserInputEvents.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/blockDecorations/blockDecorations.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/contentWidgets/contentWidgets.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/currentLineHighlight/currentLineHighlight.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/decorations/decorations.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/editorScrollbar/editorScrollbar.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/glyphMargin/glyphMargin.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/indentGuides/indentGuides.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/lines/viewLines.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/lines/domReadingContext.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/linesDecorations/linesDecorations.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/marginDecorations/marginDecorations.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimap.js", "../../monaco-editor/esm/vs/editor/common/core/rgba.js", "../../monaco-editor/esm/vs/editor/common/viewModel/minimapTokensColorTracker.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharSheet.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRenderer.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapPreBaked.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRendererFactory.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/overlayWidgets/overlayWidgets.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/overviewRuler/decorationsOverviewRuler.js", "../../monaco-editor/esm/vs/editor/common/viewModel/overviewZoneManager.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/overviewRuler/overviewRuler.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/rulers/rulers.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/scrollDecoration/scrollDecoration.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/selections/selections.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/viewCursors/viewCursors.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/viewCursors/viewCursor.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/viewZones/viewZones.js", "../../monaco-editor/esm/vs/editor/browser/viewParts/whitespace/whitespace.js", "../../monaco-editor/esm/vs/editor/common/viewLayout/viewLinesViewportData.js", "../../monaco-editor/esm/vs/editor/common/editorTheme.js", "../../monaco-editor/esm/vs/editor/common/viewModel/viewContext.js", "../../monaco-editor/esm/vs/editor/browser/view/domLineBreaksComputer.js", "../../monaco-editor/esm/vs/editor/common/modelLineProjectionData.js", "../../monaco-editor/esm/vs/editor/browser/widget/codeEditorContributions.js", "../../monaco-editor/esm/vs/editor/common/editorAction.js", "../../monaco-editor/esm/vs/editor/common/viewModel/monospaceLineBreaksComputer.js", "../../monaco-editor/esm/vs/editor/common/viewModel/viewModelImpl.js", "../../monaco-editor/esm/vs/editor/common/cursor/cursor.js", "../../monaco-editor/esm/vs/editor/common/cursor/cursorCollection.js", "../../monaco-editor/esm/vs/editor/common/cursor/oneCursor.js", "../../monaco-editor/esm/vs/editor/common/cursor/cursorContext.js", "../../monaco-editor/esm/vs/editor/common/viewEvents.js", "../../monaco-editor/esm/vs/editor/common/viewModelEventDispatcher.js", "../../monaco-editor/esm/vs/editor/common/viewLayout/viewLayout.js", "../../monaco-editor/esm/vs/editor/common/viewLayout/linesLayout.js", "../../monaco-editor/esm/vs/editor/common/viewModel/viewModelDecorations.js", "../../monaco-editor/esm/vs/editor/common/viewModel/viewModelLines.js", "../../monaco-editor/esm/vs/editor/common/viewModel/modelLineProjection.js", "../../monaco-editor/esm/vs/editor/common/viewModel/glyphLanesModel.js", "../../monaco-editor/esm/vs/editor/browser/widget/diffEditor/diffEditorWidget.js", "../../monaco-editor/esm/vs/editor/browser/stableEditorScroll.js", "../../monaco-editor/esm/vs/editor/browser/widget/diffEditor/components/accessibleDiffViewer.js", "../../monaco-editor/esm/vs/editor/browser/widget/diffEditor/components/diffEditorDecorations.js", "../../monaco-editor/esm/vs/editor/browser/widget/diffEditor/features/movedBlocksLinesFeature.js", "../../monaco-editor/esm/vs/editor/browser/widget/diffEditor/registrations.contribution.js", "../../monaco-editor/esm/vs/editor/browser/widget/diffEditor/components/diffEditorSash.js", "../../monaco-editor/esm/vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/diffEditorViewZones.js", "../../monaco-editor/esm/vs/editor/browser/widget/diffEditor/diffEditorViewModel.js", "../../monaco-editor/esm/vs/editor/browser/widget/diffEditor/diffProviderFactoryService.js", "../../monaco-editor/esm/vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/inlineDiffDeletedCodeMargin.js", "../../monaco-editor/esm/vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/renderLines.js", "../../monaco-editor/esm/vs/editor/browser/widget/diffEditor/features/overviewRulerFeature.js", "../../monaco-editor/esm/vs/editor/browser/widget/diffEditor/delegatingEditorImpl.js", "../../monaco-editor/esm/vs/editor/browser/widget/diffEditor/components/diffEditorEditors.js", "../../monaco-editor/esm/vs/editor/browser/widget/diffEditor/diffEditorOptions.js", "../../monaco-editor/esm/vs/editor/browser/widget/diffEditor/features/revertButtonsFeature.js", "../../monaco-editor/esm/vs/editor/browser/widget/multiDiffEditorWidget/multiDiffEditorWidget.js", "../../monaco-editor/esm/vs/editor/browser/widget/multiDiffEditorWidget/multiDiffEditorWidgetImpl.js", "../../monaco-editor/esm/vs/editor/browser/widget/multiDiffEditorWidget/diffEditorItemTemplate.js", "../../monaco-editor/esm/vs/platform/actions/browser/toolbar.js", "../../monaco-editor/esm/vs/base/browser/ui/toolbar/toolbar.js", "../../monaco-editor/esm/vs/editor/browser/widget/multiDiffEditorWidget/utils.js", "../../monaco-editor/esm/vs/editor/browser/widget/multiDiffEditorWidget/objectPool.js", "../../monaco-editor/esm/vs/editor/browser/widget/multiDiffEditorWidget/colors.js", "../../monaco-editor/esm/vs/editor/standalone/browser/standaloneLanguages.js", "../../monaco-editor/esm/vs/editor/standalone/common/monarch/monarchCompile.js", "../../monaco-editor/esm/vs/editor/contrib/format/browser/format.js", "../../monaco-editor/esm/vs/editor/browser/editorBrowser.js", "../../monaco-editor/esm/vs/editor/contrib/format/browser/formattingEdit.js", "../../monaco-editor/esm/vs/platform/extensions/common/extensions.js"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { getWindow, scheduleAtNextAnimationFrame } from '../../../base/browser/dom.js';\nexport class ElementSizeObserver extends Disposable {\n    constructor(referenceDomElement, dimension) {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._referenceDomElement = referenceDomElement;\n        this._width = -1;\n        this._height = -1;\n        this._resizeObserver = null;\n        this.measureReferenceDomElement(false, dimension);\n    }\n    dispose() {\n        this.stopObserving();\n        super.dispose();\n    }\n    getWidth() {\n        return this._width;\n    }\n    getHeight() {\n        return this._height;\n    }\n    startObserving() {\n        if (!this._resizeObserver && this._referenceDomElement) {\n            // We want to react to the resize observer only once per animation frame\n            // The first time the resize observer fires, we will react to it immediately.\n            // Otherwise we will postpone to the next animation frame.\n            // We'll use `observeContentRect` to store the content rect we received.\n            let observedDimenstion = null;\n            const observeNow = () => {\n                if (observedDimenstion) {\n                    this.observe({ width: observedDimenstion.width, height: observedDimenstion.height });\n                }\n                else {\n                    this.observe();\n                }\n            };\n            let shouldObserve = false;\n            let alreadyObservedThisAnimationFrame = false;\n            const update = () => {\n                if (shouldObserve && !alreadyObservedThisAnimationFrame) {\n                    try {\n                        shouldObserve = false;\n                        alreadyObservedThisAnimationFrame = true;\n                        observeNow();\n                    }\n                    finally {\n                        scheduleAtNextAnimationFrame(getWindow(this._referenceDomElement), () => {\n                            alreadyObservedThisAnimationFrame = false;\n                            update();\n                        });\n                    }\n                }\n            };\n            this._resizeObserver = new ResizeObserver((entries) => {\n                if (entries && entries[0] && entries[0].contentRect) {\n                    observedDimenstion = { width: entries[0].contentRect.width, height: entries[0].contentRect.height };\n                }\n                else {\n                    observedDimenstion = null;\n                }\n                shouldObserve = true;\n                update();\n            });\n            this._resizeObserver.observe(this._referenceDomElement);\n        }\n    }\n    stopObserving() {\n        if (this._resizeObserver) {\n            this._resizeObserver.disconnect();\n            this._resizeObserver = null;\n        }\n    }\n    observe(dimension) {\n        this.measureReferenceDomElement(true, dimension);\n    }\n    measureReferenceDomElement(emitEvent, dimension) {\n        let observedWidth = 0;\n        let observedHeight = 0;\n        if (dimension) {\n            observedWidth = dimension.width;\n            observedHeight = dimension.height;\n        }\n        else if (this._referenceDomElement) {\n            observedWidth = this._referenceDomElement.clientWidth;\n            observedHeight = this._referenceDomElement.clientHeight;\n        }\n        observedWidth = Math.max(5, observedWidth);\n        observedHeight = Math.max(5, observedHeight);\n        if (this._width !== observedWidth || this._height !== observedHeight) {\n            this._width = observedWidth;\n            this._height = observedHeight;\n            if (emitEvent) {\n                this._onDidChange.fire();\n            }\n        }\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nimport { RawContextKey } from '../../platform/contextkey/common/contextkey.js';\nexport var EditorContextKeys;\n(function (EditorContextKeys) {\n    EditorContextKeys.editorSimpleInput = new RawContextKey('editorSimpleInput', false, true);\n    /**\n     * A context key that is set when the editor's text has focus (cursor is blinking).\n     * Is false when focus is in simple editor widgets (repl input, scm commit input).\n     */\n    EditorContextKeys.editorTextFocus = new RawContextKey('editorTextFocus', false, nls.localize('editorTextFocus', \"Whether the editor text has focus (cursor is blinking)\"));\n    /**\n     * A context key that is set when the editor's text or an editor's widget has focus.\n     */\n    EditorContextKeys.focus = new RawContextKey('editorFocus', false, nls.localize('editorFocus', \"Whether the editor or an editor widget has focus (e.g. focus is in the find widget)\"));\n    /**\n     * A context key that is set when any editor input has focus (regular editor, repl input...).\n     */\n    EditorContextKeys.textInputFocus = new RawContextKey('textInputFocus', false, nls.localize('textInputFocus', \"Whether an editor or a rich text input has focus (cursor is blinking)\"));\n    EditorContextKeys.readOnly = new RawContextKey('editorReadonly', false, nls.localize('editorReadonly', \"Whether the editor is read-only\"));\n    EditorContextKeys.inDiffEditor = new RawContextKey('inDiffEditor', false, nls.localize('inDiffEditor', \"Whether the context is a diff editor\"));\n    EditorContextKeys.isEmbeddedDiffEditor = new RawContextKey('isEmbeddedDiffEditor', false, nls.localize('isEmbeddedDiffEditor', \"Whether the context is an embedded diff editor\"));\n    EditorContextKeys.inMultiDiffEditor = new RawContextKey('inMultiDiffEditor', false, nls.localize('inMultiDiffEditor', \"Whether the context is a multi diff editor\"));\n    EditorContextKeys.multiDiffEditorAllCollapsed = new RawContextKey('multiDiffEditorAllCollapsed', undefined, nls.localize('multiDiffEditorAllCollapsed', \"Whether all files in multi diff editor are collapsed\"));\n    EditorContextKeys.hasChanges = new RawContextKey('diffEditorHasChanges', false, nls.localize('diffEditorHasChanges', \"Whether the diff editor has changes\"));\n    EditorContextKeys.comparingMovedCode = new RawContextKey('comparingMovedCode', false, nls.localize('comparingMovedCode', \"Whether a moved code block is selected for comparison\"));\n    EditorContextKeys.accessibleDiffViewerVisible = new RawContextKey('accessibleDiffViewerVisible', false, nls.localize('accessibleDiffViewerVisible', \"Whether the accessible diff viewer is visible\"));\n    EditorContextKeys.diffEditorRenderSideBySideInlineBreakpointReached = new RawContextKey('diffEditorRenderSideBySideInlineBreakpointReached', false, nls.localize('diffEditorRenderSideBySideInlineBreakpointReached', \"Whether the diff editor render side by side inline breakpoint is reached\"));\n    EditorContextKeys.columnSelection = new RawContextKey('editorColumnSelection', false, nls.localize('editorColumnSelection', \"Whether `editor.columnSelection` is enabled\"));\n    EditorContextKeys.writable = EditorContextKeys.readOnly.toNegated();\n    EditorContextKeys.hasNonEmptySelection = new RawContextKey('editorHasSelection', false, nls.localize('editorHasSelection', \"Whether the editor has text selected\"));\n    EditorContextKeys.hasOnlyEmptySelection = EditorContextKeys.hasNonEmptySelection.toNegated();\n    EditorContextKeys.hasMultipleSelections = new RawContextKey('editorHasMultipleSelections', false, nls.localize('editorHasMultipleSelections', \"Whether the editor has multiple selections\"));\n    EditorContextKeys.hasSingleSelection = EditorContextKeys.hasMultipleSelections.toNegated();\n    EditorContextKeys.tabMovesFocus = new RawContextKey('editorTabMovesFocus', false, nls.localize('editorTabMovesFocus', \"Whether `Tab` will move focus out of the editor\"));\n    EditorContextKeys.tabDoesNotMoveFocus = EditorContextKeys.tabMovesFocus.toNegated();\n    EditorContextKeys.isInEmbeddedEditor = new RawContextKey('isInEmbeddedEditor', false, true);\n    EditorContextKeys.canUndo = new RawContextKey('canUndo', false, true);\n    EditorContextKeys.canRedo = new RawContextKey('canRedo', false, true);\n    EditorContextKeys.hoverVisible = new RawContextKey('editorHoverVisible', false, nls.localize('editorHoverVisible', \"Whether the editor hover is visible\"));\n    EditorContextKeys.hoverFocused = new RawContextKey('editorHoverFocused', false, nls.localize('editorHoverFocused', \"Whether the editor hover is focused\"));\n    EditorContextKeys.stickyScrollFocused = new RawContextKey('stickyScrollFocused', false, nls.localize('stickyScrollFocused', \"Whether the sticky scroll is focused\"));\n    EditorContextKeys.stickyScrollVisible = new RawContextKey('stickyScrollVisible', false, nls.localize('stickyScrollVisible', \"Whether the sticky scroll is visible\"));\n    EditorContextKeys.standaloneColorPickerVisible = new RawContextKey('standaloneColorPickerVisible', false, nls.localize('standaloneColorPickerVisible', \"Whether the standalone color picker is visible\"));\n    EditorContextKeys.standaloneColorPickerFocused = new RawContextKey('standaloneColorPickerFocused', false, nls.localize('standaloneColorPickerFocused', \"Whether the standalone color picker is focused\"));\n    /**\n     * A context key that is set when an editor is part of a larger editor, like notebooks or\n     * (future) a diff editor\n     */\n    EditorContextKeys.inCompositeEditor = new RawContextKey('inCompositeEditor', undefined, nls.localize('inCompositeEditor', \"Whether the editor is part of a larger editor (e.g. notebooks)\"));\n    EditorContextKeys.notInCompositeEditor = EditorContextKeys.inCompositeEditor.toNegated();\n    // -- mode context keys\n    EditorContextKeys.languageId = new RawContextKey('editorLangId', '', nls.localize('editorLangId', \"The language identifier of the editor\"));\n    EditorContextKeys.hasCompletionItemProvider = new RawContextKey('editorHasCompletionItemProvider', false, nls.localize('editorHasCompletionItemProvider', \"Whether the editor has a completion item provider\"));\n    EditorContextKeys.hasCodeActionsProvider = new RawContextKey('editorHasCodeActionsProvider', false, nls.localize('editorHasCodeActionsProvider', \"Whether the editor has a code actions provider\"));\n    EditorContextKeys.hasCodeLensProvider = new RawContextKey('editorHasCodeLensProvider', false, nls.localize('editorHasCodeLensProvider', \"Whether the editor has a code lens provider\"));\n    EditorContextKeys.hasDefinitionProvider = new RawContextKey('editorHasDefinitionProvider', false, nls.localize('editorHasDefinitionProvider', \"Whether the editor has a definition provider\"));\n    EditorContextKeys.hasDeclarationProvider = new RawContextKey('editorHasDeclarationProvider', false, nls.localize('editorHasDeclarationProvider', \"Whether the editor has a declaration provider\"));\n    EditorContextKeys.hasImplementationProvider = new RawContextKey('editorHasImplementationProvider', false, nls.localize('editorHasImplementationProvider', \"Whether the editor has an implementation provider\"));\n    EditorContextKeys.hasTypeDefinitionProvider = new RawContextKey('editorHasTypeDefinitionProvider', false, nls.localize('editorHasTypeDefinitionProvider', \"Whether the editor has a type definition provider\"));\n    EditorContextKeys.hasHoverProvider = new RawContextKey('editorHasHoverProvider', false, nls.localize('editorHasHoverProvider', \"Whether the editor has a hover provider\"));\n    EditorContextKeys.hasDocumentHighlightProvider = new RawContextKey('editorHasDocumentHighlightProvider', false, nls.localize('editorHasDocumentHighlightProvider', \"Whether the editor has a document highlight provider\"));\n    EditorContextKeys.hasDocumentSymbolProvider = new RawContextKey('editorHasDocumentSymbolProvider', false, nls.localize('editorHasDocumentSymbolProvider', \"Whether the editor has a document symbol provider\"));\n    EditorContextKeys.hasReferenceProvider = new RawContextKey('editorHasReferenceProvider', false, nls.localize('editorHasReferenceProvider', \"Whether the editor has a reference provider\"));\n    EditorContextKeys.hasRenameProvider = new RawContextKey('editorHasRenameProvider', false, nls.localize('editorHasRenameProvider', \"Whether the editor has a rename provider\"));\n    EditorContextKeys.hasSignatureHelpProvider = new RawContextKey('editorHasSignatureHelpProvider', false, nls.localize('editorHasSignatureHelpProvider', \"Whether the editor has a signature help provider\"));\n    EditorContextKeys.hasInlayHintsProvider = new RawContextKey('editorHasInlayHintsProvider', false, nls.localize('editorHasInlayHintsProvider', \"Whether the editor has an inline hints provider\"));\n    // -- mode context keys: formatting\n    EditorContextKeys.hasDocumentFormattingProvider = new RawContextKey('editorHasDocumentFormattingProvider', false, nls.localize('editorHasDocumentFormattingProvider', \"Whether the editor has a document formatting provider\"));\n    EditorContextKeys.hasDocumentSelectionFormattingProvider = new RawContextKey('editorHasDocumentSelectionFormattingProvider', false, nls.localize('editorHasDocumentSelectionFormattingProvider', \"Whether the editor has a document selection formatting provider\"));\n    EditorContextKeys.hasMultipleDocumentFormattingProvider = new RawContextKey('editorHasMultipleDocumentFormattingProvider', false, nls.localize('editorHasMultipleDocumentFormattingProvider', \"Whether the editor has multiple document formatting providers\"));\n    EditorContextKeys.hasMultipleDocumentSelectionFormattingProvider = new RawContextKey('editorHasMultipleDocumentSelectionFormattingProvider', false, nls.localize('editorHasMultipleDocumentSelectionFormattingProvider', \"Whether the editor has multiple document selection formatting providers\"));\n})(EditorContextKeys || (EditorContextKeys = {}));\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class DebugNameData {\n    constructor(owner, debugNameSource, referenceFn) {\n        this.owner = owner;\n        this.debugNameSource = debugNameSource;\n        this.referenceFn = referenceFn;\n    }\n    getDebugName(target) {\n        return getDebugName(target, this);\n    }\n}\nconst countPerName = new Map();\nconst cachedDebugName = new WeakMap();\nexport function getDebugName(target, data) {\n    var _a;\n    const cached = cachedDebugName.get(target);\n    if (cached) {\n        return cached;\n    }\n    const dbgName = computeDebugName(target, data);\n    if (dbgName) {\n        let count = (_a = countPerName.get(dbgName)) !== null && _a !== void 0 ? _a : 0;\n        count++;\n        countPerName.set(dbgName, count);\n        const result = count === 1 ? dbgName : `${dbgName}#${count}`;\n        cachedDebugName.set(target, result);\n        return result;\n    }\n    return undefined;\n}\nfunction computeDebugName(self, data) {\n    const cached = cachedDebugName.get(self);\n    if (cached) {\n        return cached;\n    }\n    const ownerStr = data.owner ? formatOwner(data.owner) + `.` : '';\n    let result;\n    const debugNameSource = data.debugNameSource;\n    if (debugNameSource !== undefined) {\n        if (typeof debugNameSource === 'function') {\n            result = debugNameSource();\n            if (result !== undefined) {\n                return ownerStr + result;\n            }\n        }\n        else {\n            return ownerStr + debugNameSource;\n        }\n    }\n    const referenceFn = data.referenceFn;\n    if (referenceFn !== undefined) {\n        result = getFunctionName(referenceFn);\n        if (result !== undefined) {\n            return ownerStr + result;\n        }\n    }\n    if (data.owner !== undefined) {\n        const key = findKey(data.owner, self);\n        if (key !== undefined) {\n            return ownerStr + key;\n        }\n    }\n    return undefined;\n}\nfunction findKey(obj, value) {\n    for (const key in obj) {\n        if (obj[key] === value) {\n            return key;\n        }\n    }\n    return undefined;\n}\nconst countPerClassName = new Map();\nconst ownerId = new WeakMap();\nfunction formatOwner(owner) {\n    var _a;\n    const id = ownerId.get(owner);\n    if (id) {\n        return id;\n    }\n    const className = getClassName(owner);\n    let count = (_a = countPerClassName.get(className)) !== null && _a !== void 0 ? _a : 0;\n    count++;\n    countPerClassName.set(className, count);\n    const result = count === 1 ? className : `${className}#${count}`;\n    ownerId.set(owner, result);\n    return result;\n}\nfunction getClassName(obj) {\n    const ctor = obj.constructor;\n    if (ctor) {\n        return ctor.name;\n    }\n    return 'Object';\n}\nexport function getFunctionName(fn) {\n    const fnSrc = fn.toString();\n    // Pattern: /** @description ... */\n    const regexp = /\\/\\*\\*\\s*@description\\s*([^*]*)\\*\\//;\n    const match = regexp.exec(fnSrc);\n    const result = match ? match[1] : undefined;\n    return result === null || result === void 0 ? void 0 : result.trim();\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nlet globalObservableLogger;\nexport function setLogger(logger) {\n    globalObservableLogger = logger;\n}\nexport function getLogger() {\n    return globalObservableLogger;\n}\nexport class ConsoleObservableLogger {\n    constructor() {\n        this.indentation = 0;\n        this.changedObservablesSets = new WeakMap();\n    }\n    textToConsoleArgs(text) {\n        return consoleTextToArgs([\n            normalText(repeat('|  ', this.indentation)),\n            text,\n        ]);\n    }\n    formatInfo(info) {\n        if (!info.hadValue) {\n            return [\n                normalText(` `),\n                styled(formatValue(info.newValue, 60), {\n                    color: 'green',\n                }),\n                normalText(` (initial)`),\n            ];\n        }\n        return info.didChange\n            ? [\n                normalText(` `),\n                styled(formatValue(info.oldValue, 70), {\n                    color: 'red',\n                    strikeThrough: true,\n                }),\n                normalText(` `),\n                styled(formatValue(info.newValue, 60), {\n                    color: 'green',\n                }),\n            ]\n            : [normalText(` (unchanged)`)];\n    }\n    handleObservableChanged(observable, info) {\n        console.log(...this.textToConsoleArgs([\n            formatKind('observable value changed'),\n            styled(observable.debugName, { color: 'BlueViolet' }),\n            ...this.formatInfo(info),\n        ]));\n    }\n    formatChanges(changes) {\n        if (changes.size === 0) {\n            return undefined;\n        }\n        return styled(' (changed deps: ' +\n            [...changes].map((o) => o.debugName).join(', ') +\n            ')', { color: 'gray' });\n    }\n    handleDerivedCreated(derived) {\n        const existingHandleChange = derived.handleChange;\n        this.changedObservablesSets.set(derived, new Set());\n        derived.handleChange = (observable, change) => {\n            this.changedObservablesSets.get(derived).add(observable);\n            return existingHandleChange.apply(derived, [observable, change]);\n        };\n    }\n    handleDerivedRecomputed(derived, info) {\n        const changedObservables = this.changedObservablesSets.get(derived);\n        console.log(...this.textToConsoleArgs([\n            formatKind('derived recomputed'),\n            styled(derived.debugName, { color: 'BlueViolet' }),\n            ...this.formatInfo(info),\n            this.formatChanges(changedObservables),\n            { data: [{ fn: derived._computeFn }] }\n        ]));\n        changedObservables.clear();\n    }\n    handleFromEventObservableTriggered(observable, info) {\n        console.log(...this.textToConsoleArgs([\n            formatKind('observable from event triggered'),\n            styled(observable.debugName, { color: 'BlueViolet' }),\n            ...this.formatInfo(info),\n            { data: [{ fn: observable._getValue }] }\n        ]));\n    }\n    handleAutorunCreated(autorun) {\n        const existingHandleChange = autorun.handleChange;\n        this.changedObservablesSets.set(autorun, new Set());\n        autorun.handleChange = (observable, change) => {\n            this.changedObservablesSets.get(autorun).add(observable);\n            return existingHandleChange.apply(autorun, [observable, change]);\n        };\n    }\n    handleAutorunTriggered(autorun) {\n        const changedObservables = this.changedObservablesSets.get(autorun);\n        console.log(...this.textToConsoleArgs([\n            formatKind('autorun'),\n            styled(autorun.debugName, { color: 'BlueViolet' }),\n            this.formatChanges(changedObservables),\n            { data: [{ fn: autorun._runFn }] }\n        ]));\n        changedObservables.clear();\n        this.indentation++;\n    }\n    handleAutorunFinished(autorun) {\n        this.indentation--;\n    }\n    handleBeginTransaction(transaction) {\n        let transactionName = transaction.getDebugName();\n        if (transactionName === undefined) {\n            transactionName = '';\n        }\n        console.log(...this.textToConsoleArgs([\n            formatKind('transaction'),\n            styled(transactionName, { color: 'BlueViolet' }),\n            { data: [{ fn: transaction._fn }] }\n        ]));\n        this.indentation++;\n    }\n    handleEndTransaction() {\n        this.indentation--;\n    }\n}\nfunction consoleTextToArgs(text) {\n    const styles = new Array();\n    const data = [];\n    let firstArg = '';\n    function process(t) {\n        if ('length' in t) {\n            for (const item of t) {\n                if (item) {\n                    process(item);\n                }\n            }\n        }\n        else if ('text' in t) {\n            firstArg += `%c${t.text}`;\n            styles.push(t.style);\n            if (t.data) {\n                data.push(...t.data);\n            }\n        }\n        else if ('data' in t) {\n            data.push(...t.data);\n        }\n    }\n    process(text);\n    const result = [firstArg, ...styles];\n    result.push(...data);\n    return result;\n}\nfunction normalText(text) {\n    return styled(text, { color: 'black' });\n}\nfunction formatKind(kind) {\n    return styled(padStr(`${kind}: `, 10), { color: 'black', bold: true });\n}\nfunction styled(text, options = {\n    color: 'black',\n}) {\n    function objToCss(styleObj) {\n        return Object.entries(styleObj).reduce((styleString, [propName, propValue]) => {\n            return `${styleString}${propName}:${propValue};`;\n        }, '');\n    }\n    const style = {\n        color: options.color,\n    };\n    if (options.strikeThrough) {\n        style['text-decoration'] = 'line-through';\n    }\n    if (options.bold) {\n        style['font-weight'] = 'bold';\n    }\n    return {\n        text,\n        style: objToCss(style),\n    };\n}\nfunction formatValue(value, availableLen) {\n    switch (typeof value) {\n        case 'number':\n            return '' + value;\n        case 'string':\n            if (value.length + 2 <= availableLen) {\n                return `\"${value}\"`;\n            }\n            return `\"${value.substr(0, availableLen - 7)}\"+...`;\n        case 'boolean':\n            return value ? 'true' : 'false';\n        case 'undefined':\n            return 'undefined';\n        case 'object':\n            if (value === null) {\n                return 'null';\n            }\n            if (Array.isArray(value)) {\n                return formatArray(value, availableLen);\n            }\n            return formatObject(value, availableLen);\n        case 'symbol':\n            return value.toString();\n        case 'function':\n            return `[[Function${value.name ? ' ' + value.name : ''}]]`;\n        default:\n            return '' + value;\n    }\n}\nfunction formatArray(value, availableLen) {\n    let result = '[ ';\n    let first = true;\n    for (const val of value) {\n        if (!first) {\n            result += ', ';\n        }\n        if (result.length - 5 > availableLen) {\n            result += '...';\n            break;\n        }\n        first = false;\n        result += `${formatValue(val, availableLen - result.length)}`;\n    }\n    result += ' ]';\n    return result;\n}\nfunction formatObject(value, availableLen) {\n    let result = '{ ';\n    let first = true;\n    for (const [key, val] of Object.entries(value)) {\n        if (!first) {\n            result += ', ';\n        }\n        if (result.length - 5 > availableLen) {\n            result += '...';\n            break;\n        }\n        first = false;\n        result += `${key}: ${formatValue(val, availableLen - result.length)}`;\n    }\n    result += ' }';\n    return result;\n}\nfunction repeat(str, count) {\n    let result = '';\n    for (let i = 1; i <= count; i++) {\n        result += str;\n    }\n    return result;\n}\nfunction padStr(str, length) {\n    while (str.length < length) {\n        str += ' ';\n    }\n    return str;\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { DebugNameData, getFunctionName } from './debugName.js';\nimport { getLogger } from './logging.js';\nlet _recomputeInitiallyAndOnChange;\nexport function _setRecomputeInitiallyAndOnChange(recomputeInitiallyAndOnChange) {\n    _recomputeInitiallyAndOnChange = recomputeInitiallyAndOnChange;\n}\nlet _keepObserved;\nexport function _setKeepObserved(keepObserved) {\n    _keepObserved = keepObserved;\n}\nlet _derived;\n/**\n * @internal\n * This is to allow splitting files.\n*/\nexport function _setDerivedOpts(derived) {\n    _derived = derived;\n}\nexport class ConvenientObservable {\n    get TChange() { return null; }\n    reportChanges() {\n        this.get();\n    }\n    /** @sealed */\n    read(reader) {\n        if (reader) {\n            return reader.readObservable(this);\n        }\n        else {\n            return this.get();\n        }\n    }\n    map(fnOrOwner, fnOrUndefined) {\n        const owner = fnOrUndefined === undefined ? undefined : fnOrOwner;\n        const fn = fnOrUndefined === undefined ? fnOrOwner : fnOrUndefined;\n        return _derived({\n            owner,\n            debugName: () => {\n                const name = getFunctionName(fn);\n                if (name !== undefined) {\n                    return name;\n                }\n                // regexp to match `x => x.y` or `x => x?.y` where x and y can be arbitrary identifiers (uses backref):\n                const regexp = /^\\s*\\(?\\s*([a-zA-Z_$][a-zA-Z_$0-9]*)\\s*\\)?\\s*=>\\s*\\1(?:\\??)\\.([a-zA-Z_$][a-zA-Z_$0-9]*)\\s*$/;\n                const match = regexp.exec(fn.toString());\n                if (match) {\n                    return `${this.debugName}.${match[2]}`;\n                }\n                if (!owner) {\n                    return `${this.debugName} (mapped)`;\n                }\n                return undefined;\n            },\n        }, (reader) => fn(this.read(reader), reader));\n    }\n    recomputeInitiallyAndOnChange(store, handleValue) {\n        store.add(_recomputeInitiallyAndOnChange(this, handleValue));\n        return this;\n    }\n}\nexport class BaseObservable extends ConvenientObservable {\n    constructor() {\n        super(...arguments);\n        this.observers = new Set();\n    }\n    addObserver(observer) {\n        const len = this.observers.size;\n        this.observers.add(observer);\n        if (len === 0) {\n            this.onFirstObserverAdded();\n        }\n    }\n    removeObserver(observer) {\n        const deleted = this.observers.delete(observer);\n        if (deleted && this.observers.size === 0) {\n            this.onLastObserverRemoved();\n        }\n    }\n    onFirstObserverAdded() { }\n    onLastObserverRemoved() { }\n}\n/**\n * Starts a transaction in which many observables can be changed at once.\n * {@link fn} should start with a JS Doc using `@description` to give the transaction a debug name.\n * Reaction run on demand or when the transaction ends.\n */\nexport function transaction(fn, getDebugName) {\n    const tx = new TransactionImpl(fn, getDebugName);\n    try {\n        fn(tx);\n    }\n    finally {\n        tx.finish();\n    }\n}\nlet _globalTransaction = undefined;\nexport function globalTransaction(fn) {\n    if (_globalTransaction) {\n        fn(_globalTransaction);\n    }\n    else {\n        const tx = new TransactionImpl(fn, undefined);\n        _globalTransaction = tx;\n        try {\n            fn(tx);\n        }\n        finally {\n            tx.finish(); // During finish, more actions might be added to the transaction.\n            // Which is why we only clear the global transaction after finish.\n            _globalTransaction = undefined;\n        }\n    }\n}\nexport async function asyncTransaction(fn, getDebugName) {\n    const tx = new TransactionImpl(fn, getDebugName);\n    try {\n        await fn(tx);\n    }\n    finally {\n        tx.finish();\n    }\n}\n/**\n * Allows to chain transactions.\n */\nexport function subtransaction(tx, fn, getDebugName) {\n    if (!tx) {\n        transaction(fn, getDebugName);\n    }\n    else {\n        fn(tx);\n    }\n}\nexport class TransactionImpl {\n    constructor(_fn, _getDebugName) {\n        var _a;\n        this._fn = _fn;\n        this._getDebugName = _getDebugName;\n        this.updatingObservers = [];\n        (_a = getLogger()) === null || _a === void 0 ? void 0 : _a.handleBeginTransaction(this);\n    }\n    getDebugName() {\n        if (this._getDebugName) {\n            return this._getDebugName();\n        }\n        return getFunctionName(this._fn);\n    }\n    updateObserver(observer, observable) {\n        // When this gets called while finish is active, they will still get considered\n        this.updatingObservers.push({ observer, observable });\n        observer.beginUpdate(observable);\n    }\n    finish() {\n        var _a;\n        const updatingObservers = this.updatingObservers;\n        for (let i = 0; i < updatingObservers.length; i++) {\n            const { observer, observable } = updatingObservers[i];\n            observer.endUpdate(observable);\n        }\n        // Prevent anyone from updating observers from now on.\n        this.updatingObservers = null;\n        (_a = getLogger()) === null || _a === void 0 ? void 0 : _a.handleEndTransaction();\n    }\n}\nexport function observableValue(nameOrOwner, initialValue) {\n    if (typeof nameOrOwner === 'string') {\n        return new ObservableValue(undefined, nameOrOwner, initialValue);\n    }\n    else {\n        return new ObservableValue(nameOrOwner, undefined, initialValue);\n    }\n}\nexport class ObservableValue extends BaseObservable {\n    get debugName() {\n        var _a;\n        return (_a = new DebugNameData(this._owner, this._debugName, undefined).getDebugName(this)) !== null && _a !== void 0 ? _a : 'ObservableValue';\n    }\n    constructor(_owner, _debugName, initialValue) {\n        super();\n        this._owner = _owner;\n        this._debugName = _debugName;\n        this._value = initialValue;\n    }\n    get() {\n        return this._value;\n    }\n    set(value, tx, change) {\n        var _a;\n        if (this._value === value) {\n            return;\n        }\n        let _tx;\n        if (!tx) {\n            tx = _tx = new TransactionImpl(() => { }, () => `Setting ${this.debugName}`);\n        }\n        try {\n            const oldValue = this._value;\n            this._setValue(value);\n            (_a = getLogger()) === null || _a === void 0 ? void 0 : _a.handleObservableChanged(this, { oldValue, newValue: value, change, didChange: true, hadValue: true });\n            for (const observer of this.observers) {\n                tx.updateObserver(observer, this);\n                observer.handleChange(this, change);\n            }\n        }\n        finally {\n            if (_tx) {\n                _tx.finish();\n            }\n        }\n    }\n    toString() {\n        return `${this.debugName}: ${this._value}`;\n    }\n    _setValue(newValue) {\n        this._value = newValue;\n    }\n}\n/**\n * A disposable observable. When disposed, its value is also disposed.\n * When a new value is set, the previous value is disposed.\n */\nexport function disposableObservableValue(nameOrOwner, initialValue) {\n    if (typeof nameOrOwner === 'string') {\n        return new DisposableObservableValue(undefined, nameOrOwner, initialValue);\n    }\n    else {\n        return new DisposableObservableValue(nameOrOwner, undefined, initialValue);\n    }\n}\nexport class DisposableObservableValue extends ObservableValue {\n    _setValue(newValue) {\n        if (this._value === newValue) {\n            return;\n        }\n        if (this._value) {\n            this._value.dispose();\n        }\n        this._value = newValue;\n    }\n    dispose() {\n        var _a;\n        (_a = this._value) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { assertFn } from '../assert.js';\nimport { DisposableStore } from '../lifecycle.js';\nimport { BaseObservable, _setDerivedOpts } from './base.js';\nimport { DebugNameData } from './debugName.js';\nimport { getLogger } from './logging.js';\nexport const defaultEqualityComparer = (a, b) => a === b;\nexport function derived(computeFnOrOwner, computeFn) {\n    if (computeFn !== undefined) {\n        return new Derived(new DebugNameData(computeFnOrOwner, undefined, computeFn), computeFn, undefined, undefined, undefined, defaultEqualityComparer);\n    }\n    return new Derived(new DebugNameData(undefined, undefined, computeFnOrOwner), computeFnOrOwner, undefined, undefined, undefined, defaultEqualityComparer);\n}\nexport function derivedOpts(options, computeFn) {\n    var _a;\n    return new Derived(new DebugNameData(options.owner, options.debugName, options.debugReferenceFn), computeFn, undefined, undefined, options.onLastObserverRemoved, (_a = options.equalityComparer) !== null && _a !== void 0 ? _a : defaultEqualityComparer);\n}\n_setDerivedOpts(derivedOpts);\n/**\n * Represents an observable that is derived from other observables.\n * The value is only recomputed when absolutely needed.\n *\n * {@link computeFn} should start with a JS Doc using `@description` to name the derived.\n *\n * Use `createEmptyChangeSummary` to create a \"change summary\" that can collect the changes.\n * Use `handleChange` to add a reported change to the change summary.\n * The compute function is given the last change summary.\n * The change summary is discarded after the compute function was called.\n *\n * @see derived\n */\nexport function derivedHandleChanges(options, computeFn) {\n    var _a;\n    return new Derived(new DebugNameData(options.owner, options.debugName, undefined), computeFn, options.createEmptyChangeSummary, options.handleChange, undefined, (_a = options.equalityComparer) !== null && _a !== void 0 ? _a : defaultEqualityComparer);\n}\nexport function derivedWithStore(computeFnOrOwner, computeFnOrUndefined) {\n    let computeFn;\n    let owner;\n    if (computeFnOrUndefined === undefined) {\n        computeFn = computeFnOrOwner;\n        owner = undefined;\n    }\n    else {\n        owner = computeFnOrOwner;\n        computeFn = computeFnOrUndefined;\n    }\n    const store = new DisposableStore();\n    return new Derived(new DebugNameData(owner, undefined, computeFn), r => {\n        store.clear();\n        return computeFn(r, store);\n    }, undefined, undefined, () => store.dispose(), defaultEqualityComparer);\n}\nexport function derivedDisposable(computeFnOrOwner, computeFnOrUndefined) {\n    let computeFn;\n    let owner;\n    if (computeFnOrUndefined === undefined) {\n        computeFn = computeFnOrOwner;\n        owner = undefined;\n    }\n    else {\n        owner = computeFnOrOwner;\n        computeFn = computeFnOrUndefined;\n    }\n    const store = new DisposableStore();\n    return new Derived(new DebugNameData(owner, undefined, computeFn), r => {\n        store.clear();\n        const result = computeFn(r);\n        if (result) {\n            store.add(result);\n        }\n        return result;\n    }, undefined, undefined, () => store.dispose(), defaultEqualityComparer);\n}\nexport class Derived extends BaseObservable {\n    get debugName() {\n        var _a;\n        return (_a = this._debugNameData.getDebugName(this)) !== null && _a !== void 0 ? _a : '(anonymous)';\n    }\n    constructor(_debugNameData, _computeFn, createChangeSummary, _handleChange, _handleLastObserverRemoved = undefined, _equalityComparator) {\n        var _a, _b;\n        super();\n        this._debugNameData = _debugNameData;\n        this._computeFn = _computeFn;\n        this.createChangeSummary = createChangeSummary;\n        this._handleChange = _handleChange;\n        this._handleLastObserverRemoved = _handleLastObserverRemoved;\n        this._equalityComparator = _equalityComparator;\n        this.state = 0 /* DerivedState.initial */;\n        this.value = undefined;\n        this.updateCount = 0;\n        this.dependencies = new Set();\n        this.dependenciesToBeRemoved = new Set();\n        this.changeSummary = undefined;\n        this.changeSummary = (_a = this.createChangeSummary) === null || _a === void 0 ? void 0 : _a.call(this);\n        (_b = getLogger()) === null || _b === void 0 ? void 0 : _b.handleDerivedCreated(this);\n    }\n    onLastObserverRemoved() {\n        var _a;\n        /**\n         * We are not tracking changes anymore, thus we have to assume\n         * that our cache is invalid.\n         */\n        this.state = 0 /* DerivedState.initial */;\n        this.value = undefined;\n        for (const d of this.dependencies) {\n            d.removeObserver(this);\n        }\n        this.dependencies.clear();\n        (_a = this._handleLastObserverRemoved) === null || _a === void 0 ? void 0 : _a.call(this);\n    }\n    get() {\n        var _a;\n        if (this.observers.size === 0) {\n            // Without observers, we don't know when to clean up stuff.\n            // Thus, we don't cache anything to prevent memory leaks.\n            const result = this._computeFn(this, (_a = this.createChangeSummary) === null || _a === void 0 ? void 0 : _a.call(this));\n            // Clear new dependencies\n            this.onLastObserverRemoved();\n            return result;\n        }\n        else {\n            do {\n                // We might not get a notification for a dependency that changed while it is updating,\n                // thus we also have to ask all our depedencies if they changed in this case.\n                if (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */) {\n                    for (const d of this.dependencies) {\n                        /** might call {@link handleChange} indirectly, which could make us stale */\n                        d.reportChanges();\n                        if (this.state === 2 /* DerivedState.stale */) {\n                            // The other dependencies will refresh on demand, so early break\n                            break;\n                        }\n                    }\n                }\n                // We called report changes of all dependencies.\n                // If we are still not stale, we can assume to be up to date again.\n                if (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */) {\n                    this.state = 3 /* DerivedState.upToDate */;\n                }\n                this._recomputeIfNeeded();\n                // In case recomputation changed one of our dependencies, we need to recompute again.\n            } while (this.state !== 3 /* DerivedState.upToDate */);\n            return this.value;\n        }\n    }\n    _recomputeIfNeeded() {\n        var _a, _b;\n        if (this.state === 3 /* DerivedState.upToDate */) {\n            return;\n        }\n        const emptySet = this.dependenciesToBeRemoved;\n        this.dependenciesToBeRemoved = this.dependencies;\n        this.dependencies = emptySet;\n        const hadValue = this.state !== 0 /* DerivedState.initial */;\n        const oldValue = this.value;\n        this.state = 3 /* DerivedState.upToDate */;\n        const changeSummary = this.changeSummary;\n        this.changeSummary = (_a = this.createChangeSummary) === null || _a === void 0 ? void 0 : _a.call(this);\n        try {\n            /** might call {@link handleChange} indirectly, which could invalidate us */\n            this.value = this._computeFn(this, changeSummary);\n        }\n        finally {\n            // We don't want our observed observables to think that they are (not even temporarily) not being observed.\n            // Thus, we only unsubscribe from observables that are definitely not read anymore.\n            for (const o of this.dependenciesToBeRemoved) {\n                o.removeObserver(this);\n            }\n            this.dependenciesToBeRemoved.clear();\n        }\n        const didChange = hadValue && !(this._equalityComparator(oldValue, this.value));\n        (_b = getLogger()) === null || _b === void 0 ? void 0 : _b.handleDerivedRecomputed(this, {\n            oldValue,\n            newValue: this.value,\n            change: undefined,\n            didChange,\n            hadValue,\n        });\n        if (didChange) {\n            for (const r of this.observers) {\n                r.handleChange(this, undefined);\n            }\n        }\n    }\n    toString() {\n        return `LazyDerived<${this.debugName}>`;\n    }\n    // IObserver Implementation\n    beginUpdate(_observable) {\n        this.updateCount++;\n        const propagateBeginUpdate = this.updateCount === 1;\n        if (this.state === 3 /* DerivedState.upToDate */) {\n            this.state = 1 /* DerivedState.dependenciesMightHaveChanged */;\n            // If we propagate begin update, that will already signal a possible change.\n            if (!propagateBeginUpdate) {\n                for (const r of this.observers) {\n                    r.handlePossibleChange(this);\n                }\n            }\n        }\n        if (propagateBeginUpdate) {\n            for (const r of this.observers) {\n                r.beginUpdate(this); // This signals a possible change\n            }\n        }\n    }\n    endUpdate(_observable) {\n        this.updateCount--;\n        if (this.updateCount === 0) {\n            // End update could change the observer list.\n            const observers = [...this.observers];\n            for (const r of observers) {\n                r.endUpdate(this);\n            }\n        }\n        assertFn(() => this.updateCount >= 0);\n    }\n    handlePossibleChange(observable) {\n        // In all other states, observers already know that we might have changed.\n        if (this.state === 3 /* DerivedState.upToDate */ && this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n            this.state = 1 /* DerivedState.dependenciesMightHaveChanged */;\n            for (const r of this.observers) {\n                r.handlePossibleChange(this);\n            }\n        }\n    }\n    handleChange(observable, change) {\n        if (this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n            const shouldReact = this._handleChange ? this._handleChange({\n                changedObservable: observable,\n                change,\n                didChange: o => o === observable,\n            }, this.changeSummary) : true;\n            const wasUpToDate = this.state === 3 /* DerivedState.upToDate */;\n            if (shouldReact && (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */ || wasUpToDate)) {\n                this.state = 2 /* DerivedState.stale */;\n                if (wasUpToDate) {\n                    for (const r of this.observers) {\n                        r.handlePossibleChange(this);\n                    }\n                }\n            }\n        }\n    }\n    // IReader Implementation\n    readObservable(observable) {\n        // Subscribe before getting the value to enable caching\n        observable.addObserver(this);\n        /** This might call {@link handleChange} indirectly, which could invalidate us */\n        const value = observable.get();\n        // Which is why we only add the observable to the dependencies now.\n        this.dependencies.add(observable);\n        this.dependenciesToBeRemoved.delete(observable);\n        return value;\n    }\n    addObserver(observer) {\n        const shouldCallBeginUpdate = !this.observers.has(observer) && this.updateCount > 0;\n        super.addObserver(observer);\n        if (shouldCallBeginUpdate) {\n            observer.beginUpdate(this);\n        }\n    }\n    removeObserver(observer) {\n        const shouldCallEndUpdate = this.observers.has(observer) && this.updateCount > 0;\n        super.removeObserver(observer);\n        if (shouldCallEndUpdate) {\n            // Calling end update after removing the observer makes sure endUpdate cannot be called twice here.\n            observer.endUpdate(this);\n        }\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { assertFn } from '../assert.js';\nimport { DisposableStore, markAsDisposed, toDisposable, trackDisposable } from '../lifecycle.js';\nimport { DebugNameData } from './debugName.js';\nimport { getLogger } from './logging.js';\n/**\n * Runs immediately and whenever a transaction ends and an observed observable changed.\n * {@link fn} should start with a JS Doc using `@description` to name the autorun.\n */\nexport function autorun(fn) {\n    return new AutorunObserver(new DebugNameData(undefined, undefined, fn), fn, undefined, undefined);\n}\n/**\n * Runs immediately and whenever a transaction ends and an observed observable changed.\n * {@link fn} should start with a JS Doc using `@description` to name the autorun.\n */\nexport function autorunOpts(options, fn) {\n    var _a;\n    return new AutorunObserver(new DebugNameData(options.owner, options.debugName, (_a = options.debugReferenceFn) !== null && _a !== void 0 ? _a : fn), fn, undefined, undefined);\n}\n/**\n * Runs immediately and whenever a transaction ends and an observed observable changed.\n * {@link fn} should start with a JS Doc using `@description` to name the autorun.\n *\n * Use `createEmptyChangeSummary` to create a \"change summary\" that can collect the changes.\n * Use `handleChange` to add a reported change to the change summary.\n * The run function is given the last change summary.\n * The change summary is discarded after the run function was called.\n *\n * @see autorun\n */\nexport function autorunHandleChanges(options, fn) {\n    var _a;\n    return new AutorunObserver(new DebugNameData(options.owner, options.debugName, (_a = options.debugReferenceFn) !== null && _a !== void 0 ? _a : fn), fn, options.createEmptyChangeSummary, options.handleChange);\n}\n/**\n * @see autorun (but with a disposable store that is cleared before the next run or on dispose)\n */\nexport function autorunWithStore(fn) {\n    const store = new DisposableStore();\n    const disposable = autorunOpts({\n        owner: undefined,\n        debugName: undefined,\n        debugReferenceFn: fn,\n    }, reader => {\n        store.clear();\n        fn(reader, store);\n    });\n    return toDisposable(() => {\n        disposable.dispose();\n        store.dispose();\n    });\n}\nexport class AutorunObserver {\n    get debugName() {\n        var _a;\n        return (_a = this._debugNameData.getDebugName(this)) !== null && _a !== void 0 ? _a : '(anonymous)';\n    }\n    constructor(_debugNameData, _runFn, createChangeSummary, _handleChange) {\n        var _a, _b;\n        this._debugNameData = _debugNameData;\n        this._runFn = _runFn;\n        this.createChangeSummary = createChangeSummary;\n        this._handleChange = _handleChange;\n        this.state = 2 /* AutorunState.stale */;\n        this.updateCount = 0;\n        this.disposed = false;\n        this.dependencies = new Set();\n        this.dependenciesToBeRemoved = new Set();\n        this.changeSummary = (_a = this.createChangeSummary) === null || _a === void 0 ? void 0 : _a.call(this);\n        (_b = getLogger()) === null || _b === void 0 ? void 0 : _b.handleAutorunCreated(this);\n        this._runIfNeeded();\n        trackDisposable(this);\n    }\n    dispose() {\n        this.disposed = true;\n        for (const o of this.dependencies) {\n            o.removeObserver(this);\n        }\n        this.dependencies.clear();\n        markAsDisposed(this);\n    }\n    _runIfNeeded() {\n        var _a, _b, _c;\n        if (this.state === 3 /* AutorunState.upToDate */) {\n            return;\n        }\n        const emptySet = this.dependenciesToBeRemoved;\n        this.dependenciesToBeRemoved = this.dependencies;\n        this.dependencies = emptySet;\n        this.state = 3 /* AutorunState.upToDate */;\n        const isDisposed = this.disposed;\n        try {\n            if (!isDisposed) {\n                (_a = getLogger()) === null || _a === void 0 ? void 0 : _a.handleAutorunTriggered(this);\n                const changeSummary = this.changeSummary;\n                this.changeSummary = (_b = this.createChangeSummary) === null || _b === void 0 ? void 0 : _b.call(this);\n                this._runFn(this, changeSummary);\n            }\n        }\n        finally {\n            if (!isDisposed) {\n                (_c = getLogger()) === null || _c === void 0 ? void 0 : _c.handleAutorunFinished(this);\n            }\n            // We don't want our observed observables to think that they are (not even temporarily) not being observed.\n            // Thus, we only unsubscribe from observables that are definitely not read anymore.\n            for (const o of this.dependenciesToBeRemoved) {\n                o.removeObserver(this);\n            }\n            this.dependenciesToBeRemoved.clear();\n        }\n    }\n    toString() {\n        return `Autorun<${this.debugName}>`;\n    }\n    // IObserver implementation\n    beginUpdate() {\n        if (this.state === 3 /* AutorunState.upToDate */) {\n            this.state = 1 /* AutorunState.dependenciesMightHaveChanged */;\n        }\n        this.updateCount++;\n    }\n    endUpdate() {\n        if (this.updateCount === 1) {\n            do {\n                if (this.state === 1 /* AutorunState.dependenciesMightHaveChanged */) {\n                    this.state = 3 /* AutorunState.upToDate */;\n                    for (const d of this.dependencies) {\n                        d.reportChanges();\n                        if (this.state === 2 /* AutorunState.stale */) {\n                            // The other dependencies will refresh on demand\n                            break;\n                        }\n                    }\n                }\n                this._runIfNeeded();\n            } while (this.state !== 3 /* AutorunState.upToDate */);\n        }\n        this.updateCount--;\n        assertFn(() => this.updateCount >= 0);\n    }\n    handlePossibleChange(observable) {\n        if (this.state === 3 /* AutorunState.upToDate */ && this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n            this.state = 1 /* AutorunState.dependenciesMightHaveChanged */;\n        }\n    }\n    handleChange(observable, change) {\n        if (this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n            const shouldReact = this._handleChange ? this._handleChange({\n                changedObservable: observable,\n                change,\n                didChange: o => o === observable,\n            }, this.changeSummary) : true;\n            if (shouldReact) {\n                this.state = 2 /* AutorunState.stale */;\n            }\n        }\n    }\n    // IReader implementation\n    readObservable(observable) {\n        // In case the run action disposes the autorun\n        if (this.disposed) {\n            return observable.get();\n        }\n        observable.addObserver(this);\n        const value = observable.get();\n        this.dependencies.add(observable);\n        this.dependenciesToBeRemoved.delete(observable);\n        return value;\n    }\n}\n(function (autorun) {\n    autorun.Observer = AutorunObserver;\n})(autorun || (autorun = {}));\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { DisposableStore, toDisposable } from '../lifecycle.js';\nimport { BaseObservable, ConvenientObservable, _setKeepObserved, _setRecomputeInitiallyAndOnChange, subtransaction, transaction } from './base.js';\nimport { DebugNameData, getFunctionName } from './debugName.js';\nimport { derived, derivedOpts } from './derived.js';\nimport { getLogger } from './logging.js';\n/**\n * Represents an efficient observable whose value never changes.\n */\nexport function constObservable(value) {\n    return new ConstObservable(value);\n}\nclass ConstObservable extends ConvenientObservable {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    get debugName() {\n        return this.toString();\n    }\n    get() {\n        return this.value;\n    }\n    addObserver(observer) {\n        // NO OP\n    }\n    removeObserver(observer) {\n        // NO OP\n    }\n    toString() {\n        return `Const: ${this.value}`;\n    }\n}\nexport function observableFromEvent(event, getValue) {\n    return new FromEventObservable(event, getValue);\n}\nexport class FromEventObservable extends BaseObservable {\n    constructor(event, _getValue) {\n        super();\n        this.event = event;\n        this._getValue = _getValue;\n        this.hasValue = false;\n        this.handleEvent = (args) => {\n            var _a;\n            const newValue = this._getValue(args);\n            const oldValue = this.value;\n            const didChange = !this.hasValue || oldValue !== newValue;\n            let didRunTransaction = false;\n            if (didChange) {\n                this.value = newValue;\n                if (this.hasValue) {\n                    didRunTransaction = true;\n                    subtransaction(FromEventObservable.globalTransaction, (tx) => {\n                        var _a;\n                        (_a = getLogger()) === null || _a === void 0 ? void 0 : _a.handleFromEventObservableTriggered(this, { oldValue, newValue, change: undefined, didChange, hadValue: this.hasValue });\n                        for (const o of this.observers) {\n                            tx.updateObserver(o, this);\n                            o.handleChange(this, undefined);\n                        }\n                    }, () => {\n                        const name = this.getDebugName();\n                        return 'Event fired' + (name ? `: ${name}` : '');\n                    });\n                }\n                this.hasValue = true;\n            }\n            if (!didRunTransaction) {\n                (_a = getLogger()) === null || _a === void 0 ? void 0 : _a.handleFromEventObservableTriggered(this, { oldValue, newValue, change: undefined, didChange, hadValue: this.hasValue });\n            }\n        };\n    }\n    getDebugName() {\n        return getFunctionName(this._getValue);\n    }\n    get debugName() {\n        const name = this.getDebugName();\n        return 'From Event' + (name ? `: ${name}` : '');\n    }\n    onFirstObserverAdded() {\n        this.subscription = this.event(this.handleEvent);\n    }\n    onLastObserverRemoved() {\n        this.subscription.dispose();\n        this.subscription = undefined;\n        this.hasValue = false;\n        this.value = undefined;\n    }\n    get() {\n        if (this.subscription) {\n            if (!this.hasValue) {\n                this.handleEvent(undefined);\n            }\n            return this.value;\n        }\n        else {\n            // no cache, as there are no subscribers to keep it updated\n            return this._getValue(undefined);\n        }\n    }\n}\n(function (observableFromEvent) {\n    observableFromEvent.Observer = FromEventObservable;\n    function batchEventsGlobally(tx, fn) {\n        let didSet = false;\n        if (FromEventObservable.globalTransaction === undefined) {\n            FromEventObservable.globalTransaction = tx;\n            didSet = true;\n        }\n        try {\n            fn();\n        }\n        finally {\n            if (didSet) {\n                FromEventObservable.globalTransaction = undefined;\n            }\n        }\n    }\n    observableFromEvent.batchEventsGlobally = batchEventsGlobally;\n})(observableFromEvent || (observableFromEvent = {}));\nexport function observableSignalFromEvent(debugName, event) {\n    return new FromEventObservableSignal(debugName, event);\n}\nclass FromEventObservableSignal extends BaseObservable {\n    constructor(debugName, event) {\n        super();\n        this.debugName = debugName;\n        this.event = event;\n        this.handleEvent = () => {\n            transaction((tx) => {\n                for (const o of this.observers) {\n                    tx.updateObserver(o, this);\n                    o.handleChange(this, undefined);\n                }\n            }, () => this.debugName);\n        };\n    }\n    onFirstObserverAdded() {\n        this.subscription = this.event(this.handleEvent);\n    }\n    onLastObserverRemoved() {\n        this.subscription.dispose();\n        this.subscription = undefined;\n    }\n    get() {\n        // NO OP\n    }\n}\nexport function observableSignal(debugNameOrOwner) {\n    if (typeof debugNameOrOwner === 'string') {\n        return new ObservableSignal(debugNameOrOwner);\n    }\n    else {\n        return new ObservableSignal(undefined, debugNameOrOwner);\n    }\n}\nclass ObservableSignal extends BaseObservable {\n    get debugName() {\n        var _a;\n        return (_a = new DebugNameData(this._owner, this._debugName, undefined).getDebugName(this)) !== null && _a !== void 0 ? _a : 'Observable Signal';\n    }\n    constructor(_debugName, _owner) {\n        super();\n        this._debugName = _debugName;\n        this._owner = _owner;\n    }\n    trigger(tx, change) {\n        if (!tx) {\n            transaction(tx => {\n                this.trigger(tx, change);\n            }, () => `Trigger signal ${this.debugName}`);\n            return;\n        }\n        for (const o of this.observers) {\n            tx.updateObserver(o, this);\n            o.handleChange(this, change);\n        }\n    }\n    get() {\n        // NO OP\n    }\n}\n/**\n * This makes sure the observable is being observed and keeps its cache alive.\n */\nexport function keepObserved(observable) {\n    const o = new KeepAliveObserver(false, undefined);\n    observable.addObserver(o);\n    return toDisposable(() => {\n        observable.removeObserver(o);\n    });\n}\n_setKeepObserved(keepObserved);\n/**\n * This converts the given observable into an autorun.\n */\nexport function recomputeInitiallyAndOnChange(observable, handleValue) {\n    const o = new KeepAliveObserver(true, handleValue);\n    observable.addObserver(o);\n    if (handleValue) {\n        handleValue(observable.get());\n    }\n    else {\n        observable.reportChanges();\n    }\n    return toDisposable(() => {\n        observable.removeObserver(o);\n    });\n}\n_setRecomputeInitiallyAndOnChange(recomputeInitiallyAndOnChange);\nexport class KeepAliveObserver {\n    constructor(_forceRecompute, _handleValue) {\n        this._forceRecompute = _forceRecompute;\n        this._handleValue = _handleValue;\n        this._counter = 0;\n    }\n    beginUpdate(observable) {\n        this._counter++;\n    }\n    endUpdate(observable) {\n        this._counter--;\n        if (this._counter === 0 && this._forceRecompute) {\n            if (this._handleValue) {\n                this._handleValue(observable.get());\n            }\n            else {\n                observable.reportChanges();\n            }\n        }\n    }\n    handlePossibleChange(observable) {\n        // NO OP\n    }\n    handleChange(observable, change) {\n        // NO OP\n    }\n}\nexport function derivedObservableWithCache(computeFn) {\n    let lastValue = undefined;\n    const observable = derived(reader => {\n        lastValue = computeFn(reader, lastValue);\n        return lastValue;\n    });\n    return observable;\n}\n/**\n * When the items array changes, referential equal items are not mapped again.\n */\nexport function mapObservableArrayCached(owner, items, map, keySelector) {\n    let m = new ArrayMap(map, keySelector);\n    const self = derivedOpts({\n        debugReferenceFn: map,\n        owner,\n        onLastObserverRemoved: () => {\n            m.dispose();\n            m = new ArrayMap(map);\n        }\n    }, (reader) => {\n        m.setItems(items.read(reader));\n        return m.getItems();\n    });\n    return self;\n}\nclass ArrayMap {\n    constructor(_map, _keySelector) {\n        this._map = _map;\n        this._keySelector = _keySelector;\n        this._cache = new Map();\n        this._items = [];\n    }\n    dispose() {\n        this._cache.forEach(entry => entry.store.dispose());\n        this._cache.clear();\n    }\n    setItems(items) {\n        const newItems = [];\n        const itemsToRemove = new Set(this._cache.keys());\n        for (const item of items) {\n            const key = this._keySelector ? this._keySelector(item) : item;\n            let entry = this._cache.get(key);\n            if (!entry) {\n                const store = new DisposableStore();\n                const out = this._map(item, store);\n                entry = { out, store };\n                this._cache.set(key, entry);\n            }\n            else {\n                itemsToRemove.delete(key);\n            }\n            newItems.push(entry.out);\n        }\n        for (const item of itemsToRemove) {\n            const entry = this._cache.get(item);\n            entry.store.dispose();\n            this._cache.delete(item);\n        }\n        this._items = newItems;\n    }\n    getItems() {\n        return this._items;\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { autorun } from './autorun.js';\nexport function waitForState(observable, predicate, isError) {\n    return new Promise((resolve, reject) => {\n        let isImmediateRun = true;\n        let shouldDispose = false;\n        const stateObs = observable.map(state => {\n            /** @description waitForState.state */\n            return {\n                isFinished: predicate(state),\n                error: isError ? isError(state) : false,\n                state\n            };\n        });\n        const d = autorun(reader => {\n            /** @description waitForState */\n            const { isFinished, error, state } = stateObs.read(reader);\n            if (isFinished || error) {\n                if (isImmediateRun) {\n                    // The variable `d` is not initialized yet\n                    shouldDispose = true;\n                }\n                else {\n                    d.dispose();\n                }\n                if (error) {\n                    reject(error === true ? state : error);\n                }\n                else {\n                    resolve(state);\n                }\n            }\n        });\n        isImmediateRun = false;\n        if (shouldDispose) {\n            d.dispose();\n        }\n    });\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// This is a facade for the observable implementation. Only import from here!\nexport { observableValue, disposableObservableValue, transaction, subtransaction } from './observableInternal/base.js';\nexport { derived, derivedOpts, derivedHandleChanges, derivedWithStore } from './observableInternal/derived.js';\nexport { autorun, autorunHandleChanges, autorunWithStore, autorunOpts } from './observableInternal/autorun.js';\nexport { constObservable, derivedObservableWithCache, keepObserved, recomputeInitiallyAndOnChange, observableFromEvent, observableSignal, observableSignalFromEvent } from './observableInternal/utils.js';\nexport { waitForState } from './observableInternal/promise.js';\nimport { ConsoleObservableLogger, setLogger } from './observableInternal/logging.js';\n// Remove \"//\" in the next line to enable logging\nconst enableLogging = false;\nif (enableLogging) {\n    setLogger(new ConsoleObservableLogger());\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { env } from './process.js';\nexport function isHotReloadEnabled() {\n    return env && !!env['VSCODE_DEV'];\n}\nexport function registerHotReloadHandler(handler) {\n    if (!isHotReloadEnabled()) {\n        return { dispose() { } };\n    }\n    else {\n        const handlers = registerGlobalHotReloadHandler();\n        handlers.add(handler);\n        return {\n            dispose() { handlers.delete(handler); }\n        };\n    }\n}\nfunction registerGlobalHotReloadHandler() {\n    if (!hotReloadHandlers) {\n        hotReloadHandlers = new Set();\n    }\n    const g = globalThis;\n    if (!g.$hotReload_applyNewExports) {\n        g.$hotReload_applyNewExports = args => {\n            const args2 = { config: { mode: undefined }, ...args };\n            for (const h of hotReloadHandlers) {\n                const result = h(args2);\n                if (result) {\n                    return result;\n                }\n            }\n            return undefined;\n        };\n    }\n    return hotReloadHandlers;\n}\nlet hotReloadHandlers = undefined;\nif (isHotReloadEnabled()) {\n    // This code does not run in production.\n    registerHotReloadHandler(({ oldExports, newSrc, config }) => {\n        if (config.mode !== 'patch-prototype') {\n            return undefined;\n        }\n        return newExports => {\n            var _a, _b;\n            for (const key in newExports) {\n                const exportedItem = newExports[key];\n                console.log(`[hot-reload] Patching prototype methods of '${key}'`, { exportedItem });\n                if (typeof exportedItem === 'function' && exportedItem.prototype) {\n                    const oldExportedItem = oldExports[key];\n                    if (oldExportedItem) {\n                        for (const prop of Object.getOwnPropertyNames(exportedItem.prototype)) {\n                            const descriptor = Object.getOwnPropertyDescriptor(exportedItem.prototype, prop);\n                            const oldDescriptor = Object.getOwnPropertyDescriptor(oldExportedItem.prototype, prop);\n                            if (((_a = descriptor === null || descriptor === void 0 ? void 0 : descriptor.value) === null || _a === void 0 ? void 0 : _a.toString()) !== ((_b = oldDescriptor === null || oldDescriptor === void 0 ? void 0 : oldDescriptor.value) === null || _b === void 0 ? void 0 : _b.toString())) {\n                                console.log(`[hot-reload] Patching prototype method '${key}.${prop}'`);\n                            }\n                            Object.defineProperty(oldExportedItem.prototype, prop, descriptor);\n                        }\n                        newExports[key] = oldExportedItem;\n                    }\n                }\n            }\n            return true;\n        };\n    });\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { findLast } from '../../../../base/common/arraysFind.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { isHotReloadEnabled, registerHotReloadHandler } from '../../../../base/common/hotReload.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, autorunHandleChanges, autorunOpts, autorunWithStore, observableSignalFromEvent, observableValue, transaction } from '../../../../base/common/observable.js';\nimport { ElementSizeObserver } from '../../config/elementSizeObserver.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { LengthObj } from '../../../common/model/bracketPairsTextModelPart/bracketPairsTree/length.js';\nexport function joinCombine(arr1, arr2, keySelector, combine) {\n    if (arr1.length === 0) {\n        return arr2;\n    }\n    if (arr2.length === 0) {\n        return arr1;\n    }\n    const result = [];\n    let i = 0;\n    let j = 0;\n    while (i < arr1.length && j < arr2.length) {\n        const val1 = arr1[i];\n        const val2 = arr2[j];\n        const key1 = keySelector(val1);\n        const key2 = keySelector(val2);\n        if (key1 < key2) {\n            result.push(val1);\n            i++;\n        }\n        else if (key1 > key2) {\n            result.push(val2);\n            j++;\n        }\n        else {\n            result.push(combine(val1, val2));\n            i++;\n            j++;\n        }\n    }\n    while (i < arr1.length) {\n        result.push(arr1[i]);\n        i++;\n    }\n    while (j < arr2.length) {\n        result.push(arr2[j]);\n        j++;\n    }\n    return result;\n}\n// TODO make utility\nexport function applyObservableDecorations(editor, decorations) {\n    const d = new DisposableStore();\n    const decorationsCollection = editor.createDecorationsCollection();\n    d.add(autorunOpts({ debugName: () => `Apply decorations from ${decorations.debugName}` }, reader => {\n        const d = decorations.read(reader);\n        decorationsCollection.set(d);\n    }));\n    d.add({\n        dispose: () => {\n            decorationsCollection.clear();\n        }\n    });\n    return d;\n}\nexport function appendRemoveOnDispose(parent, child) {\n    parent.appendChild(child);\n    return toDisposable(() => {\n        parent.removeChild(child);\n    });\n}\nexport class ObservableElementSizeObserver extends Disposable {\n    get width() { return this._width; }\n    get height() { return this._height; }\n    constructor(element, dimension) {\n        super();\n        this.elementSizeObserver = this._register(new ElementSizeObserver(element, dimension));\n        this._width = observableValue(this, this.elementSizeObserver.getWidth());\n        this._height = observableValue(this, this.elementSizeObserver.getHeight());\n        this._register(this.elementSizeObserver.onDidChange(e => transaction(tx => {\n            /** @description Set width/height from elementSizeObserver */\n            this._width.set(this.elementSizeObserver.getWidth(), tx);\n            this._height.set(this.elementSizeObserver.getHeight(), tx);\n        })));\n    }\n    observe(dimension) {\n        this.elementSizeObserver.observe(dimension);\n    }\n    setAutomaticLayout(automaticLayout) {\n        if (automaticLayout) {\n            this.elementSizeObserver.startObserving();\n        }\n        else {\n            this.elementSizeObserver.stopObserving();\n        }\n    }\n}\nexport function animatedObservable(targetWindow, base, store) {\n    let targetVal = base.get();\n    let startVal = targetVal;\n    let curVal = targetVal;\n    const result = observableValue('animatedValue', targetVal);\n    let animationStartMs = -1;\n    const durationMs = 300;\n    let animationFrame = undefined;\n    store.add(autorunHandleChanges({\n        createEmptyChangeSummary: () => ({ animate: false }),\n        handleChange: (ctx, s) => {\n            if (ctx.didChange(base)) {\n                s.animate = s.animate || ctx.change;\n            }\n            return true;\n        }\n    }, (reader, s) => {\n        /** @description update value */\n        if (animationFrame !== undefined) {\n            targetWindow.cancelAnimationFrame(animationFrame);\n            animationFrame = undefined;\n        }\n        startVal = curVal;\n        targetVal = base.read(reader);\n        animationStartMs = Date.now() - (s.animate ? 0 : durationMs);\n        update();\n    }));\n    function update() {\n        const passedMs = Date.now() - animationStartMs;\n        curVal = Math.floor(easeOutExpo(passedMs, startVal, targetVal - startVal, durationMs));\n        if (passedMs < durationMs) {\n            animationFrame = targetWindow.requestAnimationFrame(update);\n        }\n        else {\n            curVal = targetVal;\n        }\n        result.set(curVal, undefined);\n    }\n    return result;\n}\nfunction easeOutExpo(t, b, c, d) {\n    return t === d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n}\nexport class ViewZoneOverlayWidget extends Disposable {\n    constructor(editor, viewZone, htmlElement) {\n        super();\n        this._register(new ManagedOverlayWidget(editor, htmlElement));\n        this._register(applyStyle(htmlElement, {\n            height: viewZone.actualHeight,\n            top: viewZone.actualTop,\n        }));\n    }\n}\nexport class PlaceholderViewZone {\n    get afterLineNumber() { return this._afterLineNumber.get(); }\n    constructor(_afterLineNumber, heightInPx) {\n        this._afterLineNumber = _afterLineNumber;\n        this.heightInPx = heightInPx;\n        this.domNode = document.createElement('div');\n        this._actualTop = observableValue(this, undefined);\n        this._actualHeight = observableValue(this, undefined);\n        this.actualTop = this._actualTop;\n        this.actualHeight = this._actualHeight;\n        this.showInHiddenAreas = true;\n        this.onChange = this._afterLineNumber;\n        this.onDomNodeTop = (top) => {\n            this._actualTop.set(top, undefined);\n        };\n        this.onComputedHeight = (height) => {\n            this._actualHeight.set(height, undefined);\n        };\n    }\n}\nexport class ManagedOverlayWidget {\n    constructor(_editor, _domElement) {\n        this._editor = _editor;\n        this._domElement = _domElement;\n        this._overlayWidgetId = `managedOverlayWidget-${ManagedOverlayWidget._counter++}`;\n        this._overlayWidget = {\n            getId: () => this._overlayWidgetId,\n            getDomNode: () => this._domElement,\n            getPosition: () => null\n        };\n        this._editor.addOverlayWidget(this._overlayWidget);\n    }\n    dispose() {\n        this._editor.removeOverlayWidget(this._overlayWidget);\n    }\n}\nManagedOverlayWidget._counter = 0;\nexport function applyStyle(domNode, style) {\n    return autorun(reader => {\n        /** @description applyStyle */\n        for (let [key, val] of Object.entries(style)) {\n            if (val && typeof val === 'object' && 'read' in val) {\n                val = val.read(reader);\n            }\n            if (typeof val === 'number') {\n                val = `${val}px`;\n            }\n            key = key.replace(/[A-Z]/g, m => '-' + m.toLowerCase());\n            domNode.style[key] = val;\n        }\n    });\n}\nexport function readHotReloadableExport(value, reader) {\n    observeHotReloadableExports([value], reader);\n    return value;\n}\nexport function observeHotReloadableExports(values, reader) {\n    if (isHotReloadEnabled()) {\n        const o = observableSignalFromEvent('reload', event => registerHotReloadHandler(({ oldExports }) => {\n            if (![...Object.values(oldExports)].some(v => values.includes(v))) {\n                return undefined;\n            }\n            return (_newExports) => {\n                event(undefined);\n                return true;\n            };\n        }));\n        o.read(reader);\n    }\n}\nexport function applyViewZones(editor, viewZones, setIsUpdating, zoneIds) {\n    const store = new DisposableStore();\n    const lastViewZoneIds = [];\n    store.add(autorunWithStore((reader, store) => {\n        /** @description applyViewZones */\n        const curViewZones = viewZones.read(reader);\n        const viewZonIdsPerViewZone = new Map();\n        const viewZoneIdPerOnChangeObservable = new Map();\n        // Add/remove view zones\n        if (setIsUpdating) {\n            setIsUpdating(true);\n        }\n        editor.changeViewZones(a => {\n            for (const id of lastViewZoneIds) {\n                a.removeZone(id);\n                zoneIds === null || zoneIds === void 0 ? void 0 : zoneIds.delete(id);\n            }\n            lastViewZoneIds.length = 0;\n            for (const z of curViewZones) {\n                const id = a.addZone(z);\n                if (z.setZoneId) {\n                    z.setZoneId(id);\n                }\n                lastViewZoneIds.push(id);\n                zoneIds === null || zoneIds === void 0 ? void 0 : zoneIds.add(id);\n                viewZonIdsPerViewZone.set(z, id);\n            }\n        });\n        if (setIsUpdating) {\n            setIsUpdating(false);\n        }\n        // Layout zone on change\n        store.add(autorunHandleChanges({\n            createEmptyChangeSummary() {\n                return { zoneIds: [] };\n            },\n            handleChange(context, changeSummary) {\n                const id = viewZoneIdPerOnChangeObservable.get(context.changedObservable);\n                if (id !== undefined) {\n                    changeSummary.zoneIds.push(id);\n                }\n                return true;\n            },\n        }, (reader, changeSummary) => {\n            /** @description layoutZone on change */\n            for (const vz of curViewZones) {\n                if (vz.onChange) {\n                    viewZoneIdPerOnChangeObservable.set(vz.onChange, viewZonIdsPerViewZone.get(vz));\n                    vz.onChange.read(reader);\n                }\n            }\n            if (setIsUpdating) {\n                setIsUpdating(true);\n            }\n            editor.changeViewZones(a => { for (const id of changeSummary.zoneIds) {\n                a.layoutZone(id);\n            } });\n            if (setIsUpdating) {\n                setIsUpdating(false);\n            }\n        }));\n    }));\n    store.add({\n        dispose() {\n            if (setIsUpdating) {\n                setIsUpdating(true);\n            }\n            editor.changeViewZones(a => { for (const id of lastViewZoneIds) {\n                a.removeZone(id);\n            } });\n            zoneIds === null || zoneIds === void 0 ? void 0 : zoneIds.clear();\n            if (setIsUpdating) {\n                setIsUpdating(false);\n            }\n        }\n    });\n    return store;\n}\nexport class DisposableCancellationTokenSource extends CancellationTokenSource {\n    dispose() {\n        super.dispose(true);\n    }\n}\nexport function translatePosition(posInOriginal, mappings) {\n    const mapping = findLast(mappings, m => m.original.startLineNumber <= posInOriginal.lineNumber);\n    if (!mapping) {\n        // No changes before the position\n        return Range.fromPositions(posInOriginal);\n    }\n    if (mapping.original.endLineNumberExclusive <= posInOriginal.lineNumber) {\n        const newLineNumber = posInOriginal.lineNumber - mapping.original.endLineNumberExclusive + mapping.modified.endLineNumberExclusive;\n        return Range.fromPositions(new Position(newLineNumber, posInOriginal.column));\n    }\n    if (!mapping.innerChanges) {\n        // Only for legacy algorithm\n        return Range.fromPositions(new Position(mapping.modified.startLineNumber, 1));\n    }\n    const innerMapping = findLast(mapping.innerChanges, m => m.originalRange.getStartPosition().isBeforeOrEqual(posInOriginal));\n    if (!innerMapping) {\n        const newLineNumber = posInOriginal.lineNumber - mapping.original.startLineNumber + mapping.modified.startLineNumber;\n        return Range.fromPositions(new Position(newLineNumber, posInOriginal.column));\n    }\n    if (innerMapping.originalRange.containsPosition(posInOriginal)) {\n        return innerMapping.modifiedRange;\n    }\n    else {\n        const l = lengthBetweenPositions(innerMapping.originalRange.getEndPosition(), posInOriginal);\n        return Range.fromPositions(addLength(innerMapping.modifiedRange.getEndPosition(), l));\n    }\n}\nfunction lengthBetweenPositions(position1, position2) {\n    if (position1.lineNumber === position2.lineNumber) {\n        return new LengthObj(0, position2.column - position1.column);\n    }\n    else {\n        return new LengthObj(position2.lineNumber - position1.lineNumber, position2.column - 1);\n    }\n}\nfunction addLength(position, length) {\n    if (length.lineCount === 0) {\n        return new Position(position.lineNumber, position.column + length.columnCount);\n    }\n    else {\n        return new Position(position.lineNumber + length.lineCount, length.columnCount + 1);\n    }\n}\nexport function bindContextKey(key, service, computeValue) {\n    const boundKey = key.bindTo(service);\n    return autorunOpts({ debugName: () => `Set Context Key \"${key.key}\"` }, reader => {\n        boundKey.set(computeValue(reader));\n    });\n}\nexport function filterWithPrevious(arr, filter) {\n    let prev;\n    return arr.filter(cur => {\n        const result = filter(cur, prev);\n        prev = cur;\n        return result;\n    });\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar HideUnchangedRegionsFeature_1;\nimport { $, addDisposableListener, getWindow, h, reset } from '../../../../../base/browser/dom.js';\nimport { renderIcon, renderLabelWithIcons } from '../../../../../base/browser/ui/iconLabel/iconLabels.js';\nimport { Codicon } from '../../../../../base/common/codicons.js';\nimport { MarkdownString } from '../../../../../base/common/htmlContent.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { autorun, derived, derivedWithStore, observableFromEvent, observableValue, transaction } from '../../../../../base/common/observable.js';\nimport { derivedDisposable } from '../../../../../base/common/observableInternal/derived.js';\nimport { ThemeIcon } from '../../../../../base/common/themables.js';\nimport { isDefined } from '../../../../../base/common/types.js';\nimport { PlaceholderViewZone, ViewZoneOverlayWidget, applyObservableDecorations, applyStyle } from '../utils.js';\nimport { LineRange } from '../../../../common/core/lineRange.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { SymbolKinds } from '../../../../common/languages.js';\nimport { localize } from '../../../../../nls.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\n/**\n * Make sure to add the view zones to the editor!\n */\nlet HideUnchangedRegionsFeature = HideUnchangedRegionsFeature_1 = class HideUnchangedRegionsFeature extends Disposable {\n    static setBreadcrumbsSourceFactory(factory) {\n        this._breadcrumbsSourceFactory.set(factory, undefined);\n    }\n    get isUpdatingHiddenAreas() { return this._isUpdatingHiddenAreas; }\n    constructor(_editors, _diffModel, _options, _instantiationService) {\n        super();\n        this._editors = _editors;\n        this._diffModel = _diffModel;\n        this._options = _options;\n        this._instantiationService = _instantiationService;\n        this._modifiedOutlineSource = derivedDisposable(this, (reader) => {\n            const m = this._editors.modifiedModel.read(reader);\n            const factory = HideUnchangedRegionsFeature_1._breadcrumbsSourceFactory.read(reader);\n            return (!m || !factory) ? undefined : factory(m, this._instantiationService);\n        });\n        this._isUpdatingHiddenAreas = false;\n        this._register(this._editors.original.onDidChangeCursorPosition(e => {\n            if (e.reason === 3 /* CursorChangeReason.Explicit */) {\n                const m = this._diffModel.get();\n                transaction(tx => {\n                    for (const s of this._editors.original.getSelections() || []) {\n                        m === null || m === void 0 ? void 0 : m.ensureOriginalLineIsVisible(s.getStartPosition().lineNumber, 0 /* RevealPreference.FromCloserSide */, tx);\n                        m === null || m === void 0 ? void 0 : m.ensureOriginalLineIsVisible(s.getEndPosition().lineNumber, 0 /* RevealPreference.FromCloserSide */, tx);\n                    }\n                });\n            }\n        }));\n        this._register(this._editors.modified.onDidChangeCursorPosition(e => {\n            if (e.reason === 3 /* CursorChangeReason.Explicit */) {\n                const m = this._diffModel.get();\n                transaction(tx => {\n                    for (const s of this._editors.modified.getSelections() || []) {\n                        m === null || m === void 0 ? void 0 : m.ensureModifiedLineIsVisible(s.getStartPosition().lineNumber, 0 /* RevealPreference.FromCloserSide */, tx);\n                        m === null || m === void 0 ? void 0 : m.ensureModifiedLineIsVisible(s.getEndPosition().lineNumber, 0 /* RevealPreference.FromCloserSide */, tx);\n                    }\n                });\n            }\n        }));\n        const unchangedRegions = this._diffModel.map((m, reader) => {\n            var _a, _b;\n            const regions = (_a = m === null || m === void 0 ? void 0 : m.unchangedRegions.read(reader)) !== null && _a !== void 0 ? _a : [];\n            if (regions.length === 1 && regions[0].modifiedLineNumber === 1 && regions[0].lineCount === ((_b = this._editors.modifiedModel.read(reader)) === null || _b === void 0 ? void 0 : _b.getLineCount())) {\n                return [];\n            }\n            return regions;\n        });\n        this.viewZones = derivedWithStore(this, (reader, store) => {\n            /** @description view Zones */\n            const modifiedOutlineSource = this._modifiedOutlineSource.read(reader);\n            if (!modifiedOutlineSource) {\n                return { origViewZones: [], modViewZones: [] };\n            }\n            const origViewZones = [];\n            const modViewZones = [];\n            const sideBySide = this._options.renderSideBySide.read(reader);\n            const curUnchangedRegions = unchangedRegions.read(reader);\n            for (const r of curUnchangedRegions) {\n                if (r.shouldHideControls(reader)) {\n                    continue;\n                }\n                {\n                    const d = derived(this, reader => /** @description hiddenOriginalRangeStart */ r.getHiddenOriginalRange(reader).startLineNumber - 1);\n                    const origVz = new PlaceholderViewZone(d, 24);\n                    origViewZones.push(origVz);\n                    store.add(new CollapsedCodeOverlayWidget(this._editors.original, origVz, r, r.originalUnchangedRange, !sideBySide, modifiedOutlineSource, l => this._diffModel.get().ensureModifiedLineIsVisible(l, 2 /* RevealPreference.FromBottom */, undefined), this._options));\n                }\n                {\n                    const d = derived(this, reader => /** @description hiddenModifiedRangeStart */ r.getHiddenModifiedRange(reader).startLineNumber - 1);\n                    const modViewZone = new PlaceholderViewZone(d, 24);\n                    modViewZones.push(modViewZone);\n                    store.add(new CollapsedCodeOverlayWidget(this._editors.modified, modViewZone, r, r.modifiedUnchangedRange, false, modifiedOutlineSource, l => this._diffModel.get().ensureModifiedLineIsVisible(l, 2 /* RevealPreference.FromBottom */, undefined), this._options));\n                }\n            }\n            return { origViewZones, modViewZones, };\n        });\n        const unchangedLinesDecoration = {\n            description: 'unchanged lines',\n            className: 'diff-unchanged-lines',\n            isWholeLine: true,\n        };\n        const unchangedLinesDecorationShow = {\n            description: 'Fold Unchanged',\n            glyphMarginHoverMessage: new MarkdownString(undefined, { isTrusted: true, supportThemeIcons: true })\n                .appendMarkdown(localize('foldUnchanged', 'Fold Unchanged Region')),\n            glyphMarginClassName: 'fold-unchanged ' + ThemeIcon.asClassName(Codicon.fold),\n            zIndex: 10001,\n        };\n        this._register(applyObservableDecorations(this._editors.original, derived(this, reader => {\n            /** @description decorations */\n            const curUnchangedRegions = unchangedRegions.read(reader);\n            const result = curUnchangedRegions.map(r => ({\n                range: r.originalUnchangedRange.toInclusiveRange(),\n                options: unchangedLinesDecoration,\n            }));\n            for (const r of curUnchangedRegions) {\n                if (r.shouldHideControls(reader)) {\n                    result.push({\n                        range: Range.fromPositions(new Position(r.originalLineNumber, 1)),\n                        options: unchangedLinesDecorationShow,\n                    });\n                }\n            }\n            return result;\n        })));\n        this._register(applyObservableDecorations(this._editors.modified, derived(this, reader => {\n            /** @description decorations */\n            const curUnchangedRegions = unchangedRegions.read(reader);\n            const result = curUnchangedRegions.map(r => ({\n                range: r.modifiedUnchangedRange.toInclusiveRange(),\n                options: unchangedLinesDecoration,\n            }));\n            for (const r of curUnchangedRegions) {\n                if (r.shouldHideControls(reader)) {\n                    result.push({\n                        range: LineRange.ofLength(r.modifiedLineNumber, 1).toInclusiveRange(),\n                        options: unchangedLinesDecorationShow,\n                    });\n                }\n            }\n            return result;\n        })));\n        this._register(autorun((reader) => {\n            /** @description update folded unchanged regions */\n            const curUnchangedRegions = unchangedRegions.read(reader);\n            this._isUpdatingHiddenAreas = true;\n            try {\n                this._editors.original.setHiddenAreas(curUnchangedRegions.map(r => r.getHiddenOriginalRange(reader).toInclusiveRange()).filter(isDefined));\n                this._editors.modified.setHiddenAreas(curUnchangedRegions.map(r => r.getHiddenModifiedRange(reader).toInclusiveRange()).filter(isDefined));\n            }\n            finally {\n                this._isUpdatingHiddenAreas = false;\n            }\n        }));\n        this._register(this._editors.modified.onMouseUp(event => {\n            var _a;\n            if (!event.event.rightButton && event.target.position && ((_a = event.target.element) === null || _a === void 0 ? void 0 : _a.className.includes('fold-unchanged'))) {\n                const lineNumber = event.target.position.lineNumber;\n                const model = this._diffModel.get();\n                if (!model) {\n                    return;\n                }\n                const region = model.unchangedRegions.get().find(r => r.modifiedUnchangedRange.includes(lineNumber));\n                if (!region) {\n                    return;\n                }\n                region.collapseAll(undefined);\n                event.event.stopPropagation();\n                event.event.preventDefault();\n            }\n        }));\n        this._register(this._editors.original.onMouseUp(event => {\n            var _a;\n            if (!event.event.rightButton && event.target.position && ((_a = event.target.element) === null || _a === void 0 ? void 0 : _a.className.includes('fold-unchanged'))) {\n                const lineNumber = event.target.position.lineNumber;\n                const model = this._diffModel.get();\n                if (!model) {\n                    return;\n                }\n                const region = model.unchangedRegions.get().find(r => r.originalUnchangedRange.includes(lineNumber));\n                if (!region) {\n                    return;\n                }\n                region.collapseAll(undefined);\n                event.event.stopPropagation();\n                event.event.preventDefault();\n            }\n        }));\n    }\n};\nHideUnchangedRegionsFeature._breadcrumbsSourceFactory = observableValue('breadcrumbsSourceFactory', undefined);\nHideUnchangedRegionsFeature = HideUnchangedRegionsFeature_1 = __decorate([\n    __param(3, IInstantiationService)\n], HideUnchangedRegionsFeature);\nexport { HideUnchangedRegionsFeature };\nclass CollapsedCodeOverlayWidget extends ViewZoneOverlayWidget {\n    constructor(_editor, _viewZone, _unchangedRegion, _unchangedRegionRange, _hide, _modifiedOutlineSource, _revealModifiedHiddenLine, _options) {\n        const root = h('div.diff-hidden-lines-widget');\n        super(_editor, _viewZone, root.root);\n        this._editor = _editor;\n        this._unchangedRegion = _unchangedRegion;\n        this._unchangedRegionRange = _unchangedRegionRange;\n        this._hide = _hide;\n        this._modifiedOutlineSource = _modifiedOutlineSource;\n        this._revealModifiedHiddenLine = _revealModifiedHiddenLine;\n        this._options = _options;\n        this._nodes = h('div.diff-hidden-lines', [\n            h('div.top@top', { title: localize('diff.hiddenLines.top', 'Click or drag to show more above') }),\n            h('div.center@content', { style: { display: 'flex' } }, [\n                h('div@first', { style: { display: 'flex', justifyContent: 'center', alignItems: 'center', flexShrink: '0' } }, [$('a', { title: localize('showUnchangedRegion', 'Show Unchanged Region'), role: 'button', onclick: () => { this._unchangedRegion.showAll(undefined); } }, ...renderLabelWithIcons('$(unfold)'))]),\n                h('div@others', { style: { display: 'flex', justifyContent: 'center', alignItems: 'center' } }),\n            ]),\n            h('div.bottom@bottom', { title: localize('diff.bottom', 'Click or drag to show more below'), role: 'button' }),\n        ]);\n        root.root.appendChild(this._nodes.root);\n        const layoutInfo = observableFromEvent(this._editor.onDidLayoutChange, () => this._editor.getLayoutInfo());\n        if (!this._hide) {\n            this._register(applyStyle(this._nodes.first, { width: layoutInfo.map((l) => l.contentLeft) }));\n        }\n        else {\n            reset(this._nodes.first);\n        }\n        this._register(autorun(reader => {\n            /** @description Update CollapsedCodeOverlayWidget canMove* css classes */\n            const isFullyRevealed = this._unchangedRegion.visibleLineCountTop.read(reader) + this._unchangedRegion.visibleLineCountBottom.read(reader) === this._unchangedRegion.lineCount;\n            this._nodes.bottom.classList.toggle('canMoveTop', !isFullyRevealed);\n            this._nodes.bottom.classList.toggle('canMoveBottom', this._unchangedRegion.visibleLineCountBottom.read(reader) > 0);\n            this._nodes.top.classList.toggle('canMoveTop', this._unchangedRegion.visibleLineCountTop.read(reader) > 0);\n            this._nodes.top.classList.toggle('canMoveBottom', !isFullyRevealed);\n            const isDragged = this._unchangedRegion.isDragged.read(reader);\n            const domNode = this._editor.getDomNode();\n            if (domNode) {\n                domNode.classList.toggle('draggingUnchangedRegion', !!isDragged);\n                if (isDragged === 'top') {\n                    domNode.classList.toggle('canMoveTop', this._unchangedRegion.visibleLineCountTop.read(reader) > 0);\n                    domNode.classList.toggle('canMoveBottom', !isFullyRevealed);\n                }\n                else if (isDragged === 'bottom') {\n                    domNode.classList.toggle('canMoveTop', !isFullyRevealed);\n                    domNode.classList.toggle('canMoveBottom', this._unchangedRegion.visibleLineCountBottom.read(reader) > 0);\n                }\n                else {\n                    domNode.classList.toggle('canMoveTop', false);\n                    domNode.classList.toggle('canMoveBottom', false);\n                }\n            }\n        }));\n        const editor = this._editor;\n        this._register(addDisposableListener(this._nodes.top, 'mousedown', e => {\n            if (e.button !== 0) {\n                return;\n            }\n            this._nodes.top.classList.toggle('dragging', true);\n            this._nodes.root.classList.toggle('dragging', true);\n            e.preventDefault();\n            const startTop = e.clientY;\n            let didMove = false;\n            const cur = this._unchangedRegion.visibleLineCountTop.get();\n            this._unchangedRegion.isDragged.set('top', undefined);\n            const window = getWindow(this._nodes.top);\n            const mouseMoveListener = addDisposableListener(window, 'mousemove', e => {\n                const currentTop = e.clientY;\n                const delta = currentTop - startTop;\n                didMove = didMove || Math.abs(delta) > 2;\n                const lineDelta = Math.round(delta / editor.getOption(67 /* EditorOption.lineHeight */));\n                const newVal = Math.max(0, Math.min(cur + lineDelta, this._unchangedRegion.getMaxVisibleLineCountTop()));\n                this._unchangedRegion.visibleLineCountTop.set(newVal, undefined);\n            });\n            const mouseUpListener = addDisposableListener(window, 'mouseup', e => {\n                if (!didMove) {\n                    this._unchangedRegion.showMoreAbove(this._options.hideUnchangedRegionsRevealLineCount.get(), undefined);\n                }\n                this._nodes.top.classList.toggle('dragging', false);\n                this._nodes.root.classList.toggle('dragging', false);\n                this._unchangedRegion.isDragged.set(undefined, undefined);\n                mouseMoveListener.dispose();\n                mouseUpListener.dispose();\n            });\n        }));\n        this._register(addDisposableListener(this._nodes.bottom, 'mousedown', e => {\n            if (e.button !== 0) {\n                return;\n            }\n            this._nodes.bottom.classList.toggle('dragging', true);\n            this._nodes.root.classList.toggle('dragging', true);\n            e.preventDefault();\n            const startTop = e.clientY;\n            let didMove = false;\n            const cur = this._unchangedRegion.visibleLineCountBottom.get();\n            this._unchangedRegion.isDragged.set('bottom', undefined);\n            const window = getWindow(this._nodes.bottom);\n            const mouseMoveListener = addDisposableListener(window, 'mousemove', e => {\n                const currentTop = e.clientY;\n                const delta = currentTop - startTop;\n                didMove = didMove || Math.abs(delta) > 2;\n                const lineDelta = Math.round(delta / editor.getOption(67 /* EditorOption.lineHeight */));\n                const newVal = Math.max(0, Math.min(cur - lineDelta, this._unchangedRegion.getMaxVisibleLineCountBottom()));\n                const top = editor.getTopForLineNumber(this._unchangedRegionRange.endLineNumberExclusive);\n                this._unchangedRegion.visibleLineCountBottom.set(newVal, undefined);\n                const top2 = editor.getTopForLineNumber(this._unchangedRegionRange.endLineNumberExclusive);\n                editor.setScrollTop(editor.getScrollTop() + (top2 - top));\n            });\n            const mouseUpListener = addDisposableListener(window, 'mouseup', e => {\n                this._unchangedRegion.isDragged.set(undefined, undefined);\n                if (!didMove) {\n                    const top = editor.getTopForLineNumber(this._unchangedRegionRange.endLineNumberExclusive);\n                    this._unchangedRegion.showMoreBelow(this._options.hideUnchangedRegionsRevealLineCount.get(), undefined);\n                    const top2 = editor.getTopForLineNumber(this._unchangedRegionRange.endLineNumberExclusive);\n                    editor.setScrollTop(editor.getScrollTop() + (top2 - top));\n                }\n                this._nodes.bottom.classList.toggle('dragging', false);\n                this._nodes.root.classList.toggle('dragging', false);\n                mouseMoveListener.dispose();\n                mouseUpListener.dispose();\n            });\n        }));\n        this._register(autorun(reader => {\n            /** @description update labels */\n            const children = [];\n            if (!this._hide) {\n                const lineCount = _unchangedRegion.getHiddenModifiedRange(reader).length;\n                const linesHiddenText = localize('hiddenLines', '{0} hidden lines', lineCount);\n                const span = $('span', { title: localize('diff.hiddenLines.expandAll', 'Double click to unfold') }, linesHiddenText);\n                span.addEventListener('dblclick', e => {\n                    if (e.button !== 0) {\n                        return;\n                    }\n                    e.preventDefault();\n                    this._unchangedRegion.showAll(undefined);\n                });\n                children.push(span);\n                const range = this._unchangedRegion.getHiddenModifiedRange(reader);\n                const items = this._modifiedOutlineSource.getBreadcrumbItems(range, reader);\n                if (items.length > 0) {\n                    children.push($('span', undefined, '\\u00a0\\u00a0|\\u00a0\\u00a0'));\n                    for (let i = 0; i < items.length; i++) {\n                        const item = items[i];\n                        const icon = SymbolKinds.toIcon(item.kind);\n                        const divItem = h('div.breadcrumb-item', {\n                            style: { display: 'flex', alignItems: 'center' },\n                        }, [\n                            renderIcon(icon),\n                            '\\u00a0',\n                            item.name,\n                            ...(i === items.length - 1\n                                ? []\n                                : [renderIcon(Codicon.chevronRight)])\n                        ]).root;\n                        children.push(divItem);\n                        divItem.onclick = () => {\n                            this._revealModifiedHiddenLine(item.startLineNumber);\n                        };\n                    }\n                }\n            }\n            reset(this._nodes.others, ...children);\n        }));\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorCommand, registerEditorCommand } from '../../../browser/editorExtensions.js';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { LinkedList } from '../../../../base/common/linkedList.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { localize } from '../../../../nls.js';\nconst IEditorCancellationTokens = createDecorator('IEditorCancelService');\nconst ctxCancellableOperation = new RawContextKey('cancellableOperation', false, localize('cancellableOperation', 'Whether the editor runs a cancellable operation, e.g. like \\'Peek References\\''));\nregisterSingleton(IEditorCancellationTokens, class {\n    constructor() {\n        this._tokens = new WeakMap();\n    }\n    add(editor, cts) {\n        let data = this._tokens.get(editor);\n        if (!data) {\n            data = editor.invokeWithinContext(accessor => {\n                const key = ctxCancellableOperation.bindTo(accessor.get(IContextKeyService));\n                const tokens = new LinkedList();\n                return { key, tokens };\n            });\n            this._tokens.set(editor, data);\n        }\n        let removeFn;\n        data.key.set(true);\n        removeFn = data.tokens.push(cts);\n        return () => {\n            // remove w/o cancellation\n            if (removeFn) {\n                removeFn();\n                data.key.set(!data.tokens.isEmpty());\n                removeFn = undefined;\n            }\n        };\n    }\n    cancel(editor) {\n        const data = this._tokens.get(editor);\n        if (!data) {\n            return;\n        }\n        // remove with cancellation\n        const cts = data.tokens.pop();\n        if (cts) {\n            cts.cancel();\n            data.key.set(!data.tokens.isEmpty());\n        }\n    }\n}, 1 /* InstantiationType.Delayed */);\nexport class EditorKeybindingCancellationTokenSource extends CancellationTokenSource {\n    constructor(editor, parent) {\n        super(parent);\n        this.editor = editor;\n        this._unregister = editor.invokeWithinContext(accessor => accessor.get(IEditorCancellationTokens).add(editor, this));\n    }\n    dispose() {\n        this._unregister();\n        super.dispose();\n    }\n}\nregisterEditorCommand(new class extends EditorCommand {\n    constructor() {\n        super({\n            id: 'editor.cancelOperation',\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */,\n                primary: 9 /* KeyCode.Escape */\n            },\n            precondition: ctxCancellableOperation\n        });\n    }\n    runEditorCommand(accessor, editor) {\n        accessor.get(IEditorCancellationTokens).cancel(editor);\n    }\n});\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../../base/common/strings.js';\nimport { Range } from '../../../common/core/range.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { EditorKeybindingCancellationTokenSource } from './keybindingCancellation.js';\nexport class EditorState {\n    constructor(editor, flags) {\n        this.flags = flags;\n        if ((this.flags & 1 /* CodeEditorStateFlag.Value */) !== 0) {\n            const model = editor.getModel();\n            this.modelVersionId = model ? strings.format('{0}#{1}', model.uri.toString(), model.getVersionId()) : null;\n        }\n        else {\n            this.modelVersionId = null;\n        }\n        if ((this.flags & 4 /* CodeEditorStateFlag.Position */) !== 0) {\n            this.position = editor.getPosition();\n        }\n        else {\n            this.position = null;\n        }\n        if ((this.flags & 2 /* CodeEditorStateFlag.Selection */) !== 0) {\n            this.selection = editor.getSelection();\n        }\n        else {\n            this.selection = null;\n        }\n        if ((this.flags & 8 /* CodeEditorStateFlag.Scroll */) !== 0) {\n            this.scrollLeft = editor.getScrollLeft();\n            this.scrollTop = editor.getScrollTop();\n        }\n        else {\n            this.scrollLeft = -1;\n            this.scrollTop = -1;\n        }\n    }\n    _equals(other) {\n        if (!(other instanceof EditorState)) {\n            return false;\n        }\n        const state = other;\n        if (this.modelVersionId !== state.modelVersionId) {\n            return false;\n        }\n        if (this.scrollLeft !== state.scrollLeft || this.scrollTop !== state.scrollTop) {\n            return false;\n        }\n        if (!this.position && state.position || this.position && !state.position || this.position && state.position && !this.position.equals(state.position)) {\n            return false;\n        }\n        if (!this.selection && state.selection || this.selection && !state.selection || this.selection && state.selection && !this.selection.equalsRange(state.selection)) {\n            return false;\n        }\n        return true;\n    }\n    validate(editor) {\n        return this._equals(new EditorState(editor, this.flags));\n    }\n}\n/**\n * A cancellation token source that cancels when the editor changes as expressed\n * by the provided flags\n * @param range If provided, changes in position and selection within this range will not trigger cancellation\n */\nexport class EditorStateCancellationTokenSource extends EditorKeybindingCancellationTokenSource {\n    constructor(editor, flags, range, parent) {\n        super(editor, parent);\n        this._listener = new DisposableStore();\n        if (flags & 4 /* CodeEditorStateFlag.Position */) {\n            this._listener.add(editor.onDidChangeCursorPosition(e => {\n                if (!range || !Range.containsPosition(range, e.position)) {\n                    this.cancel();\n                }\n            }));\n        }\n        if (flags & 2 /* CodeEditorStateFlag.Selection */) {\n            this._listener.add(editor.onDidChangeCursorSelection(e => {\n                if (!range || !Range.containsRange(range, e.selection)) {\n                    this.cancel();\n                }\n            }));\n        }\n        if (flags & 8 /* CodeEditorStateFlag.Scroll */) {\n            this._listener.add(editor.onDidScrollChange(_ => this.cancel()));\n        }\n        if (flags & 1 /* CodeEditorStateFlag.Value */) {\n            this._listener.add(editor.onDidChangeModel(_ => this.cancel()));\n            this._listener.add(editor.onDidChangeModelContent(_ => this.cancel()));\n        }\n    }\n    dispose() {\n        this._listener.dispose();\n        super.dispose();\n    }\n}\n/**\n * A cancellation token source that cancels when the provided model changes\n */\nexport class TextModelCancellationTokenSource extends CancellationTokenSource {\n    constructor(model, parent) {\n        super(parent);\n        this._listener = model.onDidChangeContent(() => this.cancel());\n    }\n    dispose() {\n        this._listener.dispose();\n        super.dispose();\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorOptions } from './common/config/editorOptions.js';\nimport { createMonacoBaseAPI } from './common/services/editorBaseApi.js';\nimport { createMonacoEditorAPI } from './standalone/browser/standaloneEditor.js';\nimport { createMonacoLanguagesAPI } from './standalone/browser/standaloneLanguages.js';\nimport { FormattingConflicts } from './contrib/format/browser/format.js';\n// Set defaults for standalone editor\nEditorOptions.wrappingIndent.defaultValue = 0 /* WrappingIndent.None */;\nEditorOptions.glyphMargin.defaultValue = false;\nEditorOptions.autoIndent.defaultValue = 3 /* EditorAutoIndentStrategy.Advanced */;\nEditorOptions.overviewRulerLanes.defaultValue = 2;\n// We need to register a formatter selector which simply picks the first available formatter.\n// See https://github.com/microsoft/monaco-editor/issues/2327\nFormattingConflicts.setFormatterSelector((formatter, document, mode) => Promise.resolve(formatter[0]));\nconst api = createMonacoBaseAPI();\napi.editor = createMonacoEditorAPI();\napi.languages = createMonacoLanguagesAPI();\nexport const CancellationTokenSource = api.CancellationTokenSource;\nexport const Emitter = api.Emitter;\nexport const KeyCode = api.KeyCode;\nexport const KeyMod = api.KeyMod;\nexport const Position = api.Position;\nexport const Range = api.Range;\nexport const Selection = api.Selection;\nexport const SelectionDirection = api.SelectionDirection;\nexport const MarkerSeverity = api.MarkerSeverity;\nexport const MarkerTag = api.MarkerTag;\nexport const Uri = api.Uri;\nexport const Token = api.Token;\nexport const editor = api.editor;\nexport const languages = api.languages;\nconst monacoEnvironment = globalThis.MonacoEnvironment;\nif ((monacoEnvironment === null || monacoEnvironment === void 0 ? void 0 : monacoEnvironment.globalAPI) || (typeof define === 'function' && define.amd)) {\n    globalThis.monaco = api;\n}\nif (typeof globalThis.require !== 'undefined' && typeof globalThis.require.config === 'function') {\n    globalThis.require.config({\n        ignoreDuplicateModules: [\n            'vscode-languageserver-types',\n            'vscode-languageserver-types/main',\n            'vscode-languageserver-textdocument',\n            'vscode-languageserver-textdocument/main',\n            'vscode-nls',\n            'vscode-nls/vscode-nls',\n            'jsonc-parser',\n            'jsonc-parser/main',\n            'vscode-uri',\n            'vscode-uri/index',\n            'vs/basic-languages/typescript/typescript'\n        ]\n    });\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { mainWindow } from '../../../base/browser/window.js';\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { splitLines } from '../../../base/common/strings.js';\nimport { URI } from '../../../base/common/uri.js';\nimport './standalone-tokens.css';\nimport { FontMeasurements } from '../../browser/config/fontMeasurements.js';\nimport { EditorCommand } from '../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\nimport { createWebWorker as actualCreateWebWorker } from '../../browser/services/webWorker.js';\nimport { ApplyUpdateResult, ConfigurationChangedEvent, EditorOptions } from '../../common/config/editorOptions.js';\nimport { EditorZoom } from '../../common/config/editorZoom.js';\nimport { BareFontInfo, FontInfo } from '../../common/config/fontInfo.js';\nimport { EditorType } from '../../common/editorCommon.js';\nimport * as languages from '../../common/languages.js';\nimport { ILanguageService } from '../../common/languages/language.js';\nimport { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../common/languages/modesRegistry.js';\nimport { NullState, nullTokenize } from '../../common/languages/nullTokenize.js';\nimport { FindMatch, TextModelResolvedOptions } from '../../common/model.js';\nimport { IModelService } from '../../common/services/model.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { Colorizer } from './colorizer.js';\nimport { StandaloneDiffEditor2, StandaloneEditor, createTextModel } from './standaloneCodeEditor.js';\nimport { StandaloneKeybindingService, StandaloneServices } from './standaloneServices.js';\nimport { IStandaloneThemeService } from '../common/standaloneTheme.js';\nimport { MenuId, MenuRegistry } from '../../../platform/actions/common/actions.js';\nimport { CommandsRegistry } from '../../../platform/commands/common/commands.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { IKeybindingService } from '../../../platform/keybinding/common/keybinding.js';\nimport { IMarkerService } from '../../../platform/markers/common/markers.js';\nimport { IOpenerService } from '../../../platform/opener/common/opener.js';\nimport { MultiDiffEditorWidget } from '../../browser/widget/multiDiffEditorWidget/multiDiffEditorWidget.js';\n/**\n * Create a new editor under `domElement`.\n * `domElement` should be empty (not contain other dom nodes).\n * The editor will read the size of `domElement`.\n */\nexport function create(domElement, options, override) {\n    const instantiationService = StandaloneServices.initialize(override || {});\n    return instantiationService.createInstance(StandaloneEditor, domElement, options);\n}\n/**\n * Emitted when an editor is created.\n * Creating a diff editor might cause this listener to be invoked with the two editors.\n * @event\n */\nexport function onDidCreateEditor(listener) {\n    const codeEditorService = StandaloneServices.get(ICodeEditorService);\n    return codeEditorService.onCodeEditorAdd((editor) => {\n        listener(editor);\n    });\n}\n/**\n * Emitted when an diff editor is created.\n * @event\n */\nexport function onDidCreateDiffEditor(listener) {\n    const codeEditorService = StandaloneServices.get(ICodeEditorService);\n    return codeEditorService.onDiffEditorAdd((editor) => {\n        listener(editor);\n    });\n}\n/**\n * Get all the created editors.\n */\nexport function getEditors() {\n    const codeEditorService = StandaloneServices.get(ICodeEditorService);\n    return codeEditorService.listCodeEditors();\n}\n/**\n * Get all the created diff editors.\n */\nexport function getDiffEditors() {\n    const codeEditorService = StandaloneServices.get(ICodeEditorService);\n    return codeEditorService.listDiffEditors();\n}\n/**\n * Create a new diff editor under `domElement`.\n * `domElement` should be empty (not contain other dom nodes).\n * The editor will read the size of `domElement`.\n */\nexport function createDiffEditor(domElement, options, override) {\n    const instantiationService = StandaloneServices.initialize(override || {});\n    return instantiationService.createInstance(StandaloneDiffEditor2, domElement, options);\n}\nexport function createMultiFileDiffEditor(domElement, override) {\n    const instantiationService = StandaloneServices.initialize(override || {});\n    return new MultiDiffEditorWidget(domElement, {}, instantiationService);\n}\n/**\n * Add a command.\n */\nexport function addCommand(descriptor) {\n    if ((typeof descriptor.id !== 'string') || (typeof descriptor.run !== 'function')) {\n        throw new Error('Invalid command descriptor, `id` and `run` are required properties!');\n    }\n    return CommandsRegistry.registerCommand(descriptor.id, descriptor.run);\n}\n/**\n * Add an action to all editors.\n */\nexport function addEditorAction(descriptor) {\n    if ((typeof descriptor.id !== 'string') || (typeof descriptor.label !== 'string') || (typeof descriptor.run !== 'function')) {\n        throw new Error('Invalid action descriptor, `id`, `label` and `run` are required properties!');\n    }\n    const precondition = ContextKeyExpr.deserialize(descriptor.precondition);\n    const run = (accessor, ...args) => {\n        return EditorCommand.runEditorCommand(accessor, args, precondition, (accessor, editor, args) => Promise.resolve(descriptor.run(editor, ...args)));\n    };\n    const toDispose = new DisposableStore();\n    // Register the command\n    toDispose.add(CommandsRegistry.registerCommand(descriptor.id, run));\n    // Register the context menu item\n    if (descriptor.contextMenuGroupId) {\n        const menuItem = {\n            command: {\n                id: descriptor.id,\n                title: descriptor.label\n            },\n            when: precondition,\n            group: descriptor.contextMenuGroupId,\n            order: descriptor.contextMenuOrder || 0\n        };\n        toDispose.add(MenuRegistry.appendMenuItem(MenuId.EditorContext, menuItem));\n    }\n    // Register the keybindings\n    if (Array.isArray(descriptor.keybindings)) {\n        const keybindingService = StandaloneServices.get(IKeybindingService);\n        if (!(keybindingService instanceof StandaloneKeybindingService)) {\n            console.warn('Cannot add keybinding because the editor is configured with an unrecognized KeybindingService');\n        }\n        else {\n            const keybindingsWhen = ContextKeyExpr.and(precondition, ContextKeyExpr.deserialize(descriptor.keybindingContext));\n            toDispose.add(keybindingService.addDynamicKeybindings(descriptor.keybindings.map((keybinding) => {\n                return {\n                    keybinding,\n                    command: descriptor.id,\n                    when: keybindingsWhen\n                };\n            })));\n        }\n    }\n    return toDispose;\n}\n/**\n * Add a keybinding rule.\n */\nexport function addKeybindingRule(rule) {\n    return addKeybindingRules([rule]);\n}\n/**\n * Add keybinding rules.\n */\nexport function addKeybindingRules(rules) {\n    const keybindingService = StandaloneServices.get(IKeybindingService);\n    if (!(keybindingService instanceof StandaloneKeybindingService)) {\n        console.warn('Cannot add keybinding because the editor is configured with an unrecognized KeybindingService');\n        return Disposable.None;\n    }\n    return keybindingService.addDynamicKeybindings(rules.map((rule) => {\n        return {\n            keybinding: rule.keybinding,\n            command: rule.command,\n            commandArgs: rule.commandArgs,\n            when: ContextKeyExpr.deserialize(rule.when),\n        };\n    }));\n}\n/**\n * Create a new editor model.\n * You can specify the language that should be set for this model or let the language be inferred from the `uri`.\n */\nexport function createModel(value, language, uri) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    const languageId = languageService.getLanguageIdByMimeType(language) || language;\n    return createTextModel(StandaloneServices.get(IModelService), languageService, value, languageId, uri);\n}\n/**\n * Change the language for a model.\n */\nexport function setModelLanguage(model, mimeTypeOrLanguageId) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    const languageId = languageService.getLanguageIdByMimeType(mimeTypeOrLanguageId) || mimeTypeOrLanguageId || PLAINTEXT_LANGUAGE_ID;\n    model.setLanguage(languageService.createById(languageId));\n}\n/**\n * Set the markers for a model.\n */\nexport function setModelMarkers(model, owner, markers) {\n    if (model) {\n        const markerService = StandaloneServices.get(IMarkerService);\n        markerService.changeOne(owner, model.uri, markers);\n    }\n}\n/**\n * Remove all markers of an owner.\n */\nexport function removeAllMarkers(owner) {\n    const markerService = StandaloneServices.get(IMarkerService);\n    markerService.changeAll(owner, []);\n}\n/**\n * Get markers for owner and/or resource\n *\n * @returns list of markers\n */\nexport function getModelMarkers(filter) {\n    const markerService = StandaloneServices.get(IMarkerService);\n    return markerService.read(filter);\n}\n/**\n * Emitted when markers change for a model.\n * @event\n */\nexport function onDidChangeMarkers(listener) {\n    const markerService = StandaloneServices.get(IMarkerService);\n    return markerService.onMarkerChanged(listener);\n}\n/**\n * Get the model that has `uri` if it exists.\n */\nexport function getModel(uri) {\n    const modelService = StandaloneServices.get(IModelService);\n    return modelService.getModel(uri);\n}\n/**\n * Get all the created models.\n */\nexport function getModels() {\n    const modelService = StandaloneServices.get(IModelService);\n    return modelService.getModels();\n}\n/**\n * Emitted when a model is created.\n * @event\n */\nexport function onDidCreateModel(listener) {\n    const modelService = StandaloneServices.get(IModelService);\n    return modelService.onModelAdded(listener);\n}\n/**\n * Emitted right before a model is disposed.\n * @event\n */\nexport function onWillDisposeModel(listener) {\n    const modelService = StandaloneServices.get(IModelService);\n    return modelService.onModelRemoved(listener);\n}\n/**\n * Emitted when a different language is set to a model.\n * @event\n */\nexport function onDidChangeModelLanguage(listener) {\n    const modelService = StandaloneServices.get(IModelService);\n    return modelService.onModelLanguageChanged((e) => {\n        listener({\n            model: e.model,\n            oldLanguage: e.oldLanguageId\n        });\n    });\n}\n/**\n * Create a new web worker that has model syncing capabilities built in.\n * Specify an AMD module to load that will `create` an object that will be proxied.\n */\nexport function createWebWorker(opts) {\n    return actualCreateWebWorker(StandaloneServices.get(IModelService), StandaloneServices.get(ILanguageConfigurationService), opts);\n}\n/**\n * Colorize the contents of `domNode` using attribute `data-lang`.\n */\nexport function colorizeElement(domNode, options) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    const themeService = StandaloneServices.get(IStandaloneThemeService);\n    return Colorizer.colorizeElement(themeService, languageService, domNode, options).then(() => {\n        themeService.registerEditorContainer(domNode);\n    });\n}\n/**\n * Colorize `text` using language `languageId`.\n */\nexport function colorize(text, languageId, options) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    const themeService = StandaloneServices.get(IStandaloneThemeService);\n    themeService.registerEditorContainer(mainWindow.document.body);\n    return Colorizer.colorize(languageService, text, languageId, options);\n}\n/**\n * Colorize a line in a model.\n */\nexport function colorizeModelLine(model, lineNumber, tabSize = 4) {\n    const themeService = StandaloneServices.get(IStandaloneThemeService);\n    themeService.registerEditorContainer(mainWindow.document.body);\n    return Colorizer.colorizeModelLine(model, lineNumber, tabSize);\n}\n/**\n * @internal\n */\nfunction getSafeTokenizationSupport(language) {\n    const tokenizationSupport = languages.TokenizationRegistry.get(language);\n    if (tokenizationSupport) {\n        return tokenizationSupport;\n    }\n    return {\n        getInitialState: () => NullState,\n        tokenize: (line, hasEOL, state) => nullTokenize(language, state)\n    };\n}\n/**\n * Tokenize `text` using language `languageId`\n */\nexport function tokenize(text, languageId) {\n    // Needed in order to get the mode registered for subsequent look-ups\n    languages.TokenizationRegistry.getOrCreate(languageId);\n    const tokenizationSupport = getSafeTokenizationSupport(languageId);\n    const lines = splitLines(text);\n    const result = [];\n    let state = tokenizationSupport.getInitialState();\n    for (let i = 0, len = lines.length; i < len; i++) {\n        const line = lines[i];\n        const tokenizationResult = tokenizationSupport.tokenize(line, true, state);\n        result[i] = tokenizationResult.tokens;\n        state = tokenizationResult.endState;\n    }\n    return result;\n}\n/**\n * Define a new theme or update an existing theme.\n */\nexport function defineTheme(themeName, themeData) {\n    const standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n    standaloneThemeService.defineTheme(themeName, themeData);\n}\n/**\n * Switches to a theme.\n */\nexport function setTheme(themeName) {\n    const standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n    standaloneThemeService.setTheme(themeName);\n}\n/**\n * Clears all cached font measurements and triggers re-measurement.\n */\nexport function remeasureFonts() {\n    FontMeasurements.clearAllFontInfos();\n}\n/**\n * Register a command.\n */\nexport function registerCommand(id, handler) {\n    return CommandsRegistry.registerCommand({ id, handler });\n}\n/**\n * Registers a handler that is called when a link is opened in any editor. The handler callback should return `true` if the link was handled and `false` otherwise.\n * The handler that was registered last will be called first when a link is opened.\n *\n * Returns a disposable that can unregister the opener again.\n */\nexport function registerLinkOpener(opener) {\n    const openerService = StandaloneServices.get(IOpenerService);\n    return openerService.registerOpener({\n        async open(resource) {\n            if (typeof resource === 'string') {\n                resource = URI.parse(resource);\n            }\n            return opener.open(resource);\n        }\n    });\n}\n/**\n * Registers a handler that is called when a resource other than the current model should be opened in the editor (e.g. \"go to definition\").\n * The handler callback should return `true` if the request was handled and `false` otherwise.\n *\n * Returns a disposable that can unregister the opener again.\n *\n * If no handler is registered the default behavior is to do nothing for models other than the currently attached one.\n */\nexport function registerEditorOpener(opener) {\n    const codeEditorService = StandaloneServices.get(ICodeEditorService);\n    return codeEditorService.registerCodeEditorOpenHandler(async (input, source, sideBySide) => {\n        var _a;\n        if (!source) {\n            return null;\n        }\n        const selection = (_a = input.options) === null || _a === void 0 ? void 0 : _a.selection;\n        let selectionOrPosition;\n        if (selection && typeof selection.endLineNumber === 'number' && typeof selection.endColumn === 'number') {\n            selectionOrPosition = selection;\n        }\n        else if (selection) {\n            selectionOrPosition = { lineNumber: selection.startLineNumber, column: selection.startColumn };\n        }\n        if (await opener.openCodeEditor(source, input.resource, selectionOrPosition)) {\n            return source; // return source editor to indicate that this handler has successfully handled the opening\n        }\n        return null; // fallback to other registered handlers\n    });\n}\n/**\n * @internal\n */\nexport function createMonacoEditorAPI() {\n    return {\n        // methods\n        create: create,\n        getEditors: getEditors,\n        getDiffEditors: getDiffEditors,\n        onDidCreateEditor: onDidCreateEditor,\n        onDidCreateDiffEditor: onDidCreateDiffEditor,\n        createDiffEditor: createDiffEditor,\n        addCommand: addCommand,\n        addEditorAction: addEditorAction,\n        addKeybindingRule: addKeybindingRule,\n        addKeybindingRules: addKeybindingRules,\n        createModel: createModel,\n        setModelLanguage: setModelLanguage,\n        setModelMarkers: setModelMarkers,\n        getModelMarkers: getModelMarkers,\n        removeAllMarkers: removeAllMarkers,\n        onDidChangeMarkers: onDidChangeMarkers,\n        getModels: getModels,\n        getModel: getModel,\n        onDidCreateModel: onDidCreateModel,\n        onWillDisposeModel: onWillDisposeModel,\n        onDidChangeModelLanguage: onDidChangeModelLanguage,\n        createWebWorker: createWebWorker,\n        colorizeElement: colorizeElement,\n        colorize: colorize,\n        colorizeModelLine: colorizeModelLine,\n        tokenize: tokenize,\n        defineTheme: defineTheme,\n        setTheme: setTheme,\n        remeasureFonts: remeasureFonts,\n        registerCommand: registerCommand,\n        registerLinkOpener: registerLinkOpener,\n        registerEditorOpener: registerEditorOpener,\n        // enums\n        AccessibilitySupport: standaloneEnums.AccessibilitySupport,\n        ContentWidgetPositionPreference: standaloneEnums.ContentWidgetPositionPreference,\n        CursorChangeReason: standaloneEnums.CursorChangeReason,\n        DefaultEndOfLine: standaloneEnums.DefaultEndOfLine,\n        EditorAutoIndentStrategy: standaloneEnums.EditorAutoIndentStrategy,\n        EditorOption: standaloneEnums.EditorOption,\n        EndOfLinePreference: standaloneEnums.EndOfLinePreference,\n        EndOfLineSequence: standaloneEnums.EndOfLineSequence,\n        MinimapPosition: standaloneEnums.MinimapPosition,\n        MouseTargetType: standaloneEnums.MouseTargetType,\n        OverlayWidgetPositionPreference: standaloneEnums.OverlayWidgetPositionPreference,\n        OverviewRulerLane: standaloneEnums.OverviewRulerLane,\n        GlyphMarginLane: standaloneEnums.GlyphMarginLane,\n        RenderLineNumbersType: standaloneEnums.RenderLineNumbersType,\n        RenderMinimap: standaloneEnums.RenderMinimap,\n        ScrollbarVisibility: standaloneEnums.ScrollbarVisibility,\n        ScrollType: standaloneEnums.ScrollType,\n        TextEditorCursorBlinkingStyle: standaloneEnums.TextEditorCursorBlinkingStyle,\n        TextEditorCursorStyle: standaloneEnums.TextEditorCursorStyle,\n        TrackedRangeStickiness: standaloneEnums.TrackedRangeStickiness,\n        WrappingIndent: standaloneEnums.WrappingIndent,\n        InjectedTextCursorStops: standaloneEnums.InjectedTextCursorStops,\n        PositionAffinity: standaloneEnums.PositionAffinity,\n        ShowLightbulbIconMode: standaloneEnums.ShowLightbulbIconMode,\n        // classes\n        ConfigurationChangedEvent: ConfigurationChangedEvent,\n        BareFontInfo: BareFontInfo,\n        FontInfo: FontInfo,\n        TextModelResolvedOptions: TextModelResolvedOptions,\n        FindMatch: FindMatch,\n        ApplyUpdateResult: ApplyUpdateResult,\n        EditorZoom: EditorZoom,\n        createMultiFileDiffEditor: createMultiFileDiffEditor,\n        // vars\n        EditorType: EditorType,\n        EditorOptions: EditorOptions\n    };\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getWindowId } from '../../../base/browser/dom.js';\nimport { PixelRatio } from '../../../base/browser/pixelRatio.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { CharWidthRequest, readCharWidths } from './charWidthReader.js';\nimport { EditorFontLigatures } from '../../common/config/editorOptions.js';\nimport { FontInfo } from '../../common/config/fontInfo.js';\nexport class FontMeasurementsImpl extends Disposable {\n    constructor() {\n        super(...arguments);\n        this._cache = new Map();\n        this._evictUntrustedReadingsTimeout = -1;\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n    }\n    dispose() {\n        if (this._evictUntrustedReadingsTimeout !== -1) {\n            clearTimeout(this._evictUntrustedReadingsTimeout);\n            this._evictUntrustedReadingsTimeout = -1;\n        }\n        super.dispose();\n    }\n    /**\n     * Clear all cached font information and trigger a change event.\n     */\n    clearAllFontInfos() {\n        this._cache.clear();\n        this._onDidChange.fire();\n    }\n    _ensureCache(targetWindow) {\n        const windowId = getWindowId(targetWindow);\n        let cache = this._cache.get(windowId);\n        if (!cache) {\n            cache = new FontMeasurementsCache();\n            this._cache.set(windowId, cache);\n        }\n        return cache;\n    }\n    _writeToCache(targetWindow, item, value) {\n        const cache = this._ensureCache(targetWindow);\n        cache.put(item, value);\n        if (!value.isTrusted && this._evictUntrustedReadingsTimeout === -1) {\n            // Try reading again after some time\n            this._evictUntrustedReadingsTimeout = targetWindow.setTimeout(() => {\n                this._evictUntrustedReadingsTimeout = -1;\n                this._evictUntrustedReadings(targetWindow);\n            }, 5000);\n        }\n    }\n    _evictUntrustedReadings(targetWindow) {\n        const cache = this._ensureCache(targetWindow);\n        const values = cache.getValues();\n        let somethingRemoved = false;\n        for (const item of values) {\n            if (!item.isTrusted) {\n                somethingRemoved = true;\n                cache.remove(item);\n            }\n        }\n        if (somethingRemoved) {\n            this._onDidChange.fire();\n        }\n    }\n    /**\n     * Read font information.\n     */\n    readFontInfo(targetWindow, bareFontInfo) {\n        const cache = this._ensureCache(targetWindow);\n        if (!cache.has(bareFontInfo)) {\n            let readConfig = this._actualReadFontInfo(targetWindow, bareFontInfo);\n            if (readConfig.typicalHalfwidthCharacterWidth <= 2 || readConfig.typicalFullwidthCharacterWidth <= 2 || readConfig.spaceWidth <= 2 || readConfig.maxDigitWidth <= 2) {\n                // Hey, it's Bug 14341 ... we couldn't read\n                readConfig = new FontInfo({\n                    pixelRatio: PixelRatio.getInstance(targetWindow).value,\n                    fontFamily: readConfig.fontFamily,\n                    fontWeight: readConfig.fontWeight,\n                    fontSize: readConfig.fontSize,\n                    fontFeatureSettings: readConfig.fontFeatureSettings,\n                    fontVariationSettings: readConfig.fontVariationSettings,\n                    lineHeight: readConfig.lineHeight,\n                    letterSpacing: readConfig.letterSpacing,\n                    isMonospace: readConfig.isMonospace,\n                    typicalHalfwidthCharacterWidth: Math.max(readConfig.typicalHalfwidthCharacterWidth, 5),\n                    typicalFullwidthCharacterWidth: Math.max(readConfig.typicalFullwidthCharacterWidth, 5),\n                    canUseHalfwidthRightwardsArrow: readConfig.canUseHalfwidthRightwardsArrow,\n                    spaceWidth: Math.max(readConfig.spaceWidth, 5),\n                    middotWidth: Math.max(readConfig.middotWidth, 5),\n                    wsmiddotWidth: Math.max(readConfig.wsmiddotWidth, 5),\n                    maxDigitWidth: Math.max(readConfig.maxDigitWidth, 5),\n                }, false);\n            }\n            this._writeToCache(targetWindow, bareFontInfo, readConfig);\n        }\n        return cache.get(bareFontInfo);\n    }\n    _createRequest(chr, type, all, monospace) {\n        const result = new CharWidthRequest(chr, type);\n        all.push(result);\n        monospace === null || monospace === void 0 ? void 0 : monospace.push(result);\n        return result;\n    }\n    _actualReadFontInfo(targetWindow, bareFontInfo) {\n        const all = [];\n        const monospace = [];\n        const typicalHalfwidthCharacter = this._createRequest('n', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const typicalFullwidthCharacter = this._createRequest('\\uff4d', 0 /* CharWidthRequestType.Regular */, all, null);\n        const space = this._createRequest(' ', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit0 = this._createRequest('0', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit1 = this._createRequest('1', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit2 = this._createRequest('2', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit3 = this._createRequest('3', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit4 = this._createRequest('4', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit5 = this._createRequest('5', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit6 = this._createRequest('6', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit7 = this._createRequest('7', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit8 = this._createRequest('8', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit9 = this._createRequest('9', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        // monospace test: used for whitespace rendering\n        const rightwardsArrow = this._createRequest('→', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const halfwidthRightwardsArrow = this._createRequest('￫', 0 /* CharWidthRequestType.Regular */, all, null);\n        // U+00B7 - MIDDLE DOT\n        const middot = this._createRequest('·', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        // U+2E31 - WORD SEPARATOR MIDDLE DOT\n        const wsmiddotWidth = this._createRequest(String.fromCharCode(0x2E31), 0 /* CharWidthRequestType.Regular */, all, null);\n        // monospace test: some characters\n        const monospaceTestChars = '|/-_ilm%';\n        for (let i = 0, len = monospaceTestChars.length; i < len; i++) {\n            this._createRequest(monospaceTestChars.charAt(i), 0 /* CharWidthRequestType.Regular */, all, monospace);\n            this._createRequest(monospaceTestChars.charAt(i), 1 /* CharWidthRequestType.Italic */, all, monospace);\n            this._createRequest(monospaceTestChars.charAt(i), 2 /* CharWidthRequestType.Bold */, all, monospace);\n        }\n        readCharWidths(targetWindow, bareFontInfo, all);\n        const maxDigitWidth = Math.max(digit0.width, digit1.width, digit2.width, digit3.width, digit4.width, digit5.width, digit6.width, digit7.width, digit8.width, digit9.width);\n        let isMonospace = (bareFontInfo.fontFeatureSettings === EditorFontLigatures.OFF);\n        const referenceWidth = monospace[0].width;\n        for (let i = 1, len = monospace.length; isMonospace && i < len; i++) {\n            const diff = referenceWidth - monospace[i].width;\n            if (diff < -0.001 || diff > 0.001) {\n                isMonospace = false;\n                break;\n            }\n        }\n        let canUseHalfwidthRightwardsArrow = true;\n        if (isMonospace && halfwidthRightwardsArrow.width !== referenceWidth) {\n            // using a halfwidth rightwards arrow would break monospace...\n            canUseHalfwidthRightwardsArrow = false;\n        }\n        if (halfwidthRightwardsArrow.width > rightwardsArrow.width) {\n            // using a halfwidth rightwards arrow would paint a larger arrow than a regular rightwards arrow\n            canUseHalfwidthRightwardsArrow = false;\n        }\n        return new FontInfo({\n            pixelRatio: PixelRatio.getInstance(targetWindow).value,\n            fontFamily: bareFontInfo.fontFamily,\n            fontWeight: bareFontInfo.fontWeight,\n            fontSize: bareFontInfo.fontSize,\n            fontFeatureSettings: bareFontInfo.fontFeatureSettings,\n            fontVariationSettings: bareFontInfo.fontVariationSettings,\n            lineHeight: bareFontInfo.lineHeight,\n            letterSpacing: bareFontInfo.letterSpacing,\n            isMonospace: isMonospace,\n            typicalHalfwidthCharacterWidth: typicalHalfwidthCharacter.width,\n            typicalFullwidthCharacterWidth: typicalFullwidthCharacter.width,\n            canUseHalfwidthRightwardsArrow: canUseHalfwidthRightwardsArrow,\n            spaceWidth: space.width,\n            middotWidth: middot.width,\n            wsmiddotWidth: wsmiddotWidth.width,\n            maxDigitWidth: maxDigitWidth\n        }, true);\n    }\n}\nclass FontMeasurementsCache {\n    constructor() {\n        this._keys = Object.create(null);\n        this._values = Object.create(null);\n    }\n    has(item) {\n        const itemId = item.getId();\n        return !!this._values[itemId];\n    }\n    get(item) {\n        const itemId = item.getId();\n        return this._values[itemId];\n    }\n    put(item, value) {\n        const itemId = item.getId();\n        this._keys[itemId] = item;\n        this._values[itemId] = value;\n    }\n    remove(item) {\n        const itemId = item.getId();\n        delete this._keys[itemId];\n        delete this._values[itemId];\n    }\n    getValues() {\n        return Object.keys(this._keys).map(id => this._values[id]);\n    }\n}\nexport const FontMeasurements = new FontMeasurementsImpl();\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getWindowId, onDidUnregisterWindow } from './dom.js';\nimport { Emitter, Event } from '../common/event.js';\nimport { Disposable, markAsSingleton } from '../common/lifecycle.js';\n/**\n * See https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio#monitoring_screen_resolution_or_zoom_level_changes\n */\nclass DevicePixelRatioMonitor extends Disposable {\n    constructor(targetWindow) {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._listener = () => this._handleChange(targetWindow, true);\n        this._mediaQueryList = null;\n        this._handleChange(targetWindow, false);\n    }\n    _handleChange(targetWindow, fireEvent) {\n        var _a;\n        (_a = this._mediaQueryList) === null || _a === void 0 ? void 0 : _a.removeEventListener('change', this._listener);\n        this._mediaQueryList = targetWindow.matchMedia(`(resolution: ${targetWindow.devicePixelRatio}dppx)`);\n        this._mediaQueryList.addEventListener('change', this._listener);\n        if (fireEvent) {\n            this._onDidChange.fire();\n        }\n    }\n}\nclass PixelRatioMonitorImpl extends Disposable {\n    get value() {\n        return this._value;\n    }\n    constructor(targetWindow) {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._value = this._getPixelRatio(targetWindow);\n        const dprMonitor = this._register(new DevicePixelRatioMonitor(targetWindow));\n        this._register(dprMonitor.onDidChange(() => {\n            this._value = this._getPixelRatio(targetWindow);\n            this._onDidChange.fire(this._value);\n        }));\n    }\n    _getPixelRatio(targetWindow) {\n        const ctx = document.createElement('canvas').getContext('2d');\n        const dpr = targetWindow.devicePixelRatio || 1;\n        const bsr = ctx.webkitBackingStorePixelRatio ||\n            ctx.mozBackingStorePixelRatio ||\n            ctx.msBackingStorePixelRatio ||\n            ctx.oBackingStorePixelRatio ||\n            ctx.backingStorePixelRatio || 1;\n        return dpr / bsr;\n    }\n}\nclass PixelRatioMonitorFacade {\n    constructor() {\n        this.mapWindowIdToPixelRatioMonitor = new Map();\n    }\n    _getOrCreatePixelRatioMonitor(targetWindow) {\n        const targetWindowId = getWindowId(targetWindow);\n        let pixelRatioMonitor = this.mapWindowIdToPixelRatioMonitor.get(targetWindowId);\n        if (!pixelRatioMonitor) {\n            pixelRatioMonitor = markAsSingleton(new PixelRatioMonitorImpl(targetWindow));\n            this.mapWindowIdToPixelRatioMonitor.set(targetWindowId, pixelRatioMonitor);\n            markAsSingleton(Event.once(onDidUnregisterWindow)(({ vscodeWindowId }) => {\n                if (vscodeWindowId === targetWindowId) {\n                    pixelRatioMonitor === null || pixelRatioMonitor === void 0 ? void 0 : pixelRatioMonitor.dispose();\n                    this.mapWindowIdToPixelRatioMonitor.delete(targetWindowId);\n                }\n            }));\n        }\n        return pixelRatioMonitor;\n    }\n    getInstance(targetWindow) {\n        return this._getOrCreatePixelRatioMonitor(targetWindow);\n    }\n}\n/**\n * Returns the pixel ratio.\n *\n * This is useful for rendering <canvas> elements at native screen resolution or for being used as\n * a cache key when storing font measurements. Fonts might render differently depending on resolution\n * and any measurements need to be discarded for example when a window is moved from a monitor to another.\n */\nexport const PixelRatio = new PixelRatioMonitorFacade();\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { applyFontInfo } from './domFontInfo.js';\nexport class CharWidthRequest {\n    constructor(chr, type) {\n        this.chr = chr;\n        this.type = type;\n        this.width = 0;\n    }\n    fulfill(width) {\n        this.width = width;\n    }\n}\nclass DomCharWidthReader {\n    constructor(bareFontInfo, requests) {\n        this._bareFontInfo = bareFontInfo;\n        this._requests = requests;\n        this._container = null;\n        this._testElements = null;\n    }\n    read(targetWindow) {\n        // Create a test container with all these test elements\n        this._createDomElements();\n        // Add the container to the DOM\n        targetWindow.document.body.appendChild(this._container);\n        // Read character widths\n        this._readFromDomElements();\n        // Remove the container from the DOM\n        targetWindow.document.body.removeChild(this._container);\n        this._container = null;\n        this._testElements = null;\n    }\n    _createDomElements() {\n        const container = document.createElement('div');\n        container.style.position = 'absolute';\n        container.style.top = '-50000px';\n        container.style.width = '50000px';\n        const regularDomNode = document.createElement('div');\n        applyFontInfo(regularDomNode, this._bareFontInfo);\n        container.appendChild(regularDomNode);\n        const boldDomNode = document.createElement('div');\n        applyFontInfo(boldDomNode, this._bareFontInfo);\n        boldDomNode.style.fontWeight = 'bold';\n        container.appendChild(boldDomNode);\n        const italicDomNode = document.createElement('div');\n        applyFontInfo(italicDomNode, this._bareFontInfo);\n        italicDomNode.style.fontStyle = 'italic';\n        container.appendChild(italicDomNode);\n        const testElements = [];\n        for (const request of this._requests) {\n            let parent;\n            if (request.type === 0 /* CharWidthRequestType.Regular */) {\n                parent = regularDomNode;\n            }\n            if (request.type === 2 /* CharWidthRequestType.Bold */) {\n                parent = boldDomNode;\n            }\n            if (request.type === 1 /* CharWidthRequestType.Italic */) {\n                parent = italicDomNode;\n            }\n            parent.appendChild(document.createElement('br'));\n            const testElement = document.createElement('span');\n            DomCharWidthReader._render(testElement, request);\n            parent.appendChild(testElement);\n            testElements.push(testElement);\n        }\n        this._container = container;\n        this._testElements = testElements;\n    }\n    static _render(testElement, request) {\n        if (request.chr === ' ') {\n            let htmlString = '\\u00a0';\n            // Repeat character 256 (2^8) times\n            for (let i = 0; i < 8; i++) {\n                htmlString += htmlString;\n            }\n            testElement.innerText = htmlString;\n        }\n        else {\n            let testString = request.chr;\n            // Repeat character 256 (2^8) times\n            for (let i = 0; i < 8; i++) {\n                testString += testString;\n            }\n            testElement.textContent = testString;\n        }\n    }\n    _readFromDomElements() {\n        for (let i = 0, len = this._requests.length; i < len; i++) {\n            const request = this._requests[i];\n            const testElement = this._testElements[i];\n            request.fulfill(testElement.offsetWidth / 256);\n        }\n    }\n}\nexport function readCharWidths(targetWindow, bareFontInfo, requests) {\n    const reader = new DomCharWidthReader(bareFontInfo, requests);\n    reader.read(targetWindow);\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as platform from '../../../base/common/platform.js';\nimport { EditorFontVariations, EDITOR_FONT_DEFAULTS } from './editorOptions.js';\nimport { EditorZoom } from './editorZoom.js';\n/**\n * Determined from empirical observations.\n * @internal\n */\nconst GOLDEN_LINE_HEIGHT_RATIO = platform.isMacintosh ? 1.5 : 1.35;\n/**\n * @internal\n */\nconst MINIMUM_LINE_HEIGHT = 8;\nexport class BareFontInfo {\n    /**\n     * @internal\n     */\n    static createFromValidatedSettings(options, pixelRatio, ignoreEditorZoom) {\n        const fontFamily = options.get(49 /* EditorOption.fontFamily */);\n        const fontWeight = options.get(53 /* EditorOption.fontWeight */);\n        const fontSize = options.get(52 /* EditorOption.fontSize */);\n        const fontFeatureSettings = options.get(51 /* EditorOption.fontLigatures */);\n        const fontVariationSettings = options.get(54 /* EditorOption.fontVariations */);\n        const lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        const letterSpacing = options.get(64 /* EditorOption.letterSpacing */);\n        return BareFontInfo._create(fontFamily, fontWeight, fontSize, fontFeatureSettings, fontVariationSettings, lineHeight, letterSpacing, pixelRatio, ignoreEditorZoom);\n    }\n    /**\n     * @internal\n     */\n    static _create(fontFamily, fontWeight, fontSize, fontFeatureSettings, fontVariationSettings, lineHeight, letterSpacing, pixelRatio, ignoreEditorZoom) {\n        if (lineHeight === 0) {\n            lineHeight = GOLDEN_LINE_HEIGHT_RATIO * fontSize;\n        }\n        else if (lineHeight < MINIMUM_LINE_HEIGHT) {\n            // Values too small to be line heights in pixels are in ems.\n            lineHeight = lineHeight * fontSize;\n        }\n        // Enforce integer, minimum constraints\n        lineHeight = Math.round(lineHeight);\n        if (lineHeight < MINIMUM_LINE_HEIGHT) {\n            lineHeight = MINIMUM_LINE_HEIGHT;\n        }\n        const editorZoomLevelMultiplier = 1 + (ignoreEditorZoom ? 0 : EditorZoom.getZoomLevel() * 0.1);\n        fontSize *= editorZoomLevelMultiplier;\n        lineHeight *= editorZoomLevelMultiplier;\n        if (fontVariationSettings === EditorFontVariations.TRANSLATE) {\n            if (fontWeight === 'normal' || fontWeight === 'bold') {\n                fontVariationSettings = EditorFontVariations.OFF;\n            }\n            else {\n                const fontWeightAsNumber = parseInt(fontWeight, 10);\n                fontVariationSettings = `'wght' ${fontWeightAsNumber}`;\n                fontWeight = 'normal';\n            }\n        }\n        return new BareFontInfo({\n            pixelRatio: pixelRatio,\n            fontFamily: fontFamily,\n            fontWeight: fontWeight,\n            fontSize: fontSize,\n            fontFeatureSettings: fontFeatureSettings,\n            fontVariationSettings,\n            lineHeight: lineHeight,\n            letterSpacing: letterSpacing\n        });\n    }\n    /**\n     * @internal\n     */\n    constructor(opts) {\n        this._bareFontInfoBrand = undefined;\n        this.pixelRatio = opts.pixelRatio;\n        this.fontFamily = String(opts.fontFamily);\n        this.fontWeight = String(opts.fontWeight);\n        this.fontSize = opts.fontSize;\n        this.fontFeatureSettings = opts.fontFeatureSettings;\n        this.fontVariationSettings = opts.fontVariationSettings;\n        this.lineHeight = opts.lineHeight | 0;\n        this.letterSpacing = opts.letterSpacing;\n    }\n    /**\n     * @internal\n     */\n    getId() {\n        return `${this.pixelRatio}-${this.fontFamily}-${this.fontWeight}-${this.fontSize}-${this.fontFeatureSettings}-${this.fontVariationSettings}-${this.lineHeight}-${this.letterSpacing}`;\n    }\n    /**\n     * @internal\n     */\n    getMassagedFontFamily() {\n        const fallbackFontFamily = EDITOR_FONT_DEFAULTS.fontFamily;\n        const fontFamily = BareFontInfo._wrapInQuotes(this.fontFamily);\n        if (fallbackFontFamily && this.fontFamily !== fallbackFontFamily) {\n            return `${fontFamily}, ${fallbackFontFamily}`;\n        }\n        return fontFamily;\n    }\n    static _wrapInQuotes(fontFamily) {\n        if (/[,\"']/.test(fontFamily)) {\n            // Looks like the font family might be already escaped\n            return fontFamily;\n        }\n        if (/[+ ]/.test(fontFamily)) {\n            // Wrap a font family using + or <space> with quotes\n            return `\"${fontFamily}\"`;\n        }\n        return fontFamily;\n    }\n}\n// change this whenever `FontInfo` members are changed\nexport const SERIALIZED_FONT_INFO_VERSION = 2;\nexport class FontInfo extends BareFontInfo {\n    /**\n     * @internal\n     */\n    constructor(opts, isTrusted) {\n        super(opts);\n        this._editorStylingBrand = undefined;\n        this.version = SERIALIZED_FONT_INFO_VERSION;\n        this.isTrusted = isTrusted;\n        this.isMonospace = opts.isMonospace;\n        this.typicalHalfwidthCharacterWidth = opts.typicalHalfwidthCharacterWidth;\n        this.typicalFullwidthCharacterWidth = opts.typicalFullwidthCharacterWidth;\n        this.canUseHalfwidthRightwardsArrow = opts.canUseHalfwidthRightwardsArrow;\n        this.spaceWidth = opts.spaceWidth;\n        this.middotWidth = opts.middotWidth;\n        this.wsmiddotWidth = opts.wsmiddotWidth;\n        this.maxDigitWidth = opts.maxDigitWidth;\n    }\n    /**\n     * @internal\n     */\n    equals(other) {\n        return (this.fontFamily === other.fontFamily\n            && this.fontWeight === other.fontWeight\n            && this.fontSize === other.fontSize\n            && this.fontFeatureSettings === other.fontFeatureSettings\n            && this.fontVariationSettings === other.fontVariationSettings\n            && this.lineHeight === other.lineHeight\n            && this.letterSpacing === other.letterSpacing\n            && this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth\n            && this.typicalFullwidthCharacterWidth === other.typicalFullwidthCharacterWidth\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.spaceWidth === other.spaceWidth\n            && this.middotWidth === other.middotWidth\n            && this.wsmiddotWidth === other.wsmiddotWidth\n            && this.maxDigitWidth === other.maxDigitWidth);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nexport const EditorZoom = new class {\n    constructor() {\n        this._zoomLevel = 0;\n        this._onDidChangeZoomLevel = new Emitter();\n        this.onDidChangeZoomLevel = this._onDidChangeZoomLevel.event;\n    }\n    getZoomLevel() {\n        return this._zoomLevel;\n    }\n    setZoomLevel(zoomLevel) {\n        zoomLevel = Math.min(Math.max(-5, zoomLevel), 20);\n        if (this._zoomLevel === zoomLevel) {\n            return;\n        }\n        this._zoomLevel = zoomLevel;\n        this._onDidChangeZoomLevel.fire(this._zoomLevel);\n    }\n};\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getAllMethodNames } from '../../../base/common/objects.js';\nimport { EditorWorkerClient } from './editorWorkerService.js';\n/**\n * Create a new web worker that has model syncing capabilities built in.\n * Specify an AMD module to load that will `create` an object that will be proxied.\n */\nexport function createWebWorker(modelService, languageConfigurationService, opts) {\n    return new MonacoWebWorkerImpl(modelService, languageConfigurationService, opts);\n}\nclass MonacoWebWorkerImpl extends EditorWorkerClient {\n    constructor(modelService, languageConfigurationService, opts) {\n        super(modelService, opts.keepIdleModels || false, opts.label, languageConfigurationService);\n        this._foreignModuleId = opts.moduleId;\n        this._foreignModuleCreateData = opts.createData || null;\n        this._foreignModuleHost = opts.host || null;\n        this._foreignProxy = null;\n    }\n    // foreign host request\n    fhr(method, args) {\n        if (!this._foreignModuleHost || typeof this._foreignModuleHost[method] !== 'function') {\n            return Promise.reject(new Error('Missing method ' + method + ' or missing main thread foreign host.'));\n        }\n        try {\n            return Promise.resolve(this._foreignModuleHost[method].apply(this._foreignModuleHost, args));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    _getForeignProxy() {\n        if (!this._foreignProxy) {\n            this._foreignProxy = this._getProxy().then((proxy) => {\n                const foreignHostMethods = this._foreignModuleHost ? getAllMethodNames(this._foreignModuleHost) : [];\n                return proxy.loadForeignModule(this._foreignModuleId, this._foreignModuleCreateData, foreignHostMethods).then((foreignMethods) => {\n                    this._foreignModuleCreateData = null;\n                    const proxyMethodRequest = (method, args) => {\n                        return proxy.fmr(method, args);\n                    };\n                    const createProxyMethod = (method, proxyMethodRequest) => {\n                        return function () {\n                            const args = Array.prototype.slice.call(arguments, 0);\n                            return proxyMethodRequest(method, args);\n                        };\n                    };\n                    const foreignProxy = {};\n                    for (const foreignMethod of foreignMethods) {\n                        foreignProxy[foreignMethod] = createProxyMethod(foreignMethod, proxyMethodRequest);\n                    }\n                    return foreignProxy;\n                });\n            });\n        }\n        return this._foreignProxy;\n    }\n    getProxy() {\n        return this._getForeignProxy();\n    }\n    withSyncedResources(resources) {\n        return this._withSyncedResources(resources).then(_ => this.getProxy());\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * The type of the `IEditor`.\n */\nexport const EditorType = {\n    ICodeEditor: 'vs.editor.ICodeEditor',\n    IDiffEditor: 'vs.editor.IDiffEditor'\n};\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createTrustedTypesPolicy } from '../../../base/browser/trustedTypes.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { TokenizationRegistry } from '../../common/languages.js';\nimport { LineTokens } from '../../common/tokens/lineTokens.js';\nimport { RenderLineInput, renderViewLine2 as renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { ViewLineRenderingData } from '../../common/viewModel.js';\nimport { MonarchTokenizer } from '../common/monarch/monarchLexer.js';\nconst ttPolicy = createTrustedTypesPolicy('standaloneColorizer', { createHTML: value => value });\nexport class Colorizer {\n    static colorizeElement(themeService, languageService, domNode, options) {\n        options = options || {};\n        const theme = options.theme || 'vs';\n        const mimeType = options.mimeType || domNode.getAttribute('lang') || domNode.getAttribute('data-lang');\n        if (!mimeType) {\n            console.error('Mode not detected');\n            return Promise.resolve();\n        }\n        const languageId = languageService.getLanguageIdByMimeType(mimeType) || mimeType;\n        themeService.setTheme(theme);\n        const text = domNode.firstChild ? domNode.firstChild.nodeValue : '';\n        domNode.className += ' ' + theme;\n        const render = (str) => {\n            var _a;\n            const trustedhtml = (_a = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(str)) !== null && _a !== void 0 ? _a : str;\n            domNode.innerHTML = trustedhtml;\n        };\n        return this.colorize(languageService, text || '', languageId, options).then(render, (err) => console.error(err));\n    }\n    static async colorize(languageService, text, languageId, options) {\n        const languageIdCodec = languageService.languageIdCodec;\n        let tabSize = 4;\n        if (options && typeof options.tabSize === 'number') {\n            tabSize = options.tabSize;\n        }\n        if (strings.startsWithUTF8BOM(text)) {\n            text = text.substr(1);\n        }\n        const lines = strings.splitLines(text);\n        if (!languageService.isRegisteredLanguageId(languageId)) {\n            return _fakeColorize(lines, tabSize, languageIdCodec);\n        }\n        const tokenizationSupport = await TokenizationRegistry.getOrCreate(languageId);\n        if (tokenizationSupport) {\n            return _colorize(lines, tabSize, tokenizationSupport, languageIdCodec);\n        }\n        return _fakeColorize(lines, tabSize, languageIdCodec);\n    }\n    static colorizeLine(line, mightContainNonBasicASCII, mightContainRTL, tokens, tabSize = 4) {\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(line, mightContainNonBasicASCII);\n        const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, mightContainRTL);\n        const renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, tokens, [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\n        return renderResult.html;\n    }\n    static colorizeModelLine(model, lineNumber, tabSize = 4) {\n        const content = model.getLineContent(lineNumber);\n        model.tokenization.forceTokenization(lineNumber);\n        const tokens = model.tokenization.getLineTokens(lineNumber);\n        const inflatedTokens = tokens.inflate();\n        return this.colorizeLine(content, model.mightContainNonBasicASCII(), model.mightContainRTL(), inflatedTokens, tabSize);\n    }\n}\nfunction _colorize(lines, tabSize, tokenizationSupport, languageIdCodec) {\n    return new Promise((c, e) => {\n        const execute = () => {\n            const result = _actualColorize(lines, tabSize, tokenizationSupport, languageIdCodec);\n            if (tokenizationSupport instanceof MonarchTokenizer) {\n                const status = tokenizationSupport.getLoadStatus();\n                if (status.loaded === false) {\n                    status.promise.then(execute, e);\n                    return;\n                }\n            }\n            c(result);\n        };\n        execute();\n    });\n}\nfunction _fakeColorize(lines, tabSize, languageIdCodec) {\n    let html = [];\n    const defaultMetadata = ((0 /* FontStyle.None */ << 11 /* MetadataConsts.FONT_STYLE_OFFSET */)\n        | (1 /* ColorId.DefaultForeground */ << 15 /* MetadataConsts.FOREGROUND_OFFSET */)\n        | (2 /* ColorId.DefaultBackground */ << 24 /* MetadataConsts.BACKGROUND_OFFSET */)) >>> 0;\n    const tokens = new Uint32Array(2);\n    tokens[0] = 0;\n    tokens[1] = defaultMetadata;\n    for (let i = 0, length = lines.length; i < length; i++) {\n        const line = lines[i];\n        tokens[0] = line.length;\n        const lineTokens = new LineTokens(tokens, line, languageIdCodec);\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(line, /* check for basic ASCII */ true);\n        const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, /* check for RTL */ true);\n        const renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, lineTokens, [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\n        html = html.concat(renderResult.html);\n        html.push('<br/>');\n    }\n    return html.join('');\n}\nfunction _actualColorize(lines, tabSize, tokenizationSupport, languageIdCodec) {\n    let html = [];\n    let state = tokenizationSupport.getInitialState();\n    for (let i = 0, length = lines.length; i < length; i++) {\n        const line = lines[i];\n        const tokenizeResult = tokenizationSupport.tokenizeEncoded(line, true, state);\n        LineTokens.convertToEndOffset(tokenizeResult.tokens, line.length);\n        const lineTokens = new LineTokens(tokenizeResult.tokens, line, languageIdCodec);\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(line, /* check for basic ASCII */ true);\n        const containsRTL = ViewLineRenderingData.containsRTL(line, isBasicASCII, /* check for RTL */ true);\n        const renderResult = renderViewLine(new RenderLineInput(false, true, line, false, isBasicASCII, containsRTL, 0, lineTokens.inflate(), [], tabSize, 0, 0, 0, 0, -1, 'none', false, false, null));\n        html = html.concat(renderResult.html);\n        html.push('<br/>');\n        state = tokenizeResult.endState;\n    }\n    return html.join('');\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { StringBuilder } from '../core/stringBuilder.js';\nimport { LineDecoration, LineDecorationsNormalizer } from './lineDecorations.js';\nimport { LinePart } from './linePart.js';\nexport class LineRange {\n    constructor(startIndex, endIndex) {\n        this.startOffset = startIndex;\n        this.endOffset = endIndex;\n    }\n    equals(otherLineRange) {\n        return this.startOffset === otherLineRange.startOffset\n            && this.endOffset === otherLineRange.endOffset;\n    }\n}\nexport class RenderLineInput {\n    constructor(useMonospaceOptimizations, canUseHalfwidthRightwardsArrow, lineContent, continuesWithWrappedLine, isBasicASCII, containsRTL, fauxIndentLength, lineTokens, lineDecorations, tabSize, startVisibleColumn, spaceWidth, middotWidth, wsmiddotWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, selectionsOnLine) {\n        this.useMonospaceOptimizations = useMonospaceOptimizations;\n        this.canUseHalfwidthRightwardsArrow = canUseHalfwidthRightwardsArrow;\n        this.lineContent = lineContent;\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\n        this.isBasicASCII = isBasicASCII;\n        this.containsRTL = containsRTL;\n        this.fauxIndentLength = fauxIndentLength;\n        this.lineTokens = lineTokens;\n        this.lineDecorations = lineDecorations.sort(LineDecoration.compare);\n        this.tabSize = tabSize;\n        this.startVisibleColumn = startVisibleColumn;\n        this.spaceWidth = spaceWidth;\n        this.stopRenderingLineAfter = stopRenderingLineAfter;\n        this.renderWhitespace = (renderWhitespace === 'all'\n            ? 4 /* RenderWhitespace.All */\n            : renderWhitespace === 'boundary'\n                ? 1 /* RenderWhitespace.Boundary */\n                : renderWhitespace === 'selection'\n                    ? 2 /* RenderWhitespace.Selection */\n                    : renderWhitespace === 'trailing'\n                        ? 3 /* RenderWhitespace.Trailing */\n                        : 0 /* RenderWhitespace.None */);\n        this.renderControlCharacters = renderControlCharacters;\n        this.fontLigatures = fontLigatures;\n        this.selectionsOnLine = selectionsOnLine && selectionsOnLine.sort((a, b) => a.startOffset < b.startOffset ? -1 : 1);\n        const wsmiddotDiff = Math.abs(wsmiddotWidth - spaceWidth);\n        const middotDiff = Math.abs(middotWidth - spaceWidth);\n        if (wsmiddotDiff < middotDiff) {\n            this.renderSpaceWidth = wsmiddotWidth;\n            this.renderSpaceCharCode = 0x2E31; // U+2E31 - WORD SEPARATOR MIDDLE DOT\n        }\n        else {\n            this.renderSpaceWidth = middotWidth;\n            this.renderSpaceCharCode = 0xB7; // U+00B7 - MIDDLE DOT\n        }\n    }\n    sameSelection(otherSelections) {\n        if (this.selectionsOnLine === null) {\n            return otherSelections === null;\n        }\n        if (otherSelections === null) {\n            return false;\n        }\n        if (otherSelections.length !== this.selectionsOnLine.length) {\n            return false;\n        }\n        for (let i = 0; i < this.selectionsOnLine.length; i++) {\n            if (!this.selectionsOnLine[i].equals(otherSelections[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    equals(other) {\n        return (this.useMonospaceOptimizations === other.useMonospaceOptimizations\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineContent === other.lineContent\n            && this.continuesWithWrappedLine === other.continuesWithWrappedLine\n            && this.isBasicASCII === other.isBasicASCII\n            && this.containsRTL === other.containsRTL\n            && this.fauxIndentLength === other.fauxIndentLength\n            && this.tabSize === other.tabSize\n            && this.startVisibleColumn === other.startVisibleColumn\n            && this.spaceWidth === other.spaceWidth\n            && this.renderSpaceWidth === other.renderSpaceWidth\n            && this.renderSpaceCharCode === other.renderSpaceCharCode\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter\n            && this.renderWhitespace === other.renderWhitespace\n            && this.renderControlCharacters === other.renderControlCharacters\n            && this.fontLigatures === other.fontLigatures\n            && LineDecoration.equalsArr(this.lineDecorations, other.lineDecorations)\n            && this.lineTokens.equals(other.lineTokens)\n            && this.sameSelection(other.selectionsOnLine));\n    }\n}\nexport class DomPosition {\n    constructor(partIndex, charIndex) {\n        this.partIndex = partIndex;\n        this.charIndex = charIndex;\n    }\n}\n/**\n * Provides a both direction mapping between a line's character and its rendered position.\n */\nexport class CharacterMapping {\n    static getPartIndex(partData) {\n        return (partData & 4294901760 /* CharacterMappingConstants.PART_INDEX_MASK */) >>> 16 /* CharacterMappingConstants.PART_INDEX_OFFSET */;\n    }\n    static getCharIndex(partData) {\n        return (partData & 65535 /* CharacterMappingConstants.CHAR_INDEX_MASK */) >>> 0 /* CharacterMappingConstants.CHAR_INDEX_OFFSET */;\n    }\n    constructor(length, partCount) {\n        this.length = length;\n        this._data = new Uint32Array(this.length);\n        this._horizontalOffset = new Uint32Array(this.length);\n    }\n    setColumnInfo(column, partIndex, charIndex, horizontalOffset) {\n        const partData = ((partIndex << 16 /* CharacterMappingConstants.PART_INDEX_OFFSET */)\n            | (charIndex << 0 /* CharacterMappingConstants.CHAR_INDEX_OFFSET */)) >>> 0;\n        this._data[column - 1] = partData;\n        this._horizontalOffset[column - 1] = horizontalOffset;\n    }\n    getHorizontalOffset(column) {\n        if (this._horizontalOffset.length === 0) {\n            // No characters on this line\n            return 0;\n        }\n        return this._horizontalOffset[column - 1];\n    }\n    charOffsetToPartData(charOffset) {\n        if (this.length === 0) {\n            return 0;\n        }\n        if (charOffset < 0) {\n            return this._data[0];\n        }\n        if (charOffset >= this.length) {\n            return this._data[this.length - 1];\n        }\n        return this._data[charOffset];\n    }\n    getDomPosition(column) {\n        const partData = this.charOffsetToPartData(column - 1);\n        const partIndex = CharacterMapping.getPartIndex(partData);\n        const charIndex = CharacterMapping.getCharIndex(partData);\n        return new DomPosition(partIndex, charIndex);\n    }\n    getColumn(domPosition, partLength) {\n        const charOffset = this.partDataToCharOffset(domPosition.partIndex, partLength, domPosition.charIndex);\n        return charOffset + 1;\n    }\n    partDataToCharOffset(partIndex, partLength, charIndex) {\n        if (this.length === 0) {\n            return 0;\n        }\n        const searchEntry = ((partIndex << 16 /* CharacterMappingConstants.PART_INDEX_OFFSET */)\n            | (charIndex << 0 /* CharacterMappingConstants.CHAR_INDEX_OFFSET */)) >>> 0;\n        let min = 0;\n        let max = this.length - 1;\n        while (min + 1 < max) {\n            const mid = ((min + max) >>> 1);\n            const midEntry = this._data[mid];\n            if (midEntry === searchEntry) {\n                return mid;\n            }\n            else if (midEntry > searchEntry) {\n                max = mid;\n            }\n            else {\n                min = mid;\n            }\n        }\n        if (min === max) {\n            return min;\n        }\n        const minEntry = this._data[min];\n        const maxEntry = this._data[max];\n        if (minEntry === searchEntry) {\n            return min;\n        }\n        if (maxEntry === searchEntry) {\n            return max;\n        }\n        const minPartIndex = CharacterMapping.getPartIndex(minEntry);\n        const minCharIndex = CharacterMapping.getCharIndex(minEntry);\n        const maxPartIndex = CharacterMapping.getPartIndex(maxEntry);\n        let maxCharIndex;\n        if (minPartIndex !== maxPartIndex) {\n            // sitting between parts\n            maxCharIndex = partLength;\n        }\n        else {\n            maxCharIndex = CharacterMapping.getCharIndex(maxEntry);\n        }\n        const minEntryDistance = charIndex - minCharIndex;\n        const maxEntryDistance = maxCharIndex - charIndex;\n        if (minEntryDistance <= maxEntryDistance) {\n            return min;\n        }\n        return max;\n    }\n}\nexport class RenderLineOutput {\n    constructor(characterMapping, containsRTL, containsForeignElements) {\n        this._renderLineOutputBrand = undefined;\n        this.characterMapping = characterMapping;\n        this.containsRTL = containsRTL;\n        this.containsForeignElements = containsForeignElements;\n    }\n}\nexport function renderViewLine(input, sb) {\n    if (input.lineContent.length === 0) {\n        if (input.lineDecorations.length > 0) {\n            // This line is empty, but it contains inline decorations\n            sb.appendString(`<span>`);\n            let beforeCount = 0;\n            let afterCount = 0;\n            let containsForeignElements = 0 /* ForeignElementType.None */;\n            for (const lineDecoration of input.lineDecorations) {\n                if (lineDecoration.type === 1 /* InlineDecorationType.Before */ || lineDecoration.type === 2 /* InlineDecorationType.After */) {\n                    sb.appendString(`<span class=\"`);\n                    sb.appendString(lineDecoration.className);\n                    sb.appendString(`\"></span>`);\n                    if (lineDecoration.type === 1 /* InlineDecorationType.Before */) {\n                        containsForeignElements |= 1 /* ForeignElementType.Before */;\n                        beforeCount++;\n                    }\n                    if (lineDecoration.type === 2 /* InlineDecorationType.After */) {\n                        containsForeignElements |= 2 /* ForeignElementType.After */;\n                        afterCount++;\n                    }\n                }\n            }\n            sb.appendString(`</span>`);\n            const characterMapping = new CharacterMapping(1, beforeCount + afterCount);\n            characterMapping.setColumnInfo(1, beforeCount, 0, 0);\n            return new RenderLineOutput(characterMapping, false, containsForeignElements);\n        }\n        // completely empty line\n        sb.appendString('<span><span></span></span>');\n        return new RenderLineOutput(new CharacterMapping(0, 0), false, 0 /* ForeignElementType.None */);\n    }\n    return _renderLine(resolveRenderLineInput(input), sb);\n}\nexport class RenderLineOutput2 {\n    constructor(characterMapping, html, containsRTL, containsForeignElements) {\n        this.characterMapping = characterMapping;\n        this.html = html;\n        this.containsRTL = containsRTL;\n        this.containsForeignElements = containsForeignElements;\n    }\n}\nexport function renderViewLine2(input) {\n    const sb = new StringBuilder(10000);\n    const out = renderViewLine(input, sb);\n    return new RenderLineOutput2(out.characterMapping, sb.build(), out.containsRTL, out.containsForeignElements);\n}\nclass ResolvedRenderLineInput {\n    constructor(fontIsMonospace, canUseHalfwidthRightwardsArrow, lineContent, len, isOverflowing, overflowingCharCount, parts, containsForeignElements, fauxIndentLength, tabSize, startVisibleColumn, containsRTL, spaceWidth, renderSpaceCharCode, renderWhitespace, renderControlCharacters) {\n        this.fontIsMonospace = fontIsMonospace;\n        this.canUseHalfwidthRightwardsArrow = canUseHalfwidthRightwardsArrow;\n        this.lineContent = lineContent;\n        this.len = len;\n        this.isOverflowing = isOverflowing;\n        this.overflowingCharCount = overflowingCharCount;\n        this.parts = parts;\n        this.containsForeignElements = containsForeignElements;\n        this.fauxIndentLength = fauxIndentLength;\n        this.tabSize = tabSize;\n        this.startVisibleColumn = startVisibleColumn;\n        this.containsRTL = containsRTL;\n        this.spaceWidth = spaceWidth;\n        this.renderSpaceCharCode = renderSpaceCharCode;\n        this.renderWhitespace = renderWhitespace;\n        this.renderControlCharacters = renderControlCharacters;\n        //\n    }\n}\nfunction resolveRenderLineInput(input) {\n    const lineContent = input.lineContent;\n    let isOverflowing;\n    let overflowingCharCount;\n    let len;\n    if (input.stopRenderingLineAfter !== -1 && input.stopRenderingLineAfter < lineContent.length) {\n        isOverflowing = true;\n        overflowingCharCount = lineContent.length - input.stopRenderingLineAfter;\n        len = input.stopRenderingLineAfter;\n    }\n    else {\n        isOverflowing = false;\n        overflowingCharCount = 0;\n        len = lineContent.length;\n    }\n    let tokens = transformAndRemoveOverflowing(lineContent, input.containsRTL, input.lineTokens, input.fauxIndentLength, len);\n    if (input.renderControlCharacters && !input.isBasicASCII) {\n        // Calling `extractControlCharacters` before adding (possibly empty) line parts\n        // for inline decorations. `extractControlCharacters` removes empty line parts.\n        tokens = extractControlCharacters(lineContent, tokens);\n    }\n    if (input.renderWhitespace === 4 /* RenderWhitespace.All */ ||\n        input.renderWhitespace === 1 /* RenderWhitespace.Boundary */ ||\n        (input.renderWhitespace === 2 /* RenderWhitespace.Selection */ && !!input.selectionsOnLine) ||\n        (input.renderWhitespace === 3 /* RenderWhitespace.Trailing */ && !input.continuesWithWrappedLine)) {\n        tokens = _applyRenderWhitespace(input, lineContent, len, tokens);\n    }\n    let containsForeignElements = 0 /* ForeignElementType.None */;\n    if (input.lineDecorations.length > 0) {\n        for (let i = 0, len = input.lineDecorations.length; i < len; i++) {\n            const lineDecoration = input.lineDecorations[i];\n            if (lineDecoration.type === 3 /* InlineDecorationType.RegularAffectingLetterSpacing */) {\n                // Pretend there are foreign elements... although not 100% accurate.\n                containsForeignElements |= 1 /* ForeignElementType.Before */;\n            }\n            else if (lineDecoration.type === 1 /* InlineDecorationType.Before */) {\n                containsForeignElements |= 1 /* ForeignElementType.Before */;\n            }\n            else if (lineDecoration.type === 2 /* InlineDecorationType.After */) {\n                containsForeignElements |= 2 /* ForeignElementType.After */;\n            }\n        }\n        tokens = _applyInlineDecorations(lineContent, len, tokens, input.lineDecorations);\n    }\n    if (!input.containsRTL) {\n        // We can never split RTL text, as it ruins the rendering\n        tokens = splitLargeTokens(lineContent, tokens, !input.isBasicASCII || input.fontLigatures);\n    }\n    return new ResolvedRenderLineInput(input.useMonospaceOptimizations, input.canUseHalfwidthRightwardsArrow, lineContent, len, isOverflowing, overflowingCharCount, tokens, containsForeignElements, input.fauxIndentLength, input.tabSize, input.startVisibleColumn, input.containsRTL, input.spaceWidth, input.renderSpaceCharCode, input.renderWhitespace, input.renderControlCharacters);\n}\n/**\n * In the rendering phase, characters are always looped until token.endIndex.\n * Ensure that all tokens end before `len` and the last one ends precisely at `len`.\n */\nfunction transformAndRemoveOverflowing(lineContent, lineContainsRTL, tokens, fauxIndentLength, len) {\n    const result = [];\n    let resultLen = 0;\n    // The faux indent part of the line should have no token type\n    if (fauxIndentLength > 0) {\n        result[resultLen++] = new LinePart(fauxIndentLength, '', 0, false);\n    }\n    let startOffset = fauxIndentLength;\n    for (let tokenIndex = 0, tokensLen = tokens.getCount(); tokenIndex < tokensLen; tokenIndex++) {\n        const endIndex = tokens.getEndOffset(tokenIndex);\n        if (endIndex <= fauxIndentLength) {\n            // The faux indent part of the line should have no token type\n            continue;\n        }\n        const type = tokens.getClassName(tokenIndex);\n        if (endIndex >= len) {\n            const tokenContainsRTL = (lineContainsRTL ? strings.containsRTL(lineContent.substring(startOffset, len)) : false);\n            result[resultLen++] = new LinePart(len, type, 0, tokenContainsRTL);\n            break;\n        }\n        const tokenContainsRTL = (lineContainsRTL ? strings.containsRTL(lineContent.substring(startOffset, endIndex)) : false);\n        result[resultLen++] = new LinePart(endIndex, type, 0, tokenContainsRTL);\n        startOffset = endIndex;\n    }\n    return result;\n}\n/**\n * See https://github.com/microsoft/vscode/issues/6885.\n * It appears that having very large spans causes very slow reading of character positions.\n * So here we try to avoid that.\n */\nfunction splitLargeTokens(lineContent, tokens, onlyAtSpaces) {\n    let lastTokenEndIndex = 0;\n    const result = [];\n    let resultLen = 0;\n    if (onlyAtSpaces) {\n        // Split only at spaces => we need to walk each character\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const token = tokens[i];\n            const tokenEndIndex = token.endIndex;\n            if (lastTokenEndIndex + 50 /* Constants.LongToken */ < tokenEndIndex) {\n                const tokenType = token.type;\n                const tokenMetadata = token.metadata;\n                const tokenContainsRTL = token.containsRTL;\n                let lastSpaceOffset = -1;\n                let currTokenStart = lastTokenEndIndex;\n                for (let j = lastTokenEndIndex; j < tokenEndIndex; j++) {\n                    if (lineContent.charCodeAt(j) === 32 /* CharCode.Space */) {\n                        lastSpaceOffset = j;\n                    }\n                    if (lastSpaceOffset !== -1 && j - currTokenStart >= 50 /* Constants.LongToken */) {\n                        // Split at `lastSpaceOffset` + 1\n                        result[resultLen++] = new LinePart(lastSpaceOffset + 1, tokenType, tokenMetadata, tokenContainsRTL);\n                        currTokenStart = lastSpaceOffset + 1;\n                        lastSpaceOffset = -1;\n                    }\n                }\n                if (currTokenStart !== tokenEndIndex) {\n                    result[resultLen++] = new LinePart(tokenEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n                }\n            }\n            else {\n                result[resultLen++] = token;\n            }\n            lastTokenEndIndex = tokenEndIndex;\n        }\n    }\n    else {\n        // Split anywhere => we don't need to walk each character\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const token = tokens[i];\n            const tokenEndIndex = token.endIndex;\n            const diff = (tokenEndIndex - lastTokenEndIndex);\n            if (diff > 50 /* Constants.LongToken */) {\n                const tokenType = token.type;\n                const tokenMetadata = token.metadata;\n                const tokenContainsRTL = token.containsRTL;\n                const piecesCount = Math.ceil(diff / 50 /* Constants.LongToken */);\n                for (let j = 1; j < piecesCount; j++) {\n                    const pieceEndIndex = lastTokenEndIndex + (j * 50 /* Constants.LongToken */);\n                    result[resultLen++] = new LinePart(pieceEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n                }\n                result[resultLen++] = new LinePart(tokenEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n            }\n            else {\n                result[resultLen++] = token;\n            }\n            lastTokenEndIndex = tokenEndIndex;\n        }\n    }\n    return result;\n}\nfunction isControlCharacter(charCode) {\n    if (charCode < 32) {\n        return (charCode !== 9 /* CharCode.Tab */);\n    }\n    if (charCode === 127) {\n        // DEL\n        return true;\n    }\n    if ((charCode >= 0x202A && charCode <= 0x202E)\n        || (charCode >= 0x2066 && charCode <= 0x2069)\n        || (charCode >= 0x200E && charCode <= 0x200F)\n        || charCode === 0x061C) {\n        // Unicode Directional Formatting Characters\n        // LRE\tU+202A\tLEFT-TO-RIGHT EMBEDDING\n        // RLE\tU+202B\tRIGHT-TO-LEFT EMBEDDING\n        // PDF\tU+202C\tPOP DIRECTIONAL FORMATTING\n        // LRO\tU+202D\tLEFT-TO-RIGHT OVERRIDE\n        // RLO\tU+202E\tRIGHT-TO-LEFT OVERRIDE\n        // LRI\tU+2066\tLEFT-TO-RIGHT ISOLATE\n        // RLI\tU+2067\tRIGHT-TO-LEFT ISOLATE\n        // FSI\tU+2068\tFIRST STRONG ISOLATE\n        // PDI\tU+2069\tPOP DIRECTIONAL ISOLATE\n        // LRM\tU+200E\tLEFT-TO-RIGHT MARK\n        // RLM\tU+200F\tRIGHT-TO-LEFT MARK\n        // ALM\tU+061C\tARABIC LETTER MARK\n        return true;\n    }\n    return false;\n}\nfunction extractControlCharacters(lineContent, tokens) {\n    const result = [];\n    let lastLinePart = new LinePart(0, '', 0, false);\n    let charOffset = 0;\n    for (const token of tokens) {\n        const tokenEndIndex = token.endIndex;\n        for (; charOffset < tokenEndIndex; charOffset++) {\n            const charCode = lineContent.charCodeAt(charOffset);\n            if (isControlCharacter(charCode)) {\n                if (charOffset > lastLinePart.endIndex) {\n                    // emit previous part if it has text\n                    lastLinePart = new LinePart(charOffset, token.type, token.metadata, token.containsRTL);\n                    result.push(lastLinePart);\n                }\n                lastLinePart = new LinePart(charOffset + 1, 'mtkcontrol', token.metadata, false);\n                result.push(lastLinePart);\n            }\n        }\n        if (charOffset > lastLinePart.endIndex) {\n            // emit previous part if it has text\n            lastLinePart = new LinePart(tokenEndIndex, token.type, token.metadata, token.containsRTL);\n            result.push(lastLinePart);\n        }\n    }\n    return result;\n}\n/**\n * Whitespace is rendered by \"replacing\" tokens with a special-purpose `mtkw` type that is later recognized in the rendering phase.\n * Moreover, a token is created for every visual indent because on some fonts the glyphs used for rendering whitespace (&rarr; or &middot;) do not have the same width as &nbsp;.\n * The rendering phase will generate `style=\"width:...\"` for these tokens.\n */\nfunction _applyRenderWhitespace(input, lineContent, len, tokens) {\n    const continuesWithWrappedLine = input.continuesWithWrappedLine;\n    const fauxIndentLength = input.fauxIndentLength;\n    const tabSize = input.tabSize;\n    const startVisibleColumn = input.startVisibleColumn;\n    const useMonospaceOptimizations = input.useMonospaceOptimizations;\n    const selections = input.selectionsOnLine;\n    const onlyBoundary = (input.renderWhitespace === 1 /* RenderWhitespace.Boundary */);\n    const onlyTrailing = (input.renderWhitespace === 3 /* RenderWhitespace.Trailing */);\n    const generateLinePartForEachWhitespace = (input.renderSpaceWidth !== input.spaceWidth);\n    const result = [];\n    let resultLen = 0;\n    let tokenIndex = 0;\n    let tokenType = tokens[tokenIndex].type;\n    let tokenContainsRTL = tokens[tokenIndex].containsRTL;\n    let tokenEndIndex = tokens[tokenIndex].endIndex;\n    const tokensLength = tokens.length;\n    let lineIsEmptyOrWhitespace = false;\n    let firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n    let lastNonWhitespaceIndex;\n    if (firstNonWhitespaceIndex === -1) {\n        lineIsEmptyOrWhitespace = true;\n        firstNonWhitespaceIndex = len;\n        lastNonWhitespaceIndex = len;\n    }\n    else {\n        lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n    }\n    let wasInWhitespace = false;\n    let currentSelectionIndex = 0;\n    let currentSelection = selections && selections[currentSelectionIndex];\n    let tmpIndent = startVisibleColumn % tabSize;\n    for (let charIndex = fauxIndentLength; charIndex < len; charIndex++) {\n        const chCode = lineContent.charCodeAt(charIndex);\n        if (currentSelection && charIndex >= currentSelection.endOffset) {\n            currentSelectionIndex++;\n            currentSelection = selections && selections[currentSelectionIndex];\n        }\n        let isInWhitespace;\n        if (charIndex < firstNonWhitespaceIndex || charIndex > lastNonWhitespaceIndex) {\n            // in leading or trailing whitespace\n            isInWhitespace = true;\n        }\n        else if (chCode === 9 /* CharCode.Tab */) {\n            // a tab character is rendered both in all and boundary cases\n            isInWhitespace = true;\n        }\n        else if (chCode === 32 /* CharCode.Space */) {\n            // hit a space character\n            if (onlyBoundary) {\n                // rendering only boundary whitespace\n                if (wasInWhitespace) {\n                    isInWhitespace = true;\n                }\n                else {\n                    const nextChCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */);\n                    isInWhitespace = (nextChCode === 32 /* CharCode.Space */ || nextChCode === 9 /* CharCode.Tab */);\n                }\n            }\n            else {\n                isInWhitespace = true;\n            }\n        }\n        else {\n            isInWhitespace = false;\n        }\n        // If rendering whitespace on selection, check that the charIndex falls within a selection\n        if (isInWhitespace && selections) {\n            isInWhitespace = !!currentSelection && currentSelection.startOffset <= charIndex && currentSelection.endOffset > charIndex;\n        }\n        // If rendering only trailing whitespace, check that the charIndex points to trailing whitespace.\n        if (isInWhitespace && onlyTrailing) {\n            isInWhitespace = lineIsEmptyOrWhitespace || charIndex > lastNonWhitespaceIndex;\n        }\n        if (isInWhitespace && tokenContainsRTL) {\n            // If the token contains RTL text, breaking it up into multiple line parts\n            // to render whitespace might affect the browser's bidi layout.\n            //\n            // We render whitespace in such tokens only if the whitespace\n            // is the leading or the trailing whitespace of the line,\n            // which doesn't affect the browser's bidi layout.\n            if (charIndex >= firstNonWhitespaceIndex && charIndex <= lastNonWhitespaceIndex) {\n                isInWhitespace = false;\n            }\n        }\n        if (wasInWhitespace) {\n            // was in whitespace token\n            if (!isInWhitespace || (!useMonospaceOptimizations && tmpIndent >= tabSize)) {\n                // leaving whitespace token or entering a new indent\n                if (generateLinePartForEachWhitespace) {\n                    const lastEndIndex = (resultLen > 0 ? result[resultLen - 1].endIndex : fauxIndentLength);\n                    for (let i = lastEndIndex + 1; i <= charIndex; i++) {\n                        result[resultLen++] = new LinePart(i, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n                    }\n                }\n                else {\n                    result[resultLen++] = new LinePart(charIndex, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n                }\n                tmpIndent = tmpIndent % tabSize;\n            }\n        }\n        else {\n            // was in regular token\n            if (charIndex === tokenEndIndex || (isInWhitespace && charIndex > fauxIndentLength)) {\n                result[resultLen++] = new LinePart(charIndex, tokenType, 0, tokenContainsRTL);\n                tmpIndent = tmpIndent % tabSize;\n            }\n        }\n        if (chCode === 9 /* CharCode.Tab */) {\n            tmpIndent = tabSize;\n        }\n        else if (strings.isFullWidthCharacter(chCode)) {\n            tmpIndent += 2;\n        }\n        else {\n            tmpIndent++;\n        }\n        wasInWhitespace = isInWhitespace;\n        while (charIndex === tokenEndIndex) {\n            tokenIndex++;\n            if (tokenIndex < tokensLength) {\n                tokenType = tokens[tokenIndex].type;\n                tokenContainsRTL = tokens[tokenIndex].containsRTL;\n                tokenEndIndex = tokens[tokenIndex].endIndex;\n            }\n            else {\n                break;\n            }\n        }\n    }\n    let generateWhitespace = false;\n    if (wasInWhitespace) {\n        // was in whitespace token\n        if (continuesWithWrappedLine && onlyBoundary) {\n            const lastCharCode = (len > 0 ? lineContent.charCodeAt(len - 1) : 0 /* CharCode.Null */);\n            const prevCharCode = (len > 1 ? lineContent.charCodeAt(len - 2) : 0 /* CharCode.Null */);\n            const isSingleTrailingSpace = (lastCharCode === 32 /* CharCode.Space */ && (prevCharCode !== 32 /* CharCode.Space */ && prevCharCode !== 9 /* CharCode.Tab */));\n            if (!isSingleTrailingSpace) {\n                generateWhitespace = true;\n            }\n        }\n        else {\n            generateWhitespace = true;\n        }\n    }\n    if (generateWhitespace) {\n        if (generateLinePartForEachWhitespace) {\n            const lastEndIndex = (resultLen > 0 ? result[resultLen - 1].endIndex : fauxIndentLength);\n            for (let i = lastEndIndex + 1; i <= len; i++) {\n                result[resultLen++] = new LinePart(i, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n            }\n        }\n        else {\n            result[resultLen++] = new LinePart(len, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n        }\n    }\n    else {\n        result[resultLen++] = new LinePart(len, tokenType, 0, tokenContainsRTL);\n    }\n    return result;\n}\n/**\n * Inline decorations are \"merged\" on top of tokens.\n * Special care must be taken when multiple inline decorations are at play and they overlap.\n */\nfunction _applyInlineDecorations(lineContent, len, tokens, _lineDecorations) {\n    _lineDecorations.sort(LineDecoration.compare);\n    const lineDecorations = LineDecorationsNormalizer.normalize(lineContent, _lineDecorations);\n    const lineDecorationsLen = lineDecorations.length;\n    let lineDecorationIndex = 0;\n    const result = [];\n    let resultLen = 0;\n    let lastResultEndIndex = 0;\n    for (let tokenIndex = 0, len = tokens.length; tokenIndex < len; tokenIndex++) {\n        const token = tokens[tokenIndex];\n        const tokenEndIndex = token.endIndex;\n        const tokenType = token.type;\n        const tokenMetadata = token.metadata;\n        const tokenContainsRTL = token.containsRTL;\n        while (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset < tokenEndIndex) {\n            const lineDecoration = lineDecorations[lineDecorationIndex];\n            if (lineDecoration.startOffset > lastResultEndIndex) {\n                lastResultEndIndex = lineDecoration.startOffset;\n                result[resultLen++] = new LinePart(lastResultEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n            }\n            if (lineDecoration.endOffset + 1 <= tokenEndIndex) {\n                // This line decoration ends before this token ends\n                lastResultEndIndex = lineDecoration.endOffset + 1;\n                result[resultLen++] = new LinePart(lastResultEndIndex, tokenType + ' ' + lineDecoration.className, tokenMetadata | lineDecoration.metadata, tokenContainsRTL);\n                lineDecorationIndex++;\n            }\n            else {\n                // This line decoration continues on to the next token\n                lastResultEndIndex = tokenEndIndex;\n                result[resultLen++] = new LinePart(lastResultEndIndex, tokenType + ' ' + lineDecoration.className, tokenMetadata | lineDecoration.metadata, tokenContainsRTL);\n                break;\n            }\n        }\n        if (tokenEndIndex > lastResultEndIndex) {\n            lastResultEndIndex = tokenEndIndex;\n            result[resultLen++] = new LinePart(lastResultEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n        }\n    }\n    const lastTokenEndIndex = tokens[tokens.length - 1].endIndex;\n    if (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset === lastTokenEndIndex) {\n        while (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset === lastTokenEndIndex) {\n            const lineDecoration = lineDecorations[lineDecorationIndex];\n            result[resultLen++] = new LinePart(lastResultEndIndex, lineDecoration.className, lineDecoration.metadata, false);\n            lineDecorationIndex++;\n        }\n    }\n    return result;\n}\n/**\n * This function is on purpose not split up into multiple functions to allow runtime type inference (i.e. performance reasons).\n * Notice how all the needed data is fully resolved and passed in (i.e. no other calls).\n */\nfunction _renderLine(input, sb) {\n    const fontIsMonospace = input.fontIsMonospace;\n    const canUseHalfwidthRightwardsArrow = input.canUseHalfwidthRightwardsArrow;\n    const containsForeignElements = input.containsForeignElements;\n    const lineContent = input.lineContent;\n    const len = input.len;\n    const isOverflowing = input.isOverflowing;\n    const overflowingCharCount = input.overflowingCharCount;\n    const parts = input.parts;\n    const fauxIndentLength = input.fauxIndentLength;\n    const tabSize = input.tabSize;\n    const startVisibleColumn = input.startVisibleColumn;\n    const containsRTL = input.containsRTL;\n    const spaceWidth = input.spaceWidth;\n    const renderSpaceCharCode = input.renderSpaceCharCode;\n    const renderWhitespace = input.renderWhitespace;\n    const renderControlCharacters = input.renderControlCharacters;\n    const characterMapping = new CharacterMapping(len + 1, parts.length);\n    let lastCharacterMappingDefined = false;\n    let charIndex = 0;\n    let visibleColumn = startVisibleColumn;\n    let charOffsetInPart = 0; // the character offset in the current part\n    let charHorizontalOffset = 0; // the character horizontal position in terms of chars relative to line start\n    let partDisplacement = 0;\n    if (containsRTL) {\n        sb.appendString('<span dir=\"ltr\">');\n    }\n    else {\n        sb.appendString('<span>');\n    }\n    for (let partIndex = 0, tokensLen = parts.length; partIndex < tokensLen; partIndex++) {\n        const part = parts[partIndex];\n        const partEndIndex = part.endIndex;\n        const partType = part.type;\n        const partContainsRTL = part.containsRTL;\n        const partRendersWhitespace = (renderWhitespace !== 0 /* RenderWhitespace.None */ && part.isWhitespace());\n        const partRendersWhitespaceWithWidth = partRendersWhitespace && !fontIsMonospace && (partType === 'mtkw' /*only whitespace*/ || !containsForeignElements);\n        const partIsEmptyAndHasPseudoAfter = (charIndex === partEndIndex && part.isPseudoAfter());\n        charOffsetInPart = 0;\n        sb.appendString('<span ');\n        if (partContainsRTL) {\n            sb.appendString('style=\"unicode-bidi:isolate\" ');\n        }\n        sb.appendString('class=\"');\n        sb.appendString(partRendersWhitespaceWithWidth ? 'mtkz' : partType);\n        sb.appendASCIICharCode(34 /* CharCode.DoubleQuote */);\n        if (partRendersWhitespace) {\n            let partWidth = 0;\n            {\n                let _charIndex = charIndex;\n                let _visibleColumn = visibleColumn;\n                for (; _charIndex < partEndIndex; _charIndex++) {\n                    const charCode = lineContent.charCodeAt(_charIndex);\n                    const charWidth = (charCode === 9 /* CharCode.Tab */ ? (tabSize - (_visibleColumn % tabSize)) : 1) | 0;\n                    partWidth += charWidth;\n                    if (_charIndex >= fauxIndentLength) {\n                        _visibleColumn += charWidth;\n                    }\n                }\n            }\n            if (partRendersWhitespaceWithWidth) {\n                sb.appendString(' style=\"width:');\n                sb.appendString(String(spaceWidth * partWidth));\n                sb.appendString('px\"');\n            }\n            sb.appendASCIICharCode(62 /* CharCode.GreaterThan */);\n            for (; charIndex < partEndIndex; charIndex++) {\n                characterMapping.setColumnInfo(charIndex + 1, partIndex - partDisplacement, charOffsetInPart, charHorizontalOffset);\n                partDisplacement = 0;\n                const charCode = lineContent.charCodeAt(charIndex);\n                let producedCharacters;\n                let charWidth;\n                if (charCode === 9 /* CharCode.Tab */) {\n                    producedCharacters = (tabSize - (visibleColumn % tabSize)) | 0;\n                    charWidth = producedCharacters;\n                    if (!canUseHalfwidthRightwardsArrow || charWidth > 1) {\n                        sb.appendCharCode(0x2192); // RIGHTWARDS ARROW\n                    }\n                    else {\n                        sb.appendCharCode(0xFFEB); // HALFWIDTH RIGHTWARDS ARROW\n                    }\n                    for (let space = 2; space <= charWidth; space++) {\n                        sb.appendCharCode(0xA0); // &nbsp;\n                    }\n                }\n                else { // must be CharCode.Space\n                    producedCharacters = 2;\n                    charWidth = 1;\n                    sb.appendCharCode(renderSpaceCharCode); // &middot; or word separator middle dot\n                    sb.appendCharCode(0x200C); // ZERO WIDTH NON-JOINER\n                }\n                charOffsetInPart += producedCharacters;\n                charHorizontalOffset += charWidth;\n                if (charIndex >= fauxIndentLength) {\n                    visibleColumn += charWidth;\n                }\n            }\n        }\n        else {\n            sb.appendASCIICharCode(62 /* CharCode.GreaterThan */);\n            for (; charIndex < partEndIndex; charIndex++) {\n                characterMapping.setColumnInfo(charIndex + 1, partIndex - partDisplacement, charOffsetInPart, charHorizontalOffset);\n                partDisplacement = 0;\n                const charCode = lineContent.charCodeAt(charIndex);\n                let producedCharacters = 1;\n                let charWidth = 1;\n                switch (charCode) {\n                    case 9 /* CharCode.Tab */:\n                        producedCharacters = (tabSize - (visibleColumn % tabSize));\n                        charWidth = producedCharacters;\n                        for (let space = 1; space <= producedCharacters; space++) {\n                            sb.appendCharCode(0xA0); // &nbsp;\n                        }\n                        break;\n                    case 32 /* CharCode.Space */:\n                        sb.appendCharCode(0xA0); // &nbsp;\n                        break;\n                    case 60 /* CharCode.LessThan */:\n                        sb.appendString('&lt;');\n                        break;\n                    case 62 /* CharCode.GreaterThan */:\n                        sb.appendString('&gt;');\n                        break;\n                    case 38 /* CharCode.Ampersand */:\n                        sb.appendString('&amp;');\n                        break;\n                    case 0 /* CharCode.Null */:\n                        if (renderControlCharacters) {\n                            // See https://unicode-table.com/en/blocks/control-pictures/\n                            sb.appendCharCode(9216);\n                        }\n                        else {\n                            sb.appendString('&#00;');\n                        }\n                        break;\n                    case 65279 /* CharCode.UTF8_BOM */:\n                    case 8232 /* CharCode.LINE_SEPARATOR */:\n                    case 8233 /* CharCode.PARAGRAPH_SEPARATOR */:\n                    case 133 /* CharCode.NEXT_LINE */:\n                        sb.appendCharCode(0xFFFD);\n                        break;\n                    default:\n                        if (strings.isFullWidthCharacter(charCode)) {\n                            charWidth++;\n                        }\n                        // See https://unicode-table.com/en/blocks/control-pictures/\n                        if (renderControlCharacters && charCode < 32) {\n                            sb.appendCharCode(9216 + charCode);\n                        }\n                        else if (renderControlCharacters && charCode === 127) {\n                            // DEL\n                            sb.appendCharCode(9249);\n                        }\n                        else if (renderControlCharacters && isControlCharacter(charCode)) {\n                            sb.appendString('[U+');\n                            sb.appendString(to4CharHex(charCode));\n                            sb.appendString(']');\n                            producedCharacters = 8;\n                            charWidth = producedCharacters;\n                        }\n                        else {\n                            sb.appendCharCode(charCode);\n                        }\n                }\n                charOffsetInPart += producedCharacters;\n                charHorizontalOffset += charWidth;\n                if (charIndex >= fauxIndentLength) {\n                    visibleColumn += charWidth;\n                }\n            }\n        }\n        if (partIsEmptyAndHasPseudoAfter) {\n            partDisplacement++;\n        }\n        else {\n            partDisplacement = 0;\n        }\n        if (charIndex >= len && !lastCharacterMappingDefined && part.isPseudoAfter()) {\n            lastCharacterMappingDefined = true;\n            characterMapping.setColumnInfo(charIndex + 1, partIndex, charOffsetInPart, charHorizontalOffset);\n        }\n        sb.appendString('</span>');\n    }\n    if (!lastCharacterMappingDefined) {\n        // When getting client rects for the last character, we will position the\n        // text range at the end of the span, insteaf of at the beginning of next span\n        characterMapping.setColumnInfo(len + 1, parts.length - 1, charOffsetInPart, charHorizontalOffset);\n    }\n    if (isOverflowing) {\n        sb.appendString('<span class=\"mtkoverflow\">');\n        sb.appendString(nls.localize('showMore', \"Show more ({0})\", renderOverflowingCharCount(overflowingCharCount)));\n        sb.appendString('</span>');\n    }\n    sb.appendString('</span>');\n    return new RenderLineOutput(characterMapping, containsRTL, containsForeignElements);\n}\nfunction to4CharHex(n) {\n    return n.toString(16).toUpperCase().padStart(4, '0');\n}\nfunction renderOverflowingCharCount(n) {\n    if (n < 1024) {\n        return nls.localize('overflow.chars', \"{0} chars\", n);\n    }\n    if (n < 1024 * 1024) {\n        return `${(n / 1024).toFixed(1)} KB`;\n    }\n    return `${(n / 1024 / 1024).toFixed(1)} MB`;\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nexport class LineDecoration {\n    constructor(startColumn, endColumn, className, type) {\n        this.startColumn = startColumn;\n        this.endColumn = endColumn;\n        this.className = className;\n        this.type = type;\n        this._lineDecorationBrand = undefined;\n    }\n    static _equals(a, b) {\n        return (a.startColumn === b.startColumn\n            && a.endColumn === b.endColumn\n            && a.className === b.className\n            && a.type === b.type);\n    }\n    static equalsArr(a, b) {\n        const aLen = a.length;\n        const bLen = b.length;\n        if (aLen !== bLen) {\n            return false;\n        }\n        for (let i = 0; i < aLen; i++) {\n            if (!LineDecoration._equals(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static extractWrapped(arr, startOffset, endOffset) {\n        if (arr.length === 0) {\n            return arr;\n        }\n        const startColumn = startOffset + 1;\n        const endColumn = endOffset + 1;\n        const lineLength = endOffset - startOffset;\n        const r = [];\n        let rLength = 0;\n        for (const dec of arr) {\n            if (dec.endColumn <= startColumn || dec.startColumn >= endColumn) {\n                continue;\n            }\n            r[rLength++] = new LineDecoration(Math.max(1, dec.startColumn - startColumn + 1), Math.min(lineLength + 1, dec.endColumn - startColumn + 1), dec.className, dec.type);\n        }\n        return r;\n    }\n    static filter(lineDecorations, lineNumber, minLineColumn, maxLineColumn) {\n        if (lineDecorations.length === 0) {\n            return [];\n        }\n        const result = [];\n        let resultLen = 0;\n        for (let i = 0, len = lineDecorations.length; i < len; i++) {\n            const d = lineDecorations[i];\n            const range = d.range;\n            if (range.endLineNumber < lineNumber || range.startLineNumber > lineNumber) {\n                // Ignore decorations that sit outside this line\n                continue;\n            }\n            if (range.isEmpty() && (d.type === 0 /* InlineDecorationType.Regular */ || d.type === 3 /* InlineDecorationType.RegularAffectingLetterSpacing */)) {\n                // Ignore empty range decorations\n                continue;\n            }\n            const startColumn = (range.startLineNumber === lineNumber ? range.startColumn : minLineColumn);\n            const endColumn = (range.endLineNumber === lineNumber ? range.endColumn : maxLineColumn);\n            result[resultLen++] = new LineDecoration(startColumn, endColumn, d.inlineClassName, d.type);\n        }\n        return result;\n    }\n    static _typeCompare(a, b) {\n        const ORDER = [2, 0, 1, 3];\n        return ORDER[a] - ORDER[b];\n    }\n    static compare(a, b) {\n        if (a.startColumn !== b.startColumn) {\n            return a.startColumn - b.startColumn;\n        }\n        if (a.endColumn !== b.endColumn) {\n            return a.endColumn - b.endColumn;\n        }\n        const typeCmp = LineDecoration._typeCompare(a.type, b.type);\n        if (typeCmp !== 0) {\n            return typeCmp;\n        }\n        if (a.className !== b.className) {\n            return a.className < b.className ? -1 : 1;\n        }\n        return 0;\n    }\n}\nexport class DecorationSegment {\n    constructor(startOffset, endOffset, className, metadata) {\n        this.startOffset = startOffset;\n        this.endOffset = endOffset;\n        this.className = className;\n        this.metadata = metadata;\n    }\n}\nclass Stack {\n    constructor() {\n        this.stopOffsets = [];\n        this.classNames = [];\n        this.metadata = [];\n        this.count = 0;\n    }\n    static _metadata(metadata) {\n        let result = 0;\n        for (let i = 0, len = metadata.length; i < len; i++) {\n            result |= metadata[i];\n        }\n        return result;\n    }\n    consumeLowerThan(maxStopOffset, nextStartOffset, result) {\n        while (this.count > 0 && this.stopOffsets[0] < maxStopOffset) {\n            let i = 0;\n            // Take all equal stopping offsets\n            while (i + 1 < this.count && this.stopOffsets[i] === this.stopOffsets[i + 1]) {\n                i++;\n            }\n            // Basically we are consuming the first i + 1 elements of the stack\n            result.push(new DecorationSegment(nextStartOffset, this.stopOffsets[i], this.classNames.join(' '), Stack._metadata(this.metadata)));\n            nextStartOffset = this.stopOffsets[i] + 1;\n            // Consume them\n            this.stopOffsets.splice(0, i + 1);\n            this.classNames.splice(0, i + 1);\n            this.metadata.splice(0, i + 1);\n            this.count -= (i + 1);\n        }\n        if (this.count > 0 && nextStartOffset < maxStopOffset) {\n            result.push(new DecorationSegment(nextStartOffset, maxStopOffset - 1, this.classNames.join(' '), Stack._metadata(this.metadata)));\n            nextStartOffset = maxStopOffset;\n        }\n        return nextStartOffset;\n    }\n    insert(stopOffset, className, metadata) {\n        if (this.count === 0 || this.stopOffsets[this.count - 1] <= stopOffset) {\n            // Insert at the end\n            this.stopOffsets.push(stopOffset);\n            this.classNames.push(className);\n            this.metadata.push(metadata);\n        }\n        else {\n            // Find the insertion position for `stopOffset`\n            for (let i = 0; i < this.count; i++) {\n                if (this.stopOffsets[i] >= stopOffset) {\n                    this.stopOffsets.splice(i, 0, stopOffset);\n                    this.classNames.splice(i, 0, className);\n                    this.metadata.splice(i, 0, metadata);\n                    break;\n                }\n            }\n        }\n        this.count++;\n        return;\n    }\n}\nexport class LineDecorationsNormalizer {\n    /**\n     * Normalize line decorations. Overlapping decorations will generate multiple segments\n     */\n    static normalize(lineContent, lineDecorations) {\n        if (lineDecorations.length === 0) {\n            return [];\n        }\n        const result = [];\n        const stack = new Stack();\n        let nextStartOffset = 0;\n        for (let i = 0, len = lineDecorations.length; i < len; i++) {\n            const d = lineDecorations[i];\n            let startColumn = d.startColumn;\n            let endColumn = d.endColumn;\n            const className = d.className;\n            const metadata = (d.type === 1 /* InlineDecorationType.Before */\n                ? 2 /* LinePartMetadata.PSEUDO_BEFORE */\n                : d.type === 2 /* InlineDecorationType.After */\n                    ? 4 /* LinePartMetadata.PSEUDO_AFTER */\n                    : 0);\n            // If the position would end up in the middle of a high-low surrogate pair, we move it to before the pair\n            if (startColumn > 1) {\n                const charCodeBefore = lineContent.charCodeAt(startColumn - 2);\n                if (strings.isHighSurrogate(charCodeBefore)) {\n                    startColumn--;\n                }\n            }\n            if (endColumn > 1) {\n                const charCodeBefore = lineContent.charCodeAt(endColumn - 2);\n                if (strings.isHighSurrogate(charCodeBefore)) {\n                    endColumn--;\n                }\n            }\n            const currentStartOffset = startColumn - 1;\n            const currentEndOffset = endColumn - 2;\n            nextStartOffset = stack.consumeLowerThan(currentStartOffset, nextStartOffset, result);\n            if (stack.count === 0) {\n                nextStartOffset = currentStartOffset;\n            }\n            stack.insert(currentEndOffset, className, metadata);\n        }\n        stack.consumeLowerThan(1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, nextStartOffset, result);\n        return result;\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class LinePart {\n    constructor(\n    /**\n     * last char index of this token (not inclusive).\n     */\n    endIndex, type, metadata, containsRTL) {\n        this.endIndex = endIndex;\n        this.type = type;\n        this.metadata = metadata;\n        this.containsRTL = containsRTL;\n        this._linePartBrand = undefined;\n    }\n    isWhitespace() {\n        return (this.metadata & 1 /* LinePartMetadata.IS_WHITESPACE_MASK */ ? true : false);\n    }\n    isPseudoAfter() {\n        return (this.metadata & 4 /* LinePartMetadata.PSEUDO_AFTER_MASK */ ? true : false);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../base/common/arrays.js';\nimport * as strings from '../../base/common/strings.js';\nimport { Range } from './core/range.js';\nexport class Viewport {\n    constructor(top, left, width, height) {\n        this._viewportBrand = undefined;\n        this.top = top | 0;\n        this.left = left | 0;\n        this.width = width | 0;\n        this.height = height | 0;\n    }\n}\nexport class MinimapLinesRenderingData {\n    constructor(tabSize, data) {\n        this.tabSize = tabSize;\n        this.data = data;\n    }\n}\nexport class ViewLineData {\n    constructor(content, continuesWithWrappedLine, minColumn, maxColumn, startVisibleColumn, tokens, inlineDecorations) {\n        this._viewLineDataBrand = undefined;\n        this.content = content;\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\n        this.minColumn = minColumn;\n        this.maxColumn = maxColumn;\n        this.startVisibleColumn = startVisibleColumn;\n        this.tokens = tokens;\n        this.inlineDecorations = inlineDecorations;\n    }\n}\nexport class ViewLineRenderingData {\n    constructor(minColumn, maxColumn, content, continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, tokens, inlineDecorations, tabSize, startVisibleColumn) {\n        this.minColumn = minColumn;\n        this.maxColumn = maxColumn;\n        this.content = content;\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\n        this.isBasicASCII = ViewLineRenderingData.isBasicASCII(content, mightContainNonBasicASCII);\n        this.containsRTL = ViewLineRenderingData.containsRTL(content, this.isBasicASCII, mightContainRTL);\n        this.tokens = tokens;\n        this.inlineDecorations = inlineDecorations;\n        this.tabSize = tabSize;\n        this.startVisibleColumn = startVisibleColumn;\n    }\n    static isBasicASCII(lineContent, mightContainNonBasicASCII) {\n        if (mightContainNonBasicASCII) {\n            return strings.isBasicASCII(lineContent);\n        }\n        return true;\n    }\n    static containsRTL(lineContent, isBasicASCII, mightContainRTL) {\n        if (!isBasicASCII && mightContainRTL) {\n            return strings.containsRTL(lineContent);\n        }\n        return false;\n    }\n}\nexport class InlineDecoration {\n    constructor(range, inlineClassName, type) {\n        this.range = range;\n        this.inlineClassName = inlineClassName;\n        this.type = type;\n    }\n}\nexport class SingleLineInlineDecoration {\n    constructor(startOffset, endOffset, inlineClassName, inlineClassNameAffectsLetterSpacing) {\n        this.startOffset = startOffset;\n        this.endOffset = endOffset;\n        this.inlineClassName = inlineClassName;\n        this.inlineClassNameAffectsLetterSpacing = inlineClassNameAffectsLetterSpacing;\n    }\n    toInlineDecoration(lineNumber) {\n        return new InlineDecoration(new Range(lineNumber, this.startOffset + 1, lineNumber, this.endOffset + 1), this.inlineClassName, this.inlineClassNameAffectsLetterSpacing ? 3 /* InlineDecorationType.RegularAffectingLetterSpacing */ : 0 /* InlineDecorationType.Regular */);\n    }\n}\nexport class ViewModelDecoration {\n    constructor(range, options) {\n        this._viewModelDecorationBrand = undefined;\n        this.range = range;\n        this.options = options;\n    }\n}\nexport class OverviewRulerDecorationsGroup {\n    constructor(color, zIndex, \n    /**\n     * Decorations are encoded in a number array using the following scheme:\n     *  - 3*i = lane\n     *  - 3*i+1 = startLineNumber\n     *  - 3*i+2 = endLineNumber\n     */\n    data) {\n        this.color = color;\n        this.zIndex = zIndex;\n        this.data = data;\n    }\n    static compareByRenderingProps(a, b) {\n        if (a.zIndex === b.zIndex) {\n            if (a.color < b.color) {\n                return -1;\n            }\n            if (a.color > b.color) {\n                return 1;\n            }\n            return 0;\n        }\n        return a.zIndex - b.zIndex;\n    }\n    static equals(a, b) {\n        return (a.color === b.color\n            && a.zIndex === b.zIndex\n            && arrays.equals(a.data, b.data));\n    }\n    static equalsArr(a, b) {\n        return arrays.equals(a, b, OverviewRulerDecorationsGroup.equals);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar MonarchTokenizer_1;\n/**\n * Create a syntax highighter with a fully declarative JSON style lexer description\n * using regular expressions.\n */\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport * as languages from '../../../common/languages.js';\nimport { NullState, nullTokenizeEncoded, nullTokenize } from '../../../common/languages/nullTokenize.js';\nimport * as monarchCommon from './monarchCommon.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nconst CACHE_STACK_DEPTH = 5;\n/**\n * Reuse the same stack elements up to a certain depth.\n */\nclass MonarchStackElementFactory {\n    static create(parent, state) {\n        return this._INSTANCE.create(parent, state);\n    }\n    constructor(maxCacheDepth) {\n        this._maxCacheDepth = maxCacheDepth;\n        this._entries = Object.create(null);\n    }\n    create(parent, state) {\n        if (parent !== null && parent.depth >= this._maxCacheDepth) {\n            // no caching above a certain depth\n            return new MonarchStackElement(parent, state);\n        }\n        let stackElementId = MonarchStackElement.getStackElementId(parent);\n        if (stackElementId.length > 0) {\n            stackElementId += '|';\n        }\n        stackElementId += state;\n        let result = this._entries[stackElementId];\n        if (result) {\n            return result;\n        }\n        result = new MonarchStackElement(parent, state);\n        this._entries[stackElementId] = result;\n        return result;\n    }\n}\nMonarchStackElementFactory._INSTANCE = new MonarchStackElementFactory(CACHE_STACK_DEPTH);\nclass MonarchStackElement {\n    constructor(parent, state) {\n        this.parent = parent;\n        this.state = state;\n        this.depth = (this.parent ? this.parent.depth : 0) + 1;\n    }\n    static getStackElementId(element) {\n        let result = '';\n        while (element !== null) {\n            if (result.length > 0) {\n                result += '|';\n            }\n            result += element.state;\n            element = element.parent;\n        }\n        return result;\n    }\n    static _equals(a, b) {\n        while (a !== null && b !== null) {\n            if (a === b) {\n                return true;\n            }\n            if (a.state !== b.state) {\n                return false;\n            }\n            a = a.parent;\n            b = b.parent;\n        }\n        if (a === null && b === null) {\n            return true;\n        }\n        return false;\n    }\n    equals(other) {\n        return MonarchStackElement._equals(this, other);\n    }\n    push(state) {\n        return MonarchStackElementFactory.create(this, state);\n    }\n    pop() {\n        return this.parent;\n    }\n    popall() {\n        let result = this;\n        while (result.parent) {\n            result = result.parent;\n        }\n        return result;\n    }\n    switchTo(state) {\n        return MonarchStackElementFactory.create(this.parent, state);\n    }\n}\nclass EmbeddedLanguageData {\n    constructor(languageId, state) {\n        this.languageId = languageId;\n        this.state = state;\n    }\n    equals(other) {\n        return (this.languageId === other.languageId\n            && this.state.equals(other.state));\n    }\n    clone() {\n        const stateClone = this.state.clone();\n        // save an object\n        if (stateClone === this.state) {\n            return this;\n        }\n        return new EmbeddedLanguageData(this.languageId, this.state);\n    }\n}\n/**\n * Reuse the same line states up to a certain depth.\n */\nclass MonarchLineStateFactory {\n    static create(stack, embeddedLanguageData) {\n        return this._INSTANCE.create(stack, embeddedLanguageData);\n    }\n    constructor(maxCacheDepth) {\n        this._maxCacheDepth = maxCacheDepth;\n        this._entries = Object.create(null);\n    }\n    create(stack, embeddedLanguageData) {\n        if (embeddedLanguageData !== null) {\n            // no caching when embedding\n            return new MonarchLineState(stack, embeddedLanguageData);\n        }\n        if (stack !== null && stack.depth >= this._maxCacheDepth) {\n            // no caching above a certain depth\n            return new MonarchLineState(stack, embeddedLanguageData);\n        }\n        const stackElementId = MonarchStackElement.getStackElementId(stack);\n        let result = this._entries[stackElementId];\n        if (result) {\n            return result;\n        }\n        result = new MonarchLineState(stack, null);\n        this._entries[stackElementId] = result;\n        return result;\n    }\n}\nMonarchLineStateFactory._INSTANCE = new MonarchLineStateFactory(CACHE_STACK_DEPTH);\nclass MonarchLineState {\n    constructor(stack, embeddedLanguageData) {\n        this.stack = stack;\n        this.embeddedLanguageData = embeddedLanguageData;\n    }\n    clone() {\n        const embeddedlanguageDataClone = this.embeddedLanguageData ? this.embeddedLanguageData.clone() : null;\n        // save an object\n        if (embeddedlanguageDataClone === this.embeddedLanguageData) {\n            return this;\n        }\n        return MonarchLineStateFactory.create(this.stack, this.embeddedLanguageData);\n    }\n    equals(other) {\n        if (!(other instanceof MonarchLineState)) {\n            return false;\n        }\n        if (!this.stack.equals(other.stack)) {\n            return false;\n        }\n        if (this.embeddedLanguageData === null && other.embeddedLanguageData === null) {\n            return true;\n        }\n        if (this.embeddedLanguageData === null || other.embeddedLanguageData === null) {\n            return false;\n        }\n        return this.embeddedLanguageData.equals(other.embeddedLanguageData);\n    }\n}\nclass MonarchClassicTokensCollector {\n    constructor() {\n        this._tokens = [];\n        this._languageId = null;\n        this._lastTokenType = null;\n        this._lastTokenLanguage = null;\n    }\n    enterLanguage(languageId) {\n        this._languageId = languageId;\n    }\n    emit(startOffset, type) {\n        if (this._lastTokenType === type && this._lastTokenLanguage === this._languageId) {\n            return;\n        }\n        this._lastTokenType = type;\n        this._lastTokenLanguage = this._languageId;\n        this._tokens.push(new languages.Token(startOffset, type, this._languageId));\n    }\n    nestedLanguageTokenize(embeddedLanguageLine, hasEOL, embeddedLanguageData, offsetDelta) {\n        const nestedLanguageId = embeddedLanguageData.languageId;\n        const embeddedModeState = embeddedLanguageData.state;\n        const nestedLanguageTokenizationSupport = languages.TokenizationRegistry.get(nestedLanguageId);\n        if (!nestedLanguageTokenizationSupport) {\n            this.enterLanguage(nestedLanguageId);\n            this.emit(offsetDelta, '');\n            return embeddedModeState;\n        }\n        const nestedResult = nestedLanguageTokenizationSupport.tokenize(embeddedLanguageLine, hasEOL, embeddedModeState);\n        if (offsetDelta !== 0) {\n            for (const token of nestedResult.tokens) {\n                this._tokens.push(new languages.Token(token.offset + offsetDelta, token.type, token.language));\n            }\n        }\n        else {\n            this._tokens = this._tokens.concat(nestedResult.tokens);\n        }\n        this._lastTokenType = null;\n        this._lastTokenLanguage = null;\n        this._languageId = null;\n        return nestedResult.endState;\n    }\n    finalize(endState) {\n        return new languages.TokenizationResult(this._tokens, endState);\n    }\n}\nclass MonarchModernTokensCollector {\n    constructor(languageService, theme) {\n        this._languageService = languageService;\n        this._theme = theme;\n        this._prependTokens = null;\n        this._tokens = [];\n        this._currentLanguageId = 0 /* LanguageId.Null */;\n        this._lastTokenMetadata = 0;\n    }\n    enterLanguage(languageId) {\n        this._currentLanguageId = this._languageService.languageIdCodec.encodeLanguageId(languageId);\n    }\n    emit(startOffset, type) {\n        const metadata = this._theme.match(this._currentLanguageId, type) | 1024 /* MetadataConsts.BALANCED_BRACKETS_MASK */;\n        if (this._lastTokenMetadata === metadata) {\n            return;\n        }\n        this._lastTokenMetadata = metadata;\n        this._tokens.push(startOffset);\n        this._tokens.push(metadata);\n    }\n    static _merge(a, b, c) {\n        const aLen = (a !== null ? a.length : 0);\n        const bLen = b.length;\n        const cLen = (c !== null ? c.length : 0);\n        if (aLen === 0 && bLen === 0 && cLen === 0) {\n            return new Uint32Array(0);\n        }\n        if (aLen === 0 && bLen === 0) {\n            return c;\n        }\n        if (bLen === 0 && cLen === 0) {\n            return a;\n        }\n        const result = new Uint32Array(aLen + bLen + cLen);\n        if (a !== null) {\n            result.set(a);\n        }\n        for (let i = 0; i < bLen; i++) {\n            result[aLen + i] = b[i];\n        }\n        if (c !== null) {\n            result.set(c, aLen + bLen);\n        }\n        return result;\n    }\n    nestedLanguageTokenize(embeddedLanguageLine, hasEOL, embeddedLanguageData, offsetDelta) {\n        const nestedLanguageId = embeddedLanguageData.languageId;\n        const embeddedModeState = embeddedLanguageData.state;\n        const nestedLanguageTokenizationSupport = languages.TokenizationRegistry.get(nestedLanguageId);\n        if (!nestedLanguageTokenizationSupport) {\n            this.enterLanguage(nestedLanguageId);\n            this.emit(offsetDelta, '');\n            return embeddedModeState;\n        }\n        const nestedResult = nestedLanguageTokenizationSupport.tokenizeEncoded(embeddedLanguageLine, hasEOL, embeddedModeState);\n        if (offsetDelta !== 0) {\n            for (let i = 0, len = nestedResult.tokens.length; i < len; i += 2) {\n                nestedResult.tokens[i] += offsetDelta;\n            }\n        }\n        this._prependTokens = MonarchModernTokensCollector._merge(this._prependTokens, this._tokens, nestedResult.tokens);\n        this._tokens = [];\n        this._currentLanguageId = 0;\n        this._lastTokenMetadata = 0;\n        return nestedResult.endState;\n    }\n    finalize(endState) {\n        return new languages.EncodedTokenizationResult(MonarchModernTokensCollector._merge(this._prependTokens, this._tokens, null), endState);\n    }\n}\nlet MonarchTokenizer = MonarchTokenizer_1 = class MonarchTokenizer extends Disposable {\n    constructor(languageService, standaloneThemeService, languageId, lexer, _configurationService) {\n        super();\n        this._configurationService = _configurationService;\n        this._languageService = languageService;\n        this._standaloneThemeService = standaloneThemeService;\n        this._languageId = languageId;\n        this._lexer = lexer;\n        this._embeddedLanguages = Object.create(null);\n        this.embeddedLoaded = Promise.resolve(undefined);\n        // Set up listening for embedded modes\n        let emitting = false;\n        this._register(languages.TokenizationRegistry.onDidChange((e) => {\n            if (emitting) {\n                return;\n            }\n            let isOneOfMyEmbeddedModes = false;\n            for (let i = 0, len = e.changedLanguages.length; i < len; i++) {\n                const language = e.changedLanguages[i];\n                if (this._embeddedLanguages[language]) {\n                    isOneOfMyEmbeddedModes = true;\n                    break;\n                }\n            }\n            if (isOneOfMyEmbeddedModes) {\n                emitting = true;\n                languages.TokenizationRegistry.handleChange([this._languageId]);\n                emitting = false;\n            }\n        }));\n        this._maxTokenizationLineLength = this._configurationService.getValue('editor.maxTokenizationLineLength', {\n            overrideIdentifier: this._languageId\n        });\n        this._register(this._configurationService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration('editor.maxTokenizationLineLength')) {\n                this._maxTokenizationLineLength = this._configurationService.getValue('editor.maxTokenizationLineLength', {\n                    overrideIdentifier: this._languageId\n                });\n            }\n        }));\n    }\n    getLoadStatus() {\n        const promises = [];\n        for (const nestedLanguageId in this._embeddedLanguages) {\n            const tokenizationSupport = languages.TokenizationRegistry.get(nestedLanguageId);\n            if (tokenizationSupport) {\n                // The nested language is already loaded\n                if (tokenizationSupport instanceof MonarchTokenizer_1) {\n                    const nestedModeStatus = tokenizationSupport.getLoadStatus();\n                    if (nestedModeStatus.loaded === false) {\n                        promises.push(nestedModeStatus.promise);\n                    }\n                }\n                continue;\n            }\n            if (!languages.TokenizationRegistry.isResolved(nestedLanguageId)) {\n                // The nested language is in the process of being loaded\n                promises.push(languages.TokenizationRegistry.getOrCreate(nestedLanguageId));\n            }\n        }\n        if (promises.length === 0) {\n            return {\n                loaded: true\n            };\n        }\n        return {\n            loaded: false,\n            promise: Promise.all(promises).then(_ => undefined)\n        };\n    }\n    getInitialState() {\n        const rootState = MonarchStackElementFactory.create(null, this._lexer.start);\n        return MonarchLineStateFactory.create(rootState, null);\n    }\n    tokenize(line, hasEOL, lineState) {\n        if (line.length >= this._maxTokenizationLineLength) {\n            return nullTokenize(this._languageId, lineState);\n        }\n        const tokensCollector = new MonarchClassicTokensCollector();\n        const endLineState = this._tokenize(line, hasEOL, lineState, tokensCollector);\n        return tokensCollector.finalize(endLineState);\n    }\n    tokenizeEncoded(line, hasEOL, lineState) {\n        if (line.length >= this._maxTokenizationLineLength) {\n            return nullTokenizeEncoded(this._languageService.languageIdCodec.encodeLanguageId(this._languageId), lineState);\n        }\n        const tokensCollector = new MonarchModernTokensCollector(this._languageService, this._standaloneThemeService.getColorTheme().tokenTheme);\n        const endLineState = this._tokenize(line, hasEOL, lineState, tokensCollector);\n        return tokensCollector.finalize(endLineState);\n    }\n    _tokenize(line, hasEOL, lineState, collector) {\n        if (lineState.embeddedLanguageData) {\n            return this._nestedTokenize(line, hasEOL, lineState, 0, collector);\n        }\n        else {\n            return this._myTokenize(line, hasEOL, lineState, 0, collector);\n        }\n    }\n    _findLeavingNestedLanguageOffset(line, state) {\n        let rules = this._lexer.tokenizer[state.stack.state];\n        if (!rules) {\n            rules = monarchCommon.findRules(this._lexer, state.stack.state); // do parent matching\n            if (!rules) {\n                throw monarchCommon.createError(this._lexer, 'tokenizer state is not defined: ' + state.stack.state);\n            }\n        }\n        let popOffset = -1;\n        let hasEmbeddedPopRule = false;\n        for (const rule of rules) {\n            if (!monarchCommon.isIAction(rule.action) || rule.action.nextEmbedded !== '@pop') {\n                continue;\n            }\n            hasEmbeddedPopRule = true;\n            let regex = rule.regex;\n            const regexSource = rule.regex.source;\n            if (regexSource.substr(0, 4) === '^(?:' && regexSource.substr(regexSource.length - 1, 1) === ')') {\n                const flags = (regex.ignoreCase ? 'i' : '') + (regex.unicode ? 'u' : '');\n                regex = new RegExp(regexSource.substr(4, regexSource.length - 5), flags);\n            }\n            const result = line.search(regex);\n            if (result === -1 || (result !== 0 && rule.matchOnlyAtLineStart)) {\n                continue;\n            }\n            if (popOffset === -1 || result < popOffset) {\n                popOffset = result;\n            }\n        }\n        if (!hasEmbeddedPopRule) {\n            throw monarchCommon.createError(this._lexer, 'no rule containing nextEmbedded: \"@pop\" in tokenizer embedded state: ' + state.stack.state);\n        }\n        return popOffset;\n    }\n    _nestedTokenize(line, hasEOL, lineState, offsetDelta, tokensCollector) {\n        const popOffset = this._findLeavingNestedLanguageOffset(line, lineState);\n        if (popOffset === -1) {\n            // tokenization will not leave nested language\n            const nestedEndState = tokensCollector.nestedLanguageTokenize(line, hasEOL, lineState.embeddedLanguageData, offsetDelta);\n            return MonarchLineStateFactory.create(lineState.stack, new EmbeddedLanguageData(lineState.embeddedLanguageData.languageId, nestedEndState));\n        }\n        const nestedLanguageLine = line.substring(0, popOffset);\n        if (nestedLanguageLine.length > 0) {\n            // tokenize with the nested language\n            tokensCollector.nestedLanguageTokenize(nestedLanguageLine, false, lineState.embeddedLanguageData, offsetDelta);\n        }\n        const restOfTheLine = line.substring(popOffset);\n        return this._myTokenize(restOfTheLine, hasEOL, lineState, offsetDelta + popOffset, tokensCollector);\n    }\n    _safeRuleName(rule) {\n        if (rule) {\n            return rule.name;\n        }\n        return '(unknown)';\n    }\n    _myTokenize(lineWithoutLF, hasEOL, lineState, offsetDelta, tokensCollector) {\n        tokensCollector.enterLanguage(this._languageId);\n        const lineWithoutLFLength = lineWithoutLF.length;\n        const line = (hasEOL && this._lexer.includeLF ? lineWithoutLF + '\\n' : lineWithoutLF);\n        const lineLength = line.length;\n        let embeddedLanguageData = lineState.embeddedLanguageData;\n        let stack = lineState.stack;\n        let pos = 0;\n        let groupMatching = null;\n        // See https://github.com/microsoft/monaco-editor/issues/1235\n        // Evaluate rules at least once for an empty line\n        let forceEvaluation = true;\n        while (forceEvaluation || pos < lineLength) {\n            const pos0 = pos;\n            const stackLen0 = stack.depth;\n            const groupLen0 = groupMatching ? groupMatching.groups.length : 0;\n            const state = stack.state;\n            let matches = null;\n            let matched = null;\n            let action = null;\n            let rule = null;\n            let enteringEmbeddedLanguage = null;\n            // check if we need to process group matches first\n            if (groupMatching) {\n                matches = groupMatching.matches;\n                const groupEntry = groupMatching.groups.shift();\n                matched = groupEntry.matched;\n                action = groupEntry.action;\n                rule = groupMatching.rule;\n                // cleanup if necessary\n                if (groupMatching.groups.length === 0) {\n                    groupMatching = null;\n                }\n            }\n            else {\n                // otherwise we match on the token stream\n                if (!forceEvaluation && pos >= lineLength) {\n                    // nothing to do\n                    break;\n                }\n                forceEvaluation = false;\n                // get the rules for this state\n                let rules = this._lexer.tokenizer[state];\n                if (!rules) {\n                    rules = monarchCommon.findRules(this._lexer, state); // do parent matching\n                    if (!rules) {\n                        throw monarchCommon.createError(this._lexer, 'tokenizer state is not defined: ' + state);\n                    }\n                }\n                // try each rule until we match\n                const restOfLine = line.substr(pos);\n                for (const rule of rules) {\n                    if (pos === 0 || !rule.matchOnlyAtLineStart) {\n                        matches = restOfLine.match(rule.regex);\n                        if (matches) {\n                            matched = matches[0];\n                            action = rule.action;\n                            break;\n                        }\n                    }\n                }\n            }\n            // We matched 'rule' with 'matches' and 'action'\n            if (!matches) {\n                matches = [''];\n                matched = '';\n            }\n            if (!action) {\n                // bad: we didn't match anything, and there is no action to take\n                // we need to advance the stream or we get progress trouble\n                if (pos < lineLength) {\n                    matches = [line.charAt(pos)];\n                    matched = matches[0];\n                }\n                action = this._lexer.defaultToken;\n            }\n            if (matched === null) {\n                // should never happen, needed for strict null checking\n                break;\n            }\n            // advance stream\n            pos += matched.length;\n            // maybe call action function (used for 'cases')\n            while (monarchCommon.isFuzzyAction(action) && monarchCommon.isIAction(action) && action.test) {\n                action = action.test(matched, matches, state, pos === lineLength);\n            }\n            let result = null;\n            // set the result: either a string or an array of actions\n            if (typeof action === 'string' || Array.isArray(action)) {\n                result = action;\n            }\n            else if (action.group) {\n                result = action.group;\n            }\n            else if (action.token !== null && action.token !== undefined) {\n                // do $n replacements?\n                if (action.tokenSubst) {\n                    result = monarchCommon.substituteMatches(this._lexer, action.token, matched, matches, state);\n                }\n                else {\n                    result = action.token;\n                }\n                // enter embedded language?\n                if (action.nextEmbedded) {\n                    if (action.nextEmbedded === '@pop') {\n                        if (!embeddedLanguageData) {\n                            throw monarchCommon.createError(this._lexer, 'cannot pop embedded language if not inside one');\n                        }\n                        embeddedLanguageData = null;\n                    }\n                    else if (embeddedLanguageData) {\n                        throw monarchCommon.createError(this._lexer, 'cannot enter embedded language from within an embedded language');\n                    }\n                    else {\n                        enteringEmbeddedLanguage = monarchCommon.substituteMatches(this._lexer, action.nextEmbedded, matched, matches, state);\n                    }\n                }\n                // state transformations\n                if (action.goBack) { // back up the stream..\n                    pos = Math.max(0, pos - action.goBack);\n                }\n                if (action.switchTo && typeof action.switchTo === 'string') {\n                    let nextState = monarchCommon.substituteMatches(this._lexer, action.switchTo, matched, matches, state); // switch state without a push...\n                    if (nextState[0] === '@') {\n                        nextState = nextState.substr(1); // peel off starting '@'\n                    }\n                    if (!monarchCommon.findRules(this._lexer, nextState)) {\n                        throw monarchCommon.createError(this._lexer, 'trying to switch to a state \\'' + nextState + '\\' that is undefined in rule: ' + this._safeRuleName(rule));\n                    }\n                    else {\n                        stack = stack.switchTo(nextState);\n                    }\n                }\n                else if (action.transform && typeof action.transform === 'function') {\n                    throw monarchCommon.createError(this._lexer, 'action.transform not supported');\n                }\n                else if (action.next) {\n                    if (action.next === '@push') {\n                        if (stack.depth >= this._lexer.maxStack) {\n                            throw monarchCommon.createError(this._lexer, 'maximum tokenizer stack size reached: [' +\n                                stack.state + ',' + stack.parent.state + ',...]');\n                        }\n                        else {\n                            stack = stack.push(state);\n                        }\n                    }\n                    else if (action.next === '@pop') {\n                        if (stack.depth <= 1) {\n                            throw monarchCommon.createError(this._lexer, 'trying to pop an empty stack in rule: ' + this._safeRuleName(rule));\n                        }\n                        else {\n                            stack = stack.pop();\n                        }\n                    }\n                    else if (action.next === '@popall') {\n                        stack = stack.popall();\n                    }\n                    else {\n                        let nextState = monarchCommon.substituteMatches(this._lexer, action.next, matched, matches, state);\n                        if (nextState[0] === '@') {\n                            nextState = nextState.substr(1); // peel off starting '@'\n                        }\n                        if (!monarchCommon.findRules(this._lexer, nextState)) {\n                            throw monarchCommon.createError(this._lexer, 'trying to set a next state \\'' + nextState + '\\' that is undefined in rule: ' + this._safeRuleName(rule));\n                        }\n                        else {\n                            stack = stack.push(nextState);\n                        }\n                    }\n                }\n                if (action.log && typeof (action.log) === 'string') {\n                    monarchCommon.log(this._lexer, this._lexer.languageId + ': ' + monarchCommon.substituteMatches(this._lexer, action.log, matched, matches, state));\n                }\n            }\n            // check result\n            if (result === null) {\n                throw monarchCommon.createError(this._lexer, 'lexer rule has no well-defined action in rule: ' + this._safeRuleName(rule));\n            }\n            const computeNewStateForEmbeddedLanguage = (enteringEmbeddedLanguage) => {\n                // support language names, mime types, and language ids\n                const languageId = (this._languageService.getLanguageIdByLanguageName(enteringEmbeddedLanguage)\n                    || this._languageService.getLanguageIdByMimeType(enteringEmbeddedLanguage)\n                    || enteringEmbeddedLanguage);\n                const embeddedLanguageData = this._getNestedEmbeddedLanguageData(languageId);\n                if (pos < lineLength) {\n                    // there is content from the embedded language on this line\n                    const restOfLine = lineWithoutLF.substr(pos);\n                    return this._nestedTokenize(restOfLine, hasEOL, MonarchLineStateFactory.create(stack, embeddedLanguageData), offsetDelta + pos, tokensCollector);\n                }\n                else {\n                    return MonarchLineStateFactory.create(stack, embeddedLanguageData);\n                }\n            };\n            // is the result a group match?\n            if (Array.isArray(result)) {\n                if (groupMatching && groupMatching.groups.length > 0) {\n                    throw monarchCommon.createError(this._lexer, 'groups cannot be nested: ' + this._safeRuleName(rule));\n                }\n                if (matches.length !== result.length + 1) {\n                    throw monarchCommon.createError(this._lexer, 'matched number of groups does not match the number of actions in rule: ' + this._safeRuleName(rule));\n                }\n                let totalLen = 0;\n                for (let i = 1; i < matches.length; i++) {\n                    totalLen += matches[i].length;\n                }\n                if (totalLen !== matched.length) {\n                    throw monarchCommon.createError(this._lexer, 'with groups, all characters should be matched in consecutive groups in rule: ' + this._safeRuleName(rule));\n                }\n                groupMatching = {\n                    rule: rule,\n                    matches: matches,\n                    groups: []\n                };\n                for (let i = 0; i < result.length; i++) {\n                    groupMatching.groups[i] = {\n                        action: result[i],\n                        matched: matches[i + 1]\n                    };\n                }\n                pos -= matched.length;\n                // call recursively to initiate first result match\n                continue;\n            }\n            else {\n                // regular result\n                // check for '@rematch'\n                if (result === '@rematch') {\n                    pos -= matched.length;\n                    matched = ''; // better set the next state too..\n                    matches = null;\n                    result = '';\n                    // Even though `@rematch` was specified, if `nextEmbedded` also specified,\n                    // a state transition should occur.\n                    if (enteringEmbeddedLanguage !== null) {\n                        return computeNewStateForEmbeddedLanguage(enteringEmbeddedLanguage);\n                    }\n                }\n                // check progress\n                if (matched.length === 0) {\n                    if (lineLength === 0 || stackLen0 !== stack.depth || state !== stack.state || (!groupMatching ? 0 : groupMatching.groups.length) !== groupLen0) {\n                        continue;\n                    }\n                    else {\n                        throw monarchCommon.createError(this._lexer, 'no progress in tokenizer in rule: ' + this._safeRuleName(rule));\n                    }\n                }\n                // return the result (and check for brace matching)\n                // todo: for efficiency we could pre-sanitize tokenPostfix and substitutions\n                let tokenType = null;\n                if (monarchCommon.isString(result) && result.indexOf('@brackets') === 0) {\n                    const rest = result.substr('@brackets'.length);\n                    const bracket = findBracket(this._lexer, matched);\n                    if (!bracket) {\n                        throw monarchCommon.createError(this._lexer, '@brackets token returned but no bracket defined as: ' + matched);\n                    }\n                    tokenType = monarchCommon.sanitize(bracket.token + rest);\n                }\n                else {\n                    const token = (result === '' ? '' : result + this._lexer.tokenPostfix);\n                    tokenType = monarchCommon.sanitize(token);\n                }\n                if (pos0 < lineWithoutLFLength) {\n                    tokensCollector.emit(pos0 + offsetDelta, tokenType);\n                }\n            }\n            if (enteringEmbeddedLanguage !== null) {\n                return computeNewStateForEmbeddedLanguage(enteringEmbeddedLanguage);\n            }\n        }\n        return MonarchLineStateFactory.create(stack, embeddedLanguageData);\n    }\n    _getNestedEmbeddedLanguageData(languageId) {\n        if (!this._languageService.isRegisteredLanguageId(languageId)) {\n            return new EmbeddedLanguageData(languageId, NullState);\n        }\n        if (languageId !== this._languageId) {\n            // Fire language loading event\n            this._languageService.requestBasicLanguageFeatures(languageId);\n            languages.TokenizationRegistry.getOrCreate(languageId);\n            this._embeddedLanguages[languageId] = true;\n        }\n        const tokenizationSupport = languages.TokenizationRegistry.get(languageId);\n        if (tokenizationSupport) {\n            return new EmbeddedLanguageData(languageId, tokenizationSupport.getInitialState());\n        }\n        return new EmbeddedLanguageData(languageId, NullState);\n    }\n};\nMonarchTokenizer = MonarchTokenizer_1 = __decorate([\n    __param(4, IConfigurationService)\n], MonarchTokenizer);\nexport { MonarchTokenizer };\n/**\n * Searches for a bracket in the 'brackets' attribute that matches the input.\n */\nfunction findBracket(lexer, matched) {\n    if (!matched) {\n        return null;\n    }\n    matched = monarchCommon.fixCase(lexer, matched);\n    const brackets = lexer.brackets;\n    for (const bracket of brackets) {\n        if (bracket.open === matched) {\n            return { token: bracket.token, bracketType: 1 /* monarchCommon.MonarchBracket.Open */ };\n        }\n        else if (bracket.close === matched) {\n            return { token: bracket.token, bracketType: -1 /* monarchCommon.MonarchBracket.Close */ };\n        }\n    }\n    return null;\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function isFuzzyActionArr(what) {\n    return (Array.isArray(what));\n}\nexport function isFuzzyAction(what) {\n    return !isFuzzyActionArr(what);\n}\nexport function isString(what) {\n    return (typeof what === 'string');\n}\nexport function isIAction(what) {\n    return !isString(what);\n}\n// Small helper functions\n/**\n * Is a string null, undefined, or empty?\n */\nexport function empty(s) {\n    return (s ? false : true);\n}\n/**\n * Puts a string to lower case if 'ignoreCase' is set.\n */\nexport function fixCase(lexer, str) {\n    return (lexer.ignoreCase && str ? str.toLowerCase() : str);\n}\n/**\n * Ensures there are no bad characters in a CSS token class.\n */\nexport function sanitize(s) {\n    return s.replace(/[&<>'\"_]/g, '-'); // used on all output token CSS classes\n}\n// Logging\n/**\n * Logs a message.\n */\nexport function log(lexer, msg) {\n    console.log(`${lexer.languageId}: ${msg}`);\n}\n// Throwing errors\nexport function createError(lexer, msg) {\n    return new Error(`${lexer.languageId}: ${msg}`);\n}\n// Helper functions for rule finding and substitution\n/**\n * substituteMatches is used on lexer strings and can substitutes predefined patterns:\n * \t\t$$  => $\n * \t\t$#  => id\n * \t\t$n  => matched entry n\n * \t\t@attr => contents of lexer[attr]\n *\n * See documentation for more info\n */\nexport function substituteMatches(lexer, str, id, matches, state) {\n    const re = /\\$((\\$)|(#)|(\\d\\d?)|[sS](\\d\\d?)|@(\\w+))/g;\n    let stateMatches = null;\n    return str.replace(re, function (full, sub, dollar, hash, n, s, attr, ofs, total) {\n        if (!empty(dollar)) {\n            return '$'; // $$\n        }\n        if (!empty(hash)) {\n            return fixCase(lexer, id); // default $#\n        }\n        if (!empty(n) && n < matches.length) {\n            return fixCase(lexer, matches[n]); // $n\n        }\n        if (!empty(attr) && lexer && typeof (lexer[attr]) === 'string') {\n            return lexer[attr]; //@attribute\n        }\n        if (stateMatches === null) { // split state on demand\n            stateMatches = state.split('.');\n            stateMatches.unshift(state);\n        }\n        if (!empty(s) && s < stateMatches.length) {\n            return fixCase(lexer, stateMatches[s]); //$Sn\n        }\n        return '';\n    });\n}\n/**\n * Find the tokenizer rules for a specific state (i.e. next action)\n */\nexport function findRules(lexer, inState) {\n    let state = inState;\n    while (state && state.length > 0) {\n        const rules = lexer.tokenizer[state];\n        if (rules) {\n            return rules;\n        }\n        const idx = state.lastIndexOf('.');\n        if (idx < 0) {\n            state = null; // no further parent\n        }\n        else {\n            state = state.substr(0, idx);\n        }\n    }\n    return null;\n}\n/**\n * Is a certain state defined? In contrast to 'findRules' this works on a ILexerMin.\n * This is used during compilation where we may know the defined states\n * but not yet whether the corresponding rules are correct.\n */\nexport function stateExists(lexer, inState) {\n    let state = inState;\n    while (state && state.length > 0) {\n        const exist = lexer.stateNames[state];\n        if (exist) {\n            return true;\n        }\n        const idx = state.lastIndexOf('.');\n        if (idx < 0) {\n            state = null; // no further parent\n        }\n        else {\n            state = state.substr(0, idx);\n        }\n    }\n    return false;\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport * as aria from '../../../base/browser/ui/aria/aria.js';\nimport { Disposable, toDisposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\nimport { CodeEditorWidget } from '../../browser/widget/codeEditorWidget.js';\nimport { InternalEditorAction } from '../../common/editorAction.js';\nimport { StandaloneKeybindingService, updateConfigurationService } from './standaloneServices.js';\nimport { IStandaloneThemeService } from '../common/standaloneTheme.js';\nimport { MenuId, MenuRegistry } from '../../../platform/actions/common/actions.js';\nimport { CommandsRegistry, ICommandService } from '../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr, IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { IContextMenuService } from '../../../platform/contextview/browser/contextView.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../platform/keybinding/common/keybinding.js';\nimport { INotificationService } from '../../../platform/notification/common/notification.js';\nimport { IThemeService } from '../../../platform/theme/common/themeService.js';\nimport { IAccessibilityService } from '../../../platform/accessibility/common/accessibility.js';\nimport { StandaloneCodeEditorNLS } from '../../common/standaloneStrings.js';\nimport { IClipboardService } from '../../../platform/clipboard/common/clipboardService.js';\nimport { IEditorProgressService } from '../../../platform/progress/common/progress.js';\nimport { IModelService } from '../../common/services/model.js';\nimport { ILanguageService } from '../../common/languages/language.js';\nimport { StandaloneCodeEditorService } from './standaloneCodeEditorService.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../common/languages/modesRegistry.js';\nimport { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry.js';\nimport { ILanguageFeaturesService } from '../../common/services/languageFeatures.js';\nimport { DiffEditorWidget } from '../../browser/widget/diffEditor/diffEditorWidget.js';\nimport { IAccessibilitySignalService } from '../../../platform/accessibilitySignal/browser/accessibilitySignalService.js';\nimport { mainWindow } from '../../../base/browser/window.js';\nimport { setHoverDelegateFactory } from '../../../base/browser/ui/hover/hoverDelegate.js';\nimport { WorkbenchHoverDelegate } from '../../../platform/hover/browser/hover.js';\nlet LAST_GENERATED_COMMAND_ID = 0;\nlet ariaDomNodeCreated = false;\n/**\n * Create ARIA dom node inside parent,\n * or only for the first editor instantiation inside document.body.\n * @param parent container element for ARIA dom node\n */\nfunction createAriaDomNode(parent) {\n    if (!parent) {\n        if (ariaDomNodeCreated) {\n            return;\n        }\n        ariaDomNodeCreated = true;\n    }\n    aria.setARIAContainer(parent || mainWindow.document.body);\n}\n/**\n * A code editor to be used both by the standalone editor and the standalone diff editor.\n */\nlet StandaloneCodeEditor = class StandaloneCodeEditor extends CodeEditorWidget {\n    constructor(domElement, _options, instantiationService, codeEditorService, commandService, contextKeyService, keybindingService, themeService, notificationService, accessibilityService, languageConfigurationService, languageFeaturesService) {\n        const options = { ..._options };\n        options.ariaLabel = options.ariaLabel || StandaloneCodeEditorNLS.editorViewAccessibleLabel;\n        options.ariaLabel = options.ariaLabel + ';' + (StandaloneCodeEditorNLS.accessibilityHelpMessage);\n        super(domElement, options, {}, instantiationService, codeEditorService, commandService, contextKeyService, themeService, notificationService, accessibilityService, languageConfigurationService, languageFeaturesService);\n        if (keybindingService instanceof StandaloneKeybindingService) {\n            this._standaloneKeybindingService = keybindingService;\n        }\n        else {\n            this._standaloneKeybindingService = null;\n        }\n        createAriaDomNode(options.ariaContainerElement);\n        setHoverDelegateFactory((placement, enableInstantHover) => instantiationService.createInstance(WorkbenchHoverDelegate, placement, enableInstantHover, {}));\n    }\n    addCommand(keybinding, handler, context) {\n        if (!this._standaloneKeybindingService) {\n            console.warn('Cannot add command because the editor is configured with an unrecognized KeybindingService');\n            return null;\n        }\n        const commandId = 'DYNAMIC_' + (++LAST_GENERATED_COMMAND_ID);\n        const whenExpression = ContextKeyExpr.deserialize(context);\n        this._standaloneKeybindingService.addDynamicKeybinding(commandId, keybinding, handler, whenExpression);\n        return commandId;\n    }\n    createContextKey(key, defaultValue) {\n        return this._contextKeyService.createKey(key, defaultValue);\n    }\n    addAction(_descriptor) {\n        if ((typeof _descriptor.id !== 'string') || (typeof _descriptor.label !== 'string') || (typeof _descriptor.run !== 'function')) {\n            throw new Error('Invalid action descriptor, `id`, `label` and `run` are required properties!');\n        }\n        if (!this._standaloneKeybindingService) {\n            console.warn('Cannot add keybinding because the editor is configured with an unrecognized KeybindingService');\n            return Disposable.None;\n        }\n        // Read descriptor options\n        const id = _descriptor.id;\n        const label = _descriptor.label;\n        const precondition = ContextKeyExpr.and(ContextKeyExpr.equals('editorId', this.getId()), ContextKeyExpr.deserialize(_descriptor.precondition));\n        const keybindings = _descriptor.keybindings;\n        const keybindingsWhen = ContextKeyExpr.and(precondition, ContextKeyExpr.deserialize(_descriptor.keybindingContext));\n        const contextMenuGroupId = _descriptor.contextMenuGroupId || null;\n        const contextMenuOrder = _descriptor.contextMenuOrder || 0;\n        const run = (_accessor, ...args) => {\n            return Promise.resolve(_descriptor.run(this, ...args));\n        };\n        const toDispose = new DisposableStore();\n        // Generate a unique id to allow the same descriptor.id across multiple editor instances\n        const uniqueId = this.getId() + ':' + id;\n        // Register the command\n        toDispose.add(CommandsRegistry.registerCommand(uniqueId, run));\n        // Register the context menu item\n        if (contextMenuGroupId) {\n            const menuItem = {\n                command: {\n                    id: uniqueId,\n                    title: label\n                },\n                when: precondition,\n                group: contextMenuGroupId,\n                order: contextMenuOrder\n            };\n            toDispose.add(MenuRegistry.appendMenuItem(MenuId.EditorContext, menuItem));\n        }\n        // Register the keybindings\n        if (Array.isArray(keybindings)) {\n            for (const kb of keybindings) {\n                toDispose.add(this._standaloneKeybindingService.addDynamicKeybinding(uniqueId, kb, run, keybindingsWhen));\n            }\n        }\n        // Finally, register an internal editor action\n        const internalAction = new InternalEditorAction(uniqueId, label, label, undefined, precondition, (...args) => Promise.resolve(_descriptor.run(this, ...args)), this._contextKeyService);\n        // Store it under the original id, such that trigger with the original id will work\n        this._actions.set(id, internalAction);\n        toDispose.add(toDisposable(() => {\n            this._actions.delete(id);\n        }));\n        return toDispose;\n    }\n    _triggerCommand(handlerId, payload) {\n        if (this._codeEditorService instanceof StandaloneCodeEditorService) {\n            // Help commands find this editor as the active editor\n            try {\n                this._codeEditorService.setActiveCodeEditor(this);\n                super._triggerCommand(handlerId, payload);\n            }\n            finally {\n                this._codeEditorService.setActiveCodeEditor(null);\n            }\n        }\n        else {\n            super._triggerCommand(handlerId, payload);\n        }\n    }\n};\nStandaloneCodeEditor = __decorate([\n    __param(2, IInstantiationService),\n    __param(3, ICodeEditorService),\n    __param(4, ICommandService),\n    __param(5, IContextKeyService),\n    __param(6, IKeybindingService),\n    __param(7, IThemeService),\n    __param(8, INotificationService),\n    __param(9, IAccessibilityService),\n    __param(10, ILanguageConfigurationService),\n    __param(11, ILanguageFeaturesService)\n], StandaloneCodeEditor);\nexport { StandaloneCodeEditor };\nlet StandaloneEditor = class StandaloneEditor extends StandaloneCodeEditor {\n    constructor(domElement, _options, instantiationService, codeEditorService, commandService, contextKeyService, keybindingService, themeService, notificationService, configurationService, accessibilityService, modelService, languageService, languageConfigurationService, languageFeaturesService) {\n        const options = { ..._options };\n        updateConfigurationService(configurationService, options, false);\n        const themeDomRegistration = themeService.registerEditorContainer(domElement);\n        if (typeof options.theme === 'string') {\n            themeService.setTheme(options.theme);\n        }\n        if (typeof options.autoDetectHighContrast !== 'undefined') {\n            themeService.setAutoDetectHighContrast(Boolean(options.autoDetectHighContrast));\n        }\n        const _model = options.model;\n        delete options.model;\n        super(domElement, options, instantiationService, codeEditorService, commandService, contextKeyService, keybindingService, themeService, notificationService, accessibilityService, languageConfigurationService, languageFeaturesService);\n        this._configurationService = configurationService;\n        this._standaloneThemeService = themeService;\n        this._register(themeDomRegistration);\n        let model;\n        if (typeof _model === 'undefined') {\n            const languageId = languageService.getLanguageIdByMimeType(options.language) || options.language || PLAINTEXT_LANGUAGE_ID;\n            model = createTextModel(modelService, languageService, options.value || '', languageId, undefined);\n            this._ownsModel = true;\n        }\n        else {\n            model = _model;\n            this._ownsModel = false;\n        }\n        this._attachModel(model);\n        if (model) {\n            const e = {\n                oldModelUrl: null,\n                newModelUrl: model.uri\n            };\n            this._onDidChangeModel.fire(e);\n        }\n    }\n    dispose() {\n        super.dispose();\n    }\n    updateOptions(newOptions) {\n        updateConfigurationService(this._configurationService, newOptions, false);\n        if (typeof newOptions.theme === 'string') {\n            this._standaloneThemeService.setTheme(newOptions.theme);\n        }\n        if (typeof newOptions.autoDetectHighContrast !== 'undefined') {\n            this._standaloneThemeService.setAutoDetectHighContrast(Boolean(newOptions.autoDetectHighContrast));\n        }\n        super.updateOptions(newOptions);\n    }\n    _postDetachModelCleanup(detachedModel) {\n        super._postDetachModelCleanup(detachedModel);\n        if (detachedModel && this._ownsModel) {\n            detachedModel.dispose();\n            this._ownsModel = false;\n        }\n    }\n};\nStandaloneEditor = __decorate([\n    __param(2, IInstantiationService),\n    __param(3, ICodeEditorService),\n    __param(4, ICommandService),\n    __param(5, IContextKeyService),\n    __param(6, IKeybindingService),\n    __param(7, IStandaloneThemeService),\n    __param(8, INotificationService),\n    __param(9, IConfigurationService),\n    __param(10, IAccessibilityService),\n    __param(11, IModelService),\n    __param(12, ILanguageService),\n    __param(13, ILanguageConfigurationService),\n    __param(14, ILanguageFeaturesService)\n], StandaloneEditor);\nexport { StandaloneEditor };\nlet StandaloneDiffEditor2 = class StandaloneDiffEditor2 extends DiffEditorWidget {\n    constructor(domElement, _options, instantiationService, contextKeyService, codeEditorService, themeService, notificationService, configurationService, contextMenuService, editorProgressService, clipboardService, accessibilitySignalService) {\n        const options = { ..._options };\n        updateConfigurationService(configurationService, options, true);\n        const themeDomRegistration = themeService.registerEditorContainer(domElement);\n        if (typeof options.theme === 'string') {\n            themeService.setTheme(options.theme);\n        }\n        if (typeof options.autoDetectHighContrast !== 'undefined') {\n            themeService.setAutoDetectHighContrast(Boolean(options.autoDetectHighContrast));\n        }\n        super(domElement, options, {}, contextKeyService, instantiationService, codeEditorService, accessibilitySignalService, editorProgressService);\n        this._configurationService = configurationService;\n        this._standaloneThemeService = themeService;\n        this._register(themeDomRegistration);\n    }\n    dispose() {\n        super.dispose();\n    }\n    updateOptions(newOptions) {\n        updateConfigurationService(this._configurationService, newOptions, true);\n        if (typeof newOptions.theme === 'string') {\n            this._standaloneThemeService.setTheme(newOptions.theme);\n        }\n        if (typeof newOptions.autoDetectHighContrast !== 'undefined') {\n            this._standaloneThemeService.setAutoDetectHighContrast(Boolean(newOptions.autoDetectHighContrast));\n        }\n        super.updateOptions(newOptions);\n    }\n    _createInnerEditor(instantiationService, container, options) {\n        return instantiationService.createInstance(StandaloneCodeEditor, container, options);\n    }\n    getOriginalEditor() {\n        return super.getOriginalEditor();\n    }\n    getModifiedEditor() {\n        return super.getModifiedEditor();\n    }\n    addCommand(keybinding, handler, context) {\n        return this.getModifiedEditor().addCommand(keybinding, handler, context);\n    }\n    createContextKey(key, defaultValue) {\n        return this.getModifiedEditor().createContextKey(key, defaultValue);\n    }\n    addAction(descriptor) {\n        return this.getModifiedEditor().addAction(descriptor);\n    }\n};\nStandaloneDiffEditor2 = __decorate([\n    __param(2, IInstantiationService),\n    __param(3, IContextKeyService),\n    __param(4, ICodeEditorService),\n    __param(5, IStandaloneThemeService),\n    __param(6, INotificationService),\n    __param(7, IConfigurationService),\n    __param(8, IContextMenuService),\n    __param(9, IEditorProgressService),\n    __param(10, IClipboardService),\n    __param(11, IAccessibilitySignalService)\n], StandaloneDiffEditor2);\nexport { StandaloneDiffEditor2 };\n/**\n * @internal\n */\nexport function createTextModel(modelService, languageService, value, languageId, uri) {\n    value = value || '';\n    if (!languageId) {\n        const firstLF = value.indexOf('\\n');\n        let firstLine = value;\n        if (firstLF !== -1) {\n            firstLine = value.substring(0, firstLF);\n        }\n        return doCreateModel(modelService, value, languageService.createByFilepathOrFirstLine(uri || null, firstLine), uri);\n    }\n    return doCreateModel(modelService, value, languageService.createById(languageId), uri);\n}\n/**\n * @internal\n */\nfunction doCreateModel(modelService, value, languageSelection, uri) {\n    return modelService.createModel(value, languageSelection, uri);\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { IMarkerDecorationsService } from '../../common/services/markerDecorations.js';\nimport { registerEditorContribution } from '../editorExtensions.js';\nlet MarkerDecorationsContribution = class MarkerDecorationsContribution {\n    constructor(_editor, _markerDecorationsService) {\n        // Doesn't do anything, just requires `IMarkerDecorationsService` to make sure it gets instantiated\n    }\n    dispose() {\n    }\n};\nMarkerDecorationsContribution.ID = 'editor.contrib.markerDecorations';\nMarkerDecorationsContribution = __decorate([\n    __param(1, IMarkerDecorationsService)\n], MarkerDecorationsContribution);\nexport { MarkerDecorationsContribution };\nregisterEditorContribution(MarkerDecorationsContribution.ID, MarkerDecorationsContribution, 0 /* EditorContributionInstantiation.Eager */); // eager because it instantiates IMarkerDecorationsService which is responsible for rendering squiggles\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar CodeEditorWidget_1;\nimport '../services/markerDecorations.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter, createEventDeliveryQueue } from '../../../base/common/event.js';\nimport { Disposable, dispose } from '../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport './media/editor.css';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { EditorConfiguration } from '../config/editorConfiguration.js';\nimport { TabFocus } from '../config/tabFocus.js';\nimport { EditorExtensionsRegistry } from '../editorExtensions.js';\nimport { ICodeEditorService } from '../services/codeEditorService.js';\nimport { View } from '../view.js';\nimport { DOMLineBreaksComputerFactory } from '../view/domLineBreaksComputer.js';\nimport { ViewUserInputEvents } from '../view/viewUserInputEvents.js';\nimport { CodeEditorContributions } from './codeEditorContributions.js';\nimport { filterValidationDecorations } from '../../common/config/editorOptions.js';\nimport { CursorColumns } from '../../common/core/cursorColumns.js';\nimport { editorUnnecessaryCodeOpacity } from '../../common/core/editorColorRegistry.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { WordOperations } from '../../common/cursor/cursorWordOperations.js';\nimport { InternalEditorAction } from '../../common/editorAction.js';\nimport * as editorCommon from '../../common/editorCommon.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nimport { ILanguageFeaturesService } from '../../common/services/languageFeatures.js';\nimport { MonospaceLineBreaksComputerFactory } from '../../common/viewModel/monospaceLineBreaksComputer.js';\nimport { ViewModel } from '../../common/viewModel/viewModelImpl.js';\nimport * as nls from '../../../nls.js';\nimport { IAccessibilityService } from '../../../platform/accessibility/common/accessibility.js';\nimport { ICommandService } from '../../../platform/commands/common/commands.js';\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { ServiceCollection } from '../../../platform/instantiation/common/serviceCollection.js';\nimport { INotificationService, Severity } from '../../../platform/notification/common/notification.js';\nimport { editorErrorForeground, editorHintForeground, editorInfoForeground, editorWarningForeground } from '../../../platform/theme/common/colorRegistry.js';\nimport { IThemeService, registerThemingParticipant } from '../../../platform/theme/common/themeService.js';\nlet EDITOR_ID = 0;\nclass ModelData {\n    constructor(model, viewModel, view, hasRealView, listenersToRemove, attachedView) {\n        this.model = model;\n        this.viewModel = viewModel;\n        this.view = view;\n        this.hasRealView = hasRealView;\n        this.listenersToRemove = listenersToRemove;\n        this.attachedView = attachedView;\n    }\n    dispose() {\n        dispose(this.listenersToRemove);\n        this.model.onBeforeDetached(this.attachedView);\n        if (this.hasRealView) {\n            this.view.dispose();\n        }\n        this.viewModel.dispose();\n    }\n}\nlet CodeEditorWidget = CodeEditorWidget_1 = class CodeEditorWidget extends Disposable {\n    //#endregion\n    get isSimpleWidget() {\n        return this._configuration.isSimpleWidget;\n    }\n    constructor(domElement, _options, codeEditorWidgetOptions, instantiationService, codeEditorService, commandService, contextKeyService, themeService, notificationService, accessibilityService, languageConfigurationService, languageFeaturesService) {\n        var _a;\n        super();\n        this.languageConfigurationService = languageConfigurationService;\n        //#region Eventing\n        this._deliveryQueue = createEventDeliveryQueue();\n        this._contributions = this._register(new CodeEditorContributions());\n        this._onDidDispose = this._register(new Emitter());\n        this.onDidDispose = this._onDidDispose.event;\n        this._onDidChangeModelContent = this._register(new Emitter({ deliveryQueue: this._deliveryQueue }));\n        this.onDidChangeModelContent = this._onDidChangeModelContent.event;\n        this._onDidChangeModelLanguage = this._register(new Emitter({ deliveryQueue: this._deliveryQueue }));\n        this.onDidChangeModelLanguage = this._onDidChangeModelLanguage.event;\n        this._onDidChangeModelLanguageConfiguration = this._register(new Emitter({ deliveryQueue: this._deliveryQueue }));\n        this.onDidChangeModelLanguageConfiguration = this._onDidChangeModelLanguageConfiguration.event;\n        this._onDidChangeModelOptions = this._register(new Emitter({ deliveryQueue: this._deliveryQueue }));\n        this.onDidChangeModelOptions = this._onDidChangeModelOptions.event;\n        this._onDidChangeModelDecorations = this._register(new Emitter({ deliveryQueue: this._deliveryQueue }));\n        this.onDidChangeModelDecorations = this._onDidChangeModelDecorations.event;\n        this._onDidChangeModelTokens = this._register(new Emitter({ deliveryQueue: this._deliveryQueue }));\n        this.onDidChangeModelTokens = this._onDidChangeModelTokens.event;\n        this._onDidChangeConfiguration = this._register(new Emitter({ deliveryQueue: this._deliveryQueue }));\n        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n        this._onWillChangeModel = this._register(new Emitter({ deliveryQueue: this._deliveryQueue }));\n        this.onWillChangeModel = this._onWillChangeModel.event;\n        this._onDidChangeModel = this._register(new Emitter({ deliveryQueue: this._deliveryQueue }));\n        this.onDidChangeModel = this._onDidChangeModel.event;\n        this._onDidChangeCursorPosition = this._register(new Emitter({ deliveryQueue: this._deliveryQueue }));\n        this.onDidChangeCursorPosition = this._onDidChangeCursorPosition.event;\n        this._onDidChangeCursorSelection = this._register(new Emitter({ deliveryQueue: this._deliveryQueue }));\n        this.onDidChangeCursorSelection = this._onDidChangeCursorSelection.event;\n        this._onDidAttemptReadOnlyEdit = this._register(new InteractionEmitter(this._contributions, this._deliveryQueue));\n        this.onDidAttemptReadOnlyEdit = this._onDidAttemptReadOnlyEdit.event;\n        this._onDidLayoutChange = this._register(new Emitter({ deliveryQueue: this._deliveryQueue }));\n        this.onDidLayoutChange = this._onDidLayoutChange.event;\n        this._editorTextFocus = this._register(new BooleanEventEmitter({ deliveryQueue: this._deliveryQueue }));\n        this.onDidFocusEditorText = this._editorTextFocus.onDidChangeToTrue;\n        this.onDidBlurEditorText = this._editorTextFocus.onDidChangeToFalse;\n        this._editorWidgetFocus = this._register(new BooleanEventEmitter({ deliveryQueue: this._deliveryQueue }));\n        this.onDidFocusEditorWidget = this._editorWidgetFocus.onDidChangeToTrue;\n        this.onDidBlurEditorWidget = this._editorWidgetFocus.onDidChangeToFalse;\n        this._onWillType = this._register(new InteractionEmitter(this._contributions, this._deliveryQueue));\n        this.onWillType = this._onWillType.event;\n        this._onDidType = this._register(new InteractionEmitter(this._contributions, this._deliveryQueue));\n        this.onDidType = this._onDidType.event;\n        this._onDidCompositionStart = this._register(new InteractionEmitter(this._contributions, this._deliveryQueue));\n        this.onDidCompositionStart = this._onDidCompositionStart.event;\n        this._onDidCompositionEnd = this._register(new InteractionEmitter(this._contributions, this._deliveryQueue));\n        this.onDidCompositionEnd = this._onDidCompositionEnd.event;\n        this._onDidPaste = this._register(new InteractionEmitter(this._contributions, this._deliveryQueue));\n        this.onDidPaste = this._onDidPaste.event;\n        this._onMouseUp = this._register(new InteractionEmitter(this._contributions, this._deliveryQueue));\n        this.onMouseUp = this._onMouseUp.event;\n        this._onMouseDown = this._register(new InteractionEmitter(this._contributions, this._deliveryQueue));\n        this.onMouseDown = this._onMouseDown.event;\n        this._onMouseDrag = this._register(new InteractionEmitter(this._contributions, this._deliveryQueue));\n        this.onMouseDrag = this._onMouseDrag.event;\n        this._onMouseDrop = this._register(new InteractionEmitter(this._contributions, this._deliveryQueue));\n        this.onMouseDrop = this._onMouseDrop.event;\n        this._onMouseDropCanceled = this._register(new InteractionEmitter(this._contributions, this._deliveryQueue));\n        this.onMouseDropCanceled = this._onMouseDropCanceled.event;\n        this._onDropIntoEditor = this._register(new InteractionEmitter(this._contributions, this._deliveryQueue));\n        this.onDropIntoEditor = this._onDropIntoEditor.event;\n        this._onContextMenu = this._register(new InteractionEmitter(this._contributions, this._deliveryQueue));\n        this.onContextMenu = this._onContextMenu.event;\n        this._onMouseMove = this._register(new InteractionEmitter(this._contributions, this._deliveryQueue));\n        this.onMouseMove = this._onMouseMove.event;\n        this._onMouseLeave = this._register(new InteractionEmitter(this._contributions, this._deliveryQueue));\n        this.onMouseLeave = this._onMouseLeave.event;\n        this._onMouseWheel = this._register(new InteractionEmitter(this._contributions, this._deliveryQueue));\n        this.onMouseWheel = this._onMouseWheel.event;\n        this._onKeyUp = this._register(new InteractionEmitter(this._contributions, this._deliveryQueue));\n        this.onKeyUp = this._onKeyUp.event;\n        this._onKeyDown = this._register(new InteractionEmitter(this._contributions, this._deliveryQueue));\n        this.onKeyDown = this._onKeyDown.event;\n        this._onDidContentSizeChange = this._register(new Emitter({ deliveryQueue: this._deliveryQueue }));\n        this.onDidContentSizeChange = this._onDidContentSizeChange.event;\n        this._onDidScrollChange = this._register(new Emitter({ deliveryQueue: this._deliveryQueue }));\n        this.onDidScrollChange = this._onDidScrollChange.event;\n        this._onDidChangeViewZones = this._register(new Emitter({ deliveryQueue: this._deliveryQueue }));\n        this.onDidChangeViewZones = this._onDidChangeViewZones.event;\n        this._onDidChangeHiddenAreas = this._register(new Emitter({ deliveryQueue: this._deliveryQueue }));\n        this.onDidChangeHiddenAreas = this._onDidChangeHiddenAreas.event;\n        this._actions = new Map();\n        this._bannerDomNode = null;\n        this._dropIntoEditorDecorations = this.createDecorationsCollection();\n        codeEditorService.willCreateCodeEditor();\n        const options = { ..._options };\n        this._domElement = domElement;\n        this._overflowWidgetsDomNode = options.overflowWidgetsDomNode;\n        delete options.overflowWidgetsDomNode;\n        this._id = (++EDITOR_ID);\n        this._decorationTypeKeysToIds = {};\n        this._decorationTypeSubtypes = {};\n        this._telemetryData = codeEditorWidgetOptions.telemetryData;\n        this._configuration = this._register(this._createConfiguration(codeEditorWidgetOptions.isSimpleWidget || false, options, accessibilityService));\n        this._register(this._configuration.onDidChange((e) => {\n            this._onDidChangeConfiguration.fire(e);\n            const options = this._configuration.options;\n            if (e.hasChanged(144 /* EditorOption.layoutInfo */)) {\n                const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n                this._onDidLayoutChange.fire(layoutInfo);\n            }\n        }));\n        this._contextKeyService = this._register(contextKeyService.createScoped(this._domElement));\n        this._notificationService = notificationService;\n        this._codeEditorService = codeEditorService;\n        this._commandService = commandService;\n        this._themeService = themeService;\n        this._register(new EditorContextKeysManager(this, this._contextKeyService));\n        this._register(new EditorModeContext(this, this._contextKeyService, languageFeaturesService));\n        this._instantiationService = instantiationService.createChild(new ServiceCollection([IContextKeyService, this._contextKeyService]));\n        this._modelData = null;\n        this._focusTracker = new CodeEditorWidgetFocusTracker(domElement, this._overflowWidgetsDomNode);\n        this._register(this._focusTracker.onChange(() => {\n            this._editorWidgetFocus.setValue(this._focusTracker.hasFocus());\n        }));\n        this._contentWidgets = {};\n        this._overlayWidgets = {};\n        this._glyphMarginWidgets = {};\n        let contributions;\n        if (Array.isArray(codeEditorWidgetOptions.contributions)) {\n            contributions = codeEditorWidgetOptions.contributions;\n        }\n        else {\n            contributions = EditorExtensionsRegistry.getEditorContributions();\n        }\n        this._contributions.initialize(this, contributions, this._instantiationService);\n        for (const action of EditorExtensionsRegistry.getEditorActions()) {\n            if (this._actions.has(action.id)) {\n                onUnexpectedError(new Error(`Cannot have two actions with the same id ${action.id}`));\n                continue;\n            }\n            const internalAction = new InternalEditorAction(action.id, action.label, action.alias, action.metadata, (_a = action.precondition) !== null && _a !== void 0 ? _a : undefined, (args) => {\n                return this._instantiationService.invokeFunction((accessor) => {\n                    return Promise.resolve(action.runEditorCommand(accessor, this, args));\n                });\n            }, this._contextKeyService);\n            this._actions.set(internalAction.id, internalAction);\n        }\n        const isDropIntoEnabled = () => {\n            return !this._configuration.options.get(91 /* EditorOption.readOnly */)\n                && this._configuration.options.get(36 /* EditorOption.dropIntoEditor */).enabled;\n        };\n        this._register(new dom.DragAndDropObserver(this._domElement, {\n            onDragOver: e => {\n                if (!isDropIntoEnabled()) {\n                    return;\n                }\n                const target = this.getTargetAtClientPoint(e.clientX, e.clientY);\n                if (target === null || target === void 0 ? void 0 : target.position) {\n                    this.showDropIndicatorAt(target.position);\n                }\n            },\n            onDrop: async (e) => {\n                if (!isDropIntoEnabled()) {\n                    return;\n                }\n                this.removeDropIndicator();\n                if (!e.dataTransfer) {\n                    return;\n                }\n                const target = this.getTargetAtClientPoint(e.clientX, e.clientY);\n                if (target === null || target === void 0 ? void 0 : target.position) {\n                    this._onDropIntoEditor.fire({ position: target.position, event: e });\n                }\n            },\n            onDragLeave: () => {\n                this.removeDropIndicator();\n            },\n            onDragEnd: () => {\n                this.removeDropIndicator();\n            },\n        }));\n        this._codeEditorService.addCodeEditor(this);\n    }\n    writeScreenReaderContent(reason) {\n        var _a;\n        (_a = this._modelData) === null || _a === void 0 ? void 0 : _a.view.writeScreenReaderContent(reason);\n    }\n    _createConfiguration(isSimpleWidget, options, accessibilityService) {\n        return new EditorConfiguration(isSimpleWidget, options, this._domElement, accessibilityService);\n    }\n    getId() {\n        return this.getEditorType() + ':' + this._id;\n    }\n    getEditorType() {\n        return editorCommon.EditorType.ICodeEditor;\n    }\n    dispose() {\n        this._codeEditorService.removeCodeEditor(this);\n        this._focusTracker.dispose();\n        this._actions.clear();\n        this._contentWidgets = {};\n        this._overlayWidgets = {};\n        this._removeDecorationTypes();\n        this._postDetachModelCleanup(this._detachModel());\n        this._onDidDispose.fire();\n        super.dispose();\n    }\n    invokeWithinContext(fn) {\n        return this._instantiationService.invokeFunction(fn);\n    }\n    updateOptions(newOptions) {\n        this._configuration.updateOptions(newOptions || {});\n    }\n    getOptions() {\n        return this._configuration.options;\n    }\n    getOption(id) {\n        return this._configuration.options.get(id);\n    }\n    getRawOptions() {\n        return this._configuration.getRawOptions();\n    }\n    getOverflowWidgetsDomNode() {\n        return this._overflowWidgetsDomNode;\n    }\n    getConfiguredWordAtPosition(position) {\n        if (!this._modelData) {\n            return null;\n        }\n        return WordOperations.getWordAtPosition(this._modelData.model, this._configuration.options.get(130 /* EditorOption.wordSeparators */), position);\n    }\n    getValue(options = null) {\n        if (!this._modelData) {\n            return '';\n        }\n        const preserveBOM = (options && options.preserveBOM) ? true : false;\n        let eolPreference = 0 /* EndOfLinePreference.TextDefined */;\n        if (options && options.lineEnding && options.lineEnding === '\\n') {\n            eolPreference = 1 /* EndOfLinePreference.LF */;\n        }\n        else if (options && options.lineEnding && options.lineEnding === '\\r\\n') {\n            eolPreference = 2 /* EndOfLinePreference.CRLF */;\n        }\n        return this._modelData.model.getValue(eolPreference, preserveBOM);\n    }\n    setValue(newValue) {\n        if (!this._modelData) {\n            return;\n        }\n        this._modelData.model.setValue(newValue);\n    }\n    getModel() {\n        if (!this._modelData) {\n            return null;\n        }\n        return this._modelData.model;\n    }\n    setModel(_model = null) {\n        var _a;\n        const model = _model;\n        if (this._modelData === null && model === null) {\n            // Current model is the new model\n            return;\n        }\n        if (this._modelData && this._modelData.model === model) {\n            // Current model is the new model\n            return;\n        }\n        const e = {\n            oldModelUrl: ((_a = this._modelData) === null || _a === void 0 ? void 0 : _a.model.uri) || null,\n            newModelUrl: (model === null || model === void 0 ? void 0 : model.uri) || null\n        };\n        this._onWillChangeModel.fire(e);\n        const hasTextFocus = this.hasTextFocus();\n        const detachedModel = this._detachModel();\n        this._attachModel(model);\n        if (hasTextFocus && this.hasModel()) {\n            this.focus();\n        }\n        this._removeDecorationTypes();\n        this._onDidChangeModel.fire(e);\n        this._postDetachModelCleanup(detachedModel);\n        this._contributionsDisposable = this._contributions.onAfterModelAttached();\n    }\n    _removeDecorationTypes() {\n        this._decorationTypeKeysToIds = {};\n        if (this._decorationTypeSubtypes) {\n            for (const decorationType in this._decorationTypeSubtypes) {\n                const subTypes = this._decorationTypeSubtypes[decorationType];\n                for (const subType in subTypes) {\n                    this._removeDecorationType(decorationType + '-' + subType);\n                }\n            }\n            this._decorationTypeSubtypes = {};\n        }\n    }\n    getVisibleRanges() {\n        if (!this._modelData) {\n            return [];\n        }\n        return this._modelData.viewModel.getVisibleRanges();\n    }\n    getVisibleRangesPlusViewportAboveBelow() {\n        if (!this._modelData) {\n            return [];\n        }\n        return this._modelData.viewModel.getVisibleRangesPlusViewportAboveBelow();\n    }\n    getWhitespaces() {\n        if (!this._modelData) {\n            return [];\n        }\n        return this._modelData.viewModel.viewLayout.getWhitespaces();\n    }\n    static _getVerticalOffsetAfterPosition(modelData, modelLineNumber, modelColumn, includeViewZones) {\n        const modelPosition = modelData.model.validatePosition({\n            lineNumber: modelLineNumber,\n            column: modelColumn\n        });\n        const viewPosition = modelData.viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n        return modelData.viewModel.viewLayout.getVerticalOffsetAfterLineNumber(viewPosition.lineNumber, includeViewZones);\n    }\n    getTopForLineNumber(lineNumber, includeViewZones = false) {\n        if (!this._modelData) {\n            return -1;\n        }\n        return CodeEditorWidget_1._getVerticalOffsetForPosition(this._modelData, lineNumber, 1, includeViewZones);\n    }\n    getTopForPosition(lineNumber, column) {\n        if (!this._modelData) {\n            return -1;\n        }\n        return CodeEditorWidget_1._getVerticalOffsetForPosition(this._modelData, lineNumber, column, false);\n    }\n    static _getVerticalOffsetForPosition(modelData, modelLineNumber, modelColumn, includeViewZones = false) {\n        const modelPosition = modelData.model.validatePosition({\n            lineNumber: modelLineNumber,\n            column: modelColumn\n        });\n        const viewPosition = modelData.viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n        return modelData.viewModel.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber, includeViewZones);\n    }\n    getBottomForLineNumber(lineNumber, includeViewZones = false) {\n        if (!this._modelData) {\n            return -1;\n        }\n        return CodeEditorWidget_1._getVerticalOffsetAfterPosition(this._modelData, lineNumber, 1, includeViewZones);\n    }\n    setHiddenAreas(ranges, source) {\n        var _a;\n        (_a = this._modelData) === null || _a === void 0 ? void 0 : _a.viewModel.setHiddenAreas(ranges.map(r => Range.lift(r)), source);\n    }\n    getVisibleColumnFromPosition(rawPosition) {\n        if (!this._modelData) {\n            return rawPosition.column;\n        }\n        const position = this._modelData.model.validatePosition(rawPosition);\n        const tabSize = this._modelData.model.getOptions().tabSize;\n        return CursorColumns.visibleColumnFromColumn(this._modelData.model.getLineContent(position.lineNumber), position.column, tabSize) + 1;\n    }\n    getPosition() {\n        if (!this._modelData) {\n            return null;\n        }\n        return this._modelData.viewModel.getPosition();\n    }\n    setPosition(position, source = 'api') {\n        if (!this._modelData) {\n            return;\n        }\n        if (!Position.isIPosition(position)) {\n            throw new Error('Invalid arguments');\n        }\n        this._modelData.viewModel.setSelections(source, [{\n                selectionStartLineNumber: position.lineNumber,\n                selectionStartColumn: position.column,\n                positionLineNumber: position.lineNumber,\n                positionColumn: position.column\n            }]);\n    }\n    _sendRevealRange(modelRange, verticalType, revealHorizontal, scrollType) {\n        if (!this._modelData) {\n            return;\n        }\n        if (!Range.isIRange(modelRange)) {\n            throw new Error('Invalid arguments');\n        }\n        const validatedModelRange = this._modelData.model.validateRange(modelRange);\n        const viewRange = this._modelData.viewModel.coordinatesConverter.convertModelRangeToViewRange(validatedModelRange);\n        this._modelData.viewModel.revealRange('api', revealHorizontal, viewRange, verticalType, scrollType);\n    }\n    revealLine(lineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._revealLine(lineNumber, 0 /* VerticalRevealType.Simple */, scrollType);\n    }\n    revealLineInCenter(lineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._revealLine(lineNumber, 1 /* VerticalRevealType.Center */, scrollType);\n    }\n    revealLineInCenterIfOutsideViewport(lineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._revealLine(lineNumber, 2 /* VerticalRevealType.CenterIfOutsideViewport */, scrollType);\n    }\n    revealLineNearTop(lineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._revealLine(lineNumber, 5 /* VerticalRevealType.NearTop */, scrollType);\n    }\n    _revealLine(lineNumber, revealType, scrollType) {\n        if (typeof lineNumber !== 'number') {\n            throw new Error('Invalid arguments');\n        }\n        this._sendRevealRange(new Range(lineNumber, 1, lineNumber, 1), revealType, false, scrollType);\n    }\n    revealPosition(position, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._revealPosition(position, 0 /* VerticalRevealType.Simple */, true, scrollType);\n    }\n    revealPositionInCenter(position, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._revealPosition(position, 1 /* VerticalRevealType.Center */, true, scrollType);\n    }\n    revealPositionInCenterIfOutsideViewport(position, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._revealPosition(position, 2 /* VerticalRevealType.CenterIfOutsideViewport */, true, scrollType);\n    }\n    revealPositionNearTop(position, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._revealPosition(position, 5 /* VerticalRevealType.NearTop */, true, scrollType);\n    }\n    _revealPosition(position, verticalType, revealHorizontal, scrollType) {\n        if (!Position.isIPosition(position)) {\n            throw new Error('Invalid arguments');\n        }\n        this._sendRevealRange(new Range(position.lineNumber, position.column, position.lineNumber, position.column), verticalType, revealHorizontal, scrollType);\n    }\n    getSelection() {\n        if (!this._modelData) {\n            return null;\n        }\n        return this._modelData.viewModel.getSelection();\n    }\n    getSelections() {\n        if (!this._modelData) {\n            return null;\n        }\n        return this._modelData.viewModel.getSelections();\n    }\n    setSelection(something, source = 'api') {\n        const isSelection = Selection.isISelection(something);\n        const isRange = Range.isIRange(something);\n        if (!isSelection && !isRange) {\n            throw new Error('Invalid arguments');\n        }\n        if (isSelection) {\n            this._setSelectionImpl(something, source);\n        }\n        else if (isRange) {\n            // act as if it was an IRange\n            const selection = {\n                selectionStartLineNumber: something.startLineNumber,\n                selectionStartColumn: something.startColumn,\n                positionLineNumber: something.endLineNumber,\n                positionColumn: something.endColumn\n            };\n            this._setSelectionImpl(selection, source);\n        }\n    }\n    _setSelectionImpl(sel, source) {\n        if (!this._modelData) {\n            return;\n        }\n        const selection = new Selection(sel.selectionStartLineNumber, sel.selectionStartColumn, sel.positionLineNumber, sel.positionColumn);\n        this._modelData.viewModel.setSelections(source, [selection]);\n    }\n    revealLines(startLineNumber, endLineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._revealLines(startLineNumber, endLineNumber, 0 /* VerticalRevealType.Simple */, scrollType);\n    }\n    revealLinesInCenter(startLineNumber, endLineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._revealLines(startLineNumber, endLineNumber, 1 /* VerticalRevealType.Center */, scrollType);\n    }\n    revealLinesInCenterIfOutsideViewport(startLineNumber, endLineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._revealLines(startLineNumber, endLineNumber, 2 /* VerticalRevealType.CenterIfOutsideViewport */, scrollType);\n    }\n    revealLinesNearTop(startLineNumber, endLineNumber, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._revealLines(startLineNumber, endLineNumber, 5 /* VerticalRevealType.NearTop */, scrollType);\n    }\n    _revealLines(startLineNumber, endLineNumber, verticalType, scrollType) {\n        if (typeof startLineNumber !== 'number' || typeof endLineNumber !== 'number') {\n            throw new Error('Invalid arguments');\n        }\n        this._sendRevealRange(new Range(startLineNumber, 1, endLineNumber, 1), verticalType, false, scrollType);\n    }\n    revealRange(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */, revealVerticalInCenter = false, revealHorizontal = true) {\n        this._revealRange(range, revealVerticalInCenter ? 1 /* VerticalRevealType.Center */ : 0 /* VerticalRevealType.Simple */, revealHorizontal, scrollType);\n    }\n    revealRangeInCenter(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._revealRange(range, 1 /* VerticalRevealType.Center */, true, scrollType);\n    }\n    revealRangeInCenterIfOutsideViewport(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._revealRange(range, 2 /* VerticalRevealType.CenterIfOutsideViewport */, true, scrollType);\n    }\n    revealRangeNearTop(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._revealRange(range, 5 /* VerticalRevealType.NearTop */, true, scrollType);\n    }\n    revealRangeNearTopIfOutsideViewport(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._revealRange(range, 6 /* VerticalRevealType.NearTopIfOutsideViewport */, true, scrollType);\n    }\n    revealRangeAtTop(range, scrollType = 0 /* editorCommon.ScrollType.Smooth */) {\n        this._revealRange(range, 3 /* VerticalRevealType.Top */, true, scrollType);\n    }\n    _revealRange(range, verticalType, revealHorizontal, scrollType) {\n        if (!Range.isIRange(range)) {\n            throw new Error('Invalid arguments');\n        }\n        this._sendRevealRange(Range.lift(range), verticalType, revealHorizontal, scrollType);\n    }\n    setSelections(ranges, source = 'api', reason = 0 /* CursorChangeReason.NotSet */) {\n        if (!this._modelData) {\n            return;\n        }\n        if (!ranges || ranges.length === 0) {\n            throw new Error('Invalid arguments');\n        }\n        for (let i = 0, len = ranges.length; i < len; i++) {\n            if (!Selection.isISelection(ranges[i])) {\n                throw new Error('Invalid arguments');\n            }\n        }\n        this._modelData.viewModel.setSelections(source, ranges, reason);\n    }\n    getContentWidth() {\n        if (!this._modelData) {\n            return -1;\n        }\n        return this._modelData.viewModel.viewLayout.getContentWidth();\n    }\n    getScrollWidth() {\n        if (!this._modelData) {\n            return -1;\n        }\n        return this._modelData.viewModel.viewLayout.getScrollWidth();\n    }\n    getScrollLeft() {\n        if (!this._modelData) {\n            return -1;\n        }\n        return this._modelData.viewModel.viewLayout.getCurrentScrollLeft();\n    }\n    getContentHeight() {\n        if (!this._modelData) {\n            return -1;\n        }\n        return this._modelData.viewModel.viewLayout.getContentHeight();\n    }\n    getScrollHeight() {\n        if (!this._modelData) {\n            return -1;\n        }\n        return this._modelData.viewModel.viewLayout.getScrollHeight();\n    }\n    getScrollTop() {\n        if (!this._modelData) {\n            return -1;\n        }\n        return this._modelData.viewModel.viewLayout.getCurrentScrollTop();\n    }\n    setScrollLeft(newScrollLeft, scrollType = 1 /* editorCommon.ScrollType.Immediate */) {\n        if (!this._modelData) {\n            return;\n        }\n        if (typeof newScrollLeft !== 'number') {\n            throw new Error('Invalid arguments');\n        }\n        this._modelData.viewModel.viewLayout.setScrollPosition({\n            scrollLeft: newScrollLeft\n        }, scrollType);\n    }\n    setScrollTop(newScrollTop, scrollType = 1 /* editorCommon.ScrollType.Immediate */) {\n        if (!this._modelData) {\n            return;\n        }\n        if (typeof newScrollTop !== 'number') {\n            throw new Error('Invalid arguments');\n        }\n        this._modelData.viewModel.viewLayout.setScrollPosition({\n            scrollTop: newScrollTop\n        }, scrollType);\n    }\n    setScrollPosition(position, scrollType = 1 /* editorCommon.ScrollType.Immediate */) {\n        if (!this._modelData) {\n            return;\n        }\n        this._modelData.viewModel.viewLayout.setScrollPosition(position, scrollType);\n    }\n    hasPendingScrollAnimation() {\n        if (!this._modelData) {\n            return false;\n        }\n        return this._modelData.viewModel.viewLayout.hasPendingScrollAnimation();\n    }\n    saveViewState() {\n        if (!this._modelData) {\n            return null;\n        }\n        const contributionsState = this._contributions.saveViewState();\n        const cursorState = this._modelData.viewModel.saveCursorState();\n        const viewState = this._modelData.viewModel.saveState();\n        return {\n            cursorState: cursorState,\n            viewState: viewState,\n            contributionsState: contributionsState\n        };\n    }\n    restoreViewState(s) {\n        if (!this._modelData || !this._modelData.hasRealView) {\n            return;\n        }\n        const codeEditorState = s;\n        if (codeEditorState && codeEditorState.cursorState && codeEditorState.viewState) {\n            const cursorState = codeEditorState.cursorState;\n            if (Array.isArray(cursorState)) {\n                if (cursorState.length > 0) {\n                    this._modelData.viewModel.restoreCursorState(cursorState);\n                }\n            }\n            else {\n                // Backwards compatibility\n                this._modelData.viewModel.restoreCursorState([cursorState]);\n            }\n            this._contributions.restoreViewState(codeEditorState.contributionsState || {});\n            const reducedState = this._modelData.viewModel.reduceRestoreState(codeEditorState.viewState);\n            this._modelData.view.restoreState(reducedState);\n        }\n    }\n    handleInitialized() {\n        var _a;\n        (_a = this._getViewModel()) === null || _a === void 0 ? void 0 : _a.visibleLinesStabilized();\n    }\n    getContribution(id) {\n        return this._contributions.get(id);\n    }\n    getActions() {\n        return Array.from(this._actions.values());\n    }\n    getSupportedActions() {\n        let result = this.getActions();\n        result = result.filter(action => action.isSupported());\n        return result;\n    }\n    getAction(id) {\n        return this._actions.get(id) || null;\n    }\n    trigger(source, handlerId, payload) {\n        payload = payload || {};\n        switch (handlerId) {\n            case \"compositionStart\" /* editorCommon.Handler.CompositionStart */:\n                this._startComposition();\n                return;\n            case \"compositionEnd\" /* editorCommon.Handler.CompositionEnd */:\n                this._endComposition(source);\n                return;\n            case \"type\" /* editorCommon.Handler.Type */: {\n                const args = payload;\n                this._type(source, args.text || '');\n                return;\n            }\n            case \"replacePreviousChar\" /* editorCommon.Handler.ReplacePreviousChar */: {\n                const args = payload;\n                this._compositionType(source, args.text || '', args.replaceCharCnt || 0, 0, 0);\n                return;\n            }\n            case \"compositionType\" /* editorCommon.Handler.CompositionType */: {\n                const args = payload;\n                this._compositionType(source, args.text || '', args.replacePrevCharCnt || 0, args.replaceNextCharCnt || 0, args.positionDelta || 0);\n                return;\n            }\n            case \"paste\" /* editorCommon.Handler.Paste */: {\n                const args = payload;\n                this._paste(source, args.text || '', args.pasteOnNewLine || false, args.multicursorText || null, args.mode || null);\n                return;\n            }\n            case \"cut\" /* editorCommon.Handler.Cut */:\n                this._cut(source);\n                return;\n        }\n        const action = this.getAction(handlerId);\n        if (action) {\n            Promise.resolve(action.run(payload)).then(undefined, onUnexpectedError);\n            return;\n        }\n        if (!this._modelData) {\n            return;\n        }\n        if (this._triggerEditorCommand(source, handlerId, payload)) {\n            return;\n        }\n        this._triggerCommand(handlerId, payload);\n    }\n    _triggerCommand(handlerId, payload) {\n        this._commandService.executeCommand(handlerId, payload);\n    }\n    _startComposition() {\n        if (!this._modelData) {\n            return;\n        }\n        this._modelData.viewModel.startComposition();\n        this._onDidCompositionStart.fire();\n    }\n    _endComposition(source) {\n        if (!this._modelData) {\n            return;\n        }\n        this._modelData.viewModel.endComposition(source);\n        this._onDidCompositionEnd.fire();\n    }\n    _type(source, text) {\n        if (!this._modelData || text.length === 0) {\n            return;\n        }\n        if (source === 'keyboard') {\n            this._onWillType.fire(text);\n        }\n        this._modelData.viewModel.type(text, source);\n        if (source === 'keyboard') {\n            this._onDidType.fire(text);\n        }\n    }\n    _compositionType(source, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta) {\n        if (!this._modelData) {\n            return;\n        }\n        this._modelData.viewModel.compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source);\n    }\n    _paste(source, text, pasteOnNewLine, multicursorText, mode) {\n        if (!this._modelData || text.length === 0) {\n            return;\n        }\n        const viewModel = this._modelData.viewModel;\n        const startPosition = viewModel.getSelection().getStartPosition();\n        viewModel.paste(text, pasteOnNewLine, multicursorText, source);\n        const endPosition = viewModel.getSelection().getStartPosition();\n        if (source === 'keyboard') {\n            this._onDidPaste.fire({\n                range: new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column),\n                languageId: mode\n            });\n        }\n    }\n    _cut(source) {\n        if (!this._modelData) {\n            return;\n        }\n        this._modelData.viewModel.cut(source);\n    }\n    _triggerEditorCommand(source, handlerId, payload) {\n        const command = EditorExtensionsRegistry.getEditorCommand(handlerId);\n        if (command) {\n            payload = payload || {};\n            payload.source = source;\n            this._instantiationService.invokeFunction((accessor) => {\n                Promise.resolve(command.runEditorCommand(accessor, this, payload)).then(undefined, onUnexpectedError);\n            });\n            return true;\n        }\n        return false;\n    }\n    _getViewModel() {\n        if (!this._modelData) {\n            return null;\n        }\n        return this._modelData.viewModel;\n    }\n    pushUndoStop() {\n        if (!this._modelData) {\n            return false;\n        }\n        if (this._configuration.options.get(91 /* EditorOption.readOnly */)) {\n            // read only editor => sorry!\n            return false;\n        }\n        this._modelData.model.pushStackElement();\n        return true;\n    }\n    popUndoStop() {\n        if (!this._modelData) {\n            return false;\n        }\n        if (this._configuration.options.get(91 /* EditorOption.readOnly */)) {\n            // read only editor => sorry!\n            return false;\n        }\n        this._modelData.model.popStackElement();\n        return true;\n    }\n    executeEdits(source, edits, endCursorState) {\n        if (!this._modelData) {\n            return false;\n        }\n        if (this._configuration.options.get(91 /* EditorOption.readOnly */)) {\n            // read only editor => sorry!\n            return false;\n        }\n        let cursorStateComputer;\n        if (!endCursorState) {\n            cursorStateComputer = () => null;\n        }\n        else if (Array.isArray(endCursorState)) {\n            cursorStateComputer = () => endCursorState;\n        }\n        else {\n            cursorStateComputer = endCursorState;\n        }\n        this._modelData.viewModel.executeEdits(source, edits, cursorStateComputer);\n        return true;\n    }\n    executeCommand(source, command) {\n        if (!this._modelData) {\n            return;\n        }\n        this._modelData.viewModel.executeCommand(command, source);\n    }\n    executeCommands(source, commands) {\n        if (!this._modelData) {\n            return;\n        }\n        this._modelData.viewModel.executeCommands(commands, source);\n    }\n    createDecorationsCollection(decorations) {\n        return new EditorDecorationsCollection(this, decorations);\n    }\n    changeDecorations(callback) {\n        if (!this._modelData) {\n            // callback will not be called\n            return null;\n        }\n        return this._modelData.model.changeDecorations(callback, this._id);\n    }\n    getLineDecorations(lineNumber) {\n        if (!this._modelData) {\n            return null;\n        }\n        return this._modelData.model.getLineDecorations(lineNumber, this._id, filterValidationDecorations(this._configuration.options));\n    }\n    getDecorationsInRange(range) {\n        if (!this._modelData) {\n            return null;\n        }\n        return this._modelData.model.getDecorationsInRange(range, this._id, filterValidationDecorations(this._configuration.options));\n    }\n    /**\n     * @deprecated\n     */\n    deltaDecorations(oldDecorations, newDecorations) {\n        if (!this._modelData) {\n            return [];\n        }\n        if (oldDecorations.length === 0 && newDecorations.length === 0) {\n            return oldDecorations;\n        }\n        return this._modelData.model.deltaDecorations(oldDecorations, newDecorations, this._id);\n    }\n    removeDecorations(decorationIds) {\n        if (!this._modelData || decorationIds.length === 0) {\n            return;\n        }\n        this._modelData.model.changeDecorations((changeAccessor) => {\n            changeAccessor.deltaDecorations(decorationIds, []);\n        });\n    }\n    removeDecorationsByType(decorationTypeKey) {\n        // remove decorations for type and sub type\n        const oldDecorationsIds = this._decorationTypeKeysToIds[decorationTypeKey];\n        if (oldDecorationsIds) {\n            this.changeDecorations(accessor => accessor.deltaDecorations(oldDecorationsIds, []));\n        }\n        if (this._decorationTypeKeysToIds.hasOwnProperty(decorationTypeKey)) {\n            delete this._decorationTypeKeysToIds[decorationTypeKey];\n        }\n        if (this._decorationTypeSubtypes.hasOwnProperty(decorationTypeKey)) {\n            delete this._decorationTypeSubtypes[decorationTypeKey];\n        }\n    }\n    getLayoutInfo() {\n        const options = this._configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        return layoutInfo;\n    }\n    createOverviewRuler(cssClassName) {\n        if (!this._modelData || !this._modelData.hasRealView) {\n            return null;\n        }\n        return this._modelData.view.createOverviewRuler(cssClassName);\n    }\n    getContainerDomNode() {\n        return this._domElement;\n    }\n    getDomNode() {\n        if (!this._modelData || !this._modelData.hasRealView) {\n            return null;\n        }\n        return this._modelData.view.domNode.domNode;\n    }\n    delegateVerticalScrollbarPointerDown(browserEvent) {\n        if (!this._modelData || !this._modelData.hasRealView) {\n            return;\n        }\n        this._modelData.view.delegateVerticalScrollbarPointerDown(browserEvent);\n    }\n    delegateScrollFromMouseWheelEvent(browserEvent) {\n        if (!this._modelData || !this._modelData.hasRealView) {\n            return;\n        }\n        this._modelData.view.delegateScrollFromMouseWheelEvent(browserEvent);\n    }\n    layout(dimension, postponeRendering = false) {\n        this._configuration.observeContainer(dimension);\n        if (!postponeRendering) {\n            this.render();\n        }\n    }\n    focus() {\n        if (!this._modelData || !this._modelData.hasRealView) {\n            return;\n        }\n        this._modelData.view.focus();\n    }\n    hasTextFocus() {\n        if (!this._modelData || !this._modelData.hasRealView) {\n            return false;\n        }\n        return this._modelData.view.isFocused();\n    }\n    hasWidgetFocus() {\n        return this._focusTracker && this._focusTracker.hasFocus();\n    }\n    addContentWidget(widget) {\n        const widgetData = {\n            widget: widget,\n            position: widget.getPosition()\n        };\n        if (this._contentWidgets.hasOwnProperty(widget.getId())) {\n            console.warn('Overwriting a content widget with the same id:' + widget.getId());\n        }\n        this._contentWidgets[widget.getId()] = widgetData;\n        if (this._modelData && this._modelData.hasRealView) {\n            this._modelData.view.addContentWidget(widgetData);\n        }\n    }\n    layoutContentWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._contentWidgets.hasOwnProperty(widgetId)) {\n            const widgetData = this._contentWidgets[widgetId];\n            widgetData.position = widget.getPosition();\n            if (this._modelData && this._modelData.hasRealView) {\n                this._modelData.view.layoutContentWidget(widgetData);\n            }\n        }\n    }\n    removeContentWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._contentWidgets.hasOwnProperty(widgetId)) {\n            const widgetData = this._contentWidgets[widgetId];\n            delete this._contentWidgets[widgetId];\n            if (this._modelData && this._modelData.hasRealView) {\n                this._modelData.view.removeContentWidget(widgetData);\n            }\n        }\n    }\n    addOverlayWidget(widget) {\n        const widgetData = {\n            widget: widget,\n            position: widget.getPosition()\n        };\n        if (this._overlayWidgets.hasOwnProperty(widget.getId())) {\n            console.warn('Overwriting an overlay widget with the same id.');\n        }\n        this._overlayWidgets[widget.getId()] = widgetData;\n        if (this._modelData && this._modelData.hasRealView) {\n            this._modelData.view.addOverlayWidget(widgetData);\n        }\n    }\n    layoutOverlayWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._overlayWidgets.hasOwnProperty(widgetId)) {\n            const widgetData = this._overlayWidgets[widgetId];\n            widgetData.position = widget.getPosition();\n            if (this._modelData && this._modelData.hasRealView) {\n                this._modelData.view.layoutOverlayWidget(widgetData);\n            }\n        }\n    }\n    removeOverlayWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._overlayWidgets.hasOwnProperty(widgetId)) {\n            const widgetData = this._overlayWidgets[widgetId];\n            delete this._overlayWidgets[widgetId];\n            if (this._modelData && this._modelData.hasRealView) {\n                this._modelData.view.removeOverlayWidget(widgetData);\n            }\n        }\n    }\n    addGlyphMarginWidget(widget) {\n        const widgetData = {\n            widget: widget,\n            position: widget.getPosition()\n        };\n        if (this._glyphMarginWidgets.hasOwnProperty(widget.getId())) {\n            console.warn('Overwriting a glyph margin widget with the same id.');\n        }\n        this._glyphMarginWidgets[widget.getId()] = widgetData;\n        if (this._modelData && this._modelData.hasRealView) {\n            this._modelData.view.addGlyphMarginWidget(widgetData);\n        }\n    }\n    layoutGlyphMarginWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._glyphMarginWidgets.hasOwnProperty(widgetId)) {\n            const widgetData = this._glyphMarginWidgets[widgetId];\n            widgetData.position = widget.getPosition();\n            if (this._modelData && this._modelData.hasRealView) {\n                this._modelData.view.layoutGlyphMarginWidget(widgetData);\n            }\n        }\n    }\n    removeGlyphMarginWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._glyphMarginWidgets.hasOwnProperty(widgetId)) {\n            const widgetData = this._glyphMarginWidgets[widgetId];\n            delete this._glyphMarginWidgets[widgetId];\n            if (this._modelData && this._modelData.hasRealView) {\n                this._modelData.view.removeGlyphMarginWidget(widgetData);\n            }\n        }\n    }\n    changeViewZones(callback) {\n        if (!this._modelData || !this._modelData.hasRealView) {\n            return;\n        }\n        this._modelData.view.change(callback);\n    }\n    getTargetAtClientPoint(clientX, clientY) {\n        if (!this._modelData || !this._modelData.hasRealView) {\n            return null;\n        }\n        return this._modelData.view.getTargetAtClientPoint(clientX, clientY);\n    }\n    getScrolledVisiblePosition(rawPosition) {\n        if (!this._modelData || !this._modelData.hasRealView) {\n            return null;\n        }\n        const position = this._modelData.model.validatePosition(rawPosition);\n        const options = this._configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        const top = CodeEditorWidget_1._getVerticalOffsetForPosition(this._modelData, position.lineNumber, position.column) - this.getScrollTop();\n        const left = this._modelData.view.getOffsetForColumn(position.lineNumber, position.column) + layoutInfo.glyphMarginWidth + layoutInfo.lineNumbersWidth + layoutInfo.decorationsWidth - this.getScrollLeft();\n        return {\n            top: top,\n            left: left,\n            height: options.get(67 /* EditorOption.lineHeight */)\n        };\n    }\n    getOffsetForColumn(lineNumber, column) {\n        if (!this._modelData || !this._modelData.hasRealView) {\n            return -1;\n        }\n        return this._modelData.view.getOffsetForColumn(lineNumber, column);\n    }\n    render(forceRedraw = false) {\n        if (!this._modelData || !this._modelData.hasRealView) {\n            return;\n        }\n        this._modelData.view.render(true, forceRedraw);\n    }\n    setAriaOptions(options) {\n        if (!this._modelData || !this._modelData.hasRealView) {\n            return;\n        }\n        this._modelData.view.setAriaOptions(options);\n    }\n    applyFontInfo(target) {\n        applyFontInfo(target, this._configuration.options.get(50 /* EditorOption.fontInfo */));\n    }\n    setBanner(domNode, domNodeHeight) {\n        if (this._bannerDomNode && this._domElement.contains(this._bannerDomNode)) {\n            this._domElement.removeChild(this._bannerDomNode);\n        }\n        this._bannerDomNode = domNode;\n        this._configuration.setReservedHeight(domNode ? domNodeHeight : 0);\n        if (this._bannerDomNode) {\n            this._domElement.prepend(this._bannerDomNode);\n        }\n    }\n    _attachModel(model) {\n        if (!model) {\n            this._modelData = null;\n            return;\n        }\n        const listenersToRemove = [];\n        this._domElement.setAttribute('data-mode-id', model.getLanguageId());\n        this._configuration.setIsDominatedByLongLines(model.isDominatedByLongLines());\n        this._configuration.setModelLineCount(model.getLineCount());\n        const attachedView = model.onBeforeAttached();\n        const viewModel = new ViewModel(this._id, this._configuration, model, DOMLineBreaksComputerFactory.create(dom.getWindow(this._domElement)), MonospaceLineBreaksComputerFactory.create(this._configuration.options), (callback) => dom.scheduleAtNextAnimationFrame(dom.getWindow(this._domElement), callback), this.languageConfigurationService, this._themeService, attachedView);\n        // Someone might destroy the model from under the editor, so prevent any exceptions by setting a null model\n        listenersToRemove.push(model.onWillDispose(() => this.setModel(null)));\n        listenersToRemove.push(viewModel.onEvent((e) => {\n            switch (e.kind) {\n                case 0 /* OutgoingViewModelEventKind.ContentSizeChanged */:\n                    this._onDidContentSizeChange.fire(e);\n                    break;\n                case 1 /* OutgoingViewModelEventKind.FocusChanged */:\n                    this._editorTextFocus.setValue(e.hasFocus);\n                    break;\n                case 2 /* OutgoingViewModelEventKind.ScrollChanged */:\n                    this._onDidScrollChange.fire(e);\n                    break;\n                case 3 /* OutgoingViewModelEventKind.ViewZonesChanged */:\n                    this._onDidChangeViewZones.fire();\n                    break;\n                case 4 /* OutgoingViewModelEventKind.HiddenAreasChanged */:\n                    this._onDidChangeHiddenAreas.fire();\n                    break;\n                case 5 /* OutgoingViewModelEventKind.ReadOnlyEditAttempt */:\n                    this._onDidAttemptReadOnlyEdit.fire();\n                    break;\n                case 6 /* OutgoingViewModelEventKind.CursorStateChanged */: {\n                    if (e.reachedMaxCursorCount) {\n                        const multiCursorLimit = this.getOption(80 /* EditorOption.multiCursorLimit */);\n                        const message = nls.localize('cursors.maximum', \"The number of cursors has been limited to {0}. Consider using [find and replace](https://code.visualstudio.com/docs/editor/codebasics#_find-and-replace) for larger changes or increase the editor multi cursor limit setting.\", multiCursorLimit);\n                        this._notificationService.prompt(Severity.Warning, message, [\n                            {\n                                label: 'Find and Replace',\n                                run: () => {\n                                    this._commandService.executeCommand('editor.action.startFindReplaceAction');\n                                }\n                            },\n                            {\n                                label: nls.localize('goToSetting', 'Increase Multi Cursor Limit'),\n                                run: () => {\n                                    this._commandService.executeCommand('workbench.action.openSettings2', {\n                                        query: 'editor.multiCursorLimit'\n                                    });\n                                }\n                            }\n                        ]);\n                    }\n                    const positions = [];\n                    for (let i = 0, len = e.selections.length; i < len; i++) {\n                        positions[i] = e.selections[i].getPosition();\n                    }\n                    const e1 = {\n                        position: positions[0],\n                        secondaryPositions: positions.slice(1),\n                        reason: e.reason,\n                        source: e.source\n                    };\n                    this._onDidChangeCursorPosition.fire(e1);\n                    const e2 = {\n                        selection: e.selections[0],\n                        secondarySelections: e.selections.slice(1),\n                        modelVersionId: e.modelVersionId,\n                        oldSelections: e.oldSelections,\n                        oldModelVersionId: e.oldModelVersionId,\n                        source: e.source,\n                        reason: e.reason\n                    };\n                    this._onDidChangeCursorSelection.fire(e2);\n                    break;\n                }\n                case 7 /* OutgoingViewModelEventKind.ModelDecorationsChanged */:\n                    this._onDidChangeModelDecorations.fire(e.event);\n                    break;\n                case 8 /* OutgoingViewModelEventKind.ModelLanguageChanged */:\n                    this._domElement.setAttribute('data-mode-id', model.getLanguageId());\n                    this._onDidChangeModelLanguage.fire(e.event);\n                    break;\n                case 9 /* OutgoingViewModelEventKind.ModelLanguageConfigurationChanged */:\n                    this._onDidChangeModelLanguageConfiguration.fire(e.event);\n                    break;\n                case 10 /* OutgoingViewModelEventKind.ModelContentChanged */:\n                    this._onDidChangeModelContent.fire(e.event);\n                    break;\n                case 11 /* OutgoingViewModelEventKind.ModelOptionsChanged */:\n                    this._onDidChangeModelOptions.fire(e.event);\n                    break;\n                case 12 /* OutgoingViewModelEventKind.ModelTokensChanged */:\n                    this._onDidChangeModelTokens.fire(e.event);\n                    break;\n            }\n        }));\n        const [view, hasRealView] = this._createView(viewModel);\n        if (hasRealView) {\n            this._domElement.appendChild(view.domNode.domNode);\n            let keys = Object.keys(this._contentWidgets);\n            for (let i = 0, len = keys.length; i < len; i++) {\n                const widgetId = keys[i];\n                view.addContentWidget(this._contentWidgets[widgetId]);\n            }\n            keys = Object.keys(this._overlayWidgets);\n            for (let i = 0, len = keys.length; i < len; i++) {\n                const widgetId = keys[i];\n                view.addOverlayWidget(this._overlayWidgets[widgetId]);\n            }\n            keys = Object.keys(this._glyphMarginWidgets);\n            for (let i = 0, len = keys.length; i < len; i++) {\n                const widgetId = keys[i];\n                view.addGlyphMarginWidget(this._glyphMarginWidgets[widgetId]);\n            }\n            view.render(false, true);\n            view.domNode.domNode.setAttribute('data-uri', model.uri.toString());\n        }\n        this._modelData = new ModelData(model, viewModel, view, hasRealView, listenersToRemove, attachedView);\n    }\n    _createView(viewModel) {\n        let commandDelegate;\n        if (this.isSimpleWidget) {\n            commandDelegate = {\n                paste: (text, pasteOnNewLine, multicursorText, mode) => {\n                    this._paste('keyboard', text, pasteOnNewLine, multicursorText, mode);\n                },\n                type: (text) => {\n                    this._type('keyboard', text);\n                },\n                compositionType: (text, replacePrevCharCnt, replaceNextCharCnt, positionDelta) => {\n                    this._compositionType('keyboard', text, replacePrevCharCnt, replaceNextCharCnt, positionDelta);\n                },\n                startComposition: () => {\n                    this._startComposition();\n                },\n                endComposition: () => {\n                    this._endComposition('keyboard');\n                },\n                cut: () => {\n                    this._cut('keyboard');\n                }\n            };\n        }\n        else {\n            commandDelegate = {\n                paste: (text, pasteOnNewLine, multicursorText, mode) => {\n                    const payload = { text, pasteOnNewLine, multicursorText, mode };\n                    this._commandService.executeCommand(\"paste\" /* editorCommon.Handler.Paste */, payload);\n                },\n                type: (text) => {\n                    const payload = { text };\n                    this._commandService.executeCommand(\"type\" /* editorCommon.Handler.Type */, payload);\n                },\n                compositionType: (text, replacePrevCharCnt, replaceNextCharCnt, positionDelta) => {\n                    // Try if possible to go through the existing `replacePreviousChar` command\n                    if (replaceNextCharCnt || positionDelta) {\n                        // must be handled through the new command\n                        const payload = { text, replacePrevCharCnt, replaceNextCharCnt, positionDelta };\n                        this._commandService.executeCommand(\"compositionType\" /* editorCommon.Handler.CompositionType */, payload);\n                    }\n                    else {\n                        const payload = { text, replaceCharCnt: replacePrevCharCnt };\n                        this._commandService.executeCommand(\"replacePreviousChar\" /* editorCommon.Handler.ReplacePreviousChar */, payload);\n                    }\n                },\n                startComposition: () => {\n                    this._commandService.executeCommand(\"compositionStart\" /* editorCommon.Handler.CompositionStart */, {});\n                },\n                endComposition: () => {\n                    this._commandService.executeCommand(\"compositionEnd\" /* editorCommon.Handler.CompositionEnd */, {});\n                },\n                cut: () => {\n                    this._commandService.executeCommand(\"cut\" /* editorCommon.Handler.Cut */, {});\n                }\n            };\n        }\n        const viewUserInputEvents = new ViewUserInputEvents(viewModel.coordinatesConverter);\n        viewUserInputEvents.onKeyDown = (e) => this._onKeyDown.fire(e);\n        viewUserInputEvents.onKeyUp = (e) => this._onKeyUp.fire(e);\n        viewUserInputEvents.onContextMenu = (e) => this._onContextMenu.fire(e);\n        viewUserInputEvents.onMouseMove = (e) => this._onMouseMove.fire(e);\n        viewUserInputEvents.onMouseLeave = (e) => this._onMouseLeave.fire(e);\n        viewUserInputEvents.onMouseDown = (e) => this._onMouseDown.fire(e);\n        viewUserInputEvents.onMouseUp = (e) => this._onMouseUp.fire(e);\n        viewUserInputEvents.onMouseDrag = (e) => this._onMouseDrag.fire(e);\n        viewUserInputEvents.onMouseDrop = (e) => this._onMouseDrop.fire(e);\n        viewUserInputEvents.onMouseDropCanceled = (e) => this._onMouseDropCanceled.fire(e);\n        viewUserInputEvents.onMouseWheel = (e) => this._onMouseWheel.fire(e);\n        const view = new View(commandDelegate, this._configuration, this._themeService.getColorTheme(), viewModel, viewUserInputEvents, this._overflowWidgetsDomNode, this._instantiationService);\n        return [view, true];\n    }\n    _postDetachModelCleanup(detachedModel) {\n        detachedModel === null || detachedModel === void 0 ? void 0 : detachedModel.removeAllDecorationsWithOwnerId(this._id);\n    }\n    _detachModel() {\n        var _a;\n        (_a = this._contributionsDisposable) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._contributionsDisposable = undefined;\n        if (!this._modelData) {\n            return null;\n        }\n        const model = this._modelData.model;\n        const removeDomNode = this._modelData.hasRealView ? this._modelData.view.domNode.domNode : null;\n        this._modelData.dispose();\n        this._modelData = null;\n        this._domElement.removeAttribute('data-mode-id');\n        if (removeDomNode && this._domElement.contains(removeDomNode)) {\n            this._domElement.removeChild(removeDomNode);\n        }\n        if (this._bannerDomNode && this._domElement.contains(this._bannerDomNode)) {\n            this._domElement.removeChild(this._bannerDomNode);\n        }\n        return model;\n    }\n    _removeDecorationType(key) {\n        this._codeEditorService.removeDecorationType(key);\n    }\n    hasModel() {\n        return (this._modelData !== null);\n    }\n    showDropIndicatorAt(position) {\n        const newDecorations = [{\n                range: new Range(position.lineNumber, position.column, position.lineNumber, position.column),\n                options: CodeEditorWidget_1.dropIntoEditorDecorationOptions\n            }];\n        this._dropIntoEditorDecorations.set(newDecorations);\n        this.revealPosition(position, 1 /* editorCommon.ScrollType.Immediate */);\n    }\n    removeDropIndicator() {\n        this._dropIntoEditorDecorations.clear();\n    }\n    setContextValue(key, value) {\n        this._contextKeyService.createKey(key, value);\n    }\n};\nCodeEditorWidget.dropIntoEditorDecorationOptions = ModelDecorationOptions.register({\n    description: 'workbench-dnd-target',\n    className: 'dnd-target'\n});\nCodeEditorWidget = CodeEditorWidget_1 = __decorate([\n    __param(3, IInstantiationService),\n    __param(4, ICodeEditorService),\n    __param(5, ICommandService),\n    __param(6, IContextKeyService),\n    __param(7, IThemeService),\n    __param(8, INotificationService),\n    __param(9, IAccessibilityService),\n    __param(10, ILanguageConfigurationService),\n    __param(11, ILanguageFeaturesService)\n], CodeEditorWidget);\nexport { CodeEditorWidget };\nexport class BooleanEventEmitter extends Disposable {\n    constructor(_emitterOptions) {\n        super();\n        this._emitterOptions = _emitterOptions;\n        this._onDidChangeToTrue = this._register(new Emitter(this._emitterOptions));\n        this.onDidChangeToTrue = this._onDidChangeToTrue.event;\n        this._onDidChangeToFalse = this._register(new Emitter(this._emitterOptions));\n        this.onDidChangeToFalse = this._onDidChangeToFalse.event;\n        this._value = 0 /* BooleanEventValue.NotSet */;\n    }\n    setValue(_value) {\n        const value = (_value ? 2 /* BooleanEventValue.True */ : 1 /* BooleanEventValue.False */);\n        if (this._value === value) {\n            return;\n        }\n        this._value = value;\n        if (this._value === 2 /* BooleanEventValue.True */) {\n            this._onDidChangeToTrue.fire();\n        }\n        else if (this._value === 1 /* BooleanEventValue.False */) {\n            this._onDidChangeToFalse.fire();\n        }\n    }\n}\n/**\n * A regular event emitter that also makes sure contributions are instantiated if necessary\n */\nclass InteractionEmitter extends Emitter {\n    constructor(_contributions, deliveryQueue) {\n        super({ deliveryQueue });\n        this._contributions = _contributions;\n    }\n    fire(event) {\n        this._contributions.onBeforeInteractionEvent();\n        super.fire(event);\n    }\n}\nclass EditorContextKeysManager extends Disposable {\n    constructor(editor, contextKeyService) {\n        super();\n        this._editor = editor;\n        contextKeyService.createKey('editorId', editor.getId());\n        this._editorSimpleInput = EditorContextKeys.editorSimpleInput.bindTo(contextKeyService);\n        this._editorFocus = EditorContextKeys.focus.bindTo(contextKeyService);\n        this._textInputFocus = EditorContextKeys.textInputFocus.bindTo(contextKeyService);\n        this._editorTextFocus = EditorContextKeys.editorTextFocus.bindTo(contextKeyService);\n        this._tabMovesFocus = EditorContextKeys.tabMovesFocus.bindTo(contextKeyService);\n        this._editorReadonly = EditorContextKeys.readOnly.bindTo(contextKeyService);\n        this._inDiffEditor = EditorContextKeys.inDiffEditor.bindTo(contextKeyService);\n        this._editorColumnSelection = EditorContextKeys.columnSelection.bindTo(contextKeyService);\n        this._hasMultipleSelections = EditorContextKeys.hasMultipleSelections.bindTo(contextKeyService);\n        this._hasNonEmptySelection = EditorContextKeys.hasNonEmptySelection.bindTo(contextKeyService);\n        this._canUndo = EditorContextKeys.canUndo.bindTo(contextKeyService);\n        this._canRedo = EditorContextKeys.canRedo.bindTo(contextKeyService);\n        this._register(this._editor.onDidChangeConfiguration(() => this._updateFromConfig()));\n        this._register(this._editor.onDidChangeCursorSelection(() => this._updateFromSelection()));\n        this._register(this._editor.onDidFocusEditorWidget(() => this._updateFromFocus()));\n        this._register(this._editor.onDidBlurEditorWidget(() => this._updateFromFocus()));\n        this._register(this._editor.onDidFocusEditorText(() => this._updateFromFocus()));\n        this._register(this._editor.onDidBlurEditorText(() => this._updateFromFocus()));\n        this._register(this._editor.onDidChangeModel(() => this._updateFromModel()));\n        this._register(this._editor.onDidChangeConfiguration(() => this._updateFromModel()));\n        this._register(TabFocus.onDidChangeTabFocus((tabFocusMode) => this._tabMovesFocus.set(tabFocusMode)));\n        this._updateFromConfig();\n        this._updateFromSelection();\n        this._updateFromFocus();\n        this._updateFromModel();\n        this._editorSimpleInput.set(this._editor.isSimpleWidget);\n    }\n    _updateFromConfig() {\n        const options = this._editor.getOptions();\n        this._tabMovesFocus.set(TabFocus.getTabFocusMode());\n        this._editorReadonly.set(options.get(91 /* EditorOption.readOnly */));\n        this._inDiffEditor.set(options.get(61 /* EditorOption.inDiffEditor */));\n        this._editorColumnSelection.set(options.get(22 /* EditorOption.columnSelection */));\n    }\n    _updateFromSelection() {\n        const selections = this._editor.getSelections();\n        if (!selections) {\n            this._hasMultipleSelections.reset();\n            this._hasNonEmptySelection.reset();\n        }\n        else {\n            this._hasMultipleSelections.set(selections.length > 1);\n            this._hasNonEmptySelection.set(selections.some(s => !s.isEmpty()));\n        }\n    }\n    _updateFromFocus() {\n        this._editorFocus.set(this._editor.hasWidgetFocus() && !this._editor.isSimpleWidget);\n        this._editorTextFocus.set(this._editor.hasTextFocus() && !this._editor.isSimpleWidget);\n        this._textInputFocus.set(this._editor.hasTextFocus());\n    }\n    _updateFromModel() {\n        const model = this._editor.getModel();\n        this._canUndo.set(Boolean(model && model.canUndo()));\n        this._canRedo.set(Boolean(model && model.canRedo()));\n    }\n}\nexport class EditorModeContext extends Disposable {\n    constructor(_editor, _contextKeyService, _languageFeaturesService) {\n        super();\n        this._editor = _editor;\n        this._contextKeyService = _contextKeyService;\n        this._languageFeaturesService = _languageFeaturesService;\n        this._langId = EditorContextKeys.languageId.bindTo(_contextKeyService);\n        this._hasCompletionItemProvider = EditorContextKeys.hasCompletionItemProvider.bindTo(_contextKeyService);\n        this._hasCodeActionsProvider = EditorContextKeys.hasCodeActionsProvider.bindTo(_contextKeyService);\n        this._hasCodeLensProvider = EditorContextKeys.hasCodeLensProvider.bindTo(_contextKeyService);\n        this._hasDefinitionProvider = EditorContextKeys.hasDefinitionProvider.bindTo(_contextKeyService);\n        this._hasDeclarationProvider = EditorContextKeys.hasDeclarationProvider.bindTo(_contextKeyService);\n        this._hasImplementationProvider = EditorContextKeys.hasImplementationProvider.bindTo(_contextKeyService);\n        this._hasTypeDefinitionProvider = EditorContextKeys.hasTypeDefinitionProvider.bindTo(_contextKeyService);\n        this._hasHoverProvider = EditorContextKeys.hasHoverProvider.bindTo(_contextKeyService);\n        this._hasDocumentHighlightProvider = EditorContextKeys.hasDocumentHighlightProvider.bindTo(_contextKeyService);\n        this._hasDocumentSymbolProvider = EditorContextKeys.hasDocumentSymbolProvider.bindTo(_contextKeyService);\n        this._hasReferenceProvider = EditorContextKeys.hasReferenceProvider.bindTo(_contextKeyService);\n        this._hasRenameProvider = EditorContextKeys.hasRenameProvider.bindTo(_contextKeyService);\n        this._hasSignatureHelpProvider = EditorContextKeys.hasSignatureHelpProvider.bindTo(_contextKeyService);\n        this._hasInlayHintsProvider = EditorContextKeys.hasInlayHintsProvider.bindTo(_contextKeyService);\n        this._hasDocumentFormattingProvider = EditorContextKeys.hasDocumentFormattingProvider.bindTo(_contextKeyService);\n        this._hasDocumentSelectionFormattingProvider = EditorContextKeys.hasDocumentSelectionFormattingProvider.bindTo(_contextKeyService);\n        this._hasMultipleDocumentFormattingProvider = EditorContextKeys.hasMultipleDocumentFormattingProvider.bindTo(_contextKeyService);\n        this._hasMultipleDocumentSelectionFormattingProvider = EditorContextKeys.hasMultipleDocumentSelectionFormattingProvider.bindTo(_contextKeyService);\n        this._isInEmbeddedEditor = EditorContextKeys.isInEmbeddedEditor.bindTo(_contextKeyService);\n        const update = () => this._update();\n        // update when model/mode changes\n        this._register(_editor.onDidChangeModel(update));\n        this._register(_editor.onDidChangeModelLanguage(update));\n        // update when registries change\n        this._register(_languageFeaturesService.completionProvider.onDidChange(update));\n        this._register(_languageFeaturesService.codeActionProvider.onDidChange(update));\n        this._register(_languageFeaturesService.codeLensProvider.onDidChange(update));\n        this._register(_languageFeaturesService.definitionProvider.onDidChange(update));\n        this._register(_languageFeaturesService.declarationProvider.onDidChange(update));\n        this._register(_languageFeaturesService.implementationProvider.onDidChange(update));\n        this._register(_languageFeaturesService.typeDefinitionProvider.onDidChange(update));\n        this._register(_languageFeaturesService.hoverProvider.onDidChange(update));\n        this._register(_languageFeaturesService.documentHighlightProvider.onDidChange(update));\n        this._register(_languageFeaturesService.documentSymbolProvider.onDidChange(update));\n        this._register(_languageFeaturesService.referenceProvider.onDidChange(update));\n        this._register(_languageFeaturesService.renameProvider.onDidChange(update));\n        this._register(_languageFeaturesService.documentFormattingEditProvider.onDidChange(update));\n        this._register(_languageFeaturesService.documentRangeFormattingEditProvider.onDidChange(update));\n        this._register(_languageFeaturesService.signatureHelpProvider.onDidChange(update));\n        this._register(_languageFeaturesService.inlayHintsProvider.onDidChange(update));\n        update();\n    }\n    dispose() {\n        super.dispose();\n    }\n    reset() {\n        this._contextKeyService.bufferChangeEvents(() => {\n            this._langId.reset();\n            this._hasCompletionItemProvider.reset();\n            this._hasCodeActionsProvider.reset();\n            this._hasCodeLensProvider.reset();\n            this._hasDefinitionProvider.reset();\n            this._hasDeclarationProvider.reset();\n            this._hasImplementationProvider.reset();\n            this._hasTypeDefinitionProvider.reset();\n            this._hasHoverProvider.reset();\n            this._hasDocumentHighlightProvider.reset();\n            this._hasDocumentSymbolProvider.reset();\n            this._hasReferenceProvider.reset();\n            this._hasRenameProvider.reset();\n            this._hasDocumentFormattingProvider.reset();\n            this._hasDocumentSelectionFormattingProvider.reset();\n            this._hasSignatureHelpProvider.reset();\n            this._isInEmbeddedEditor.reset();\n        });\n    }\n    _update() {\n        const model = this._editor.getModel();\n        if (!model) {\n            this.reset();\n            return;\n        }\n        this._contextKeyService.bufferChangeEvents(() => {\n            this._langId.set(model.getLanguageId());\n            this._hasCompletionItemProvider.set(this._languageFeaturesService.completionProvider.has(model));\n            this._hasCodeActionsProvider.set(this._languageFeaturesService.codeActionProvider.has(model));\n            this._hasCodeLensProvider.set(this._languageFeaturesService.codeLensProvider.has(model));\n            this._hasDefinitionProvider.set(this._languageFeaturesService.definitionProvider.has(model));\n            this._hasDeclarationProvider.set(this._languageFeaturesService.declarationProvider.has(model));\n            this._hasImplementationProvider.set(this._languageFeaturesService.implementationProvider.has(model));\n            this._hasTypeDefinitionProvider.set(this._languageFeaturesService.typeDefinitionProvider.has(model));\n            this._hasHoverProvider.set(this._languageFeaturesService.hoverProvider.has(model));\n            this._hasDocumentHighlightProvider.set(this._languageFeaturesService.documentHighlightProvider.has(model));\n            this._hasDocumentSymbolProvider.set(this._languageFeaturesService.documentSymbolProvider.has(model));\n            this._hasReferenceProvider.set(this._languageFeaturesService.referenceProvider.has(model));\n            this._hasRenameProvider.set(this._languageFeaturesService.renameProvider.has(model));\n            this._hasSignatureHelpProvider.set(this._languageFeaturesService.signatureHelpProvider.has(model));\n            this._hasInlayHintsProvider.set(this._languageFeaturesService.inlayHintsProvider.has(model));\n            this._hasDocumentFormattingProvider.set(this._languageFeaturesService.documentFormattingEditProvider.has(model) || this._languageFeaturesService.documentRangeFormattingEditProvider.has(model));\n            this._hasDocumentSelectionFormattingProvider.set(this._languageFeaturesService.documentRangeFormattingEditProvider.has(model));\n            this._hasMultipleDocumentFormattingProvider.set(this._languageFeaturesService.documentFormattingEditProvider.all(model).length + this._languageFeaturesService.documentRangeFormattingEditProvider.all(model).length > 1);\n            this._hasMultipleDocumentSelectionFormattingProvider.set(this._languageFeaturesService.documentRangeFormattingEditProvider.all(model).length > 1);\n            this._isInEmbeddedEditor.set(model.uri.scheme === Schemas.walkThroughSnippet || model.uri.scheme === Schemas.vscodeChatCodeBlock);\n        });\n    }\n}\nclass CodeEditorWidgetFocusTracker extends Disposable {\n    constructor(domElement, overflowWidgetsDomNode) {\n        super();\n        this._onChange = this._register(new Emitter());\n        this.onChange = this._onChange.event;\n        this._hadFocus = undefined;\n        this._hasDomElementFocus = false;\n        this._domFocusTracker = this._register(dom.trackFocus(domElement));\n        this._overflowWidgetsDomNodeHasFocus = false;\n        this._register(this._domFocusTracker.onDidFocus(() => {\n            this._hasDomElementFocus = true;\n            this._update();\n        }));\n        this._register(this._domFocusTracker.onDidBlur(() => {\n            this._hasDomElementFocus = false;\n            this._update();\n        }));\n        if (overflowWidgetsDomNode) {\n            this._overflowWidgetsDomNode = this._register(dom.trackFocus(overflowWidgetsDomNode));\n            this._register(this._overflowWidgetsDomNode.onDidFocus(() => {\n                this._overflowWidgetsDomNodeHasFocus = true;\n                this._update();\n            }));\n            this._register(this._overflowWidgetsDomNode.onDidBlur(() => {\n                this._overflowWidgetsDomNodeHasFocus = false;\n                this._update();\n            }));\n        }\n    }\n    _update() {\n        const focused = this._hasDomElementFocus || this._overflowWidgetsDomNodeHasFocus;\n        if (this._hadFocus !== focused) {\n            this._hadFocus = focused;\n            this._onChange.fire(undefined);\n        }\n    }\n    hasFocus() {\n        var _a;\n        return (_a = this._hadFocus) !== null && _a !== void 0 ? _a : false;\n    }\n}\nclass EditorDecorationsCollection {\n    get length() {\n        return this._decorationIds.length;\n    }\n    constructor(_editor, decorations) {\n        this._editor = _editor;\n        this._decorationIds = [];\n        this._isChangingDecorations = false;\n        if (Array.isArray(decorations) && decorations.length > 0) {\n            this.set(decorations);\n        }\n    }\n    onDidChange(listener, thisArgs, disposables) {\n        return this._editor.onDidChangeModelDecorations((e) => {\n            if (this._isChangingDecorations) {\n                return;\n            }\n            listener.call(thisArgs, e);\n        }, disposables);\n    }\n    getRange(index) {\n        if (!this._editor.hasModel()) {\n            return null;\n        }\n        if (index >= this._decorationIds.length) {\n            return null;\n        }\n        return this._editor.getModel().getDecorationRange(this._decorationIds[index]);\n    }\n    getRanges() {\n        if (!this._editor.hasModel()) {\n            return [];\n        }\n        const model = this._editor.getModel();\n        const result = [];\n        for (const decorationId of this._decorationIds) {\n            const range = model.getDecorationRange(decorationId);\n            if (range) {\n                result.push(range);\n            }\n        }\n        return result;\n    }\n    has(decoration) {\n        return this._decorationIds.includes(decoration.id);\n    }\n    clear() {\n        if (this._decorationIds.length === 0) {\n            // nothing to do\n            return;\n        }\n        this.set([]);\n    }\n    set(newDecorations) {\n        try {\n            this._isChangingDecorations = true;\n            this._editor.changeDecorations((accessor) => {\n                this._decorationIds = accessor.deltaDecorations(this._decorationIds, newDecorations);\n            });\n        }\n        finally {\n            this._isChangingDecorations = false;\n        }\n        return this._decorationIds;\n    }\n    append(newDecorations) {\n        let newDecorationIds = [];\n        try {\n            this._isChangingDecorations = true;\n            this._editor.changeDecorations((accessor) => {\n                newDecorationIds = accessor.deltaDecorations([], newDecorations);\n                this._decorationIds = this._decorationIds.concat(newDecorationIds);\n            });\n        }\n        finally {\n            this._isChangingDecorations = false;\n        }\n        return newDecorationIds;\n    }\n}\nconst squigglyStart = encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 6 3' enable-background='new 0 0 6 3' height='3' width='6'><g fill='`);\nconst squigglyEnd = encodeURIComponent(`'><polygon points='5.5,0 2.5,3 1.1,3 4.1,0'/><polygon points='4,0 6,2 6,0.6 5.4,0'/><polygon points='0,2 1,3 2.4,3 0,0.6'/></g></svg>`);\nfunction getSquigglySVGData(color) {\n    return squigglyStart + encodeURIComponent(color.toString()) + squigglyEnd;\n}\nconst dotdotdotStart = encodeURIComponent(`<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"3\" width=\"12\"><g fill=\"`);\nconst dotdotdotEnd = encodeURIComponent(`\"><circle cx=\"1\" cy=\"1\" r=\"1\"/><circle cx=\"5\" cy=\"1\" r=\"1\"/><circle cx=\"9\" cy=\"1\" r=\"1\"/></g></svg>`);\nfunction getDotDotDotSVGData(color) {\n    return dotdotdotStart + encodeURIComponent(color.toString()) + dotdotdotEnd;\n}\nregisterThemingParticipant((theme, collector) => {\n    const errorForeground = theme.getColor(editorErrorForeground);\n    if (errorForeground) {\n        collector.addRule(`.monaco-editor .${\"squiggly-error\" /* ClassName.EditorErrorDecoration */} { background: url(\"data:image/svg+xml,${getSquigglySVGData(errorForeground)}\") repeat-x bottom left; }`);\n    }\n    const warningForeground = theme.getColor(editorWarningForeground);\n    if (warningForeground) {\n        collector.addRule(`.monaco-editor .${\"squiggly-warning\" /* ClassName.EditorWarningDecoration */} { background: url(\"data:image/svg+xml,${getSquigglySVGData(warningForeground)}\") repeat-x bottom left; }`);\n    }\n    const infoForeground = theme.getColor(editorInfoForeground);\n    if (infoForeground) {\n        collector.addRule(`.monaco-editor .${\"squiggly-info\" /* ClassName.EditorInfoDecoration */} { background: url(\"data:image/svg+xml,${getSquigglySVGData(infoForeground)}\") repeat-x bottom left; }`);\n    }\n    const hintForeground = theme.getColor(editorHintForeground);\n    if (hintForeground) {\n        collector.addRule(`.monaco-editor .${\"squiggly-hint\" /* ClassName.EditorHintDecoration */} { background: url(\"data:image/svg+xml,${getDotDotDotSVGData(hintForeground)}\") no-repeat bottom left; }`);\n    }\n    const unnecessaryForeground = theme.getColor(editorUnnecessaryCodeOpacity);\n    if (unnecessaryForeground) {\n        collector.addRule(`.monaco-editor.showUnused .${\"squiggly-inline-unnecessary\" /* ClassName.EditorUnnecessaryInlineDecoration */} { opacity: ${unnecessaryForeground.rgba.a}; }`);\n    }\n});\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport * as browser from '../../../base/browser/browser.js';\nimport * as arrays from '../../../base/common/arrays.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as objects from '../../../base/common/objects.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { ElementSizeObserver } from './elementSizeObserver.js';\nimport { FontMeasurements } from './fontMeasurements.js';\nimport { migrateOptions } from './migrateOptions.js';\nimport { TabFocus } from './tabFocus.js';\nimport { ComputeOptionsMemory, ConfigurationChangedEvent, editorOptionsRegistry } from '../../common/config/editorOptions.js';\nimport { EditorZoom } from '../../common/config/editorZoom.js';\nimport { BareFontInfo } from '../../common/config/fontInfo.js';\nimport { IAccessibilityService } from '../../../platform/accessibility/common/accessibility.js';\nimport { getWindow, getWindowById } from '../../../base/browser/dom.js';\nimport { PixelRatio } from '../../../base/browser/pixelRatio.js';\nlet EditorConfiguration = class EditorConfiguration extends Disposable {\n    constructor(isSimpleWidget, options, container, _accessibilityService) {\n        super();\n        this._accessibilityService = _accessibilityService;\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._onDidChangeFast = this._register(new Emitter());\n        this.onDidChangeFast = this._onDidChangeFast.event;\n        this._isDominatedByLongLines = false;\n        this._viewLineCount = 1;\n        this._lineNumbersDigitCount = 1;\n        this._reservedHeight = 0;\n        this._glyphMarginDecorationLaneCount = 1;\n        this._computeOptionsMemory = new ComputeOptionsMemory();\n        this.isSimpleWidget = isSimpleWidget;\n        this._containerObserver = this._register(new ElementSizeObserver(container, options.dimension));\n        this._targetWindowId = getWindow(container).vscodeWindowId;\n        this._rawOptions = deepCloneAndMigrateOptions(options);\n        this._validatedOptions = EditorOptionsUtil.validateOptions(this._rawOptions);\n        this.options = this._computeOptions();\n        if (this.options.get(13 /* EditorOption.automaticLayout */)) {\n            this._containerObserver.startObserving();\n        }\n        this._register(EditorZoom.onDidChangeZoomLevel(() => this._recomputeOptions()));\n        this._register(TabFocus.onDidChangeTabFocus(() => this._recomputeOptions()));\n        this._register(this._containerObserver.onDidChange(() => this._recomputeOptions()));\n        this._register(FontMeasurements.onDidChange(() => this._recomputeOptions()));\n        this._register(PixelRatio.getInstance(getWindow(container)).onDidChange(() => this._recomputeOptions()));\n        this._register(this._accessibilityService.onDidChangeScreenReaderOptimized(() => this._recomputeOptions()));\n    }\n    _recomputeOptions() {\n        const newOptions = this._computeOptions();\n        const changeEvent = EditorOptionsUtil.checkEquals(this.options, newOptions);\n        if (changeEvent === null) {\n            // nothing changed!\n            return;\n        }\n        this.options = newOptions;\n        this._onDidChangeFast.fire(changeEvent);\n        this._onDidChange.fire(changeEvent);\n    }\n    _computeOptions() {\n        const partialEnv = this._readEnvConfiguration();\n        const bareFontInfo = BareFontInfo.createFromValidatedSettings(this._validatedOptions, partialEnv.pixelRatio, this.isSimpleWidget);\n        const fontInfo = this._readFontInfo(bareFontInfo);\n        const env = {\n            memory: this._computeOptionsMemory,\n            outerWidth: partialEnv.outerWidth,\n            outerHeight: partialEnv.outerHeight - this._reservedHeight,\n            fontInfo: fontInfo,\n            extraEditorClassName: partialEnv.extraEditorClassName,\n            isDominatedByLongLines: this._isDominatedByLongLines,\n            viewLineCount: this._viewLineCount,\n            lineNumbersDigitCount: this._lineNumbersDigitCount,\n            emptySelectionClipboard: partialEnv.emptySelectionClipboard,\n            pixelRatio: partialEnv.pixelRatio,\n            tabFocusMode: TabFocus.getTabFocusMode(),\n            accessibilitySupport: partialEnv.accessibilitySupport,\n            glyphMarginDecorationLaneCount: this._glyphMarginDecorationLaneCount\n        };\n        return EditorOptionsUtil.computeOptions(this._validatedOptions, env);\n    }\n    _readEnvConfiguration() {\n        return {\n            extraEditorClassName: getExtraEditorClassName(),\n            outerWidth: this._containerObserver.getWidth(),\n            outerHeight: this._containerObserver.getHeight(),\n            emptySelectionClipboard: browser.isWebKit || browser.isFirefox,\n            pixelRatio: PixelRatio.getInstance(getWindowById(this._targetWindowId, true).window).value,\n            accessibilitySupport: (this._accessibilityService.isScreenReaderOptimized()\n                ? 2 /* AccessibilitySupport.Enabled */\n                : this._accessibilityService.getAccessibilitySupport())\n        };\n    }\n    _readFontInfo(bareFontInfo) {\n        return FontMeasurements.readFontInfo(getWindowById(this._targetWindowId, true).window, bareFontInfo);\n    }\n    getRawOptions() {\n        return this._rawOptions;\n    }\n    updateOptions(_newOptions) {\n        const newOptions = deepCloneAndMigrateOptions(_newOptions);\n        const didChange = EditorOptionsUtil.applyUpdate(this._rawOptions, newOptions);\n        if (!didChange) {\n            return;\n        }\n        this._validatedOptions = EditorOptionsUtil.validateOptions(this._rawOptions);\n        this._recomputeOptions();\n    }\n    observeContainer(dimension) {\n        this._containerObserver.observe(dimension);\n    }\n    setIsDominatedByLongLines(isDominatedByLongLines) {\n        if (this._isDominatedByLongLines === isDominatedByLongLines) {\n            return;\n        }\n        this._isDominatedByLongLines = isDominatedByLongLines;\n        this._recomputeOptions();\n    }\n    setModelLineCount(modelLineCount) {\n        const lineNumbersDigitCount = digitCount(modelLineCount);\n        if (this._lineNumbersDigitCount === lineNumbersDigitCount) {\n            return;\n        }\n        this._lineNumbersDigitCount = lineNumbersDigitCount;\n        this._recomputeOptions();\n    }\n    setViewLineCount(viewLineCount) {\n        if (this._viewLineCount === viewLineCount) {\n            return;\n        }\n        this._viewLineCount = viewLineCount;\n        this._recomputeOptions();\n    }\n    setReservedHeight(reservedHeight) {\n        if (this._reservedHeight === reservedHeight) {\n            return;\n        }\n        this._reservedHeight = reservedHeight;\n        this._recomputeOptions();\n    }\n    setGlyphMarginDecorationLaneCount(decorationLaneCount) {\n        if (this._glyphMarginDecorationLaneCount === decorationLaneCount) {\n            return;\n        }\n        this._glyphMarginDecorationLaneCount = decorationLaneCount;\n        this._recomputeOptions();\n    }\n};\nEditorConfiguration = __decorate([\n    __param(3, IAccessibilityService)\n], EditorConfiguration);\nexport { EditorConfiguration };\nfunction digitCount(n) {\n    let r = 0;\n    while (n) {\n        n = Math.floor(n / 10);\n        r++;\n    }\n    return r ? r : 1;\n}\nfunction getExtraEditorClassName() {\n    let extra = '';\n    if (!browser.isSafari && !browser.isWebkitWebView) {\n        // Use user-select: none in all browsers except Safari and native macOS WebView\n        extra += 'no-user-select ';\n    }\n    if (browser.isSafari) {\n        // See https://github.com/microsoft/vscode/issues/108822\n        extra += 'no-minimap-shadow ';\n        extra += 'enable-user-select ';\n    }\n    if (platform.isMacintosh) {\n        extra += 'mac ';\n    }\n    return extra;\n}\nclass ValidatedEditorOptions {\n    constructor() {\n        this._values = [];\n    }\n    _read(option) {\n        return this._values[option];\n    }\n    get(id) {\n        return this._values[id];\n    }\n    _write(option, value) {\n        this._values[option] = value;\n    }\n}\nexport class ComputedEditorOptions {\n    constructor() {\n        this._values = [];\n    }\n    _read(id) {\n        if (id >= this._values.length) {\n            throw new Error('Cannot read uninitialized value');\n        }\n        return this._values[id];\n    }\n    get(id) {\n        return this._read(id);\n    }\n    _write(id, value) {\n        this._values[id] = value;\n    }\n}\nclass EditorOptionsUtil {\n    static validateOptions(options) {\n        const result = new ValidatedEditorOptions();\n        for (const editorOption of editorOptionsRegistry) {\n            const value = (editorOption.name === '_never_' ? undefined : options[editorOption.name]);\n            result._write(editorOption.id, editorOption.validate(value));\n        }\n        return result;\n    }\n    static computeOptions(options, env) {\n        const result = new ComputedEditorOptions();\n        for (const editorOption of editorOptionsRegistry) {\n            result._write(editorOption.id, editorOption.compute(env, result, options._read(editorOption.id)));\n        }\n        return result;\n    }\n    static _deepEquals(a, b) {\n        if (typeof a !== 'object' || typeof b !== 'object' || !a || !b) {\n            return a === b;\n        }\n        if (Array.isArray(a) || Array.isArray(b)) {\n            return (Array.isArray(a) && Array.isArray(b) ? arrays.equals(a, b) : false);\n        }\n        if (Object.keys(a).length !== Object.keys(b).length) {\n            return false;\n        }\n        for (const key in a) {\n            if (!EditorOptionsUtil._deepEquals(a[key], b[key])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static checkEquals(a, b) {\n        const result = [];\n        let somethingChanged = false;\n        for (const editorOption of editorOptionsRegistry) {\n            const changed = !EditorOptionsUtil._deepEquals(a._read(editorOption.id), b._read(editorOption.id));\n            result[editorOption.id] = changed;\n            if (changed) {\n                somethingChanged = true;\n            }\n        }\n        return (somethingChanged ? new ConfigurationChangedEvent(result) : null);\n    }\n    /**\n     * Returns true if something changed.\n     * Modifies `options`.\n    */\n    static applyUpdate(options, update) {\n        let changed = false;\n        for (const editorOption of editorOptionsRegistry) {\n            if (update.hasOwnProperty(editorOption.name)) {\n                const result = editorOption.applyUpdate(options[editorOption.name], update[editorOption.name]);\n                options[editorOption.name] = result.newValue;\n                changed = changed || result.didChange;\n            }\n        }\n        return changed;\n    }\n}\nfunction deepCloneAndMigrateOptions(_options) {\n    const options = objects.deepClone(_options);\n    migrateOptions(options);\n    return options;\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class EditorSettingMigration {\n    constructor(key, migrate) {\n        this.key = key;\n        this.migrate = migrate;\n    }\n    apply(options) {\n        const value = EditorSettingMigration._read(options, this.key);\n        const read = (key) => EditorSettingMigration._read(options, key);\n        const write = (key, value) => EditorSettingMigration._write(options, key, value);\n        this.migrate(value, read, write);\n    }\n    static _read(source, key) {\n        if (typeof source === 'undefined') {\n            return undefined;\n        }\n        const firstDotIndex = key.indexOf('.');\n        if (firstDotIndex >= 0) {\n            const firstSegment = key.substring(0, firstDotIndex);\n            return this._read(source[firstSegment], key.substring(firstDotIndex + 1));\n        }\n        return source[key];\n    }\n    static _write(target, key, value) {\n        const firstDotIndex = key.indexOf('.');\n        if (firstDotIndex >= 0) {\n            const firstSegment = key.substring(0, firstDotIndex);\n            target[firstSegment] = target[firstSegment] || {};\n            this._write(target[firstSegment], key.substring(firstDotIndex + 1), value);\n            return;\n        }\n        target[key] = value;\n    }\n}\nEditorSettingMigration.items = [];\nfunction registerEditorSettingMigration(key, migrate) {\n    EditorSettingMigration.items.push(new EditorSettingMigration(key, migrate));\n}\nfunction registerSimpleEditorSettingMigration(key, values) {\n    registerEditorSettingMigration(key, (value, read, write) => {\n        if (typeof value !== 'undefined') {\n            for (const [oldValue, newValue] of values) {\n                if (value === oldValue) {\n                    write(key, newValue);\n                    return;\n                }\n            }\n        }\n    });\n}\n/**\n * Compatibility with old options\n */\nexport function migrateOptions(options) {\n    EditorSettingMigration.items.forEach(migration => migration.apply(options));\n}\nregisterSimpleEditorSettingMigration('wordWrap', [[true, 'on'], [false, 'off']]);\nregisterSimpleEditorSettingMigration('lineNumbers', [[true, 'on'], [false, 'off']]);\nregisterSimpleEditorSettingMigration('cursorBlinking', [['visible', 'solid']]);\nregisterSimpleEditorSettingMigration('renderWhitespace', [[true, 'boundary'], [false, 'none']]);\nregisterSimpleEditorSettingMigration('renderLineHighlight', [[true, 'line'], [false, 'none']]);\nregisterSimpleEditorSettingMigration('acceptSuggestionOnEnter', [[true, 'on'], [false, 'off']]);\nregisterSimpleEditorSettingMigration('tabCompletion', [[false, 'off'], [true, 'onlySnippets']]);\nregisterSimpleEditorSettingMigration('hover', [[true, { enabled: true }], [false, { enabled: false }]]);\nregisterSimpleEditorSettingMigration('parameterHints', [[true, { enabled: true }], [false, { enabled: false }]]);\nregisterSimpleEditorSettingMigration('autoIndent', [[false, 'advanced'], [true, 'full']]);\nregisterSimpleEditorSettingMigration('matchBrackets', [[true, 'always'], [false, 'never']]);\nregisterSimpleEditorSettingMigration('renderFinalNewline', [[true, 'on'], [false, 'off']]);\nregisterSimpleEditorSettingMigration('cursorSmoothCaretAnimation', [[true, 'on'], [false, 'off']]);\nregisterSimpleEditorSettingMigration('occurrencesHighlight', [[true, 'singleFile'], [false, 'off']]);\nregisterSimpleEditorSettingMigration('wordBasedSuggestions', [[true, 'matchingDocuments'], [false, 'off']]);\nregisterEditorSettingMigration('autoClosingBrackets', (value, read, write) => {\n    if (value === false) {\n        write('autoClosingBrackets', 'never');\n        if (typeof read('autoClosingQuotes') === 'undefined') {\n            write('autoClosingQuotes', 'never');\n        }\n        if (typeof read('autoSurround') === 'undefined') {\n            write('autoSurround', 'never');\n        }\n    }\n});\nregisterEditorSettingMigration('renderIndentGuides', (value, read, write) => {\n    if (typeof value !== 'undefined') {\n        write('renderIndentGuides', undefined);\n        if (typeof read('guides.indentation') === 'undefined') {\n            write('guides.indentation', !!value);\n        }\n    }\n});\nregisterEditorSettingMigration('highlightActiveIndentGuide', (value, read, write) => {\n    if (typeof value !== 'undefined') {\n        write('highlightActiveIndentGuide', undefined);\n        if (typeof read('guides.highlightActiveIndentation') === 'undefined') {\n            write('guides.highlightActiveIndentation', !!value);\n        }\n    }\n});\nconst suggestFilteredTypesMapping = {\n    method: 'showMethods',\n    function: 'showFunctions',\n    constructor: 'showConstructors',\n    deprecated: 'showDeprecated',\n    field: 'showFields',\n    variable: 'showVariables',\n    class: 'showClasses',\n    struct: 'showStructs',\n    interface: 'showInterfaces',\n    module: 'showModules',\n    property: 'showProperties',\n    event: 'showEvents',\n    operator: 'showOperators',\n    unit: 'showUnits',\n    value: 'showValues',\n    constant: 'showConstants',\n    enum: 'showEnums',\n    enumMember: 'showEnumMembers',\n    keyword: 'showKeywords',\n    text: 'showWords',\n    color: 'showColors',\n    file: 'showFiles',\n    reference: 'showReferences',\n    folder: 'showFolders',\n    typeParameter: 'showTypeParameters',\n    snippet: 'showSnippets',\n};\nregisterEditorSettingMigration('suggest.filteredTypes', (value, read, write) => {\n    if (value && typeof value === 'object') {\n        for (const entry of Object.entries(suggestFilteredTypesMapping)) {\n            const v = value[entry[0]];\n            if (v === false) {\n                if (typeof read(`suggest.${entry[1]}`) === 'undefined') {\n                    write(`suggest.${entry[1]}`, false);\n                }\n            }\n        }\n        write('suggest.filteredTypes', undefined);\n    }\n});\nregisterEditorSettingMigration('quickSuggestions', (input, read, write) => {\n    if (typeof input === 'boolean') {\n        const value = input ? 'on' : 'off';\n        const newValue = { comments: value, strings: value, other: value };\n        write('quickSuggestions', newValue);\n    }\n});\n// Sticky Scroll\nregisterEditorSettingMigration('experimental.stickyScroll.enabled', (value, read, write) => {\n    if (typeof value === 'boolean') {\n        write('experimental.stickyScroll.enabled', undefined);\n        if (typeof read('stickyScroll.enabled') === 'undefined') {\n            write('stickyScroll.enabled', value);\n        }\n    }\n});\nregisterEditorSettingMigration('experimental.stickyScroll.maxLineCount', (value, read, write) => {\n    if (typeof value === 'number') {\n        write('experimental.stickyScroll.maxLineCount', undefined);\n        if (typeof read('stickyScroll.maxLineCount') === 'undefined') {\n            write('stickyScroll.maxLineCount', value);\n        }\n    }\n});\n// Code Actions on Save\nregisterEditorSettingMigration('codeActionsOnSave', (value, read, write) => {\n    if (value && typeof value === 'object') {\n        let toBeModified = false;\n        const newValue = {};\n        for (const entry of Object.entries(value)) {\n            if (typeof entry[1] === 'boolean') {\n                toBeModified = true;\n                newValue[entry[0]] = entry[1] ? 'explicit' : 'never';\n            }\n            else {\n                newValue[entry[0]] = entry[1];\n            }\n        }\n        if (toBeModified) {\n            write(`codeActionsOnSave`, newValue);\n        }\n    }\n});\n// Migrate Quick Fix Settings\nregisterEditorSettingMigration('codeActionWidget.includeNearbyQuickfixes', (value, read, write) => {\n    if (typeof value === 'boolean') {\n        write('codeActionWidget.includeNearbyQuickfixes', undefined);\n        if (typeof read('codeActionWidget.includeNearbyQuickFixes') === 'undefined') {\n            write('codeActionWidget.includeNearbyQuickFixes', value);\n        }\n    }\n});\n// Migrate the lightbulb settings\nregisterEditorSettingMigration('lightbulb.enabled', (value, read, write) => {\n    if (typeof value === 'boolean') {\n        write('lightbulb.enabled', value ? undefined : 'off');\n    }\n});\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nclass TabFocusImpl {\n    constructor() {\n        this._tabFocus = false;\n        this._onDidChangeTabFocus = new Emitter();\n        this.onDidChangeTabFocus = this._onDidChangeTabFocus.event;\n    }\n    getTabFocusMode() {\n        return this._tabFocus;\n    }\n    setTabFocusMode(tabFocusMode) {\n        this._tabFocus = tabFocusMode;\n        this._onDidChangeTabFocus.fire(this._tabFocus);\n    }\n}\n/**\n * Control what pressing Tab does.\n * If it is false, pressing Tab or Shift-Tab will be handled by the editor.\n * If it is true, pressing Tab or Shift-Tab will move the browser focus.\n * Defaults to false.\n */\nexport const TabFocus = new TabFocusImpl();\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport * as dom from '../../base/browser/dom.js';\nimport { createFastDomNode } from '../../base/browser/fastDomNode.js';\nimport { inputLatency } from '../../base/browser/performance.js';\nimport { BugIndicatingError, onUnexpectedError } from '../../base/common/errors.js';\nimport { PointerHandlerLastRenderData } from './controller/mouseTarget.js';\nimport { PointerHandler } from './controller/pointerHandler.js';\nimport { TextAreaHandler } from './controller/textAreaHandler.js';\nimport { RenderingContext } from './view/renderingContext.js';\nimport { ViewController } from './view/viewController.js';\nimport { ContentViewOverlays, MarginViewOverlays } from './view/viewOverlays.js';\nimport { PartFingerprints } from './view/viewPart.js';\nimport { ViewUserInputEvents } from './view/viewUserInputEvents.js';\nimport { BlockDecorations } from './viewParts/blockDecorations/blockDecorations.js';\nimport { ViewContentWidgets } from './viewParts/contentWidgets/contentWidgets.js';\nimport { CurrentLineHighlightOverlay, CurrentLineMarginHighlightOverlay } from './viewParts/currentLineHighlight/currentLineHighlight.js';\nimport { DecorationsOverlay } from './viewParts/decorations/decorations.js';\nimport { EditorScrollbar } from './viewParts/editorScrollbar/editorScrollbar.js';\nimport { GlyphMarginWidgets } from './viewParts/glyphMargin/glyphMargin.js';\nimport { IndentGuidesOverlay } from './viewParts/indentGuides/indentGuides.js';\nimport { LineNumbersOverlay } from './viewParts/lineNumbers/lineNumbers.js';\nimport { ViewLines } from './viewParts/lines/viewLines.js';\nimport { LinesDecorationsOverlay } from './viewParts/linesDecorations/linesDecorations.js';\nimport { Margin } from './viewParts/margin/margin.js';\nimport { MarginViewLineDecorationsOverlay } from './viewParts/marginDecorations/marginDecorations.js';\nimport { Minimap } from './viewParts/minimap/minimap.js';\nimport { ViewOverlayWidgets } from './viewParts/overlayWidgets/overlayWidgets.js';\nimport { DecorationsOverviewRuler } from './viewParts/overviewRuler/decorationsOverviewRuler.js';\nimport { OverviewRuler } from './viewParts/overviewRuler/overviewRuler.js';\nimport { Rulers } from './viewParts/rulers/rulers.js';\nimport { ScrollDecorationViewPart } from './viewParts/scrollDecoration/scrollDecoration.js';\nimport { SelectionsOverlay } from './viewParts/selections/selections.js';\nimport { ViewCursors } from './viewParts/viewCursors/viewCursors.js';\nimport { ViewZones } from './viewParts/viewZones/viewZones.js';\nimport { WhitespaceOverlay } from './viewParts/whitespace/whitespace.js';\nimport { Position } from '../common/core/position.js';\nimport { Range } from '../common/core/range.js';\nimport { Selection } from '../common/core/selection.js';\nimport { GlyphMarginLane } from '../common/model.js';\nimport { ViewEventHandler } from '../common/viewEventHandler.js';\nimport { ViewportData } from '../common/viewLayout/viewLinesViewportData.js';\nimport { ViewContext } from '../common/viewModel/viewContext.js';\nimport { IInstantiationService } from '../../platform/instantiation/common/instantiation.js';\nimport { getThemeTypeSelector } from '../../platform/theme/common/themeService.js';\nlet View = class View extends ViewEventHandler {\n    constructor(commandDelegate, configuration, colorTheme, model, userInputEvents, overflowWidgetsDomNode, _instantiationService) {\n        super();\n        this._instantiationService = _instantiationService;\n        // Actual mutable state\n        this._shouldRecomputeGlyphMarginLanes = false;\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._renderAnimationFrame = null;\n        const viewController = new ViewController(configuration, model, userInputEvents, commandDelegate);\n        // The view context is passed on to most classes (basically to reduce param. counts in ctors)\n        this._context = new ViewContext(configuration, colorTheme, model);\n        // Ensure the view is the first event handler in order to update the layout\n        this._context.addEventHandler(this);\n        this._viewParts = [];\n        // Keyboard handler\n        this._textAreaHandler = this._instantiationService.createInstance(TextAreaHandler, this._context, viewController, this._createTextAreaHandlerHelper());\n        this._viewParts.push(this._textAreaHandler);\n        // These two dom nodes must be constructed up front, since references are needed in the layout provider (scrolling & co.)\n        this._linesContent = createFastDomNode(document.createElement('div'));\n        this._linesContent.setClassName('lines-content' + ' monaco-editor-background');\n        this._linesContent.setPosition('absolute');\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName(this._getEditorClassName());\n        // Set role 'code' for better screen reader support https://github.com/microsoft/vscode/issues/93438\n        this.domNode.setAttribute('role', 'code');\n        this._overflowGuardContainer = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._overflowGuardContainer, 3 /* PartFingerprint.OverflowGuard */);\n        this._overflowGuardContainer.setClassName('overflow-guard');\n        this._scrollbar = new EditorScrollbar(this._context, this._linesContent, this.domNode, this._overflowGuardContainer);\n        this._viewParts.push(this._scrollbar);\n        // View Lines\n        this._viewLines = new ViewLines(this._context, this._linesContent);\n        // View Zones\n        this._viewZones = new ViewZones(this._context);\n        this._viewParts.push(this._viewZones);\n        // Decorations overview ruler\n        const decorationsOverviewRuler = new DecorationsOverviewRuler(this._context);\n        this._viewParts.push(decorationsOverviewRuler);\n        const scrollDecoration = new ScrollDecorationViewPart(this._context);\n        this._viewParts.push(scrollDecoration);\n        const contentViewOverlays = new ContentViewOverlays(this._context);\n        this._viewParts.push(contentViewOverlays);\n        contentViewOverlays.addDynamicOverlay(new CurrentLineHighlightOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new SelectionsOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new IndentGuidesOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new DecorationsOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new WhitespaceOverlay(this._context));\n        const marginViewOverlays = new MarginViewOverlays(this._context);\n        this._viewParts.push(marginViewOverlays);\n        marginViewOverlays.addDynamicOverlay(new CurrentLineMarginHighlightOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new MarginViewLineDecorationsOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new LinesDecorationsOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new LineNumbersOverlay(this._context));\n        // Glyph margin widgets\n        this._glyphMarginWidgets = new GlyphMarginWidgets(this._context);\n        this._viewParts.push(this._glyphMarginWidgets);\n        const margin = new Margin(this._context);\n        margin.getDomNode().appendChild(this._viewZones.marginDomNode);\n        margin.getDomNode().appendChild(marginViewOverlays.getDomNode());\n        margin.getDomNode().appendChild(this._glyphMarginWidgets.domNode);\n        this._viewParts.push(margin);\n        // Content widgets\n        this._contentWidgets = new ViewContentWidgets(this._context, this.domNode);\n        this._viewParts.push(this._contentWidgets);\n        this._viewCursors = new ViewCursors(this._context);\n        this._viewParts.push(this._viewCursors);\n        // Overlay widgets\n        this._overlayWidgets = new ViewOverlayWidgets(this._context, this.domNode);\n        this._viewParts.push(this._overlayWidgets);\n        const rulers = new Rulers(this._context);\n        this._viewParts.push(rulers);\n        const blockOutline = new BlockDecorations(this._context);\n        this._viewParts.push(blockOutline);\n        const minimap = new Minimap(this._context);\n        this._viewParts.push(minimap);\n        // -------------- Wire dom nodes up\n        if (decorationsOverviewRuler) {\n            const overviewRulerData = this._scrollbar.getOverviewRulerLayoutInfo();\n            overviewRulerData.parent.insertBefore(decorationsOverviewRuler.getDomNode(), overviewRulerData.insertBefore);\n        }\n        this._linesContent.appendChild(contentViewOverlays.getDomNode());\n        this._linesContent.appendChild(rulers.domNode);\n        this._linesContent.appendChild(this._viewZones.domNode);\n        this._linesContent.appendChild(this._viewLines.getDomNode());\n        this._linesContent.appendChild(this._contentWidgets.domNode);\n        this._linesContent.appendChild(this._viewCursors.getDomNode());\n        this._overflowGuardContainer.appendChild(margin.getDomNode());\n        this._overflowGuardContainer.appendChild(this._scrollbar.getDomNode());\n        this._overflowGuardContainer.appendChild(scrollDecoration.getDomNode());\n        this._overflowGuardContainer.appendChild(this._textAreaHandler.textArea);\n        this._overflowGuardContainer.appendChild(this._textAreaHandler.textAreaCover);\n        this._overflowGuardContainer.appendChild(this._overlayWidgets.getDomNode());\n        this._overflowGuardContainer.appendChild(minimap.getDomNode());\n        this._overflowGuardContainer.appendChild(blockOutline.domNode);\n        this.domNode.appendChild(this._overflowGuardContainer);\n        if (overflowWidgetsDomNode) {\n            overflowWidgetsDomNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode.domNode);\n            overflowWidgetsDomNode.appendChild(this._overlayWidgets.overflowingOverlayWidgetsDomNode.domNode);\n        }\n        else {\n            this.domNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode);\n            this.domNode.appendChild(this._overlayWidgets.overflowingOverlayWidgetsDomNode);\n        }\n        this._applyLayout();\n        // Pointer handler\n        this._pointerHandler = this._register(new PointerHandler(this._context, viewController, this._createPointerHandlerHelper()));\n    }\n    _computeGlyphMarginLanes() {\n        const model = this._context.viewModel.model;\n        const laneModel = this._context.viewModel.glyphLanes;\n        let glyphs = [];\n        let maxLineNumber = 0;\n        // Add all margin decorations\n        glyphs = glyphs.concat(model.getAllMarginDecorations().map((decoration) => {\n            var _a, _b, _c;\n            const lane = (_b = (_a = decoration.options.glyphMargin) === null || _a === void 0 ? void 0 : _a.position) !== null && _b !== void 0 ? _b : GlyphMarginLane.Center;\n            maxLineNumber = Math.max(maxLineNumber, decoration.range.endLineNumber);\n            return { range: decoration.range, lane, persist: (_c = decoration.options.glyphMargin) === null || _c === void 0 ? void 0 : _c.persistLane };\n        }));\n        // Add all glyph margin widgets\n        glyphs = glyphs.concat(this._glyphMarginWidgets.getWidgets().map((widget) => {\n            const range = model.validateRange(widget.preference.range);\n            maxLineNumber = Math.max(maxLineNumber, range.endLineNumber);\n            return { range, lane: widget.preference.lane };\n        }));\n        // Sorted by their start position\n        glyphs.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n        laneModel.reset(maxLineNumber);\n        for (const glyph of glyphs) {\n            laneModel.push(glyph.lane, glyph.range, glyph.persist);\n        }\n        return laneModel;\n    }\n    _createPointerHandlerHelper() {\n        return {\n            viewDomNode: this.domNode.domNode,\n            linesContentDomNode: this._linesContent.domNode,\n            viewLinesDomNode: this._viewLines.getDomNode().domNode,\n            focusTextArea: () => {\n                this.focus();\n            },\n            dispatchTextAreaEvent: (event) => {\n                this._textAreaHandler.textArea.domNode.dispatchEvent(event);\n            },\n            getLastRenderData: () => {\n                const lastViewCursorsRenderData = this._viewCursors.getLastRenderData() || [];\n                const lastTextareaPosition = this._textAreaHandler.getLastRenderData();\n                return new PointerHandlerLastRenderData(lastViewCursorsRenderData, lastTextareaPosition);\n            },\n            renderNow: () => {\n                this.render(true, false);\n            },\n            shouldSuppressMouseDownOnViewZone: (viewZoneId) => {\n                return this._viewZones.shouldSuppressMouseDownOnViewZone(viewZoneId);\n            },\n            shouldSuppressMouseDownOnWidget: (widgetId) => {\n                return this._contentWidgets.shouldSuppressMouseDownOnWidget(widgetId);\n            },\n            getPositionFromDOMInfo: (spanNode, offset) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.getPositionFromDOMInfo(spanNode, offset);\n            },\n            visibleRangeForPosition: (lineNumber, column) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.visibleRangeForPosition(new Position(lineNumber, column));\n            },\n            getLineWidth: (lineNumber) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.getLineWidth(lineNumber);\n            }\n        };\n    }\n    _createTextAreaHandlerHelper() {\n        return {\n            visibleRangeForPosition: (position) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.visibleRangeForPosition(position);\n            }\n        };\n    }\n    _applyLayout() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this.domNode.setWidth(layoutInfo.width);\n        this.domNode.setHeight(layoutInfo.height);\n        this._overflowGuardContainer.setWidth(layoutInfo.width);\n        this._overflowGuardContainer.setHeight(layoutInfo.height);\n        this._linesContent.setWidth(1000000);\n        this._linesContent.setHeight(1000000);\n    }\n    _getEditorClassName() {\n        const focused = this._textAreaHandler.isFocused() ? ' focused' : '';\n        return this._context.configuration.options.get(141 /* EditorOption.editorClassName */) + ' ' + getThemeTypeSelector(this._context.theme.type) + focused;\n    }\n    // --- begin event handlers\n    handleEvents(events) {\n        super.handleEvents(events);\n        this._scheduleRender();\n    }\n    onConfigurationChanged(e) {\n        this.domNode.setClassName(this._getEditorClassName());\n        this._applyLayout();\n        return false;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        return false;\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsGlyphMargin) {\n            this._shouldRecomputeGlyphMarginLanes = true;\n        }\n        return false;\n    }\n    onFocusChanged(e) {\n        this.domNode.setClassName(this._getEditorClassName());\n        return false;\n    }\n    onThemeChanged(e) {\n        this._context.theme.update(e.theme);\n        this.domNode.setClassName(this._getEditorClassName());\n        return false;\n    }\n    // --- end event handlers\n    dispose() {\n        if (this._renderAnimationFrame !== null) {\n            this._renderAnimationFrame.dispose();\n            this._renderAnimationFrame = null;\n        }\n        this._contentWidgets.overflowingContentWidgetsDomNode.domNode.remove();\n        this._context.removeEventHandler(this);\n        this._viewLines.dispose();\n        // Destroy view parts\n        for (const viewPart of this._viewParts) {\n            viewPart.dispose();\n        }\n        super.dispose();\n    }\n    _scheduleRender() {\n        if (this._store.isDisposed) {\n            throw new BugIndicatingError();\n        }\n        if (this._renderAnimationFrame === null) {\n            const rendering = this._createCoordinatedRendering();\n            this._renderAnimationFrame = EditorRenderingCoordinator.INSTANCE.scheduleCoordinatedRendering({\n                window: dom.getWindow(this.domNode.domNode),\n                prepareRenderText: () => {\n                    if (this._store.isDisposed) {\n                        throw new BugIndicatingError();\n                    }\n                    try {\n                        return rendering.prepareRenderText();\n                    }\n                    finally {\n                        this._renderAnimationFrame = null;\n                    }\n                },\n                renderText: () => {\n                    if (this._store.isDisposed) {\n                        throw new BugIndicatingError();\n                    }\n                    return rendering.renderText();\n                },\n                prepareRender: (viewParts, ctx) => {\n                    if (this._store.isDisposed) {\n                        throw new BugIndicatingError();\n                    }\n                    return rendering.prepareRender(viewParts, ctx);\n                },\n                render: (viewParts, ctx) => {\n                    if (this._store.isDisposed) {\n                        throw new BugIndicatingError();\n                    }\n                    return rendering.render(viewParts, ctx);\n                }\n            });\n        }\n    }\n    _flushAccumulatedAndRenderNow() {\n        const rendering = this._createCoordinatedRendering();\n        safeInvokeNoArg(() => rendering.prepareRenderText());\n        const data = safeInvokeNoArg(() => rendering.renderText());\n        if (data) {\n            const [viewParts, ctx] = data;\n            safeInvokeNoArg(() => rendering.prepareRender(viewParts, ctx));\n            safeInvokeNoArg(() => rendering.render(viewParts, ctx));\n        }\n    }\n    _getViewPartsToRender() {\n        const result = [];\n        let resultLen = 0;\n        for (const viewPart of this._viewParts) {\n            if (viewPart.shouldRender()) {\n                result[resultLen++] = viewPart;\n            }\n        }\n        return result;\n    }\n    _createCoordinatedRendering() {\n        return {\n            prepareRenderText: () => {\n                if (this._shouldRecomputeGlyphMarginLanes) {\n                    this._shouldRecomputeGlyphMarginLanes = false;\n                    const model = this._computeGlyphMarginLanes();\n                    this._context.configuration.setGlyphMarginDecorationLaneCount(model.requiredLanes);\n                }\n                inputLatency.onRenderStart();\n            },\n            renderText: () => {\n                if (!this.domNode.domNode.isConnected) {\n                    return null;\n                }\n                let viewPartsToRender = this._getViewPartsToRender();\n                if (!this._viewLines.shouldRender() && viewPartsToRender.length === 0) {\n                    // Nothing to render\n                    return null;\n                }\n                const partialViewportData = this._context.viewLayout.getLinesViewportData();\n                this._context.viewModel.setViewport(partialViewportData.startLineNumber, partialViewportData.endLineNumber, partialViewportData.centeredLineNumber);\n                const viewportData = new ViewportData(this._selections, partialViewportData, this._context.viewLayout.getWhitespaceViewportData(), this._context.viewModel);\n                if (this._contentWidgets.shouldRender()) {\n                    // Give the content widgets a chance to set their max width before a possible synchronous layout\n                    this._contentWidgets.onBeforeRender(viewportData);\n                }\n                if (this._viewLines.shouldRender()) {\n                    this._viewLines.renderText(viewportData);\n                    this._viewLines.onDidRender();\n                    // Rendering of viewLines might cause scroll events to occur, so collect view parts to render again\n                    viewPartsToRender = this._getViewPartsToRender();\n                }\n                return [viewPartsToRender, new RenderingContext(this._context.viewLayout, viewportData, this._viewLines)];\n            },\n            prepareRender: (viewPartsToRender, ctx) => {\n                for (const viewPart of viewPartsToRender) {\n                    viewPart.prepareRender(ctx);\n                }\n            },\n            render: (viewPartsToRender, ctx) => {\n                for (const viewPart of viewPartsToRender) {\n                    viewPart.render(ctx);\n                    viewPart.onDidRender();\n                }\n            }\n        };\n    }\n    // --- BEGIN CodeEditor helpers\n    delegateVerticalScrollbarPointerDown(browserEvent) {\n        this._scrollbar.delegateVerticalScrollbarPointerDown(browserEvent);\n    }\n    delegateScrollFromMouseWheelEvent(browserEvent) {\n        this._scrollbar.delegateScrollFromMouseWheelEvent(browserEvent);\n    }\n    restoreState(scrollPosition) {\n        this._context.viewModel.viewLayout.setScrollPosition({\n            scrollTop: scrollPosition.scrollTop,\n            scrollLeft: scrollPosition.scrollLeft\n        }, 1 /* ScrollType.Immediate */);\n        this._context.viewModel.visibleLinesStabilized();\n    }\n    getOffsetForColumn(modelLineNumber, modelColumn) {\n        const modelPosition = this._context.viewModel.model.validatePosition({\n            lineNumber: modelLineNumber,\n            column: modelColumn\n        });\n        const viewPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n        this._flushAccumulatedAndRenderNow();\n        const visibleRange = this._viewLines.visibleRangeForPosition(new Position(viewPosition.lineNumber, viewPosition.column));\n        if (!visibleRange) {\n            return -1;\n        }\n        return visibleRange.left;\n    }\n    getTargetAtClientPoint(clientX, clientY) {\n        const mouseTarget = this._pointerHandler.getTargetAtClientPoint(clientX, clientY);\n        if (!mouseTarget) {\n            return null;\n        }\n        return ViewUserInputEvents.convertViewToModelMouseTarget(mouseTarget, this._context.viewModel.coordinatesConverter);\n    }\n    createOverviewRuler(cssClassName) {\n        return new OverviewRuler(this._context, cssClassName);\n    }\n    change(callback) {\n        this._viewZones.changeViewZones(callback);\n        this._scheduleRender();\n    }\n    render(now, everything) {\n        if (everything) {\n            // Force everything to render...\n            this._viewLines.forceShouldRender();\n            for (const viewPart of this._viewParts) {\n                viewPart.forceShouldRender();\n            }\n        }\n        if (now) {\n            this._flushAccumulatedAndRenderNow();\n        }\n        else {\n            this._scheduleRender();\n        }\n    }\n    writeScreenReaderContent(reason) {\n        this._textAreaHandler.writeScreenReaderContent(reason);\n    }\n    focus() {\n        this._textAreaHandler.focusTextArea();\n    }\n    isFocused() {\n        return this._textAreaHandler.isFocused();\n    }\n    setAriaOptions(options) {\n        this._textAreaHandler.setAriaOptions(options);\n    }\n    addContentWidget(widgetData) {\n        this._contentWidgets.addWidget(widgetData.widget);\n        this.layoutContentWidget(widgetData);\n        this._scheduleRender();\n    }\n    layoutContentWidget(widgetData) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        this._contentWidgets.setWidgetPosition(widgetData.widget, (_b = (_a = widgetData.position) === null || _a === void 0 ? void 0 : _a.position) !== null && _b !== void 0 ? _b : null, (_d = (_c = widgetData.position) === null || _c === void 0 ? void 0 : _c.secondaryPosition) !== null && _d !== void 0 ? _d : null, (_f = (_e = widgetData.position) === null || _e === void 0 ? void 0 : _e.preference) !== null && _f !== void 0 ? _f : null, (_h = (_g = widgetData.position) === null || _g === void 0 ? void 0 : _g.positionAffinity) !== null && _h !== void 0 ? _h : null);\n        this._scheduleRender();\n    }\n    removeContentWidget(widgetData) {\n        this._contentWidgets.removeWidget(widgetData.widget);\n        this._scheduleRender();\n    }\n    addOverlayWidget(widgetData) {\n        this._overlayWidgets.addWidget(widgetData.widget);\n        this.layoutOverlayWidget(widgetData);\n        this._scheduleRender();\n    }\n    layoutOverlayWidget(widgetData) {\n        const newPreference = widgetData.position ? widgetData.position.preference : null;\n        const shouldRender = this._overlayWidgets.setWidgetPosition(widgetData.widget, newPreference);\n        if (shouldRender) {\n            this._scheduleRender();\n        }\n    }\n    removeOverlayWidget(widgetData) {\n        this._overlayWidgets.removeWidget(widgetData.widget);\n        this._scheduleRender();\n    }\n    addGlyphMarginWidget(widgetData) {\n        this._glyphMarginWidgets.addWidget(widgetData.widget);\n        this._shouldRecomputeGlyphMarginLanes = true;\n        this._scheduleRender();\n    }\n    layoutGlyphMarginWidget(widgetData) {\n        const newPreference = widgetData.position;\n        const shouldRender = this._glyphMarginWidgets.setWidgetPosition(widgetData.widget, newPreference);\n        if (shouldRender) {\n            this._shouldRecomputeGlyphMarginLanes = true;\n            this._scheduleRender();\n        }\n    }\n    removeGlyphMarginWidget(widgetData) {\n        this._glyphMarginWidgets.removeWidget(widgetData.widget);\n        this._shouldRecomputeGlyphMarginLanes = true;\n        this._scheduleRender();\n    }\n};\nView = __decorate([\n    __param(6, IInstantiationService)\n], View);\nexport { View };\nfunction safeInvokeNoArg(func) {\n    try {\n        return func();\n    }\n    catch (e) {\n        onUnexpectedError(e);\n        return null;\n    }\n}\nclass EditorRenderingCoordinator {\n    constructor() {\n        this._coordinatedRenderings = [];\n        this._animationFrameRunners = new Map();\n    }\n    scheduleCoordinatedRendering(rendering) {\n        this._coordinatedRenderings.push(rendering);\n        this._scheduleRender(rendering.window);\n        return {\n            dispose: () => {\n                const renderingIndex = this._coordinatedRenderings.indexOf(rendering);\n                if (renderingIndex === -1) {\n                    return;\n                }\n                this._coordinatedRenderings.splice(renderingIndex, 1);\n                if (this._coordinatedRenderings.length === 0) {\n                    // There are no more renderings to coordinate => cancel animation frames\n                    for (const [_, disposable] of this._animationFrameRunners) {\n                        disposable.dispose();\n                    }\n                    this._animationFrameRunners.clear();\n                }\n            }\n        };\n    }\n    _scheduleRender(window) {\n        if (!this._animationFrameRunners.has(window)) {\n            const runner = () => {\n                this._animationFrameRunners.delete(window);\n                this._onRenderScheduled();\n            };\n            this._animationFrameRunners.set(window, dom.runAtThisOrScheduleAtNextAnimationFrame(window, runner, 100));\n        }\n    }\n    _onRenderScheduled() {\n        const coordinatedRenderings = this._coordinatedRenderings.slice(0);\n        this._coordinatedRenderings = [];\n        for (const rendering of coordinatedRenderings) {\n            safeInvokeNoArg(() => rendering.prepareRenderText());\n        }\n        const datas = [];\n        for (let i = 0, len = coordinatedRenderings.length; i < len; i++) {\n            const rendering = coordinatedRenderings[i];\n            datas[i] = safeInvokeNoArg(() => rendering.renderText());\n        }\n        for (let i = 0, len = coordinatedRenderings.length; i < len; i++) {\n            const rendering = coordinatedRenderings[i];\n            const data = datas[i];\n            if (!data) {\n                continue;\n            }\n            const [viewParts, ctx] = data;\n            safeInvokeNoArg(() => rendering.prepareRender(viewParts, ctx));\n        }\n        for (let i = 0, len = coordinatedRenderings.length; i < len; i++) {\n            const rendering = coordinatedRenderings[i];\n            const data = datas[i];\n            if (!data) {\n                continue;\n            }\n            const [viewParts, ctx] = data;\n            safeInvokeNoArg(() => rendering.render(viewParts, ctx));\n        }\n    }\n}\nEditorRenderingCoordinator.INSTANCE = new EditorRenderingCoordinator();\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var inputLatency;\n(function (inputLatency) {\n    const totalKeydownTime = { total: 0, min: Number.MAX_VALUE, max: 0 };\n    const totalInputTime = { ...totalKeydownTime };\n    const totalRenderTime = { ...totalKeydownTime };\n    const totalInputLatencyTime = { ...totalKeydownTime };\n    let measurementsCount = 0;\n    const state = {\n        keydown: 0 /* EventPhase.Before */,\n        input: 0 /* EventPhase.Before */,\n        render: 0 /* EventPhase.Before */,\n    };\n    /**\n     * Record the start of the keydown event.\n     */\n    function onKeyDown() {\n        /** Direct Check C. See explanation in {@link recordIfFinished} */\n        recordIfFinished();\n        performance.mark('inputlatency/start');\n        performance.mark('keydown/start');\n        state.keydown = 1 /* EventPhase.InProgress */;\n        queueMicrotask(markKeyDownEnd);\n    }\n    inputLatency.onKeyDown = onKeyDown;\n    /**\n     * Mark the end of the keydown event.\n     */\n    function markKeyDownEnd() {\n        if (state.keydown === 1 /* EventPhase.InProgress */) {\n            performance.mark('keydown/end');\n            state.keydown = 2 /* EventPhase.Finished */;\n        }\n    }\n    /**\n     * Record the start of the beforeinput event.\n     */\n    function onBeforeInput() {\n        performance.mark('input/start');\n        state.input = 1 /* EventPhase.InProgress */;\n        /** Schedule Task A. See explanation in {@link recordIfFinished} */\n        scheduleRecordIfFinishedTask();\n    }\n    inputLatency.onBeforeInput = onBeforeInput;\n    /**\n     * Record the start of the input event.\n     */\n    function onInput() {\n        if (state.input === 0 /* EventPhase.Before */) {\n            // it looks like we didn't receive a `beforeinput`\n            onBeforeInput();\n        }\n        queueMicrotask(markInputEnd);\n    }\n    inputLatency.onInput = onInput;\n    function markInputEnd() {\n        if (state.input === 1 /* EventPhase.InProgress */) {\n            performance.mark('input/end');\n            state.input = 2 /* EventPhase.Finished */;\n        }\n    }\n    /**\n     * Record the start of the keyup event.\n     */\n    function onKeyUp() {\n        /** Direct Check D. See explanation in {@link recordIfFinished} */\n        recordIfFinished();\n    }\n    inputLatency.onKeyUp = onKeyUp;\n    /**\n     * Record the start of the selectionchange event.\n     */\n    function onSelectionChange() {\n        /** Direct Check E. See explanation in {@link recordIfFinished} */\n        recordIfFinished();\n    }\n    inputLatency.onSelectionChange = onSelectionChange;\n    /**\n     * Record the start of the animation frame performing the rendering.\n     */\n    function onRenderStart() {\n        // Render may be triggered during input, but we only measure the following animation frame\n        if (state.keydown === 2 /* EventPhase.Finished */ && state.input === 2 /* EventPhase.Finished */ && state.render === 0 /* EventPhase.Before */) {\n            // Only measure the first render after keyboard input\n            performance.mark('render/start');\n            state.render = 1 /* EventPhase.InProgress */;\n            queueMicrotask(markRenderEnd);\n            /** Schedule Task B. See explanation in {@link recordIfFinished} */\n            scheduleRecordIfFinishedTask();\n        }\n    }\n    inputLatency.onRenderStart = onRenderStart;\n    /**\n     * Mark the end of the animation frame performing the rendering.\n     */\n    function markRenderEnd() {\n        if (state.render === 1 /* EventPhase.InProgress */) {\n            performance.mark('render/end');\n            state.render = 2 /* EventPhase.Finished */;\n        }\n    }\n    function scheduleRecordIfFinishedTask() {\n        // Here we can safely assume that the `setTimeout` will not be\n        // artificially delayed by 4ms because we schedule it from\n        // event handlers\n        setTimeout(recordIfFinished);\n    }\n    /**\n     * Record the input latency sample if input handling and rendering are finished.\n     *\n     * The challenge here is that we want to record the latency in such a way that it includes\n     * also the layout and painting work the browser does during the animation frame task.\n     *\n     * Simply scheduling a new task (via `setTimeout`) from the animation frame task would\n     * schedule the new task at the end of the task queue (after other code that uses `setTimeout`),\n     * so we need to use multiple strategies to make sure our task runs before others:\n     *\n     * We schedule tasks (A and B):\n     *    - we schedule a task A (via a `setTimeout` call) when the input starts in `markInputStart`.\n     *      If the animation frame task is scheduled quickly by the browser, then task A has a very good\n     *      chance of being the very first task after the animation frame and thus will record the input latency.\n     *    - however, if the animation frame task is scheduled a bit later, then task A might execute\n     *      before the animation frame task. We therefore schedule another task B from `markRenderStart`.\n     *\n     * We do direct checks in browser event handlers (C, D, E):\n     *    - if the browser has multiple keydown events queued up, they will be scheduled before the `setTimeout` tasks,\n     *      so we do a direct check in the keydown event handler (C).\n     *    - depending on timing, sometimes the animation frame is scheduled even before the `keyup` event, so we\n     *      do a direct check there too (E).\n     *    - the browser oftentimes emits a `selectionchange` event after an `input`, so we do a direct check there (D).\n     */\n    function recordIfFinished() {\n        if (state.keydown === 2 /* EventPhase.Finished */ && state.input === 2 /* EventPhase.Finished */ && state.render === 2 /* EventPhase.Finished */) {\n            performance.mark('inputlatency/end');\n            performance.measure('keydown', 'keydown/start', 'keydown/end');\n            performance.measure('input', 'input/start', 'input/end');\n            performance.measure('render', 'render/start', 'render/end');\n            performance.measure('inputlatency', 'inputlatency/start', 'inputlatency/end');\n            addMeasure('keydown', totalKeydownTime);\n            addMeasure('input', totalInputTime);\n            addMeasure('render', totalRenderTime);\n            addMeasure('inputlatency', totalInputLatencyTime);\n            // console.info(\n            // \t`input latency=${performance.getEntriesByName('inputlatency')[0].duration.toFixed(1)} [` +\n            // \t`keydown=${performance.getEntriesByName('keydown')[0].duration.toFixed(1)}, ` +\n            // \t`input=${performance.getEntriesByName('input')[0].duration.toFixed(1)}, ` +\n            // \t`render=${performance.getEntriesByName('render')[0].duration.toFixed(1)}` +\n            // \t`]`\n            // );\n            measurementsCount++;\n            reset();\n        }\n    }\n    function addMeasure(entryName, cumulativeMeasurement) {\n        const duration = performance.getEntriesByName(entryName)[0].duration;\n        cumulativeMeasurement.total += duration;\n        cumulativeMeasurement.min = Math.min(cumulativeMeasurement.min, duration);\n        cumulativeMeasurement.max = Math.max(cumulativeMeasurement.max, duration);\n    }\n    /**\n     * Clear the current sample.\n     */\n    function reset() {\n        performance.clearMarks('keydown/start');\n        performance.clearMarks('keydown/end');\n        performance.clearMarks('input/start');\n        performance.clearMarks('input/end');\n        performance.clearMarks('render/start');\n        performance.clearMarks('render/end');\n        performance.clearMarks('inputlatency/start');\n        performance.clearMarks('inputlatency/end');\n        performance.clearMeasures('keydown');\n        performance.clearMeasures('input');\n        performance.clearMeasures('render');\n        performance.clearMeasures('inputlatency');\n        state.keydown = 0 /* EventPhase.Before */;\n        state.input = 0 /* EventPhase.Before */;\n        state.render = 0 /* EventPhase.Before */;\n    }\n    /**\n     * Gets all input latency samples and clears the internal buffers to start recording a new set\n     * of samples.\n     */\n    function getAndClearMeasurements() {\n        if (measurementsCount === 0) {\n            return undefined;\n        }\n        // Assemble the result\n        const result = {\n            keydown: cumulativeToFinalMeasurement(totalKeydownTime),\n            input: cumulativeToFinalMeasurement(totalInputTime),\n            render: cumulativeToFinalMeasurement(totalRenderTime),\n            total: cumulativeToFinalMeasurement(totalInputLatencyTime),\n            sampleCount: measurementsCount\n        };\n        // Clear the cumulative measurements\n        clearCumulativeMeasurement(totalKeydownTime);\n        clearCumulativeMeasurement(totalInputTime);\n        clearCumulativeMeasurement(totalRenderTime);\n        clearCumulativeMeasurement(totalInputLatencyTime);\n        measurementsCount = 0;\n        return result;\n    }\n    inputLatency.getAndClearMeasurements = getAndClearMeasurements;\n    function cumulativeToFinalMeasurement(cumulative) {\n        return {\n            average: cumulative.total / measurementsCount,\n            max: cumulative.max,\n            min: cumulative.min,\n        };\n    }\n    function clearCumulativeMeasurement(cumulative) {\n        cumulative.total = 0;\n        cumulative.min = Number.MAX_VALUE;\n        cumulative.max = 0;\n    }\n})(inputLatency || (inputLatency = {}));\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../base/browser/dom.js';\nimport { GlobalPointerMoveMonitor } from '../../base/browser/globalPointerMoveMonitor.js';\nimport { StandardMouseEvent } from '../../base/browser/mouseEvent.js';\nimport { RunOnceScheduler } from '../../base/common/async.js';\nimport { Disposable, DisposableStore } from '../../base/common/lifecycle.js';\nimport { asCssVariable } from '../../platform/theme/common/colorRegistry.js';\n/**\n * Coordinates relative to the whole document (e.g. mouse event's pageX and pageY)\n */\nexport class PageCoordinates {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this._pageCoordinatesBrand = undefined;\n    }\n    toClientCoordinates(targetWindow) {\n        return new ClientCoordinates(this.x - targetWindow.scrollX, this.y - targetWindow.scrollY);\n    }\n}\n/**\n * Coordinates within the application's client area (i.e. origin is document's scroll position).\n *\n * For example, clicking in the top-left corner of the client area will\n * always result in a mouse event with a client.x value of 0, regardless\n * of whether the page is scrolled horizontally.\n */\nexport class ClientCoordinates {\n    constructor(clientX, clientY) {\n        this.clientX = clientX;\n        this.clientY = clientY;\n        this._clientCoordinatesBrand = undefined;\n    }\n    toPageCoordinates(targetWindow) {\n        return new PageCoordinates(this.clientX + targetWindow.scrollX, this.clientY + targetWindow.scrollY);\n    }\n}\n/**\n * The position of the editor in the page.\n */\nexport class EditorPagePosition {\n    constructor(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this._editorPagePositionBrand = undefined;\n    }\n}\n/**\n * Coordinates relative to the the (top;left) of the editor that can be used safely with other internal editor metrics.\n * **NOTE**: This position is obtained by taking page coordinates and transforming them relative to the\n * editor's (top;left) position in a way in which scale transformations are taken into account.\n * **NOTE**: These coordinates could be negative if the mouse position is outside the editor.\n */\nexport class CoordinatesRelativeToEditor {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this._positionRelativeToEditorBrand = undefined;\n    }\n}\nexport function createEditorPagePosition(editorViewDomNode) {\n    const editorPos = dom.getDomNodePagePosition(editorViewDomNode);\n    return new EditorPagePosition(editorPos.left, editorPos.top, editorPos.width, editorPos.height);\n}\nexport function createCoordinatesRelativeToEditor(editorViewDomNode, editorPagePosition, pos) {\n    // The editor's page position is read from the DOM using getBoundingClientRect().\n    //\n    // getBoundingClientRect() returns the actual dimensions, while offsetWidth and offsetHeight\n    // reflect the unscaled size. We can use this difference to detect a transform:scale()\n    // and we will apply the transformation in inverse to get mouse coordinates that make sense inside the editor.\n    //\n    // This could be expanded to cover rotation as well maybe by walking the DOM up from `editorViewDomNode`\n    // and computing the effective transformation matrix using getComputedStyle(element).transform.\n    //\n    const scaleX = editorPagePosition.width / editorViewDomNode.offsetWidth;\n    const scaleY = editorPagePosition.height / editorViewDomNode.offsetHeight;\n    // Adjust mouse offsets if editor appears to be scaled via transforms\n    const relativeX = (pos.x - editorPagePosition.x) / scaleX;\n    const relativeY = (pos.y - editorPagePosition.y) / scaleY;\n    return new CoordinatesRelativeToEditor(relativeX, relativeY);\n}\nexport class EditorMouseEvent extends StandardMouseEvent {\n    constructor(e, isFromPointerCapture, editorViewDomNode) {\n        super(dom.getWindow(editorViewDomNode), e);\n        this._editorMouseEventBrand = undefined;\n        this.isFromPointerCapture = isFromPointerCapture;\n        this.pos = new PageCoordinates(this.posx, this.posy);\n        this.editorPos = createEditorPagePosition(editorViewDomNode);\n        this.relativePos = createCoordinatesRelativeToEditor(editorViewDomNode, this.editorPos, this.pos);\n    }\n}\nexport class EditorMouseEventFactory {\n    constructor(editorViewDomNode) {\n        this._editorViewDomNode = editorViewDomNode;\n    }\n    _create(e) {\n        return new EditorMouseEvent(e, false, this._editorViewDomNode);\n    }\n    onContextMenu(target, callback) {\n        return dom.addDisposableListener(target, 'contextmenu', (e) => {\n            callback(this._create(e));\n        });\n    }\n    onMouseUp(target, callback) {\n        return dom.addDisposableListener(target, 'mouseup', (e) => {\n            callback(this._create(e));\n        });\n    }\n    onMouseDown(target, callback) {\n        return dom.addDisposableListener(target, dom.EventType.MOUSE_DOWN, (e) => {\n            callback(this._create(e));\n        });\n    }\n    onPointerDown(target, callback) {\n        return dom.addDisposableListener(target, dom.EventType.POINTER_DOWN, (e) => {\n            callback(this._create(e), e.pointerId);\n        });\n    }\n    onMouseLeave(target, callback) {\n        return dom.addDisposableListener(target, dom.EventType.MOUSE_LEAVE, (e) => {\n            callback(this._create(e));\n        });\n    }\n    onMouseMove(target, callback) {\n        return dom.addDisposableListener(target, 'mousemove', (e) => callback(this._create(e)));\n    }\n}\nexport class EditorPointerEventFactory {\n    constructor(editorViewDomNode) {\n        this._editorViewDomNode = editorViewDomNode;\n    }\n    _create(e) {\n        return new EditorMouseEvent(e, false, this._editorViewDomNode);\n    }\n    onPointerUp(target, callback) {\n        return dom.addDisposableListener(target, 'pointerup', (e) => {\n            callback(this._create(e));\n        });\n    }\n    onPointerDown(target, callback) {\n        return dom.addDisposableListener(target, dom.EventType.POINTER_DOWN, (e) => {\n            callback(this._create(e), e.pointerId);\n        });\n    }\n    onPointerLeave(target, callback) {\n        return dom.addDisposableListener(target, dom.EventType.POINTER_LEAVE, (e) => {\n            callback(this._create(e));\n        });\n    }\n    onPointerMove(target, callback) {\n        return dom.addDisposableListener(target, 'pointermove', (e) => callback(this._create(e)));\n    }\n}\nexport class GlobalEditorPointerMoveMonitor extends Disposable {\n    constructor(editorViewDomNode) {\n        super();\n        this._editorViewDomNode = editorViewDomNode;\n        this._globalPointerMoveMonitor = this._register(new GlobalPointerMoveMonitor());\n        this._keydownListener = null;\n    }\n    startMonitoring(initialElement, pointerId, initialButtons, pointerMoveCallback, onStopCallback) {\n        // Add a <<capture>> keydown event listener that will cancel the monitoring\n        // if something other than a modifier key is pressed\n        this._keydownListener = dom.addStandardDisposableListener(initialElement.ownerDocument, 'keydown', (e) => {\n            const chord = e.toKeyCodeChord();\n            if (chord.isModifierKey()) {\n                // Allow modifier keys\n                return;\n            }\n            this._globalPointerMoveMonitor.stopMonitoring(true, e.browserEvent);\n        }, true);\n        this._globalPointerMoveMonitor.startMonitoring(initialElement, pointerId, initialButtons, (e) => {\n            pointerMoveCallback(new EditorMouseEvent(e, true, this._editorViewDomNode));\n        }, (e) => {\n            this._keydownListener.dispose();\n            onStopCallback(e);\n        });\n    }\n    stopMonitoring() {\n        this._globalPointerMoveMonitor.stopMonitoring(true);\n    }\n}\n/**\n * A helper to create dynamic css rules, bound to a class name.\n * Rules are reused.\n * Reference counting and delayed garbage collection ensure that no rules leak.\n*/\nexport class DynamicCssRules {\n    constructor(_editor) {\n        this._editor = _editor;\n        this._instanceId = ++DynamicCssRules._idPool;\n        this._counter = 0;\n        this._rules = new Map();\n        // We delay garbage collection so that hanging rules can be reused.\n        this._garbageCollectionScheduler = new RunOnceScheduler(() => this.garbageCollect(), 1000);\n    }\n    createClassNameRef(options) {\n        const rule = this.getOrCreateRule(options);\n        rule.increaseRefCount();\n        return {\n            className: rule.className,\n            dispose: () => {\n                rule.decreaseRefCount();\n                this._garbageCollectionScheduler.schedule();\n            }\n        };\n    }\n    getOrCreateRule(properties) {\n        const key = this.computeUniqueKey(properties);\n        let existingRule = this._rules.get(key);\n        if (!existingRule) {\n            const counter = this._counter++;\n            existingRule = new RefCountedCssRule(key, `dyn-rule-${this._instanceId}-${counter}`, dom.isInShadowDOM(this._editor.getContainerDomNode())\n                ? this._editor.getContainerDomNode()\n                : undefined, properties);\n            this._rules.set(key, existingRule);\n        }\n        return existingRule;\n    }\n    computeUniqueKey(properties) {\n        return JSON.stringify(properties);\n    }\n    garbageCollect() {\n        for (const rule of this._rules.values()) {\n            if (!rule.hasReferences()) {\n                this._rules.delete(rule.key);\n                rule.dispose();\n            }\n        }\n    }\n}\nDynamicCssRules._idPool = 0;\nclass RefCountedCssRule {\n    constructor(key, className, _containerElement, properties) {\n        this.key = key;\n        this.className = className;\n        this.properties = properties;\n        this._referenceCount = 0;\n        this._styleElementDisposables = new DisposableStore();\n        this._styleElement = dom.createStyleSheet(_containerElement, undefined, this._styleElementDisposables);\n        this._styleElement.textContent = this.getCssText(this.className, this.properties);\n    }\n    getCssText(className, properties) {\n        let str = `.${className} {`;\n        for (const prop in properties) {\n            const value = properties[prop];\n            let cssValue;\n            if (typeof value === 'object') {\n                cssValue = asCssVariable(value.id);\n            }\n            else {\n                cssValue = value;\n            }\n            const cssPropName = camelToDashes(prop);\n            str += `\\n\\t${cssPropName}: ${cssValue};`;\n        }\n        str += `\\n}`;\n        return str;\n    }\n    dispose() {\n        this._styleElementDisposables.dispose();\n        this._styleElement = undefined;\n    }\n    increaseRefCount() {\n        this._referenceCount++;\n    }\n    decreaseRefCount() {\n        this._referenceCount--;\n    }\n    hasReferences() {\n        return this._referenceCount > 0;\n    }\n}\nfunction camelToDashes(str) {\n    return str.replace(/(^[A-Z])/, ([first]) => first.toLowerCase())\n        .replace(/([A-Z])/g, ([letter]) => `-${letter.toLowerCase()}`);\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../base/common/lifecycle.js';\nexport class ViewEventHandler extends Disposable {\n    constructor() {\n        super();\n        this._shouldRender = true;\n    }\n    shouldRender() {\n        return this._shouldRender;\n    }\n    forceShouldRender() {\n        this._shouldRender = true;\n    }\n    setShouldRender() {\n        this._shouldRender = true;\n    }\n    onDidRender() {\n        this._shouldRender = false;\n    }\n    // --- begin event handlers\n    onCompositionStart(e) {\n        return false;\n    }\n    onCompositionEnd(e) {\n        return false;\n    }\n    onConfigurationChanged(e) {\n        return false;\n    }\n    onCursorStateChanged(e) {\n        return false;\n    }\n    onDecorationsChanged(e) {\n        return false;\n    }\n    onFlushed(e) {\n        return false;\n    }\n    onFocusChanged(e) {\n        return false;\n    }\n    onLanguageConfigurationChanged(e) {\n        return false;\n    }\n    onLineMappingChanged(e) {\n        return false;\n    }\n    onLinesChanged(e) {\n        return false;\n    }\n    onLinesDeleted(e) {\n        return false;\n    }\n    onLinesInserted(e) {\n        return false;\n    }\n    onRevealRangeRequest(e) {\n        return false;\n    }\n    onScrollChanged(e) {\n        return false;\n    }\n    onThemeChanged(e) {\n        return false;\n    }\n    onTokensChanged(e) {\n        return false;\n    }\n    onTokensColorsChanged(e) {\n        return false;\n    }\n    onZonesChanged(e) {\n        return false;\n    }\n    // --- end event handlers\n    handleEvents(events) {\n        let shouldRender = false;\n        for (let i = 0, len = events.length; i < len; i++) {\n            const e = events[i];\n            switch (e.type) {\n                case 0 /* viewEvents.ViewEventType.ViewCompositionStart */:\n                    if (this.onCompositionStart(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 1 /* viewEvents.ViewEventType.ViewCompositionEnd */:\n                    if (this.onCompositionEnd(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 2 /* viewEvents.ViewEventType.ViewConfigurationChanged */:\n                    if (this.onConfigurationChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 3 /* viewEvents.ViewEventType.ViewCursorStateChanged */:\n                    if (this.onCursorStateChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 4 /* viewEvents.ViewEventType.ViewDecorationsChanged */:\n                    if (this.onDecorationsChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 5 /* viewEvents.ViewEventType.ViewFlushed */:\n                    if (this.onFlushed(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 6 /* viewEvents.ViewEventType.ViewFocusChanged */:\n                    if (this.onFocusChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 7 /* viewEvents.ViewEventType.ViewLanguageConfigurationChanged */:\n                    if (this.onLanguageConfigurationChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 8 /* viewEvents.ViewEventType.ViewLineMappingChanged */:\n                    if (this.onLineMappingChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 9 /* viewEvents.ViewEventType.ViewLinesChanged */:\n                    if (this.onLinesChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 10 /* viewEvents.ViewEventType.ViewLinesDeleted */:\n                    if (this.onLinesDeleted(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 11 /* viewEvents.ViewEventType.ViewLinesInserted */:\n                    if (this.onLinesInserted(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 12 /* viewEvents.ViewEventType.ViewRevealRangeRequest */:\n                    if (this.onRevealRangeRequest(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 13 /* viewEvents.ViewEventType.ViewScrollChanged */:\n                    if (this.onScrollChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 15 /* viewEvents.ViewEventType.ViewTokensChanged */:\n                    if (this.onTokensChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 14 /* viewEvents.ViewEventType.ViewThemeChanged */:\n                    if (this.onThemeChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 16 /* viewEvents.ViewEventType.ViewTokensColorsChanged */:\n                    if (this.onTokensColorsChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 17 /* viewEvents.ViewEventType.ViewZonesChanged */:\n                    if (this.onZonesChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                default:\n                    console.info('View received unknown event: ');\n                    console.info(e);\n            }\n        }\n        if (shouldRender) {\n            this._shouldRender = true;\n        }\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ViewEventHandler } from '../../common/viewEventHandler.js';\nexport class ViewPart extends ViewEventHandler {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        super.dispose();\n    }\n}\nexport class PartFingerprints {\n    static write(target, partId) {\n        target.setAttribute('data-mprt', String(partId));\n    }\n    static read(target) {\n        const r = target.getAttribute('data-mprt');\n        if (r === null) {\n            return 0 /* PartFingerprint.None */;\n        }\n        return parseInt(r, 10);\n    }\n    static collect(child, stopAt) {\n        const result = [];\n        let resultLen = 0;\n        while (child && child !== child.ownerDocument.body) {\n            if (child === stopAt) {\n                break;\n            }\n            if (child.nodeType === child.ELEMENT_NODE) {\n                result[resultLen++] = this.read(child);\n            }\n            child = child.parentElement;\n        }\n        const r = new Uint8Array(resultLen);\n        for (let i = 0; i < resultLen; i++) {\n            r[i] = result[resultLen - i - 1];\n        }\n        return r;\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from '../../../../base/browser/browser.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { RangeUtil } from './rangeUtil.js';\nimport { FloatHorizontalRange, VisibleRanges } from '../../view/renderingContext.js';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine, LineRange, DomPosition } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nimport { EditorFontLigatures } from '../../../common/config/editorOptions.js';\nconst canUseFastRenderedViewLine = (function () {\n    if (platform.isNative) {\n        // In VSCode we know very well when the zoom level changes\n        return true;\n    }\n    if (platform.isLinux || browser.isFirefox || browser.isSafari) {\n        // On Linux, it appears that zooming affects char widths (in pixels), which is unexpected.\n        // --\n        // Even though we read character widths correctly, having read them at a specific zoom level\n        // does not mean they are the same at the current zoom level.\n        // --\n        // This could be improved if we ever figure out how to get an event when browsers zoom,\n        // but until then we have to stick with reading client rects.\n        // --\n        // The same has been observed with Firefox on Windows7\n        // --\n        // The same has been oversved with Safari\n        return false;\n    }\n    return true;\n})();\nlet monospaceAssumptionsAreValid = true;\nexport class ViewLineOptions {\n    constructor(config, themeType) {\n        this.themeType = themeType;\n        const options = config.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const experimentalWhitespaceRendering = options.get(38 /* EditorOption.experimentalWhitespaceRendering */);\n        if (experimentalWhitespaceRendering === 'off') {\n            this.renderWhitespace = options.get(99 /* EditorOption.renderWhitespace */);\n        }\n        else {\n            // whitespace is rendered in a different layer\n            this.renderWhitespace = 'none';\n        }\n        this.renderControlCharacters = options.get(94 /* EditorOption.renderControlCharacters */);\n        this.spaceWidth = fontInfo.spaceWidth;\n        this.middotWidth = fontInfo.middotWidth;\n        this.wsmiddotWidth = fontInfo.wsmiddotWidth;\n        this.useMonospaceOptimizations = (fontInfo.isMonospace\n            && !options.get(33 /* EditorOption.disableMonospaceOptimizations */));\n        this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\n        this.lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this.stopRenderingLineAfter = options.get(117 /* EditorOption.stopRenderingLineAfter */);\n        this.fontLigatures = options.get(51 /* EditorOption.fontLigatures */);\n    }\n    equals(other) {\n        return (this.themeType === other.themeType\n            && this.renderWhitespace === other.renderWhitespace\n            && this.renderControlCharacters === other.renderControlCharacters\n            && this.spaceWidth === other.spaceWidth\n            && this.middotWidth === other.middotWidth\n            && this.wsmiddotWidth === other.wsmiddotWidth\n            && this.useMonospaceOptimizations === other.useMonospaceOptimizations\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineHeight === other.lineHeight\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter\n            && this.fontLigatures === other.fontLigatures);\n    }\n}\nexport class ViewLine {\n    constructor(options) {\n        this._options = options;\n        this._isMaybeInvalid = true;\n        this._renderedViewLine = null;\n    }\n    // --- begin IVisibleLineData\n    getDomNode() {\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\n            return this._renderedViewLine.domNode.domNode;\n        }\n        return null;\n    }\n    setDomNode(domNode) {\n        if (this._renderedViewLine) {\n            this._renderedViewLine.domNode = createFastDomNode(domNode);\n        }\n        else {\n            throw new Error('I have no rendered view line to set the dom node to...');\n        }\n    }\n    onContentChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onTokensChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onDecorationsChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onOptionsChanged(newOptions) {\n        this._isMaybeInvalid = true;\n        this._options = newOptions;\n    }\n    onSelectionChanged() {\n        if (isHighContrast(this._options.themeType) || this._options.renderWhitespace === 'selection') {\n            this._isMaybeInvalid = true;\n            return true;\n        }\n        return false;\n    }\n    renderLine(lineNumber, deltaTop, viewportData, sb) {\n        if (this._isMaybeInvalid === false) {\n            // it appears that nothing relevant has changed\n            return false;\n        }\n        this._isMaybeInvalid = false;\n        const lineData = viewportData.getViewLineRenderingData(lineNumber);\n        const options = this._options;\n        const actualInlineDecorations = LineDecoration.filter(lineData.inlineDecorations, lineNumber, lineData.minColumn, lineData.maxColumn);\n        // Only send selection information when needed for rendering whitespace\n        let selectionsOnLine = null;\n        if (isHighContrast(options.themeType) || this._options.renderWhitespace === 'selection') {\n            const selections = viewportData.selections;\n            for (const selection of selections) {\n                if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n                    // Selection does not intersect line\n                    continue;\n                }\n                const startColumn = (selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn);\n                const endColumn = (selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn);\n                if (startColumn < endColumn) {\n                    if (isHighContrast(options.themeType)) {\n                        actualInlineDecorations.push(new LineDecoration(startColumn, endColumn, 'inline-selected-text', 0 /* InlineDecorationType.Regular */));\n                    }\n                    if (this._options.renderWhitespace === 'selection') {\n                        if (!selectionsOnLine) {\n                            selectionsOnLine = [];\n                        }\n                        selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\n                    }\n                }\n            }\n        }\n        const renderLineInput = new RenderLineInput(options.useMonospaceOptimizations, options.canUseHalfwidthRightwardsArrow, lineData.content, lineData.continuesWithWrappedLine, lineData.isBasicASCII, lineData.containsRTL, lineData.minColumn - 1, lineData.tokens, actualInlineDecorations, lineData.tabSize, lineData.startVisibleColumn, options.spaceWidth, options.middotWidth, options.wsmiddotWidth, options.stopRenderingLineAfter, options.renderWhitespace, options.renderControlCharacters, options.fontLigatures !== EditorFontLigatures.OFF, selectionsOnLine);\n        if (this._renderedViewLine && this._renderedViewLine.input.equals(renderLineInput)) {\n            // no need to do anything, we have the same render input\n            return false;\n        }\n        sb.appendString('<div style=\"top:');\n        sb.appendString(String(deltaTop));\n        sb.appendString('px;height:');\n        sb.appendString(String(this._options.lineHeight));\n        sb.appendString('px;\" class=\"');\n        sb.appendString(ViewLine.CLASS_NAME);\n        sb.appendString('\">');\n        const output = renderViewLine(renderLineInput, sb);\n        sb.appendString('</div>');\n        let renderedViewLine = null;\n        if (monospaceAssumptionsAreValid && canUseFastRenderedViewLine && lineData.isBasicASCII && options.useMonospaceOptimizations && output.containsForeignElements === 0 /* ForeignElementType.None */) {\n            renderedViewLine = new FastRenderedViewLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping);\n        }\n        if (!renderedViewLine) {\n            renderedViewLine = createRenderedLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping, output.containsRTL, output.containsForeignElements);\n        }\n        this._renderedViewLine = renderedViewLine;\n        return true;\n    }\n    layoutLine(lineNumber, deltaTop) {\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\n            this._renderedViewLine.domNode.setTop(deltaTop);\n            this._renderedViewLine.domNode.setHeight(this._options.lineHeight);\n        }\n    }\n    // --- end IVisibleLineData\n    getWidth(context) {\n        if (!this._renderedViewLine) {\n            return 0;\n        }\n        return this._renderedViewLine.getWidth(context);\n    }\n    getWidthIsFast() {\n        if (!this._renderedViewLine) {\n            return true;\n        }\n        return this._renderedViewLine.getWidthIsFast();\n    }\n    needsMonospaceFontCheck() {\n        if (!this._renderedViewLine) {\n            return false;\n        }\n        return (this._renderedViewLine instanceof FastRenderedViewLine);\n    }\n    monospaceAssumptionsAreValid() {\n        if (!this._renderedViewLine) {\n            return monospaceAssumptionsAreValid;\n        }\n        if (this._renderedViewLine instanceof FastRenderedViewLine) {\n            return this._renderedViewLine.monospaceAssumptionsAreValid();\n        }\n        return monospaceAssumptionsAreValid;\n    }\n    onMonospaceAssumptionsInvalidated() {\n        if (this._renderedViewLine && this._renderedViewLine instanceof FastRenderedViewLine) {\n            this._renderedViewLine = this._renderedViewLine.toSlowRenderedLine();\n        }\n    }\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        if (!this._renderedViewLine) {\n            return null;\n        }\n        startColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, startColumn));\n        endColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, endColumn));\n        const stopRenderingLineAfter = this._renderedViewLine.input.stopRenderingLineAfter;\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1 && endColumn > stopRenderingLineAfter + 1) {\n            // This range is obviously not visible\n            return new VisibleRanges(true, [new FloatHorizontalRange(this.getWidth(context), 0)]);\n        }\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1) {\n            startColumn = stopRenderingLineAfter + 1;\n        }\n        if (stopRenderingLineAfter !== -1 && endColumn > stopRenderingLineAfter + 1) {\n            endColumn = stopRenderingLineAfter + 1;\n        }\n        const horizontalRanges = this._renderedViewLine.getVisibleRangesForRange(lineNumber, startColumn, endColumn, context);\n        if (horizontalRanges && horizontalRanges.length > 0) {\n            return new VisibleRanges(false, horizontalRanges);\n        }\n        return null;\n    }\n    getColumnOfNodeOffset(spanNode, offset) {\n        if (!this._renderedViewLine) {\n            return 1;\n        }\n        return this._renderedViewLine.getColumnOfNodeOffset(spanNode, offset);\n    }\n}\nViewLine.CLASS_NAME = 'view-line';\n/**\n * A rendered line which is guaranteed to contain only regular ASCII and is rendered with a monospace font.\n */\nclass FastRenderedViewLine {\n    constructor(domNode, renderLineInput, characterMapping) {\n        this._cachedWidth = -1;\n        this.domNode = domNode;\n        this.input = renderLineInput;\n        const keyColumnCount = Math.floor(renderLineInput.lineContent.length / 300 /* Constants.MaxMonospaceDistance */);\n        if (keyColumnCount > 0) {\n            this._keyColumnPixelOffsetCache = new Float32Array(keyColumnCount);\n            for (let i = 0; i < keyColumnCount; i++) {\n                this._keyColumnPixelOffsetCache[i] = -1;\n            }\n        }\n        else {\n            this._keyColumnPixelOffsetCache = null;\n        }\n        this._characterMapping = characterMapping;\n        this._charWidth = renderLineInput.spaceWidth;\n    }\n    getWidth(context) {\n        if (!this.domNode || this.input.lineContent.length < 300 /* Constants.MaxMonospaceDistance */) {\n            const horizontalOffset = this._characterMapping.getHorizontalOffset(this._characterMapping.length);\n            return Math.round(this._charWidth * horizontalOffset);\n        }\n        if (this._cachedWidth === -1) {\n            this._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth;\n            context === null || context === void 0 ? void 0 : context.markDidDomLayout();\n        }\n        return this._cachedWidth;\n    }\n    getWidthIsFast() {\n        return (this.input.lineContent.length < 300 /* Constants.MaxMonospaceDistance */) || this._cachedWidth !== -1;\n    }\n    monospaceAssumptionsAreValid() {\n        if (!this.domNode) {\n            return monospaceAssumptionsAreValid;\n        }\n        if (this.input.lineContent.length < 300 /* Constants.MaxMonospaceDistance */) {\n            const expectedWidth = this.getWidth(null);\n            const actualWidth = this.domNode.domNode.firstChild.offsetWidth;\n            if (Math.abs(expectedWidth - actualWidth) >= 2) {\n                // more than 2px off\n                console.warn(`monospace assumptions have been violated, therefore disabling monospace optimizations!`);\n                monospaceAssumptionsAreValid = false;\n            }\n        }\n        return monospaceAssumptionsAreValid;\n    }\n    toSlowRenderedLine() {\n        return createRenderedLine(this.domNode, this.input, this._characterMapping, false, 0 /* ForeignElementType.None */);\n    }\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        const startPosition = this._getColumnPixelOffset(lineNumber, startColumn, context);\n        const endPosition = this._getColumnPixelOffset(lineNumber, endColumn, context);\n        return [new FloatHorizontalRange(startPosition, endPosition - startPosition)];\n    }\n    _getColumnPixelOffset(lineNumber, column, context) {\n        if (column <= 300 /* Constants.MaxMonospaceDistance */) {\n            const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n            return this._charWidth * horizontalOffset;\n        }\n        const keyColumnOrdinal = Math.floor((column - 1) / 300 /* Constants.MaxMonospaceDistance */) - 1;\n        const keyColumn = (keyColumnOrdinal + 1) * 300 /* Constants.MaxMonospaceDistance */ + 1;\n        let keyColumnPixelOffset = -1;\n        if (this._keyColumnPixelOffsetCache) {\n            keyColumnPixelOffset = this._keyColumnPixelOffsetCache[keyColumnOrdinal];\n            if (keyColumnPixelOffset === -1) {\n                keyColumnPixelOffset = this._actualReadPixelOffset(lineNumber, keyColumn, context);\n                this._keyColumnPixelOffsetCache[keyColumnOrdinal] = keyColumnPixelOffset;\n            }\n        }\n        if (keyColumnPixelOffset === -1) {\n            // Could not read actual key column pixel offset\n            const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n            return this._charWidth * horizontalOffset;\n        }\n        const keyColumnHorizontalOffset = this._characterMapping.getHorizontalOffset(keyColumn);\n        const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n        return keyColumnPixelOffset + this._charWidth * (horizontalOffset - keyColumnHorizontalOffset);\n    }\n    _getReadingTarget(myDomNode) {\n        return myDomNode.domNode.firstChild;\n    }\n    _actualReadPixelOffset(lineNumber, column, context) {\n        if (!this.domNode) {\n            return -1;\n        }\n        const domPosition = this._characterMapping.getDomPosition(column);\n        const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(this.domNode), domPosition.partIndex, domPosition.charIndex, domPosition.partIndex, domPosition.charIndex, context);\n        if (!r || r.length === 0) {\n            return -1;\n        }\n        return r[0].left;\n    }\n    getColumnOfNodeOffset(spanNode, offset) {\n        return getColumnOfNodeOffset(this._characterMapping, spanNode, offset);\n    }\n}\n/**\n * Every time we render a line, we save what we have rendered in an instance of this class.\n */\nclass RenderedViewLine {\n    constructor(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n        this.domNode = domNode;\n        this.input = renderLineInput;\n        this._characterMapping = characterMapping;\n        this._isWhitespaceOnly = /^\\s*$/.test(renderLineInput.lineContent);\n        this._containsForeignElements = containsForeignElements;\n        this._cachedWidth = -1;\n        this._pixelOffsetCache = null;\n        if (!containsRTL || this._characterMapping.length === 0 /* the line is empty */) {\n            this._pixelOffsetCache = new Float32Array(Math.max(2, this._characterMapping.length + 1));\n            for (let column = 0, len = this._characterMapping.length; column <= len; column++) {\n                this._pixelOffsetCache[column] = -1;\n            }\n        }\n    }\n    // --- Reading from the DOM methods\n    _getReadingTarget(myDomNode) {\n        return myDomNode.domNode.firstChild;\n    }\n    /**\n     * Width of the line in pixels\n     */\n    getWidth(context) {\n        if (!this.domNode) {\n            return 0;\n        }\n        if (this._cachedWidth === -1) {\n            this._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth;\n            context === null || context === void 0 ? void 0 : context.markDidDomLayout();\n        }\n        return this._cachedWidth;\n    }\n    getWidthIsFast() {\n        if (this._cachedWidth === -1) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Visible ranges for a model range\n     */\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        if (!this.domNode) {\n            return null;\n        }\n        if (this._pixelOffsetCache !== null) {\n            // the text is LTR\n            const startOffset = this._readPixelOffset(this.domNode, lineNumber, startColumn, context);\n            if (startOffset === -1) {\n                return null;\n            }\n            const endOffset = this._readPixelOffset(this.domNode, lineNumber, endColumn, context);\n            if (endOffset === -1) {\n                return null;\n            }\n            return [new FloatHorizontalRange(startOffset, endOffset - startOffset)];\n        }\n        return this._readVisibleRangesForRange(this.domNode, lineNumber, startColumn, endColumn, context);\n    }\n    _readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context) {\n        if (startColumn === endColumn) {\n            const pixelOffset = this._readPixelOffset(domNode, lineNumber, startColumn, context);\n            if (pixelOffset === -1) {\n                return null;\n            }\n            else {\n                return [new FloatHorizontalRange(pixelOffset, 0)];\n            }\n        }\n        else {\n            return this._readRawVisibleRangesForRange(domNode, startColumn, endColumn, context);\n        }\n    }\n    _readPixelOffset(domNode, lineNumber, column, context) {\n        if (this._characterMapping.length === 0) {\n            // This line has no content\n            if (this._containsForeignElements === 0 /* ForeignElementType.None */) {\n                // We can assume the line is really empty\n                return 0;\n            }\n            if (this._containsForeignElements === 2 /* ForeignElementType.After */) {\n                // We have foreign elements after the (empty) line\n                return 0;\n            }\n            if (this._containsForeignElements === 1 /* ForeignElementType.Before */) {\n                // We have foreign elements before the (empty) line\n                return this.getWidth(context);\n            }\n            // We have foreign elements before & after the (empty) line\n            const readingTarget = this._getReadingTarget(domNode);\n            if (readingTarget.firstChild) {\n                context.markDidDomLayout();\n                return readingTarget.firstChild.offsetWidth;\n            }\n            else {\n                return 0;\n            }\n        }\n        if (this._pixelOffsetCache !== null) {\n            // the text is LTR\n            const cachedPixelOffset = this._pixelOffsetCache[column];\n            if (cachedPixelOffset !== -1) {\n                return cachedPixelOffset;\n            }\n            const result = this._actualReadPixelOffset(domNode, lineNumber, column, context);\n            this._pixelOffsetCache[column] = result;\n            return result;\n        }\n        return this._actualReadPixelOffset(domNode, lineNumber, column, context);\n    }\n    _actualReadPixelOffset(domNode, lineNumber, column, context) {\n        if (this._characterMapping.length === 0) {\n            // This line has no content\n            const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), 0, 0, 0, 0, context);\n            if (!r || r.length === 0) {\n                return -1;\n            }\n            return r[0].left;\n        }\n        if (column === this._characterMapping.length && this._isWhitespaceOnly && this._containsForeignElements === 0 /* ForeignElementType.None */) {\n            // This branch helps in the case of whitespace only lines which have a width set\n            return this.getWidth(context);\n        }\n        const domPosition = this._characterMapping.getDomPosition(column);\n        const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), domPosition.partIndex, domPosition.charIndex, domPosition.partIndex, domPosition.charIndex, context);\n        if (!r || r.length === 0) {\n            return -1;\n        }\n        const result = r[0].left;\n        if (this.input.isBasicASCII) {\n            const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n            const expectedResult = Math.round(this.input.spaceWidth * horizontalOffset);\n            if (Math.abs(expectedResult - result) <= 1) {\n                return expectedResult;\n            }\n        }\n        return result;\n    }\n    _readRawVisibleRangesForRange(domNode, startColumn, endColumn, context) {\n        if (startColumn === 1 && endColumn === this._characterMapping.length) {\n            // This branch helps IE with bidi text & gives a performance boost to other browsers when reading visible ranges for an entire line\n            return [new FloatHorizontalRange(0, this.getWidth(context))];\n        }\n        const startDomPosition = this._characterMapping.getDomPosition(startColumn);\n        const endDomPosition = this._characterMapping.getDomPosition(endColumn);\n        return RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), startDomPosition.partIndex, startDomPosition.charIndex, endDomPosition.partIndex, endDomPosition.charIndex, context);\n    }\n    /**\n     * Returns the column for the text found at a specific offset inside a rendered dom node\n     */\n    getColumnOfNodeOffset(spanNode, offset) {\n        return getColumnOfNodeOffset(this._characterMapping, spanNode, offset);\n    }\n}\nclass WebKitRenderedViewLine extends RenderedViewLine {\n    _readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context) {\n        const output = super._readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context);\n        if (!output || output.length === 0 || startColumn === endColumn || (startColumn === 1 && endColumn === this._characterMapping.length)) {\n            return output;\n        }\n        // WebKit is buggy and returns an expanded range (to contain words in some cases)\n        // The last client rect is enlarged (I think)\n        if (!this.input.containsRTL) {\n            // This is an attempt to patch things up\n            // Find position of last column\n            const endPixelOffset = this._readPixelOffset(domNode, lineNumber, endColumn, context);\n            if (endPixelOffset !== -1) {\n                const lastRange = output[output.length - 1];\n                if (lastRange.left < endPixelOffset) {\n                    // Trim down the width of the last visible range to not go after the last column's position\n                    lastRange.width = endPixelOffset - lastRange.left;\n                }\n            }\n        }\n        return output;\n    }\n}\nconst createRenderedLine = (function () {\n    if (browser.isWebKit) {\n        return createWebKitRenderedLine;\n    }\n    return createNormalRenderedLine;\n})();\nfunction createWebKitRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    return new WebKitRenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\nfunction createNormalRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    return new RenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\nexport function getColumnOfNodeOffset(characterMapping, spanNode, offset) {\n    const spanNodeTextContentLength = spanNode.textContent.length;\n    let spanIndex = -1;\n    while (spanNode) {\n        spanNode = spanNode.previousSibling;\n        spanIndex++;\n    }\n    return characterMapping.getColumn(new DomPosition(spanIndex, offset), spanNodeTextContentLength);\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class RestrictedRenderingContext {\n    constructor(viewLayout, viewportData) {\n        this._restrictedRenderingContextBrand = undefined;\n        this._viewLayout = viewLayout;\n        this.viewportData = viewportData;\n        this.scrollWidth = this._viewLayout.getScrollWidth();\n        this.scrollHeight = this._viewLayout.getScrollHeight();\n        this.visibleRange = this.viewportData.visibleRange;\n        this.bigNumbersDelta = this.viewportData.bigNumbersDelta;\n        const vInfo = this._viewLayout.getCurrentViewport();\n        this.scrollTop = vInfo.top;\n        this.scrollLeft = vInfo.left;\n        this.viewportWidth = vInfo.width;\n        this.viewportHeight = vInfo.height;\n    }\n    getScrolledTopFromAbsoluteTop(absoluteTop) {\n        return absoluteTop - this.scrollTop;\n    }\n    getVerticalOffsetForLineNumber(lineNumber, includeViewZones) {\n        return this._viewLayout.getVerticalOffsetForLineNumber(lineNumber, includeViewZones);\n    }\n    getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones) {\n        return this._viewLayout.getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones);\n    }\n    getDecorationsInViewport() {\n        return this.viewportData.getDecorationsInViewport();\n    }\n}\nexport class RenderingContext extends RestrictedRenderingContext {\n    constructor(viewLayout, viewportData, viewLines) {\n        super(viewLayout, viewportData);\n        this._renderingContextBrand = undefined;\n        this._viewLines = viewLines;\n    }\n    linesVisibleRangesForRange(range, includeNewLines) {\n        return this._viewLines.linesVisibleRangesForRange(range, includeNewLines);\n    }\n    visibleRangeForPosition(position) {\n        return this._viewLines.visibleRangeForPosition(position);\n    }\n}\nexport class LineVisibleRanges {\n    constructor(outsideRenderedLine, lineNumber, ranges, \n    /**\n     * Indicates if the requested range does not end in this line, but continues on the next line.\n     */\n    continuesOnNextLine) {\n        this.outsideRenderedLine = outsideRenderedLine;\n        this.lineNumber = lineNumber;\n        this.ranges = ranges;\n        this.continuesOnNextLine = continuesOnNextLine;\n    }\n}\nexport class HorizontalRange {\n    static from(ranges) {\n        const result = new Array(ranges.length);\n        for (let i = 0, len = ranges.length; i < len; i++) {\n            const range = ranges[i];\n            result[i] = new HorizontalRange(range.left, range.width);\n        }\n        return result;\n    }\n    constructor(left, width) {\n        this._horizontalRangeBrand = undefined;\n        this.left = Math.round(left);\n        this.width = Math.round(width);\n    }\n    toString() {\n        return `[${this.left},${this.width}]`;\n    }\n}\nexport class FloatHorizontalRange {\n    constructor(left, width) {\n        this._floatHorizontalRangeBrand = undefined;\n        this.left = left;\n        this.width = width;\n    }\n    toString() {\n        return `[${this.left},${this.width}]`;\n    }\n    static compare(a, b) {\n        return a.left - b.left;\n    }\n}\nexport class HorizontalPosition {\n    constructor(outsideRenderedLine, left) {\n        this.outsideRenderedLine = outsideRenderedLine;\n        this.originalLeft = left;\n        this.left = Math.round(this.originalLeft);\n    }\n}\nexport class VisibleRanges {\n    constructor(outsideRenderedLine, ranges) {\n        this.outsideRenderedLine = outsideRenderedLine;\n        this.ranges = ranges;\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { FloatHorizontalRange } from '../../view/renderingContext.js';\nexport class RangeUtil {\n    static _createRange() {\n        if (!this._handyReadyRange) {\n            this._handyReadyRange = document.createRange();\n        }\n        return this._handyReadyRange;\n    }\n    static _detachRange(range, endNode) {\n        // Move range out of the span node, IE doesn't like having many ranges in\n        // the same spot and will act badly for lines containing dashes ('-')\n        range.selectNodeContents(endNode);\n    }\n    static _readClientRects(startElement, startOffset, endElement, endOffset, endNode) {\n        const range = this._createRange();\n        try {\n            range.setStart(startElement, startOffset);\n            range.setEnd(endElement, endOffset);\n            return range.getClientRects();\n        }\n        catch (e) {\n            // This is life ...\n            return null;\n        }\n        finally {\n            this._detachRange(range, endNode);\n        }\n    }\n    static _mergeAdjacentRanges(ranges) {\n        if (ranges.length === 1) {\n            // There is nothing to merge\n            return ranges;\n        }\n        ranges.sort(FloatHorizontalRange.compare);\n        const result = [];\n        let resultLen = 0;\n        let prev = ranges[0];\n        for (let i = 1, len = ranges.length; i < len; i++) {\n            const range = ranges[i];\n            if (prev.left + prev.width + 0.9 /* account for browser's rounding errors*/ >= range.left) {\n                prev.width = Math.max(prev.width, range.left + range.width - prev.left);\n            }\n            else {\n                result[resultLen++] = prev;\n                prev = range;\n            }\n        }\n        result[resultLen++] = prev;\n        return result;\n    }\n    static _createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale) {\n        if (!clientRects || clientRects.length === 0) {\n            return null;\n        }\n        // We go through FloatHorizontalRange because it has been observed in bi-di text\n        // that the clientRects are not coming in sorted from the browser\n        const result = [];\n        for (let i = 0, len = clientRects.length; i < len; i++) {\n            const clientRect = clientRects[i];\n            result[i] = new FloatHorizontalRange(Math.max(0, (clientRect.left - clientRectDeltaLeft) / clientRectScale), clientRect.width / clientRectScale);\n        }\n        return this._mergeAdjacentRanges(result);\n    }\n    static readHorizontalRanges(domNode, startChildIndex, startOffset, endChildIndex, endOffset, context) {\n        // Panic check\n        const min = 0;\n        const max = domNode.children.length - 1;\n        if (min > max) {\n            return null;\n        }\n        startChildIndex = Math.min(max, Math.max(min, startChildIndex));\n        endChildIndex = Math.min(max, Math.max(min, endChildIndex));\n        if (startChildIndex === endChildIndex && startOffset === endOffset && startOffset === 0 && !domNode.children[startChildIndex].firstChild) {\n            // We must find the position at the beginning of a <span>\n            // To cover cases of empty <span>s, avoid using a range and use the <span>'s bounding box\n            const clientRects = domNode.children[startChildIndex].getClientRects();\n            context.markDidDomLayout();\n            return this._createHorizontalRangesFromClientRects(clientRects, context.clientRectDeltaLeft, context.clientRectScale);\n        }\n        // If crossing over to a span only to select offset 0, then use the previous span's maximum offset\n        // Chrome is buggy and doesn't handle 0 offsets well sometimes.\n        if (startChildIndex !== endChildIndex) {\n            if (endChildIndex > 0 && endOffset === 0) {\n                endChildIndex--;\n                endOffset = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n            }\n        }\n        let startElement = domNode.children[startChildIndex].firstChild;\n        let endElement = domNode.children[endChildIndex].firstChild;\n        if (!startElement || !endElement) {\n            // When having an empty <span> (without any text content), try to move to the previous <span>\n            if (!startElement && startOffset === 0 && startChildIndex > 0) {\n                startElement = domNode.children[startChildIndex - 1].firstChild;\n                startOffset = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n            }\n            if (!endElement && endOffset === 0 && endChildIndex > 0) {\n                endElement = domNode.children[endChildIndex - 1].firstChild;\n                endOffset = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n            }\n        }\n        if (!startElement || !endElement) {\n            return null;\n        }\n        startOffset = Math.min(startElement.textContent.length, Math.max(0, startOffset));\n        endOffset = Math.min(endElement.textContent.length, Math.max(0, endOffset));\n        const clientRects = this._readClientRects(startElement, startOffset, endElement, endOffset, context.endNode);\n        context.markDidDomLayout();\n        return this._createHorizontalRangesFromClientRects(clientRects, context.clientRectDeltaLeft, context.clientRectScale);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { PageCoordinates } from '../editorDom.js';\nimport { PartFingerprints } from '../view/viewPart.js';\nimport { ViewLine } from '../viewParts/lines/viewLine.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range as EditorRange } from '../../common/core/range.js';\nimport { CursorColumns } from '../../common/core/cursorColumns.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { AtomicTabMoveOperations } from '../../common/cursor/cursorAtomicMoveOperations.js';\nclass UnknownHitTestResult {\n    constructor(hitTarget = null) {\n        this.hitTarget = hitTarget;\n        this.type = 0 /* HitTestResultType.Unknown */;\n    }\n}\nclass ContentHitTestResult {\n    constructor(position, spanNode, injectedText) {\n        this.position = position;\n        this.spanNode = spanNode;\n        this.injectedText = injectedText;\n        this.type = 1 /* HitTestResultType.Content */;\n    }\n}\nvar HitTestResult;\n(function (HitTestResult) {\n    function createFromDOMInfo(ctx, spanNode, offset) {\n        const position = ctx.getPositionFromDOMInfo(spanNode, offset);\n        if (position) {\n            return new ContentHitTestResult(position, spanNode, null);\n        }\n        return new UnknownHitTestResult(spanNode);\n    }\n    HitTestResult.createFromDOMInfo = createFromDOMInfo;\n})(HitTestResult || (HitTestResult = {}));\nexport class PointerHandlerLastRenderData {\n    constructor(lastViewCursorsRenderData, lastTextareaPosition) {\n        this.lastViewCursorsRenderData = lastViewCursorsRenderData;\n        this.lastTextareaPosition = lastTextareaPosition;\n    }\n}\nexport class MouseTarget {\n    static _deduceRage(position, range = null) {\n        if (!range && position) {\n            return new EditorRange(position.lineNumber, position.column, position.lineNumber, position.column);\n        }\n        return range !== null && range !== void 0 ? range : null;\n    }\n    static createUnknown(element, mouseColumn, position) {\n        return { type: 0 /* MouseTargetType.UNKNOWN */, element, mouseColumn, position, range: this._deduceRage(position) };\n    }\n    static createTextarea(element, mouseColumn) {\n        return { type: 1 /* MouseTargetType.TEXTAREA */, element, mouseColumn, position: null, range: null };\n    }\n    static createMargin(type, element, mouseColumn, position, range, detail) {\n        return { type, element, mouseColumn, position, range, detail };\n    }\n    static createViewZone(type, element, mouseColumn, position, detail) {\n        return { type, element, mouseColumn, position, range: this._deduceRage(position), detail };\n    }\n    static createContentText(element, mouseColumn, position, range, detail) {\n        return { type: 6 /* MouseTargetType.CONTENT_TEXT */, element, mouseColumn, position, range: this._deduceRage(position, range), detail };\n    }\n    static createContentEmpty(element, mouseColumn, position, detail) {\n        return { type: 7 /* MouseTargetType.CONTENT_EMPTY */, element, mouseColumn, position, range: this._deduceRage(position), detail };\n    }\n    static createContentWidget(element, mouseColumn, detail) {\n        return { type: 9 /* MouseTargetType.CONTENT_WIDGET */, element, mouseColumn, position: null, range: null, detail };\n    }\n    static createScrollbar(element, mouseColumn, position) {\n        return { type: 11 /* MouseTargetType.SCROLLBAR */, element, mouseColumn, position, range: this._deduceRage(position) };\n    }\n    static createOverlayWidget(element, mouseColumn, detail) {\n        return { type: 12 /* MouseTargetType.OVERLAY_WIDGET */, element, mouseColumn, position: null, range: null, detail };\n    }\n    static createOutsideEditor(mouseColumn, position, outsidePosition, outsideDistance) {\n        return { type: 13 /* MouseTargetType.OUTSIDE_EDITOR */, element: null, mouseColumn, position, range: this._deduceRage(position), outsidePosition, outsideDistance };\n    }\n    static _typeToString(type) {\n        if (type === 1 /* MouseTargetType.TEXTAREA */) {\n            return 'TEXTAREA';\n        }\n        if (type === 2 /* MouseTargetType.GUTTER_GLYPH_MARGIN */) {\n            return 'GUTTER_GLYPH_MARGIN';\n        }\n        if (type === 3 /* MouseTargetType.GUTTER_LINE_NUMBERS */) {\n            return 'GUTTER_LINE_NUMBERS';\n        }\n        if (type === 4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */) {\n            return 'GUTTER_LINE_DECORATIONS';\n        }\n        if (type === 5 /* MouseTargetType.GUTTER_VIEW_ZONE */) {\n            return 'GUTTER_VIEW_ZONE';\n        }\n        if (type === 6 /* MouseTargetType.CONTENT_TEXT */) {\n            return 'CONTENT_TEXT';\n        }\n        if (type === 7 /* MouseTargetType.CONTENT_EMPTY */) {\n            return 'CONTENT_EMPTY';\n        }\n        if (type === 8 /* MouseTargetType.CONTENT_VIEW_ZONE */) {\n            return 'CONTENT_VIEW_ZONE';\n        }\n        if (type === 9 /* MouseTargetType.CONTENT_WIDGET */) {\n            return 'CONTENT_WIDGET';\n        }\n        if (type === 10 /* MouseTargetType.OVERVIEW_RULER */) {\n            return 'OVERVIEW_RULER';\n        }\n        if (type === 11 /* MouseTargetType.SCROLLBAR */) {\n            return 'SCROLLBAR';\n        }\n        if (type === 12 /* MouseTargetType.OVERLAY_WIDGET */) {\n            return 'OVERLAY_WIDGET';\n        }\n        return 'UNKNOWN';\n    }\n    static toString(target) {\n        return this._typeToString(target.type) + ': ' + target.position + ' - ' + target.range + ' - ' + JSON.stringify(target.detail);\n    }\n}\nclass ElementPath {\n    static isTextArea(path) {\n        return (path.length === 2\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[1] === 7 /* PartFingerprint.TextArea */);\n    }\n    static isChildOfViewLines(path) {\n        return (path.length >= 4\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[3] === 8 /* PartFingerprint.ViewLines */);\n    }\n    static isStrictChildOfViewLines(path) {\n        return (path.length > 4\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[3] === 8 /* PartFingerprint.ViewLines */);\n    }\n    static isChildOfScrollableElement(path) {\n        return (path.length >= 2\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[1] === 6 /* PartFingerprint.ScrollableElement */);\n    }\n    static isChildOfMinimap(path) {\n        return (path.length >= 2\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[1] === 9 /* PartFingerprint.Minimap */);\n    }\n    static isChildOfContentWidgets(path) {\n        return (path.length >= 4\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[3] === 1 /* PartFingerprint.ContentWidgets */);\n    }\n    static isChildOfOverflowGuard(path) {\n        return (path.length >= 1\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */);\n    }\n    static isChildOfOverflowingContentWidgets(path) {\n        return (path.length >= 1\n            && path[0] === 2 /* PartFingerprint.OverflowingContentWidgets */);\n    }\n    static isChildOfOverlayWidgets(path) {\n        return (path.length >= 2\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[1] === 4 /* PartFingerprint.OverlayWidgets */);\n    }\n    static isChildOfOverflowingOverlayWidgets(path) {\n        return (path.length >= 1\n            && path[0] === 5 /* PartFingerprint.OverflowingOverlayWidgets */);\n    }\n}\nexport class HitTestContext {\n    constructor(context, viewHelper, lastRenderData) {\n        this.viewModel = context.viewModel;\n        const options = context.configuration.options;\n        this.layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this.viewDomNode = viewHelper.viewDomNode;\n        this.lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this.stickyTabStops = options.get(116 /* EditorOption.stickyTabStops */);\n        this.typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        this.lastRenderData = lastRenderData;\n        this._context = context;\n        this._viewHelper = viewHelper;\n    }\n    getZoneAtCoord(mouseVerticalOffset) {\n        return HitTestContext.getZoneAtCoord(this._context, mouseVerticalOffset);\n    }\n    static getZoneAtCoord(context, mouseVerticalOffset) {\n        // The target is either a view zone or the empty space after the last view-line\n        const viewZoneWhitespace = context.viewLayout.getWhitespaceAtVerticalOffset(mouseVerticalOffset);\n        if (viewZoneWhitespace) {\n            const viewZoneMiddle = viewZoneWhitespace.verticalOffset + viewZoneWhitespace.height / 2;\n            const lineCount = context.viewModel.getLineCount();\n            let positionBefore = null;\n            let position;\n            let positionAfter = null;\n            if (viewZoneWhitespace.afterLineNumber !== lineCount) {\n                // There are more lines after this view zone\n                positionAfter = new Position(viewZoneWhitespace.afterLineNumber + 1, 1);\n            }\n            if (viewZoneWhitespace.afterLineNumber > 0) {\n                // There are more lines above this view zone\n                positionBefore = new Position(viewZoneWhitespace.afterLineNumber, context.viewModel.getLineMaxColumn(viewZoneWhitespace.afterLineNumber));\n            }\n            if (positionAfter === null) {\n                position = positionBefore;\n            }\n            else if (positionBefore === null) {\n                position = positionAfter;\n            }\n            else if (mouseVerticalOffset < viewZoneMiddle) {\n                position = positionBefore;\n            }\n            else {\n                position = positionAfter;\n            }\n            return {\n                viewZoneId: viewZoneWhitespace.id,\n                afterLineNumber: viewZoneWhitespace.afterLineNumber,\n                positionBefore: positionBefore,\n                positionAfter: positionAfter,\n                position: position\n            };\n        }\n        return null;\n    }\n    getFullLineRangeAtCoord(mouseVerticalOffset) {\n        if (this._context.viewLayout.isAfterLines(mouseVerticalOffset)) {\n            // Below the last line\n            const lineNumber = this._context.viewModel.getLineCount();\n            const maxLineColumn = this._context.viewModel.getLineMaxColumn(lineNumber);\n            return {\n                range: new EditorRange(lineNumber, maxLineColumn, lineNumber, maxLineColumn),\n                isAfterLines: true\n            };\n        }\n        const lineNumber = this._context.viewLayout.getLineNumberAtVerticalOffset(mouseVerticalOffset);\n        const maxLineColumn = this._context.viewModel.getLineMaxColumn(lineNumber);\n        return {\n            range: new EditorRange(lineNumber, 1, lineNumber, maxLineColumn),\n            isAfterLines: false\n        };\n    }\n    getLineNumberAtVerticalOffset(mouseVerticalOffset) {\n        return this._context.viewLayout.getLineNumberAtVerticalOffset(mouseVerticalOffset);\n    }\n    isAfterLines(mouseVerticalOffset) {\n        return this._context.viewLayout.isAfterLines(mouseVerticalOffset);\n    }\n    isInTopPadding(mouseVerticalOffset) {\n        return this._context.viewLayout.isInTopPadding(mouseVerticalOffset);\n    }\n    isInBottomPadding(mouseVerticalOffset) {\n        return this._context.viewLayout.isInBottomPadding(mouseVerticalOffset);\n    }\n    getVerticalOffsetForLineNumber(lineNumber) {\n        return this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber);\n    }\n    findAttribute(element, attr) {\n        return HitTestContext._findAttribute(element, attr, this._viewHelper.viewDomNode);\n    }\n    static _findAttribute(element, attr, stopAt) {\n        while (element && element !== element.ownerDocument.body) {\n            if (element.hasAttribute && element.hasAttribute(attr)) {\n                return element.getAttribute(attr);\n            }\n            if (element === stopAt) {\n                return null;\n            }\n            element = element.parentNode;\n        }\n        return null;\n    }\n    getLineWidth(lineNumber) {\n        return this._viewHelper.getLineWidth(lineNumber);\n    }\n    visibleRangeForPosition(lineNumber, column) {\n        return this._viewHelper.visibleRangeForPosition(lineNumber, column);\n    }\n    getPositionFromDOMInfo(spanNode, offset) {\n        return this._viewHelper.getPositionFromDOMInfo(spanNode, offset);\n    }\n    getCurrentScrollTop() {\n        return this._context.viewLayout.getCurrentScrollTop();\n    }\n    getCurrentScrollLeft() {\n        return this._context.viewLayout.getCurrentScrollLeft();\n    }\n}\nclass BareHitTestRequest {\n    constructor(ctx, editorPos, pos, relativePos) {\n        this.editorPos = editorPos;\n        this.pos = pos;\n        this.relativePos = relativePos;\n        this.mouseVerticalOffset = Math.max(0, ctx.getCurrentScrollTop() + this.relativePos.y);\n        this.mouseContentHorizontalOffset = ctx.getCurrentScrollLeft() + this.relativePos.x - ctx.layoutInfo.contentLeft;\n        this.isInMarginArea = (this.relativePos.x < ctx.layoutInfo.contentLeft && this.relativePos.x >= ctx.layoutInfo.glyphMarginLeft);\n        this.isInContentArea = !this.isInMarginArea;\n        this.mouseColumn = Math.max(0, MouseTargetFactory._getMouseColumn(this.mouseContentHorizontalOffset, ctx.typicalHalfwidthCharacterWidth));\n    }\n}\nclass HitTestRequest extends BareHitTestRequest {\n    constructor(ctx, editorPos, pos, relativePos, target) {\n        super(ctx, editorPos, pos, relativePos);\n        this._ctx = ctx;\n        if (target) {\n            this.target = target;\n            this.targetPath = PartFingerprints.collect(target, ctx.viewDomNode);\n        }\n        else {\n            this.target = null;\n            this.targetPath = new Uint8Array(0);\n        }\n    }\n    toString() {\n        return `pos(${this.pos.x},${this.pos.y}), editorPos(${this.editorPos.x},${this.editorPos.y}), relativePos(${this.relativePos.x},${this.relativePos.y}), mouseVerticalOffset: ${this.mouseVerticalOffset}, mouseContentHorizontalOffset: ${this.mouseContentHorizontalOffset}\\n\\ttarget: ${this.target ? this.target.outerHTML : null}`;\n    }\n    _getMouseColumn(position = null) {\n        if (position && position.column < this._ctx.viewModel.getLineMaxColumn(position.lineNumber)) {\n            // Most likely, the line contains foreign decorations...\n            return CursorColumns.visibleColumnFromColumn(this._ctx.viewModel.getLineContent(position.lineNumber), position.column, this._ctx.viewModel.model.getOptions().tabSize) + 1;\n        }\n        return this.mouseColumn;\n    }\n    fulfillUnknown(position = null) {\n        return MouseTarget.createUnknown(this.target, this._getMouseColumn(position), position);\n    }\n    fulfillTextarea() {\n        return MouseTarget.createTextarea(this.target, this._getMouseColumn());\n    }\n    fulfillMargin(type, position, range, detail) {\n        return MouseTarget.createMargin(type, this.target, this._getMouseColumn(position), position, range, detail);\n    }\n    fulfillViewZone(type, position, detail) {\n        return MouseTarget.createViewZone(type, this.target, this._getMouseColumn(position), position, detail);\n    }\n    fulfillContentText(position, range, detail) {\n        return MouseTarget.createContentText(this.target, this._getMouseColumn(position), position, range, detail);\n    }\n    fulfillContentEmpty(position, detail) {\n        return MouseTarget.createContentEmpty(this.target, this._getMouseColumn(position), position, detail);\n    }\n    fulfillContentWidget(detail) {\n        return MouseTarget.createContentWidget(this.target, this._getMouseColumn(), detail);\n    }\n    fulfillScrollbar(position) {\n        return MouseTarget.createScrollbar(this.target, this._getMouseColumn(position), position);\n    }\n    fulfillOverlayWidget(detail) {\n        return MouseTarget.createOverlayWidget(this.target, this._getMouseColumn(), detail);\n    }\n    withTarget(target) {\n        return new HitTestRequest(this._ctx, this.editorPos, this.pos, this.relativePos, target);\n    }\n}\nconst EMPTY_CONTENT_AFTER_LINES = { isAfterLines: true };\nfunction createEmptyContentDataInLines(horizontalDistanceToText) {\n    return {\n        isAfterLines: false,\n        horizontalDistanceToText: horizontalDistanceToText\n    };\n}\nexport class MouseTargetFactory {\n    constructor(context, viewHelper) {\n        this._context = context;\n        this._viewHelper = viewHelper;\n    }\n    mouseTargetIsWidget(e) {\n        const t = e.target;\n        const path = PartFingerprints.collect(t, this._viewHelper.viewDomNode);\n        // Is it a content widget?\n        if (ElementPath.isChildOfContentWidgets(path) || ElementPath.isChildOfOverflowingContentWidgets(path)) {\n            return true;\n        }\n        // Is it an overlay widget?\n        if (ElementPath.isChildOfOverlayWidgets(path) || ElementPath.isChildOfOverflowingOverlayWidgets(path)) {\n            return true;\n        }\n        return false;\n    }\n    createMouseTarget(lastRenderData, editorPos, pos, relativePos, target) {\n        const ctx = new HitTestContext(this._context, this._viewHelper, lastRenderData);\n        const request = new HitTestRequest(ctx, editorPos, pos, relativePos, target);\n        try {\n            const r = MouseTargetFactory._createMouseTarget(ctx, request, false);\n            if (r.type === 6 /* MouseTargetType.CONTENT_TEXT */) {\n                // Snap to the nearest soft tab boundary if atomic soft tabs are enabled.\n                if (ctx.stickyTabStops && r.position !== null) {\n                    const position = MouseTargetFactory._snapToSoftTabBoundary(r.position, ctx.viewModel);\n                    const range = EditorRange.fromPositions(position, position).plusRange(r.range);\n                    return request.fulfillContentText(position, range, r.detail);\n                }\n            }\n            // console.log(MouseTarget.toString(r));\n            return r;\n        }\n        catch (err) {\n            // console.log(err);\n            return request.fulfillUnknown();\n        }\n    }\n    static _createMouseTarget(ctx, request, domHitTestExecuted) {\n        // console.log(`${domHitTestExecuted ? '=>' : ''}CAME IN REQUEST: ${request}`);\n        // First ensure the request has a target\n        if (request.target === null) {\n            if (domHitTestExecuted) {\n                // Still no target... and we have already executed hit test...\n                return request.fulfillUnknown();\n            }\n            const hitTestResult = MouseTargetFactory._doHitTest(ctx, request);\n            if (hitTestResult.type === 1 /* HitTestResultType.Content */) {\n                return MouseTargetFactory.createMouseTargetFromHitTestPosition(ctx, request, hitTestResult.spanNode, hitTestResult.position, hitTestResult.injectedText);\n            }\n            return this._createMouseTarget(ctx, request.withTarget(hitTestResult.hitTarget), true);\n        }\n        // we know for a fact that request.target is not null\n        const resolvedRequest = request;\n        let result = null;\n        if (!ElementPath.isChildOfOverflowGuard(request.targetPath) && !ElementPath.isChildOfOverflowingContentWidgets(request.targetPath) && !ElementPath.isChildOfOverflowingOverlayWidgets(request.targetPath)) {\n            // We only render dom nodes inside the overflow guard or in the overflowing content widgets\n            result = result || request.fulfillUnknown();\n        }\n        result = result || MouseTargetFactory._hitTestContentWidget(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestOverlayWidget(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestMinimap(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestScrollbarSlider(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestViewZone(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestMargin(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestViewCursor(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestTextArea(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestViewLines(ctx, resolvedRequest, domHitTestExecuted);\n        result = result || MouseTargetFactory._hitTestScrollbar(ctx, resolvedRequest);\n        return (result || request.fulfillUnknown());\n    }\n    static _hitTestContentWidget(ctx, request) {\n        // Is it a content widget?\n        if (ElementPath.isChildOfContentWidgets(request.targetPath) || ElementPath.isChildOfOverflowingContentWidgets(request.targetPath)) {\n            const widgetId = ctx.findAttribute(request.target, 'widgetId');\n            if (widgetId) {\n                return request.fulfillContentWidget(widgetId);\n            }\n            else {\n                return request.fulfillUnknown();\n            }\n        }\n        return null;\n    }\n    static _hitTestOverlayWidget(ctx, request) {\n        // Is it an overlay widget?\n        if (ElementPath.isChildOfOverlayWidgets(request.targetPath) || ElementPath.isChildOfOverflowingOverlayWidgets(request.targetPath)) {\n            const widgetId = ctx.findAttribute(request.target, 'widgetId');\n            if (widgetId) {\n                return request.fulfillOverlayWidget(widgetId);\n            }\n            else {\n                return request.fulfillUnknown();\n            }\n        }\n        return null;\n    }\n    static _hitTestViewCursor(ctx, request) {\n        if (request.target) {\n            // Check if we've hit a painted cursor\n            const lastViewCursorsRenderData = ctx.lastRenderData.lastViewCursorsRenderData;\n            for (const d of lastViewCursorsRenderData) {\n                if (request.target === d.domNode) {\n                    return request.fulfillContentText(d.position, null, { mightBeForeignElement: false, injectedText: null });\n                }\n            }\n        }\n        if (request.isInContentArea) {\n            // Edge has a bug when hit-testing the exact position of a cursor,\n            // instead of returning the correct dom node, it returns the\n            // first or last rendered view line dom node, therefore help it out\n            // and first check if we are on top of a cursor\n            const lastViewCursorsRenderData = ctx.lastRenderData.lastViewCursorsRenderData;\n            const mouseContentHorizontalOffset = request.mouseContentHorizontalOffset;\n            const mouseVerticalOffset = request.mouseVerticalOffset;\n            for (const d of lastViewCursorsRenderData) {\n                if (mouseContentHorizontalOffset < d.contentLeft) {\n                    // mouse position is to the left of the cursor\n                    continue;\n                }\n                if (mouseContentHorizontalOffset > d.contentLeft + d.width) {\n                    // mouse position is to the right of the cursor\n                    continue;\n                }\n                const cursorVerticalOffset = ctx.getVerticalOffsetForLineNumber(d.position.lineNumber);\n                if (cursorVerticalOffset <= mouseVerticalOffset\n                    && mouseVerticalOffset <= cursorVerticalOffset + d.height) {\n                    return request.fulfillContentText(d.position, null, { mightBeForeignElement: false, injectedText: null });\n                }\n            }\n        }\n        return null;\n    }\n    static _hitTestViewZone(ctx, request) {\n        const viewZoneData = ctx.getZoneAtCoord(request.mouseVerticalOffset);\n        if (viewZoneData) {\n            const mouseTargetType = (request.isInContentArea ? 8 /* MouseTargetType.CONTENT_VIEW_ZONE */ : 5 /* MouseTargetType.GUTTER_VIEW_ZONE */);\n            return request.fulfillViewZone(mouseTargetType, viewZoneData.position, viewZoneData);\n        }\n        return null;\n    }\n    static _hitTestTextArea(ctx, request) {\n        // Is it the textarea?\n        if (ElementPath.isTextArea(request.targetPath)) {\n            if (ctx.lastRenderData.lastTextareaPosition) {\n                return request.fulfillContentText(ctx.lastRenderData.lastTextareaPosition, null, { mightBeForeignElement: false, injectedText: null });\n            }\n            return request.fulfillTextarea();\n        }\n        return null;\n    }\n    static _hitTestMargin(ctx, request) {\n        if (request.isInMarginArea) {\n            const res = ctx.getFullLineRangeAtCoord(request.mouseVerticalOffset);\n            const pos = res.range.getStartPosition();\n            let offset = Math.abs(request.relativePos.x);\n            const detail = {\n                isAfterLines: res.isAfterLines,\n                glyphMarginLeft: ctx.layoutInfo.glyphMarginLeft,\n                glyphMarginWidth: ctx.layoutInfo.glyphMarginWidth,\n                lineNumbersWidth: ctx.layoutInfo.lineNumbersWidth,\n                offsetX: offset\n            };\n            offset -= ctx.layoutInfo.glyphMarginLeft;\n            if (offset <= ctx.layoutInfo.glyphMarginWidth) {\n                // On the glyph margin\n                const modelCoordinate = ctx.viewModel.coordinatesConverter.convertViewPositionToModelPosition(res.range.getStartPosition());\n                const lanes = ctx.viewModel.glyphLanes.getLanesAtLine(modelCoordinate.lineNumber);\n                detail.glyphMarginLane = lanes[Math.floor(offset / ctx.lineHeight)];\n                return request.fulfillMargin(2 /* MouseTargetType.GUTTER_GLYPH_MARGIN */, pos, res.range, detail);\n            }\n            offset -= ctx.layoutInfo.glyphMarginWidth;\n            if (offset <= ctx.layoutInfo.lineNumbersWidth) {\n                // On the line numbers\n                return request.fulfillMargin(3 /* MouseTargetType.GUTTER_LINE_NUMBERS */, pos, res.range, detail);\n            }\n            offset -= ctx.layoutInfo.lineNumbersWidth;\n            // On the line decorations\n            return request.fulfillMargin(4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */, pos, res.range, detail);\n        }\n        return null;\n    }\n    static _hitTestViewLines(ctx, request, domHitTestExecuted) {\n        if (!ElementPath.isChildOfViewLines(request.targetPath)) {\n            return null;\n        }\n        if (ctx.isInTopPadding(request.mouseVerticalOffset)) {\n            return request.fulfillContentEmpty(new Position(1, 1), EMPTY_CONTENT_AFTER_LINES);\n        }\n        // Check if it is below any lines and any view zones\n        if (ctx.isAfterLines(request.mouseVerticalOffset) || ctx.isInBottomPadding(request.mouseVerticalOffset)) {\n            // This most likely indicates it happened after the last view-line\n            const lineCount = ctx.viewModel.getLineCount();\n            const maxLineColumn = ctx.viewModel.getLineMaxColumn(lineCount);\n            return request.fulfillContentEmpty(new Position(lineCount, maxLineColumn), EMPTY_CONTENT_AFTER_LINES);\n        }\n        if (domHitTestExecuted) {\n            // Check if we are hitting a view-line (can happen in the case of inline decorations on empty lines)\n            // See https://github.com/microsoft/vscode/issues/46942\n            if (ElementPath.isStrictChildOfViewLines(request.targetPath)) {\n                const lineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n                if (ctx.viewModel.getLineLength(lineNumber) === 0) {\n                    const lineWidth = ctx.getLineWidth(lineNumber);\n                    const detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n                    return request.fulfillContentEmpty(new Position(lineNumber, 1), detail);\n                }\n                const lineWidth = ctx.getLineWidth(lineNumber);\n                if (request.mouseContentHorizontalOffset >= lineWidth) {\n                    const detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n                    const pos = new Position(lineNumber, ctx.viewModel.getLineMaxColumn(lineNumber));\n                    return request.fulfillContentEmpty(pos, detail);\n                }\n            }\n            // We have already executed hit test...\n            return request.fulfillUnknown();\n        }\n        const hitTestResult = MouseTargetFactory._doHitTest(ctx, request);\n        if (hitTestResult.type === 1 /* HitTestResultType.Content */) {\n            return MouseTargetFactory.createMouseTargetFromHitTestPosition(ctx, request, hitTestResult.spanNode, hitTestResult.position, hitTestResult.injectedText);\n        }\n        return this._createMouseTarget(ctx, request.withTarget(hitTestResult.hitTarget), true);\n    }\n    static _hitTestMinimap(ctx, request) {\n        if (ElementPath.isChildOfMinimap(request.targetPath)) {\n            const possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n            const maxColumn = ctx.viewModel.getLineMaxColumn(possibleLineNumber);\n            return request.fulfillScrollbar(new Position(possibleLineNumber, maxColumn));\n        }\n        return null;\n    }\n    static _hitTestScrollbarSlider(ctx, request) {\n        if (ElementPath.isChildOfScrollableElement(request.targetPath)) {\n            if (request.target && request.target.nodeType === 1) {\n                const className = request.target.className;\n                if (className && /\\b(slider|scrollbar)\\b/.test(className)) {\n                    const possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n                    const maxColumn = ctx.viewModel.getLineMaxColumn(possibleLineNumber);\n                    return request.fulfillScrollbar(new Position(possibleLineNumber, maxColumn));\n                }\n            }\n        }\n        return null;\n    }\n    static _hitTestScrollbar(ctx, request) {\n        // Is it the overview ruler?\n        // Is it a child of the scrollable element?\n        if (ElementPath.isChildOfScrollableElement(request.targetPath)) {\n            const possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n            const maxColumn = ctx.viewModel.getLineMaxColumn(possibleLineNumber);\n            return request.fulfillScrollbar(new Position(possibleLineNumber, maxColumn));\n        }\n        return null;\n    }\n    getMouseColumn(relativePos) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        const mouseContentHorizontalOffset = this._context.viewLayout.getCurrentScrollLeft() + relativePos.x - layoutInfo.contentLeft;\n        return MouseTargetFactory._getMouseColumn(mouseContentHorizontalOffset, options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth);\n    }\n    static _getMouseColumn(mouseContentHorizontalOffset, typicalHalfwidthCharacterWidth) {\n        if (mouseContentHorizontalOffset < 0) {\n            return 1;\n        }\n        const chars = Math.round(mouseContentHorizontalOffset / typicalHalfwidthCharacterWidth);\n        return (chars + 1);\n    }\n    static createMouseTargetFromHitTestPosition(ctx, request, spanNode, pos, injectedText) {\n        const lineNumber = pos.lineNumber;\n        const column = pos.column;\n        const lineWidth = ctx.getLineWidth(lineNumber);\n        if (request.mouseContentHorizontalOffset > lineWidth) {\n            const detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n            return request.fulfillContentEmpty(pos, detail);\n        }\n        const visibleRange = ctx.visibleRangeForPosition(lineNumber, column);\n        if (!visibleRange) {\n            return request.fulfillUnknown(pos);\n        }\n        const columnHorizontalOffset = visibleRange.left;\n        if (Math.abs(request.mouseContentHorizontalOffset - columnHorizontalOffset) < 1) {\n            return request.fulfillContentText(pos, null, { mightBeForeignElement: !!injectedText, injectedText });\n        }\n        const points = [];\n        points.push({ offset: visibleRange.left, column: column });\n        if (column > 1) {\n            const visibleRange = ctx.visibleRangeForPosition(lineNumber, column - 1);\n            if (visibleRange) {\n                points.push({ offset: visibleRange.left, column: column - 1 });\n            }\n        }\n        const lineMaxColumn = ctx.viewModel.getLineMaxColumn(lineNumber);\n        if (column < lineMaxColumn) {\n            const visibleRange = ctx.visibleRangeForPosition(lineNumber, column + 1);\n            if (visibleRange) {\n                points.push({ offset: visibleRange.left, column: column + 1 });\n            }\n        }\n        points.sort((a, b) => a.offset - b.offset);\n        const mouseCoordinates = request.pos.toClientCoordinates(dom.getWindow(ctx.viewDomNode));\n        const spanNodeClientRect = spanNode.getBoundingClientRect();\n        const mouseIsOverSpanNode = (spanNodeClientRect.left <= mouseCoordinates.clientX && mouseCoordinates.clientX <= spanNodeClientRect.right);\n        let rng = null;\n        for (let i = 1; i < points.length; i++) {\n            const prev = points[i - 1];\n            const curr = points[i];\n            if (prev.offset <= request.mouseContentHorizontalOffset && request.mouseContentHorizontalOffset <= curr.offset) {\n                rng = new EditorRange(lineNumber, prev.column, lineNumber, curr.column);\n                // See https://github.com/microsoft/vscode/issues/152819\n                // Due to the use of zwj, the browser's hit test result is skewed towards the left\n                // Here we try to correct that if the mouse horizontal offset is closer to the right than the left\n                const prevDelta = Math.abs(prev.offset - request.mouseContentHorizontalOffset);\n                const nextDelta = Math.abs(curr.offset - request.mouseContentHorizontalOffset);\n                pos = (prevDelta < nextDelta\n                    ? new Position(lineNumber, prev.column)\n                    : new Position(lineNumber, curr.column));\n                break;\n            }\n        }\n        return request.fulfillContentText(pos, rng, { mightBeForeignElement: !mouseIsOverSpanNode || !!injectedText, injectedText });\n    }\n    /**\n     * Most probably WebKit browsers and Edge\n     */\n    static _doHitTestWithCaretRangeFromPoint(ctx, request) {\n        // In Chrome, especially on Linux it is possible to click between lines,\n        // so try to adjust the `hity` below so that it lands in the center of a line\n        const lineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n        const lineStartVerticalOffset = ctx.getVerticalOffsetForLineNumber(lineNumber);\n        const lineEndVerticalOffset = lineStartVerticalOffset + ctx.lineHeight;\n        const isBelowLastLine = (lineNumber === ctx.viewModel.getLineCount()\n            && request.mouseVerticalOffset > lineEndVerticalOffset);\n        if (!isBelowLastLine) {\n            const lineCenteredVerticalOffset = Math.floor((lineStartVerticalOffset + lineEndVerticalOffset) / 2);\n            let adjustedPageY = request.pos.y + (lineCenteredVerticalOffset - request.mouseVerticalOffset);\n            if (adjustedPageY <= request.editorPos.y) {\n                adjustedPageY = request.editorPos.y + 1;\n            }\n            if (adjustedPageY >= request.editorPos.y + request.editorPos.height) {\n                adjustedPageY = request.editorPos.y + request.editorPos.height - 1;\n            }\n            const adjustedPage = new PageCoordinates(request.pos.x, adjustedPageY);\n            const r = this._actualDoHitTestWithCaretRangeFromPoint(ctx, adjustedPage.toClientCoordinates(dom.getWindow(ctx.viewDomNode)));\n            if (r.type === 1 /* HitTestResultType.Content */) {\n                return r;\n            }\n        }\n        // Also try to hit test without the adjustment (for the edge cases that we are near the top or bottom)\n        return this._actualDoHitTestWithCaretRangeFromPoint(ctx, request.pos.toClientCoordinates(dom.getWindow(ctx.viewDomNode)));\n    }\n    static _actualDoHitTestWithCaretRangeFromPoint(ctx, coords) {\n        const shadowRoot = dom.getShadowRoot(ctx.viewDomNode);\n        let range;\n        if (shadowRoot) {\n            if (typeof shadowRoot.caretRangeFromPoint === 'undefined') {\n                range = shadowCaretRangeFromPoint(shadowRoot, coords.clientX, coords.clientY);\n            }\n            else {\n                range = shadowRoot.caretRangeFromPoint(coords.clientX, coords.clientY);\n            }\n        }\n        else {\n            range = ctx.viewDomNode.ownerDocument.caretRangeFromPoint(coords.clientX, coords.clientY);\n        }\n        if (!range || !range.startContainer) {\n            return new UnknownHitTestResult();\n        }\n        // Chrome always hits a TEXT_NODE, while Edge sometimes hits a token span\n        const startContainer = range.startContainer;\n        if (startContainer.nodeType === startContainer.TEXT_NODE) {\n            // startContainer is expected to be the token text\n            const parent1 = startContainer.parentNode; // expected to be the token span\n            const parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line container span\n            const parent3 = parent2 ? parent2.parentNode : null; // expected to be the view line div\n            const parent3ClassName = parent3 && parent3.nodeType === parent3.ELEMENT_NODE ? parent3.className : null;\n            if (parent3ClassName === ViewLine.CLASS_NAME) {\n                return HitTestResult.createFromDOMInfo(ctx, parent1, range.startOffset);\n            }\n            else {\n                return new UnknownHitTestResult(startContainer.parentNode);\n            }\n        }\n        else if (startContainer.nodeType === startContainer.ELEMENT_NODE) {\n            // startContainer is expected to be the token span\n            const parent1 = startContainer.parentNode; // expected to be the view line container span\n            const parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line div\n            const parent2ClassName = parent2 && parent2.nodeType === parent2.ELEMENT_NODE ? parent2.className : null;\n            if (parent2ClassName === ViewLine.CLASS_NAME) {\n                return HitTestResult.createFromDOMInfo(ctx, startContainer, startContainer.textContent.length);\n            }\n            else {\n                return new UnknownHitTestResult(startContainer);\n            }\n        }\n        return new UnknownHitTestResult();\n    }\n    /**\n     * Most probably Gecko\n     */\n    static _doHitTestWithCaretPositionFromPoint(ctx, coords) {\n        const hitResult = ctx.viewDomNode.ownerDocument.caretPositionFromPoint(coords.clientX, coords.clientY);\n        if (hitResult.offsetNode.nodeType === hitResult.offsetNode.TEXT_NODE) {\n            // offsetNode is expected to be the token text\n            const parent1 = hitResult.offsetNode.parentNode; // expected to be the token span\n            const parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line container span\n            const parent3 = parent2 ? parent2.parentNode : null; // expected to be the view line div\n            const parent3ClassName = parent3 && parent3.nodeType === parent3.ELEMENT_NODE ? parent3.className : null;\n            if (parent3ClassName === ViewLine.CLASS_NAME) {\n                return HitTestResult.createFromDOMInfo(ctx, hitResult.offsetNode.parentNode, hitResult.offset);\n            }\n            else {\n                return new UnknownHitTestResult(hitResult.offsetNode.parentNode);\n            }\n        }\n        // For inline decorations, Gecko sometimes returns the `<span>` of the line and the offset is the `<span>` with the inline decoration\n        // Some other times, it returns the `<span>` with the inline decoration\n        if (hitResult.offsetNode.nodeType === hitResult.offsetNode.ELEMENT_NODE) {\n            const parent1 = hitResult.offsetNode.parentNode;\n            const parent1ClassName = parent1 && parent1.nodeType === parent1.ELEMENT_NODE ? parent1.className : null;\n            const parent2 = parent1 ? parent1.parentNode : null;\n            const parent2ClassName = parent2 && parent2.nodeType === parent2.ELEMENT_NODE ? parent2.className : null;\n            if (parent1ClassName === ViewLine.CLASS_NAME) {\n                // it returned the `<span>` of the line and the offset is the `<span>` with the inline decoration\n                const tokenSpan = hitResult.offsetNode.childNodes[Math.min(hitResult.offset, hitResult.offsetNode.childNodes.length - 1)];\n                if (tokenSpan) {\n                    return HitTestResult.createFromDOMInfo(ctx, tokenSpan, 0);\n                }\n            }\n            else if (parent2ClassName === ViewLine.CLASS_NAME) {\n                // it returned the `<span>` with the inline decoration\n                return HitTestResult.createFromDOMInfo(ctx, hitResult.offsetNode, 0);\n            }\n        }\n        return new UnknownHitTestResult(hitResult.offsetNode);\n    }\n    static _snapToSoftTabBoundary(position, viewModel) {\n        const lineContent = viewModel.getLineContent(position.lineNumber);\n        const { tabSize } = viewModel.model.getOptions();\n        const newPosition = AtomicTabMoveOperations.atomicPosition(lineContent, position.column - 1, tabSize, 2 /* Direction.Nearest */);\n        if (newPosition !== -1) {\n            return new Position(position.lineNumber, newPosition + 1);\n        }\n        return position;\n    }\n    static _doHitTest(ctx, request) {\n        let result = new UnknownHitTestResult();\n        if (typeof ctx.viewDomNode.ownerDocument.caretRangeFromPoint === 'function') {\n            result = this._doHitTestWithCaretRangeFromPoint(ctx, request);\n        }\n        else if (ctx.viewDomNode.ownerDocument.caretPositionFromPoint) {\n            result = this._doHitTestWithCaretPositionFromPoint(ctx, request.pos.toClientCoordinates(dom.getWindow(ctx.viewDomNode)));\n        }\n        if (result.type === 1 /* HitTestResultType.Content */) {\n            const injectedText = ctx.viewModel.getInjectedTextAt(result.position);\n            const normalizedPosition = ctx.viewModel.normalizePosition(result.position, 2 /* PositionAffinity.None */);\n            if (injectedText || !normalizedPosition.equals(result.position)) {\n                result = new ContentHitTestResult(normalizedPosition, result.spanNode, injectedText);\n            }\n        }\n        return result;\n    }\n}\nfunction shadowCaretRangeFromPoint(shadowRoot, x, y) {\n    const range = document.createRange();\n    // Get the element under the point\n    let el = shadowRoot.elementFromPoint(x, y);\n    if (el !== null) {\n        // Get the last child of the element until its firstChild is a text node\n        // This assumes that the pointer is on the right of the line, out of the tokens\n        // and that we want to get the offset of the last token of the line\n        while (el && el.firstChild && el.firstChild.nodeType !== el.firstChild.TEXT_NODE && el.lastChild && el.lastChild.firstChild) {\n            el = el.lastChild;\n        }\n        // Grab its rect\n        const rect = el.getBoundingClientRect();\n        // And its font (the computed shorthand font property might be empty, see #3217)\n        const elWindow = dom.getWindow(el);\n        const fontStyle = elWindow.getComputedStyle(el, null).getPropertyValue('font-style');\n        const fontVariant = elWindow.getComputedStyle(el, null).getPropertyValue('font-variant');\n        const fontWeight = elWindow.getComputedStyle(el, null).getPropertyValue('font-weight');\n        const fontSize = elWindow.getComputedStyle(el, null).getPropertyValue('font-size');\n        const lineHeight = elWindow.getComputedStyle(el, null).getPropertyValue('line-height');\n        const fontFamily = elWindow.getComputedStyle(el, null).getPropertyValue('font-family');\n        const font = `${fontStyle} ${fontVariant} ${fontWeight} ${fontSize}/${lineHeight} ${fontFamily}`;\n        // And also its txt content\n        const text = el.innerText;\n        // Position the pixel cursor at the left of the element\n        let pixelCursor = rect.left;\n        let offset = 0;\n        let step;\n        // If the point is on the right of the box put the cursor after the last character\n        if (x > rect.left + rect.width) {\n            offset = text.length;\n        }\n        else {\n            const charWidthReader = CharWidthReader.getInstance();\n            // Goes through all the characters of the innerText, and checks if the x of the point\n            // belongs to the character.\n            for (let i = 0; i < text.length + 1; i++) {\n                // The step is half the width of the character\n                step = charWidthReader.getCharWidth(text.charAt(i), font) / 2;\n                // Move to the center of the character\n                pixelCursor += step;\n                // If the x of the point is smaller that the position of the cursor, the point is over that character\n                if (x < pixelCursor) {\n                    offset = i;\n                    break;\n                }\n                // Move between the current character and the next\n                pixelCursor += step;\n            }\n        }\n        // Creates a range with the text node of the element and set the offset found\n        range.setStart(el.firstChild, offset);\n        range.setEnd(el.firstChild, offset);\n    }\n    return range;\n}\nclass CharWidthReader {\n    static getInstance() {\n        if (!CharWidthReader._INSTANCE) {\n            CharWidthReader._INSTANCE = new CharWidthReader();\n        }\n        return CharWidthReader._INSTANCE;\n    }\n    constructor() {\n        this._cache = {};\n        this._canvas = document.createElement('canvas');\n    }\n    getCharWidth(char, font) {\n        const cacheKey = char + font;\n        if (this._cache[cacheKey]) {\n            return this._cache[cacheKey];\n        }\n        const context = this._canvas.getContext('2d');\n        context.font = font;\n        const metrics = context.measureText(char);\n        const width = metrics.width;\n        this._cache[cacheKey] = width;\n        return width;\n    }\n}\nCharWidthReader._INSTANCE = null;\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CursorColumns } from '../core/cursorColumns.js';\nexport class AtomicTabMoveOperations {\n    /**\n     * Get the visible column at the position. If we get to a non-whitespace character first\n     * or past the end of string then return -1.\n     *\n     * **Note** `position` and the return value are 0-based.\n     */\n    static whitespaceVisibleColumn(lineContent, position, tabSize) {\n        const lineLength = lineContent.length;\n        let visibleColumn = 0;\n        let prevTabStopPosition = -1;\n        let prevTabStopVisibleColumn = -1;\n        for (let i = 0; i < lineLength; i++) {\n            if (i === position) {\n                return [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn];\n            }\n            if (visibleColumn % tabSize === 0) {\n                prevTabStopPosition = i;\n                prevTabStopVisibleColumn = visibleColumn;\n            }\n            const chCode = lineContent.charCodeAt(i);\n            switch (chCode) {\n                case 32 /* CharCode.Space */:\n                    visibleColumn += 1;\n                    break;\n                case 9 /* CharCode.Tab */:\n                    // Skip to the next multiple of tabSize.\n                    visibleColumn = CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n                    break;\n                default:\n                    return [-1, -1, -1];\n            }\n        }\n        if (position === lineLength) {\n            return [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn];\n        }\n        return [-1, -1, -1];\n    }\n    /**\n     * Return the position that should result from a move left, right or to the\n     * nearest tab, if atomic tabs are enabled. Left and right are used for the\n     * arrow key movements, nearest is used for mouse selection. It returns\n     * -1 if atomic tabs are not relevant and you should fall back to normal\n     * behaviour.\n     *\n     * **Note**: `position` and the return value are 0-based.\n     */\n    static atomicPosition(lineContent, position, tabSize, direction) {\n        const lineLength = lineContent.length;\n        // Get the 0-based visible column corresponding to the position, or return\n        // -1 if it is not in the initial whitespace.\n        const [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn] = AtomicTabMoveOperations.whitespaceVisibleColumn(lineContent, position, tabSize);\n        if (visibleColumn === -1) {\n            return -1;\n        }\n        // Is the output left or right of the current position. The case for nearest\n        // where it is the same as the current position is handled in the switch.\n        let left;\n        switch (direction) {\n            case 0 /* Direction.Left */:\n                left = true;\n                break;\n            case 1 /* Direction.Right */:\n                left = false;\n                break;\n            case 2 /* Direction.Nearest */:\n                // The code below assumes the output position is either left or right\n                // of the input position. If it is the same, return immediately.\n                if (visibleColumn % tabSize === 0) {\n                    return position;\n                }\n                // Go to the nearest indentation.\n                left = visibleColumn % tabSize <= (tabSize / 2);\n                break;\n        }\n        // If going left, we can just use the info about the last tab stop position and\n        // last tab stop visible column that we computed in the first walk over the whitespace.\n        if (left) {\n            if (prevTabStopPosition === -1) {\n                return -1;\n            }\n            // If the direction is left, we need to keep scanning right to ensure\n            // that targetVisibleColumn + tabSize is before non-whitespace.\n            // This is so that when we press left at the end of a partial\n            // indentation it only goes one character. For example '      foo' with\n            // tabSize 4, should jump from position 6 to position 5, not 4.\n            let currentVisibleColumn = prevTabStopVisibleColumn;\n            for (let i = prevTabStopPosition; i < lineLength; ++i) {\n                if (currentVisibleColumn === prevTabStopVisibleColumn + tabSize) {\n                    // It is a full indentation.\n                    return prevTabStopPosition;\n                }\n                const chCode = lineContent.charCodeAt(i);\n                switch (chCode) {\n                    case 32 /* CharCode.Space */:\n                        currentVisibleColumn += 1;\n                        break;\n                    case 9 /* CharCode.Tab */:\n                        currentVisibleColumn = CursorColumns.nextRenderTabStop(currentVisibleColumn, tabSize);\n                        break;\n                    default:\n                        return -1;\n                }\n            }\n            if (currentVisibleColumn === prevTabStopVisibleColumn + tabSize) {\n                return prevTabStopPosition;\n            }\n            // It must have been a partial indentation.\n            return -1;\n        }\n        // We are going right.\n        const targetVisibleColumn = CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n        // We can just continue from where whitespaceVisibleColumn got to.\n        let currentVisibleColumn = visibleColumn;\n        for (let i = position; i < lineLength; i++) {\n            if (currentVisibleColumn === targetVisibleColumn) {\n                return i;\n            }\n            const chCode = lineContent.charCodeAt(i);\n            switch (chCode) {\n                case 32 /* CharCode.Space */:\n                    currentVisibleColumn += 1;\n                    break;\n                case 9 /* CharCode.Tab */:\n                    currentVisibleColumn = CursorColumns.nextRenderTabStop(currentVisibleColumn, tabSize);\n                    break;\n                default:\n                    return -1;\n            }\n        }\n        // This condition handles when the target column is at the end of the line.\n        if (currentVisibleColumn === targetVisibleColumn) {\n            return lineLength;\n        }\n        return -1;\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { BrowserFeatures } from '../../../base/browser/canIUse.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { EventType, Gesture } from '../../../base/browser/touch.js';\nimport { mainWindow } from '../../../base/browser/window.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { MouseHandler } from './mouseHandler.js';\nimport { TextAreaSyntethicEvents } from './textAreaInput.js';\nimport { EditorMouseEvent, EditorPointerEventFactory } from '../editorDom.js';\n/**\n * Currently only tested on iOS 13/ iPadOS.\n */\nexport class PointerEventHandler extends MouseHandler {\n    constructor(context, viewController, viewHelper) {\n        super(context, viewController, viewHelper);\n        this._register(Gesture.addTarget(this.viewHelper.linesContentDomNode));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Tap, (e) => this.onTap(e)));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Change, (e) => this.onChange(e)));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Contextmenu, (e) => this._onContextMenu(new EditorMouseEvent(e, false, this.viewHelper.viewDomNode), false)));\n        this._lastPointerType = 'mouse';\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, 'pointerdown', (e) => {\n            const pointerType = e.pointerType;\n            if (pointerType === 'mouse') {\n                this._lastPointerType = 'mouse';\n                return;\n            }\n            else if (pointerType === 'touch') {\n                this._lastPointerType = 'touch';\n            }\n            else {\n                this._lastPointerType = 'pen';\n            }\n        }));\n        // PonterEvents\n        const pointerEvents = new EditorPointerEventFactory(this.viewHelper.viewDomNode);\n        this._register(pointerEvents.onPointerMove(this.viewHelper.viewDomNode, (e) => this._onMouseMove(e)));\n        this._register(pointerEvents.onPointerUp(this.viewHelper.viewDomNode, (e) => this._onMouseUp(e)));\n        this._register(pointerEvents.onPointerLeave(this.viewHelper.viewDomNode, (e) => this._onMouseLeave(e)));\n        this._register(pointerEvents.onPointerDown(this.viewHelper.viewDomNode, (e, pointerId) => this._onMouseDown(e, pointerId)));\n    }\n    onTap(event) {\n        if (!event.initialTarget || !this.viewHelper.linesContentDomNode.contains(event.initialTarget)) {\n            return;\n        }\n        event.preventDefault();\n        this.viewHelper.focusTextArea();\n        this._dispatchGesture(event, /*inSelectionMode*/ false);\n    }\n    onChange(event) {\n        if (this._lastPointerType === 'touch') {\n            this._context.viewModel.viewLayout.deltaScrollNow(-event.translationX, -event.translationY);\n        }\n        if (this._lastPointerType === 'pen') {\n            this._dispatchGesture(event, /*inSelectionMode*/ true);\n        }\n    }\n    _dispatchGesture(event, inSelectionMode) {\n        const target = this._createMouseTarget(new EditorMouseEvent(event, false, this.viewHelper.viewDomNode), false);\n        if (target.position) {\n            this.viewController.dispatchMouse({\n                position: target.position,\n                mouseColumn: target.position.column,\n                startedOnLineNumbers: false,\n                revealType: 1 /* NavigationCommandRevealType.Minimal */,\n                mouseDownCount: event.tapCount,\n                inSelectionMode,\n                altKey: false,\n                ctrlKey: false,\n                metaKey: false,\n                shiftKey: false,\n                leftButton: false,\n                middleButton: false,\n                onInjectedText: target.type === 6 /* MouseTargetType.CONTENT_TEXT */ && target.detail.injectedText !== null\n            });\n        }\n    }\n    _onMouseDown(e, pointerId) {\n        if (e.browserEvent.pointerType === 'touch') {\n            return;\n        }\n        super._onMouseDown(e, pointerId);\n    }\n}\nclass TouchHandler extends MouseHandler {\n    constructor(context, viewController, viewHelper) {\n        super(context, viewController, viewHelper);\n        this._register(Gesture.addTarget(this.viewHelper.linesContentDomNode));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Tap, (e) => this.onTap(e)));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Change, (e) => this.onChange(e)));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Contextmenu, (e) => this._onContextMenu(new EditorMouseEvent(e, false, this.viewHelper.viewDomNode), false)));\n    }\n    onTap(event) {\n        event.preventDefault();\n        this.viewHelper.focusTextArea();\n        const target = this._createMouseTarget(new EditorMouseEvent(event, false, this.viewHelper.viewDomNode), false);\n        if (target.position) {\n            // Send the tap event also to the <textarea> (for input purposes)\n            const event = document.createEvent('CustomEvent');\n            event.initEvent(TextAreaSyntethicEvents.Tap, false, true);\n            this.viewHelper.dispatchTextAreaEvent(event);\n            this.viewController.moveTo(target.position, 1 /* NavigationCommandRevealType.Minimal */);\n        }\n    }\n    onChange(e) {\n        this._context.viewModel.viewLayout.deltaScrollNow(-e.translationX, -e.translationY);\n    }\n}\nexport class PointerHandler extends Disposable {\n    constructor(context, viewController, viewHelper) {\n        super();\n        const isPhone = platform.isIOS || (platform.isAndroid && platform.isMobile);\n        if (isPhone && BrowserFeatures.pointerEvents) {\n            this.handler = this._register(new PointerEventHandler(context, viewController, viewHelper));\n        }\n        else if (mainWindow.TouchEvent) {\n            this.handler = this._register(new TouchHandler(context, viewController, viewHelper));\n        }\n        else {\n            this.handler = this._register(new MouseHandler(context, viewController, viewHelper));\n        }\n    }\n    getTargetAtClientPoint(clientX, clientY) {\n        return this.handler.getTargetAtClientPoint(clientX, clientY);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport { StandardWheelEvent } from '../../../base/browser/mouseEvent.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { HitTestContext, MouseTarget, MouseTargetFactory } from './mouseTarget.js';\nimport { ClientCoordinates, EditorMouseEvent, EditorMouseEventFactory, GlobalEditorPointerMoveMonitor, createEditorPagePosition, createCoordinatesRelativeToEditor, PageCoordinates } from '../editorDom.js';\nimport { EditorZoom } from '../../common/config/editorZoom.js';\nimport { Position } from '../../common/core/position.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { ViewEventHandler } from '../../common/viewEventHandler.js';\nimport { MouseWheelClassifier } from '../../../base/browser/ui/scrollbar/scrollableElement.js';\nexport class MouseHandler extends ViewEventHandler {\n    constructor(context, viewController, viewHelper) {\n        super();\n        this._mouseLeaveMonitor = null;\n        this._context = context;\n        this.viewController = viewController;\n        this.viewHelper = viewHelper;\n        this.mouseTargetFactory = new MouseTargetFactory(this._context, viewHelper);\n        this._mouseDownOperation = this._register(new MouseDownOperation(this._context, this.viewController, this.viewHelper, this.mouseTargetFactory, (e, testEventTarget) => this._createMouseTarget(e, testEventTarget), (e) => this._getMouseColumn(e)));\n        this.lastMouseLeaveTime = -1;\n        this._height = this._context.configuration.options.get(144 /* EditorOption.layoutInfo */).height;\n        const mouseEvents = new EditorMouseEventFactory(this.viewHelper.viewDomNode);\n        this._register(mouseEvents.onContextMenu(this.viewHelper.viewDomNode, (e) => this._onContextMenu(e, true)));\n        this._register(mouseEvents.onMouseMove(this.viewHelper.viewDomNode, (e) => {\n            this._onMouseMove(e);\n            // See https://github.com/microsoft/vscode/issues/138789\n            // When moving the mouse really quickly, the browser sometimes forgets to\n            // send us a `mouseleave` or `mouseout` event. We therefore install here\n            // a global `mousemove` listener to manually recover if the mouse goes outside\n            // the editor. As soon as the mouse leaves outside of the editor, we\n            // remove this listener\n            if (!this._mouseLeaveMonitor) {\n                this._mouseLeaveMonitor = dom.addDisposableListener(this.viewHelper.viewDomNode.ownerDocument, 'mousemove', (e) => {\n                    if (!this.viewHelper.viewDomNode.contains(e.target)) {\n                        // went outside the editor!\n                        this._onMouseLeave(new EditorMouseEvent(e, false, this.viewHelper.viewDomNode));\n                    }\n                });\n            }\n        }));\n        this._register(mouseEvents.onMouseUp(this.viewHelper.viewDomNode, (e) => this._onMouseUp(e)));\n        this._register(mouseEvents.onMouseLeave(this.viewHelper.viewDomNode, (e) => this._onMouseLeave(e)));\n        // `pointerdown` events can't be used to determine if there's a double click, or triple click\n        // because their `e.detail` is always 0.\n        // We will therefore save the pointer id for the mouse and then reuse it in the `mousedown` event\n        // for `element.setPointerCapture`.\n        let capturePointerId = 0;\n        this._register(mouseEvents.onPointerDown(this.viewHelper.viewDomNode, (e, pointerId) => {\n            capturePointerId = pointerId;\n        }));\n        // The `pointerup` listener registered by `GlobalEditorPointerMoveMonitor` does not get invoked 100% of the times.\n        // I speculate that this is because the `pointerup` listener is only registered during the `mousedown` event, and perhaps\n        // the `pointerup` event is already queued for dispatching, which makes it that the new listener doesn't get fired.\n        // See https://github.com/microsoft/vscode/issues/146486 for repro steps.\n        // To compensate for that, we simply register here a `pointerup` listener and just communicate it.\n        this._register(dom.addDisposableListener(this.viewHelper.viewDomNode, dom.EventType.POINTER_UP, (e) => {\n            this._mouseDownOperation.onPointerUp();\n        }));\n        this._register(mouseEvents.onMouseDown(this.viewHelper.viewDomNode, (e) => this._onMouseDown(e, capturePointerId)));\n        this._setupMouseWheelZoomListener();\n        this._context.addEventHandler(this);\n    }\n    _setupMouseWheelZoomListener() {\n        const classifier = MouseWheelClassifier.INSTANCE;\n        let prevMouseWheelTime = 0;\n        let gestureStartZoomLevel = EditorZoom.getZoomLevel();\n        let gestureHasZoomModifiers = false;\n        let gestureAccumulatedDelta = 0;\n        const onMouseWheel = (browserEvent) => {\n            this.viewController.emitMouseWheel(browserEvent);\n            if (!this._context.configuration.options.get(76 /* EditorOption.mouseWheelZoom */)) {\n                return;\n            }\n            const e = new StandardWheelEvent(browserEvent);\n            classifier.acceptStandardWheelEvent(e);\n            if (classifier.isPhysicalMouseWheel()) {\n                if (hasMouseWheelZoomModifiers(browserEvent)) {\n                    const zoomLevel = EditorZoom.getZoomLevel();\n                    const delta = e.deltaY > 0 ? 1 : -1;\n                    EditorZoom.setZoomLevel(zoomLevel + delta);\n                    e.preventDefault();\n                    e.stopPropagation();\n                }\n            }\n            else {\n                // we consider mousewheel events that occur within 50ms of each other to be part of the same gesture\n                // we don't want to consider mouse wheel events where ctrl/cmd is pressed during the inertia phase\n                // we also want to accumulate deltaY values from the same gesture and use that to set the zoom level\n                if (Date.now() - prevMouseWheelTime > 50) {\n                    // reset if more than 50ms have passed\n                    gestureStartZoomLevel = EditorZoom.getZoomLevel();\n                    gestureHasZoomModifiers = hasMouseWheelZoomModifiers(browserEvent);\n                    gestureAccumulatedDelta = 0;\n                }\n                prevMouseWheelTime = Date.now();\n                gestureAccumulatedDelta += e.deltaY;\n                if (gestureHasZoomModifiers) {\n                    EditorZoom.setZoomLevel(gestureStartZoomLevel + gestureAccumulatedDelta / 5);\n                    e.preventDefault();\n                    e.stopPropagation();\n                }\n            }\n        };\n        this._register(dom.addDisposableListener(this.viewHelper.viewDomNode, dom.EventType.MOUSE_WHEEL, onMouseWheel, { capture: true, passive: false }));\n        function hasMouseWheelZoomModifiers(browserEvent) {\n            return (platform.isMacintosh\n                // on macOS we support cmd + two fingers scroll (`metaKey` set)\n                // and also the two fingers pinch gesture (`ctrKey` set)\n                ? ((browserEvent.metaKey || browserEvent.ctrlKey) && !browserEvent.shiftKey && !browserEvent.altKey)\n                : (browserEvent.ctrlKey && !browserEvent.metaKey && !browserEvent.shiftKey && !browserEvent.altKey));\n        }\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        if (this._mouseLeaveMonitor) {\n            this._mouseLeaveMonitor.dispose();\n            this._mouseLeaveMonitor = null;\n        }\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        if (e.hasChanged(144 /* EditorOption.layoutInfo */)) {\n            // layout change\n            const height = this._context.configuration.options.get(144 /* EditorOption.layoutInfo */).height;\n            if (this._height !== height) {\n                this._height = height;\n                this._mouseDownOperation.onHeightChanged();\n            }\n        }\n        return false;\n    }\n    onCursorStateChanged(e) {\n        this._mouseDownOperation.onCursorStateChanged(e);\n        return false;\n    }\n    onFocusChanged(e) {\n        return false;\n    }\n    // --- end event handlers\n    getTargetAtClientPoint(clientX, clientY) {\n        const clientPos = new ClientCoordinates(clientX, clientY);\n        const pos = clientPos.toPageCoordinates(dom.getWindow(this.viewHelper.viewDomNode));\n        const editorPos = createEditorPagePosition(this.viewHelper.viewDomNode);\n        if (pos.y < editorPos.y || pos.y > editorPos.y + editorPos.height || pos.x < editorPos.x || pos.x > editorPos.x + editorPos.width) {\n            return null;\n        }\n        const relativePos = createCoordinatesRelativeToEditor(this.viewHelper.viewDomNode, editorPos, pos);\n        return this.mouseTargetFactory.createMouseTarget(this.viewHelper.getLastRenderData(), editorPos, pos, relativePos, null);\n    }\n    _createMouseTarget(e, testEventTarget) {\n        let target = e.target;\n        if (!this.viewHelper.viewDomNode.contains(target)) {\n            const shadowRoot = dom.getShadowRoot(this.viewHelper.viewDomNode);\n            if (shadowRoot) {\n                target = shadowRoot.elementsFromPoint(e.posx, e.posy).find((el) => this.viewHelper.viewDomNode.contains(el));\n            }\n        }\n        return this.mouseTargetFactory.createMouseTarget(this.viewHelper.getLastRenderData(), e.editorPos, e.pos, e.relativePos, testEventTarget ? target : null);\n    }\n    _getMouseColumn(e) {\n        return this.mouseTargetFactory.getMouseColumn(e.relativePos);\n    }\n    _onContextMenu(e, testEventTarget) {\n        this.viewController.emitContextMenu({\n            event: e,\n            target: this._createMouseTarget(e, testEventTarget)\n        });\n    }\n    _onMouseMove(e) {\n        const targetIsWidget = this.mouseTargetFactory.mouseTargetIsWidget(e);\n        if (!targetIsWidget) {\n            e.preventDefault();\n        }\n        if (this._mouseDownOperation.isActive()) {\n            // In selection/drag operation\n            return;\n        }\n        const actualMouseMoveTime = e.timestamp;\n        if (actualMouseMoveTime < this.lastMouseLeaveTime) {\n            // Due to throttling, this event occurred before the mouse left the editor, therefore ignore it.\n            return;\n        }\n        this.viewController.emitMouseMove({\n            event: e,\n            target: this._createMouseTarget(e, true)\n        });\n    }\n    _onMouseLeave(e) {\n        if (this._mouseLeaveMonitor) {\n            this._mouseLeaveMonitor.dispose();\n            this._mouseLeaveMonitor = null;\n        }\n        this.lastMouseLeaveTime = (new Date()).getTime();\n        this.viewController.emitMouseLeave({\n            event: e,\n            target: null\n        });\n    }\n    _onMouseUp(e) {\n        this.viewController.emitMouseUp({\n            event: e,\n            target: this._createMouseTarget(e, true)\n        });\n    }\n    _onMouseDown(e, pointerId) {\n        const t = this._createMouseTarget(e, true);\n        const targetIsContent = (t.type === 6 /* MouseTargetType.CONTENT_TEXT */ || t.type === 7 /* MouseTargetType.CONTENT_EMPTY */);\n        const targetIsGutter = (t.type === 2 /* MouseTargetType.GUTTER_GLYPH_MARGIN */ || t.type === 3 /* MouseTargetType.GUTTER_LINE_NUMBERS */ || t.type === 4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */);\n        const targetIsLineNumbers = (t.type === 3 /* MouseTargetType.GUTTER_LINE_NUMBERS */);\n        const selectOnLineNumbers = this._context.configuration.options.get(109 /* EditorOption.selectOnLineNumbers */);\n        const targetIsViewZone = (t.type === 8 /* MouseTargetType.CONTENT_VIEW_ZONE */ || t.type === 5 /* MouseTargetType.GUTTER_VIEW_ZONE */);\n        const targetIsWidget = (t.type === 9 /* MouseTargetType.CONTENT_WIDGET */);\n        let shouldHandle = e.leftButton || e.middleButton;\n        if (platform.isMacintosh && e.leftButton && e.ctrlKey) {\n            shouldHandle = false;\n        }\n        const focus = () => {\n            e.preventDefault();\n            this.viewHelper.focusTextArea();\n        };\n        if (shouldHandle && (targetIsContent || (targetIsLineNumbers && selectOnLineNumbers))) {\n            focus();\n            this._mouseDownOperation.start(t.type, e, pointerId);\n        }\n        else if (targetIsGutter) {\n            // Do not steal focus\n            e.preventDefault();\n        }\n        else if (targetIsViewZone) {\n            const viewZoneData = t.detail;\n            if (shouldHandle && this.viewHelper.shouldSuppressMouseDownOnViewZone(viewZoneData.viewZoneId)) {\n                focus();\n                this._mouseDownOperation.start(t.type, e, pointerId);\n                e.preventDefault();\n            }\n        }\n        else if (targetIsWidget && this.viewHelper.shouldSuppressMouseDownOnWidget(t.detail)) {\n            focus();\n            e.preventDefault();\n        }\n        this.viewController.emitMouseDown({\n            event: e,\n            target: t\n        });\n    }\n}\nclass MouseDownOperation extends Disposable {\n    constructor(_context, _viewController, _viewHelper, _mouseTargetFactory, createMouseTarget, getMouseColumn) {\n        super();\n        this._context = _context;\n        this._viewController = _viewController;\n        this._viewHelper = _viewHelper;\n        this._mouseTargetFactory = _mouseTargetFactory;\n        this._createMouseTarget = createMouseTarget;\n        this._getMouseColumn = getMouseColumn;\n        this._mouseMoveMonitor = this._register(new GlobalEditorPointerMoveMonitor(this._viewHelper.viewDomNode));\n        this._topBottomDragScrolling = this._register(new TopBottomDragScrolling(this._context, this._viewHelper, this._mouseTargetFactory, (position, inSelectionMode, revealType) => this._dispatchMouse(position, inSelectionMode, revealType)));\n        this._mouseState = new MouseDownState();\n        this._currentSelection = new Selection(1, 1, 1, 1);\n        this._isActive = false;\n        this._lastMouseEvent = null;\n    }\n    dispose() {\n        super.dispose();\n    }\n    isActive() {\n        return this._isActive;\n    }\n    _onMouseDownThenMove(e) {\n        this._lastMouseEvent = e;\n        this._mouseState.setModifiers(e);\n        const position = this._findMousePosition(e, false);\n        if (!position) {\n            // Ignoring because position is unknown\n            return;\n        }\n        if (this._mouseState.isDragAndDrop) {\n            this._viewController.emitMouseDrag({\n                event: e,\n                target: position\n            });\n        }\n        else {\n            if (position.type === 13 /* MouseTargetType.OUTSIDE_EDITOR */ && (position.outsidePosition === 'above' || position.outsidePosition === 'below')) {\n                this._topBottomDragScrolling.start(position, e);\n            }\n            else {\n                this._topBottomDragScrolling.stop();\n                this._dispatchMouse(position, true, 1 /* NavigationCommandRevealType.Minimal */);\n            }\n        }\n    }\n    start(targetType, e, pointerId) {\n        this._lastMouseEvent = e;\n        this._mouseState.setStartedOnLineNumbers(targetType === 3 /* MouseTargetType.GUTTER_LINE_NUMBERS */);\n        this._mouseState.setStartButtons(e);\n        this._mouseState.setModifiers(e);\n        const position = this._findMousePosition(e, true);\n        if (!position || !position.position) {\n            // Ignoring because position is unknown\n            return;\n        }\n        this._mouseState.trySetCount(e.detail, position.position);\n        // Overwrite the detail of the MouseEvent, as it will be sent out in an event and contributions might rely on it.\n        e.detail = this._mouseState.count;\n        const options = this._context.configuration.options;\n        if (!options.get(91 /* EditorOption.readOnly */)\n            && options.get(35 /* EditorOption.dragAndDrop */)\n            && !options.get(22 /* EditorOption.columnSelection */)\n            && !this._mouseState.altKey // we don't support multiple mouse\n            && e.detail < 2 // only single click on a selection can work\n            && !this._isActive // the mouse is not down yet\n            && !this._currentSelection.isEmpty() // we don't drag single cursor\n            && (position.type === 6 /* MouseTargetType.CONTENT_TEXT */) // single click on text\n            && position.position && this._currentSelection.containsPosition(position.position) // single click on a selection\n        ) {\n            this._mouseState.isDragAndDrop = true;\n            this._isActive = true;\n            this._mouseMoveMonitor.startMonitoring(this._viewHelper.viewLinesDomNode, pointerId, e.buttons, (e) => this._onMouseDownThenMove(e), (browserEvent) => {\n                const position = this._findMousePosition(this._lastMouseEvent, false);\n                if (dom.isKeyboardEvent(browserEvent)) {\n                    // cancel\n                    this._viewController.emitMouseDropCanceled();\n                }\n                else {\n                    this._viewController.emitMouseDrop({\n                        event: this._lastMouseEvent,\n                        target: (position ? this._createMouseTarget(this._lastMouseEvent, true) : null) // Ignoring because position is unknown, e.g., Content View Zone\n                    });\n                }\n                this._stop();\n            });\n            return;\n        }\n        this._mouseState.isDragAndDrop = false;\n        this._dispatchMouse(position, e.shiftKey, 1 /* NavigationCommandRevealType.Minimal */);\n        if (!this._isActive) {\n            this._isActive = true;\n            this._mouseMoveMonitor.startMonitoring(this._viewHelper.viewLinesDomNode, pointerId, e.buttons, (e) => this._onMouseDownThenMove(e), () => this._stop());\n        }\n    }\n    _stop() {\n        this._isActive = false;\n        this._topBottomDragScrolling.stop();\n    }\n    onHeightChanged() {\n        this._mouseMoveMonitor.stopMonitoring();\n    }\n    onPointerUp() {\n        this._mouseMoveMonitor.stopMonitoring();\n    }\n    onCursorStateChanged(e) {\n        this._currentSelection = e.selections[0];\n    }\n    _getPositionOutsideEditor(e) {\n        const editorContent = e.editorPos;\n        const model = this._context.viewModel;\n        const viewLayout = this._context.viewLayout;\n        const mouseColumn = this._getMouseColumn(e);\n        if (e.posy < editorContent.y) {\n            const outsideDistance = editorContent.y - e.posy;\n            const verticalOffset = Math.max(viewLayout.getCurrentScrollTop() - outsideDistance, 0);\n            const viewZoneData = HitTestContext.getZoneAtCoord(this._context, verticalOffset);\n            if (viewZoneData) {\n                const newPosition = this._helpPositionJumpOverViewZone(viewZoneData);\n                if (newPosition) {\n                    return MouseTarget.createOutsideEditor(mouseColumn, newPosition, 'above', outsideDistance);\n                }\n            }\n            const aboveLineNumber = viewLayout.getLineNumberAtVerticalOffset(verticalOffset);\n            return MouseTarget.createOutsideEditor(mouseColumn, new Position(aboveLineNumber, 1), 'above', outsideDistance);\n        }\n        if (e.posy > editorContent.y + editorContent.height) {\n            const outsideDistance = e.posy - editorContent.y - editorContent.height;\n            const verticalOffset = viewLayout.getCurrentScrollTop() + e.relativePos.y;\n            const viewZoneData = HitTestContext.getZoneAtCoord(this._context, verticalOffset);\n            if (viewZoneData) {\n                const newPosition = this._helpPositionJumpOverViewZone(viewZoneData);\n                if (newPosition) {\n                    return MouseTarget.createOutsideEditor(mouseColumn, newPosition, 'below', outsideDistance);\n                }\n            }\n            const belowLineNumber = viewLayout.getLineNumberAtVerticalOffset(verticalOffset);\n            return MouseTarget.createOutsideEditor(mouseColumn, new Position(belowLineNumber, model.getLineMaxColumn(belowLineNumber)), 'below', outsideDistance);\n        }\n        const possibleLineNumber = viewLayout.getLineNumberAtVerticalOffset(viewLayout.getCurrentScrollTop() + e.relativePos.y);\n        if (e.posx < editorContent.x) {\n            const outsideDistance = editorContent.x - e.posx;\n            return MouseTarget.createOutsideEditor(mouseColumn, new Position(possibleLineNumber, 1), 'left', outsideDistance);\n        }\n        if (e.posx > editorContent.x + editorContent.width) {\n            const outsideDistance = e.posx - editorContent.x - editorContent.width;\n            return MouseTarget.createOutsideEditor(mouseColumn, new Position(possibleLineNumber, model.getLineMaxColumn(possibleLineNumber)), 'right', outsideDistance);\n        }\n        return null;\n    }\n    _findMousePosition(e, testEventTarget) {\n        const positionOutsideEditor = this._getPositionOutsideEditor(e);\n        if (positionOutsideEditor) {\n            return positionOutsideEditor;\n        }\n        const t = this._createMouseTarget(e, testEventTarget);\n        const hintedPosition = t.position;\n        if (!hintedPosition) {\n            return null;\n        }\n        if (t.type === 8 /* MouseTargetType.CONTENT_VIEW_ZONE */ || t.type === 5 /* MouseTargetType.GUTTER_VIEW_ZONE */) {\n            const newPosition = this._helpPositionJumpOverViewZone(t.detail);\n            if (newPosition) {\n                return MouseTarget.createViewZone(t.type, t.element, t.mouseColumn, newPosition, t.detail);\n            }\n        }\n        return t;\n    }\n    _helpPositionJumpOverViewZone(viewZoneData) {\n        // Force position on view zones to go above or below depending on where selection started from\n        const selectionStart = new Position(this._currentSelection.selectionStartLineNumber, this._currentSelection.selectionStartColumn);\n        const positionBefore = viewZoneData.positionBefore;\n        const positionAfter = viewZoneData.positionAfter;\n        if (positionBefore && positionAfter) {\n            if (positionBefore.isBefore(selectionStart)) {\n                return positionBefore;\n            }\n            else {\n                return positionAfter;\n            }\n        }\n        return null;\n    }\n    _dispatchMouse(position, inSelectionMode, revealType) {\n        if (!position.position) {\n            return;\n        }\n        this._viewController.dispatchMouse({\n            position: position.position,\n            mouseColumn: position.mouseColumn,\n            startedOnLineNumbers: this._mouseState.startedOnLineNumbers,\n            revealType,\n            inSelectionMode: inSelectionMode,\n            mouseDownCount: this._mouseState.count,\n            altKey: this._mouseState.altKey,\n            ctrlKey: this._mouseState.ctrlKey,\n            metaKey: this._mouseState.metaKey,\n            shiftKey: this._mouseState.shiftKey,\n            leftButton: this._mouseState.leftButton,\n            middleButton: this._mouseState.middleButton,\n            onInjectedText: position.type === 6 /* MouseTargetType.CONTENT_TEXT */ && position.detail.injectedText !== null\n        });\n    }\n}\nclass TopBottomDragScrolling extends Disposable {\n    constructor(_context, _viewHelper, _mouseTargetFactory, _dispatchMouse) {\n        super();\n        this._context = _context;\n        this._viewHelper = _viewHelper;\n        this._mouseTargetFactory = _mouseTargetFactory;\n        this._dispatchMouse = _dispatchMouse;\n        this._operation = null;\n    }\n    dispose() {\n        super.dispose();\n        this.stop();\n    }\n    start(position, mouseEvent) {\n        if (this._operation) {\n            this._operation.setPosition(position, mouseEvent);\n        }\n        else {\n            this._operation = new TopBottomDragScrollingOperation(this._context, this._viewHelper, this._mouseTargetFactory, this._dispatchMouse, position, mouseEvent);\n        }\n    }\n    stop() {\n        if (this._operation) {\n            this._operation.dispose();\n            this._operation = null;\n        }\n    }\n}\nclass TopBottomDragScrollingOperation extends Disposable {\n    constructor(_context, _viewHelper, _mouseTargetFactory, _dispatchMouse, position, mouseEvent) {\n        super();\n        this._context = _context;\n        this._viewHelper = _viewHelper;\n        this._mouseTargetFactory = _mouseTargetFactory;\n        this._dispatchMouse = _dispatchMouse;\n        this._position = position;\n        this._mouseEvent = mouseEvent;\n        this._lastTime = Date.now();\n        this._animationFrameDisposable = dom.scheduleAtNextAnimationFrame(dom.getWindow(mouseEvent.browserEvent), () => this._execute());\n    }\n    dispose() {\n        this._animationFrameDisposable.dispose();\n        super.dispose();\n    }\n    setPosition(position, mouseEvent) {\n        this._position = position;\n        this._mouseEvent = mouseEvent;\n    }\n    /**\n     * update internal state and return elapsed ms since last time\n     */\n    _tick() {\n        const now = Date.now();\n        const elapsed = now - this._lastTime;\n        this._lastTime = now;\n        return elapsed;\n    }\n    /**\n     * get the number of lines per second to auto-scroll\n     */\n    _getScrollSpeed() {\n        const lineHeight = this._context.configuration.options.get(67 /* EditorOption.lineHeight */);\n        const viewportInLines = this._context.configuration.options.get(144 /* EditorOption.layoutInfo */).height / lineHeight;\n        const outsideDistanceInLines = this._position.outsideDistance / lineHeight;\n        if (outsideDistanceInLines <= 1.5) {\n            return Math.max(30, viewportInLines * (1 + outsideDistanceInLines));\n        }\n        if (outsideDistanceInLines <= 3) {\n            return Math.max(60, viewportInLines * (2 + outsideDistanceInLines));\n        }\n        return Math.max(200, viewportInLines * (7 + outsideDistanceInLines));\n    }\n    _execute() {\n        const lineHeight = this._context.configuration.options.get(67 /* EditorOption.lineHeight */);\n        const scrollSpeedInLines = this._getScrollSpeed();\n        const elapsed = this._tick();\n        const scrollInPixels = scrollSpeedInLines * (elapsed / 1000) * lineHeight;\n        const scrollValue = (this._position.outsidePosition === 'above' ? -scrollInPixels : scrollInPixels);\n        this._context.viewModel.viewLayout.deltaScrollNow(0, scrollValue);\n        this._viewHelper.renderNow();\n        const viewportData = this._context.viewLayout.getLinesViewportData();\n        const edgeLineNumber = (this._position.outsidePosition === 'above' ? viewportData.startLineNumber : viewportData.endLineNumber);\n        // First, try to find a position that matches the horizontal position of the mouse\n        let mouseTarget;\n        {\n            const editorPos = createEditorPagePosition(this._viewHelper.viewDomNode);\n            const horizontalScrollbarHeight = this._context.configuration.options.get(144 /* EditorOption.layoutInfo */).horizontalScrollbarHeight;\n            const pos = new PageCoordinates(this._mouseEvent.pos.x, editorPos.y + editorPos.height - horizontalScrollbarHeight - 0.1);\n            const relativePos = createCoordinatesRelativeToEditor(this._viewHelper.viewDomNode, editorPos, pos);\n            mouseTarget = this._mouseTargetFactory.createMouseTarget(this._viewHelper.getLastRenderData(), editorPos, pos, relativePos, null);\n        }\n        if (!mouseTarget.position || mouseTarget.position.lineNumber !== edgeLineNumber) {\n            if (this._position.outsidePosition === 'above') {\n                mouseTarget = MouseTarget.createOutsideEditor(this._position.mouseColumn, new Position(edgeLineNumber, 1), 'above', this._position.outsideDistance);\n            }\n            else {\n                mouseTarget = MouseTarget.createOutsideEditor(this._position.mouseColumn, new Position(edgeLineNumber, this._context.viewModel.getLineMaxColumn(edgeLineNumber)), 'below', this._position.outsideDistance);\n            }\n        }\n        this._dispatchMouse(mouseTarget, true, 2 /* NavigationCommandRevealType.None */);\n        this._animationFrameDisposable = dom.scheduleAtNextAnimationFrame(dom.getWindow(mouseTarget.element), () => this._execute());\n    }\n}\nclass MouseDownState {\n    get altKey() { return this._altKey; }\n    get ctrlKey() { return this._ctrlKey; }\n    get metaKey() { return this._metaKey; }\n    get shiftKey() { return this._shiftKey; }\n    get leftButton() { return this._leftButton; }\n    get middleButton() { return this._middleButton; }\n    get startedOnLineNumbers() { return this._startedOnLineNumbers; }\n    constructor() {\n        this._altKey = false;\n        this._ctrlKey = false;\n        this._metaKey = false;\n        this._shiftKey = false;\n        this._leftButton = false;\n        this._middleButton = false;\n        this._startedOnLineNumbers = false;\n        this._lastMouseDownPosition = null;\n        this._lastMouseDownPositionEqualCount = 0;\n        this._lastMouseDownCount = 0;\n        this._lastSetMouseDownCountTime = 0;\n        this.isDragAndDrop = false;\n    }\n    get count() {\n        return this._lastMouseDownCount;\n    }\n    setModifiers(source) {\n        this._altKey = source.altKey;\n        this._ctrlKey = source.ctrlKey;\n        this._metaKey = source.metaKey;\n        this._shiftKey = source.shiftKey;\n    }\n    setStartButtons(source) {\n        this._leftButton = source.leftButton;\n        this._middleButton = source.middleButton;\n    }\n    setStartedOnLineNumbers(startedOnLineNumbers) {\n        this._startedOnLineNumbers = startedOnLineNumbers;\n    }\n    trySetCount(setMouseDownCount, newMouseDownPosition) {\n        // a. Invalidate multiple clicking if too much time has passed (will be hit by IE because the detail field of mouse events contains garbage in IE10)\n        const currentTime = (new Date()).getTime();\n        if (currentTime - this._lastSetMouseDownCountTime > MouseDownState.CLEAR_MOUSE_DOWN_COUNT_TIME) {\n            setMouseDownCount = 1;\n        }\n        this._lastSetMouseDownCountTime = currentTime;\n        // b. Ensure that we don't jump from single click to triple click in one go (will be hit by IE because the detail field of mouse events contains garbage in IE10)\n        if (setMouseDownCount > this._lastMouseDownCount + 1) {\n            setMouseDownCount = this._lastMouseDownCount + 1;\n        }\n        // c. Invalidate multiple clicking if the logical position is different\n        if (this._lastMouseDownPosition && this._lastMouseDownPosition.equals(newMouseDownPosition)) {\n            this._lastMouseDownPositionEqualCount++;\n        }\n        else {\n            this._lastMouseDownPositionEqualCount = 1;\n        }\n        this._lastMouseDownPosition = newMouseDownPosition;\n        // Finally set the lastMouseDownCount\n        this._lastMouseDownCount = Math.min(setMouseDownCount, this._lastMouseDownPositionEqualCount);\n    }\n}\nMouseDownState.CLEAR_MOUSE_DOWN_COUNT_TIME = 400; // ms\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport * as browser from '../../../base/browser/browser.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { DomEmitter } from '../../../base/browser/event.js';\nimport { StandardKeyboardEvent } from '../../../base/browser/keyboardEvent.js';\nimport { inputLatency } from '../../../base/browser/performance.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { TextAreaState, _debugComposition } from './textAreaState.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { IAccessibilityService } from '../../../platform/accessibility/common/accessibility.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nexport var TextAreaSyntethicEvents;\n(function (TextAreaSyntethicEvents) {\n    TextAreaSyntethicEvents.Tap = '-monaco-textarea-synthetic-tap';\n})(TextAreaSyntethicEvents || (TextAreaSyntethicEvents = {}));\nexport const CopyOptions = {\n    forceCopyWithSyntaxHighlighting: false\n};\n/**\n * Every time we write to the clipboard, we record a bit of extra metadata here.\n * Every time we read from the cipboard, if the text matches our last written text,\n * we can fetch the previous metadata.\n */\nexport class InMemoryClipboardMetadataManager {\n    constructor() {\n        this._lastState = null;\n    }\n    set(lastCopiedValue, data) {\n        this._lastState = { lastCopiedValue, data };\n    }\n    get(pastedText) {\n        if (this._lastState && this._lastState.lastCopiedValue === pastedText) {\n            // match!\n            return this._lastState.data;\n        }\n        this._lastState = null;\n        return null;\n    }\n}\nInMemoryClipboardMetadataManager.INSTANCE = new InMemoryClipboardMetadataManager();\nclass CompositionContext {\n    constructor() {\n        this._lastTypeTextLength = 0;\n    }\n    handleCompositionUpdate(text) {\n        text = text || '';\n        const typeInput = {\n            text: text,\n            replacePrevCharCnt: this._lastTypeTextLength,\n            replaceNextCharCnt: 0,\n            positionDelta: 0\n        };\n        this._lastTypeTextLength = text.length;\n        return typeInput;\n    }\n}\n/**\n * Writes screen reader content to the textarea and is able to analyze its input events to generate:\n *  - onCut\n *  - onPaste\n *  - onType\n *\n * Composition events are generated for presentation purposes (composition input is reflected in onType).\n */\nlet TextAreaInput = class TextAreaInput extends Disposable {\n    get textAreaState() {\n        return this._textAreaState;\n    }\n    constructor(_host, _textArea, _OS, _browser, _accessibilityService, _logService) {\n        super();\n        this._host = _host;\n        this._textArea = _textArea;\n        this._OS = _OS;\n        this._browser = _browser;\n        this._accessibilityService = _accessibilityService;\n        this._logService = _logService;\n        this._onFocus = this._register(new Emitter());\n        this.onFocus = this._onFocus.event;\n        this._onBlur = this._register(new Emitter());\n        this.onBlur = this._onBlur.event;\n        this._onKeyDown = this._register(new Emitter());\n        this.onKeyDown = this._onKeyDown.event;\n        this._onKeyUp = this._register(new Emitter());\n        this.onKeyUp = this._onKeyUp.event;\n        this._onCut = this._register(new Emitter());\n        this.onCut = this._onCut.event;\n        this._onPaste = this._register(new Emitter());\n        this.onPaste = this._onPaste.event;\n        this._onType = this._register(new Emitter());\n        this.onType = this._onType.event;\n        this._onCompositionStart = this._register(new Emitter());\n        this.onCompositionStart = this._onCompositionStart.event;\n        this._onCompositionUpdate = this._register(new Emitter());\n        this.onCompositionUpdate = this._onCompositionUpdate.event;\n        this._onCompositionEnd = this._register(new Emitter());\n        this.onCompositionEnd = this._onCompositionEnd.event;\n        this._onSelectionChangeRequest = this._register(new Emitter());\n        this.onSelectionChangeRequest = this._onSelectionChangeRequest.event;\n        this._asyncFocusGainWriteScreenReaderContent = this._register(new MutableDisposable());\n        this._asyncTriggerCut = this._register(new RunOnceScheduler(() => this._onCut.fire(), 0));\n        this._textAreaState = TextAreaState.EMPTY;\n        this._selectionChangeListener = null;\n        if (this._accessibilityService.isScreenReaderOptimized()) {\n            this.writeNativeTextAreaContent('ctor');\n        }\n        this._register(Event.runAndSubscribe(this._accessibilityService.onDidChangeScreenReaderOptimized, () => {\n            if (this._accessibilityService.isScreenReaderOptimized() && !this._asyncFocusGainWriteScreenReaderContent.value) {\n                this._asyncFocusGainWriteScreenReaderContent.value = this._register(new RunOnceScheduler(() => this.writeNativeTextAreaContent('asyncFocusGain'), 0));\n            }\n            else {\n                this._asyncFocusGainWriteScreenReaderContent.clear();\n            }\n        }));\n        this._hasFocus = false;\n        this._currentComposition = null;\n        let lastKeyDown = null;\n        this._register(this._textArea.onKeyDown((_e) => {\n            const e = new StandardKeyboardEvent(_e);\n            if (e.keyCode === 114 /* KeyCode.KEY_IN_COMPOSITION */\n                || (this._currentComposition && e.keyCode === 1 /* KeyCode.Backspace */)) {\n                // Stop propagation for keyDown events if the IME is processing key input\n                e.stopPropagation();\n            }\n            if (e.equals(9 /* KeyCode.Escape */)) {\n                // Prevent default always for `Esc`, otherwise it will generate a keypress\n                // See https://msdn.microsoft.com/en-us/library/ie/ms536939(v=vs.85).aspx\n                e.preventDefault();\n            }\n            lastKeyDown = e;\n            this._onKeyDown.fire(e);\n        }));\n        this._register(this._textArea.onKeyUp((_e) => {\n            const e = new StandardKeyboardEvent(_e);\n            this._onKeyUp.fire(e);\n        }));\n        this._register(this._textArea.onCompositionStart((e) => {\n            if (_debugComposition) {\n                console.log(`[compositionstart]`, e);\n            }\n            const currentComposition = new CompositionContext();\n            if (this._currentComposition) {\n                // simply reset the composition context\n                this._currentComposition = currentComposition;\n                return;\n            }\n            this._currentComposition = currentComposition;\n            if (this._OS === 2 /* OperatingSystem.Macintosh */\n                && lastKeyDown\n                && lastKeyDown.equals(114 /* KeyCode.KEY_IN_COMPOSITION */)\n                && this._textAreaState.selectionStart === this._textAreaState.selectionEnd\n                && this._textAreaState.selectionStart > 0\n                && this._textAreaState.value.substr(this._textAreaState.selectionStart - 1, 1) === e.data\n                && (lastKeyDown.code === 'ArrowRight' || lastKeyDown.code === 'ArrowLeft')) {\n                // Handling long press case on Chromium/Safari macOS + arrow key => pretend the character was selected\n                if (_debugComposition) {\n                    console.log(`[compositionstart] Handling long press case on macOS + arrow key`, e);\n                }\n                // Pretend the previous character was composed (in order to get it removed by subsequent compositionupdate events)\n                currentComposition.handleCompositionUpdate('x');\n                this._onCompositionStart.fire({ data: e.data });\n                return;\n            }\n            if (this._browser.isAndroid) {\n                // when tapping on the editor, Android enters composition mode to edit the current word\n                // so we cannot clear the textarea on Android and we must pretend the current word was selected\n                this._onCompositionStart.fire({ data: e.data });\n                return;\n            }\n            this._onCompositionStart.fire({ data: e.data });\n        }));\n        this._register(this._textArea.onCompositionUpdate((e) => {\n            if (_debugComposition) {\n                console.log(`[compositionupdate]`, e);\n            }\n            const currentComposition = this._currentComposition;\n            if (!currentComposition) {\n                // should not be possible to receive a 'compositionupdate' without a 'compositionstart'\n                return;\n            }\n            if (this._browser.isAndroid) {\n                // On Android, the data sent with the composition update event is unusable.\n                // For example, if the cursor is in the middle of a word like Mic|osoft\n                // and Microsoft is chosen from the keyboard's suggestions, the e.data will contain \"Microsoft\".\n                // This is not really usable because it doesn't tell us where the edit began and where it ended.\n                const newState = TextAreaState.readFromTextArea(this._textArea, this._textAreaState);\n                const typeInput = TextAreaState.deduceAndroidCompositionInput(this._textAreaState, newState);\n                this._textAreaState = newState;\n                this._onType.fire(typeInput);\n                this._onCompositionUpdate.fire(e);\n                return;\n            }\n            const typeInput = currentComposition.handleCompositionUpdate(e.data);\n            this._textAreaState = TextAreaState.readFromTextArea(this._textArea, this._textAreaState);\n            this._onType.fire(typeInput);\n            this._onCompositionUpdate.fire(e);\n        }));\n        this._register(this._textArea.onCompositionEnd((e) => {\n            if (_debugComposition) {\n                console.log(`[compositionend]`, e);\n            }\n            const currentComposition = this._currentComposition;\n            if (!currentComposition) {\n                // https://github.com/microsoft/monaco-editor/issues/1663\n                // On iOS 13.2, Chinese system IME randomly trigger an additional compositionend event with empty data\n                return;\n            }\n            this._currentComposition = null;\n            if (this._browser.isAndroid) {\n                // On Android, the data sent with the composition update event is unusable.\n                // For example, if the cursor is in the middle of a word like Mic|osoft\n                // and Microsoft is chosen from the keyboard's suggestions, the e.data will contain \"Microsoft\".\n                // This is not really usable because it doesn't tell us where the edit began and where it ended.\n                const newState = TextAreaState.readFromTextArea(this._textArea, this._textAreaState);\n                const typeInput = TextAreaState.deduceAndroidCompositionInput(this._textAreaState, newState);\n                this._textAreaState = newState;\n                this._onType.fire(typeInput);\n                this._onCompositionEnd.fire();\n                return;\n            }\n            const typeInput = currentComposition.handleCompositionUpdate(e.data);\n            this._textAreaState = TextAreaState.readFromTextArea(this._textArea, this._textAreaState);\n            this._onType.fire(typeInput);\n            this._onCompositionEnd.fire();\n        }));\n        this._register(this._textArea.onInput((e) => {\n            if (_debugComposition) {\n                console.log(`[input]`, e);\n            }\n            // Pretend here we touched the text area, as the `input` event will most likely\n            // result in a `selectionchange` event which we want to ignore\n            this._textArea.setIgnoreSelectionChangeTime('received input event');\n            if (this._currentComposition) {\n                return;\n            }\n            const newState = TextAreaState.readFromTextArea(this._textArea, this._textAreaState);\n            const typeInput = TextAreaState.deduceInput(this._textAreaState, newState, /*couldBeEmojiInput*/ this._OS === 2 /* OperatingSystem.Macintosh */);\n            if (typeInput.replacePrevCharCnt === 0 && typeInput.text.length === 1) {\n                // one character was typed\n                if (strings.isHighSurrogate(typeInput.text.charCodeAt(0))\n                    || typeInput.text.charCodeAt(0) === 0x7f /* Delete */) {\n                    // Ignore invalid input but keep it around for next time\n                    return;\n                }\n            }\n            this._textAreaState = newState;\n            if (typeInput.text !== ''\n                || typeInput.replacePrevCharCnt !== 0\n                || typeInput.replaceNextCharCnt !== 0\n                || typeInput.positionDelta !== 0) {\n                this._onType.fire(typeInput);\n            }\n        }));\n        // --- Clipboard operations\n        this._register(this._textArea.onCut((e) => {\n            // Pretend here we touched the text area, as the `cut` event will most likely\n            // result in a `selectionchange` event which we want to ignore\n            this._textArea.setIgnoreSelectionChangeTime('received cut event');\n            this._ensureClipboardGetsEditorSelection(e);\n            this._asyncTriggerCut.schedule();\n        }));\n        this._register(this._textArea.onCopy((e) => {\n            this._ensureClipboardGetsEditorSelection(e);\n        }));\n        this._register(this._textArea.onPaste((e) => {\n            // Pretend here we touched the text area, as the `paste` event will most likely\n            // result in a `selectionchange` event which we want to ignore\n            this._textArea.setIgnoreSelectionChangeTime('received paste event');\n            e.preventDefault();\n            if (!e.clipboardData) {\n                return;\n            }\n            let [text, metadata] = ClipboardEventUtils.getTextData(e.clipboardData);\n            if (!text) {\n                return;\n            }\n            // try the in-memory store\n            metadata = metadata || InMemoryClipboardMetadataManager.INSTANCE.get(text);\n            this._onPaste.fire({\n                text: text,\n                metadata: metadata\n            });\n        }));\n        this._register(this._textArea.onFocus(() => {\n            const hadFocus = this._hasFocus;\n            this._setHasFocus(true);\n            if (this._accessibilityService.isScreenReaderOptimized() && this._browser.isSafari && !hadFocus && this._hasFocus) {\n                // When \"tabbing into\" the textarea, immediately after dispatching the 'focus' event,\n                // Safari will always move the selection at offset 0 in the textarea\n                if (!this._asyncFocusGainWriteScreenReaderContent.value) {\n                    this._asyncFocusGainWriteScreenReaderContent.value = new RunOnceScheduler(() => this.writeNativeTextAreaContent('asyncFocusGain'), 0);\n                }\n                this._asyncFocusGainWriteScreenReaderContent.value.schedule();\n            }\n        }));\n        this._register(this._textArea.onBlur(() => {\n            if (this._currentComposition) {\n                // See https://github.com/microsoft/vscode/issues/112621\n                // where compositionend is not triggered when the editor\n                // is taken off-dom during a composition\n                // Clear the flag to be able to write to the textarea\n                this._currentComposition = null;\n                // Clear the textarea to avoid an unwanted cursor type\n                this.writeNativeTextAreaContent('blurWithoutCompositionEnd');\n                // Fire artificial composition end\n                this._onCompositionEnd.fire();\n            }\n            this._setHasFocus(false);\n        }));\n        this._register(this._textArea.onSyntheticTap(() => {\n            if (this._browser.isAndroid && this._currentComposition) {\n                // on Android, tapping does not cancel the current composition, so the\n                // textarea is stuck showing the old composition\n                // Clear the flag to be able to write to the textarea\n                this._currentComposition = null;\n                // Clear the textarea to avoid an unwanted cursor type\n                this.writeNativeTextAreaContent('tapWithoutCompositionEnd');\n                // Fire artificial composition end\n                this._onCompositionEnd.fire();\n            }\n        }));\n    }\n    _installSelectionChangeListener() {\n        // See https://github.com/microsoft/vscode/issues/27216 and https://github.com/microsoft/vscode/issues/98256\n        // When using a Braille display, it is possible for users to reposition the\n        // system caret. This is reflected in Chrome as a `selectionchange` event.\n        //\n        // The `selectionchange` event appears to be emitted under numerous other circumstances,\n        // so it is quite a challenge to distinguish a `selectionchange` coming in from a user\n        // using a Braille display from all the other cases.\n        //\n        // The problems with the `selectionchange` event are:\n        //  * the event is emitted when the textarea is focused programmatically -- textarea.focus()\n        //  * the event is emitted when the selection is changed in the textarea programmatically -- textarea.setSelectionRange(...)\n        //  * the event is emitted when the value of the textarea is changed programmatically -- textarea.value = '...'\n        //  * the event is emitted when tabbing into the textarea\n        //  * the event is emitted asynchronously (sometimes with a delay as high as a few tens of ms)\n        //  * the event sometimes comes in bursts for a single logical textarea operation\n        // `selectionchange` events often come multiple times for a single logical change\n        // so throttle multiple `selectionchange` events that burst in a short period of time.\n        let previousSelectionChangeEventTime = 0;\n        return dom.addDisposableListener(this._textArea.ownerDocument, 'selectionchange', (e) => {\n            inputLatency.onSelectionChange();\n            if (!this._hasFocus) {\n                return;\n            }\n            if (this._currentComposition) {\n                return;\n            }\n            if (!this._browser.isChrome) {\n                // Support only for Chrome until testing happens on other browsers\n                return;\n            }\n            const now = Date.now();\n            const delta1 = now - previousSelectionChangeEventTime;\n            previousSelectionChangeEventTime = now;\n            if (delta1 < 5) {\n                // received another `selectionchange` event within 5ms of the previous `selectionchange` event\n                // => ignore it\n                return;\n            }\n            const delta2 = now - this._textArea.getIgnoreSelectionChangeTime();\n            this._textArea.resetSelectionChangeTime();\n            if (delta2 < 100) {\n                // received a `selectionchange` event within 100ms since we touched the textarea\n                // => ignore it, since we caused it\n                return;\n            }\n            if (!this._textAreaState.selection) {\n                // Cannot correlate a position in the textarea with a position in the editor...\n                return;\n            }\n            const newValue = this._textArea.getValue();\n            if (this._textAreaState.value !== newValue) {\n                // Cannot correlate a position in the textarea with a position in the editor...\n                return;\n            }\n            const newSelectionStart = this._textArea.getSelectionStart();\n            const newSelectionEnd = this._textArea.getSelectionEnd();\n            if (this._textAreaState.selectionStart === newSelectionStart && this._textAreaState.selectionEnd === newSelectionEnd) {\n                // Nothing to do...\n                return;\n            }\n            const _newSelectionStartPosition = this._textAreaState.deduceEditorPosition(newSelectionStart);\n            const newSelectionStartPosition = this._host.deduceModelPosition(_newSelectionStartPosition[0], _newSelectionStartPosition[1], _newSelectionStartPosition[2]);\n            const _newSelectionEndPosition = this._textAreaState.deduceEditorPosition(newSelectionEnd);\n            const newSelectionEndPosition = this._host.deduceModelPosition(_newSelectionEndPosition[0], _newSelectionEndPosition[1], _newSelectionEndPosition[2]);\n            const newSelection = new Selection(newSelectionStartPosition.lineNumber, newSelectionStartPosition.column, newSelectionEndPosition.lineNumber, newSelectionEndPosition.column);\n            this._onSelectionChangeRequest.fire(newSelection);\n        });\n    }\n    dispose() {\n        super.dispose();\n        if (this._selectionChangeListener) {\n            this._selectionChangeListener.dispose();\n            this._selectionChangeListener = null;\n        }\n    }\n    focusTextArea() {\n        // Setting this._hasFocus and writing the screen reader content\n        // will result in a focus() and setSelectionRange() in the textarea\n        this._setHasFocus(true);\n        // If the editor is off DOM, focus cannot be really set, so let's double check that we have managed to set the focus\n        this.refreshFocusState();\n    }\n    isFocused() {\n        return this._hasFocus;\n    }\n    refreshFocusState() {\n        this._setHasFocus(this._textArea.hasFocus());\n    }\n    _setHasFocus(newHasFocus) {\n        if (this._hasFocus === newHasFocus) {\n            // no change\n            return;\n        }\n        this._hasFocus = newHasFocus;\n        if (this._selectionChangeListener) {\n            this._selectionChangeListener.dispose();\n            this._selectionChangeListener = null;\n        }\n        if (this._hasFocus) {\n            this._selectionChangeListener = this._installSelectionChangeListener();\n        }\n        if (this._hasFocus) {\n            this.writeNativeTextAreaContent('focusgain');\n        }\n        if (this._hasFocus) {\n            this._onFocus.fire();\n        }\n        else {\n            this._onBlur.fire();\n        }\n    }\n    _setAndWriteTextAreaState(reason, textAreaState) {\n        if (!this._hasFocus) {\n            textAreaState = textAreaState.collapseSelection();\n        }\n        textAreaState.writeToTextArea(reason, this._textArea, this._hasFocus);\n        this._textAreaState = textAreaState;\n    }\n    writeNativeTextAreaContent(reason) {\n        if ((!this._accessibilityService.isScreenReaderOptimized() && reason === 'render') || this._currentComposition) {\n            // Do not write to the text on render unless a screen reader is being used #192278\n            // Do not write to the text area when doing composition\n            return;\n        }\n        this._logService.trace(`writeTextAreaState(reason: ${reason})`);\n        this._setAndWriteTextAreaState(reason, this._host.getScreenReaderContent());\n    }\n    _ensureClipboardGetsEditorSelection(e) {\n        const dataToCopy = this._host.getDataToCopy();\n        const storedMetadata = {\n            version: 1,\n            isFromEmptySelection: dataToCopy.isFromEmptySelection,\n            multicursorText: dataToCopy.multicursorText,\n            mode: dataToCopy.mode\n        };\n        InMemoryClipboardMetadataManager.INSTANCE.set(\n        // When writing \"LINE\\r\\n\" to the clipboard and then pasting,\n        // Firefox pastes \"LINE\\n\", so let's work around this quirk\n        (this._browser.isFirefox ? dataToCopy.text.replace(/\\r\\n/g, '\\n') : dataToCopy.text), storedMetadata);\n        e.preventDefault();\n        if (e.clipboardData) {\n            ClipboardEventUtils.setTextData(e.clipboardData, dataToCopy.text, dataToCopy.html, storedMetadata);\n        }\n    }\n};\nTextAreaInput = __decorate([\n    __param(4, IAccessibilityService),\n    __param(5, ILogService)\n], TextAreaInput);\nexport { TextAreaInput };\nexport const ClipboardEventUtils = {\n    getTextData(clipboardData) {\n        const text = clipboardData.getData(Mimes.text);\n        let metadata = null;\n        const rawmetadata = clipboardData.getData('vscode-editor-data');\n        if (typeof rawmetadata === 'string') {\n            try {\n                metadata = JSON.parse(rawmetadata);\n                if (metadata.version !== 1) {\n                    metadata = null;\n                }\n            }\n            catch (err) {\n                // no problem!\n            }\n        }\n        if (text.length === 0 && metadata === null && clipboardData.files.length > 0) {\n            // no textual data pasted, generate text from file names\n            const files = Array.prototype.slice.call(clipboardData.files, 0);\n            return [files.map(file => file.name).join('\\n'), null];\n        }\n        return [text, metadata];\n    },\n    setTextData(clipboardData, text, html, metadata) {\n        clipboardData.setData(Mimes.text, text);\n        if (typeof html === 'string') {\n            clipboardData.setData('text/html', html);\n        }\n        clipboardData.setData('vscode-editor-data', JSON.stringify(metadata));\n    }\n};\nexport class TextAreaWrapper extends Disposable {\n    get ownerDocument() {\n        return this._actual.ownerDocument;\n    }\n    constructor(_actual) {\n        super();\n        this._actual = _actual;\n        this.onKeyDown = this._register(new DomEmitter(this._actual, 'keydown')).event;\n        this.onKeyUp = this._register(new DomEmitter(this._actual, 'keyup')).event;\n        this.onCompositionStart = this._register(new DomEmitter(this._actual, 'compositionstart')).event;\n        this.onCompositionUpdate = this._register(new DomEmitter(this._actual, 'compositionupdate')).event;\n        this.onCompositionEnd = this._register(new DomEmitter(this._actual, 'compositionend')).event;\n        this.onBeforeInput = this._register(new DomEmitter(this._actual, 'beforeinput')).event;\n        this.onInput = this._register(new DomEmitter(this._actual, 'input')).event;\n        this.onCut = this._register(new DomEmitter(this._actual, 'cut')).event;\n        this.onCopy = this._register(new DomEmitter(this._actual, 'copy')).event;\n        this.onPaste = this._register(new DomEmitter(this._actual, 'paste')).event;\n        this.onFocus = this._register(new DomEmitter(this._actual, 'focus')).event;\n        this.onBlur = this._register(new DomEmitter(this._actual, 'blur')).event;\n        this._onSyntheticTap = this._register(new Emitter());\n        this.onSyntheticTap = this._onSyntheticTap.event;\n        this._ignoreSelectionChangeTime = 0;\n        this._register(this.onKeyDown(() => inputLatency.onKeyDown()));\n        this._register(this.onBeforeInput(() => inputLatency.onBeforeInput()));\n        this._register(this.onInput(() => inputLatency.onInput()));\n        this._register(this.onKeyUp(() => inputLatency.onKeyUp()));\n        this._register(dom.addDisposableListener(this._actual, TextAreaSyntethicEvents.Tap, () => this._onSyntheticTap.fire()));\n    }\n    hasFocus() {\n        const shadowRoot = dom.getShadowRoot(this._actual);\n        if (shadowRoot) {\n            return shadowRoot.activeElement === this._actual;\n        }\n        else if (this._actual.isConnected) {\n            return dom.getActiveElement() === this._actual;\n        }\n        else {\n            return false;\n        }\n    }\n    setIgnoreSelectionChangeTime(reason) {\n        this._ignoreSelectionChangeTime = Date.now();\n    }\n    getIgnoreSelectionChangeTime() {\n        return this._ignoreSelectionChangeTime;\n    }\n    resetSelectionChangeTime() {\n        this._ignoreSelectionChangeTime = 0;\n    }\n    getValue() {\n        // console.log('current value: ' + this._textArea.value);\n        return this._actual.value;\n    }\n    setValue(reason, value) {\n        const textArea = this._actual;\n        if (textArea.value === value) {\n            // No change\n            return;\n        }\n        // console.log('reason: ' + reason + ', current value: ' + textArea.value + ' => new value: ' + value);\n        this.setIgnoreSelectionChangeTime('setValue');\n        textArea.value = value;\n    }\n    getSelectionStart() {\n        return this._actual.selectionDirection === 'backward' ? this._actual.selectionEnd : this._actual.selectionStart;\n    }\n    getSelectionEnd() {\n        return this._actual.selectionDirection === 'backward' ? this._actual.selectionStart : this._actual.selectionEnd;\n    }\n    setSelectionRange(reason, selectionStart, selectionEnd) {\n        const textArea = this._actual;\n        let activeElement = null;\n        const shadowRoot = dom.getShadowRoot(textArea);\n        if (shadowRoot) {\n            activeElement = shadowRoot.activeElement;\n        }\n        else {\n            activeElement = dom.getActiveElement();\n        }\n        const activeWindow = dom.getWindow(activeElement);\n        const currentIsFocused = (activeElement === textArea);\n        const currentSelectionStart = textArea.selectionStart;\n        const currentSelectionEnd = textArea.selectionEnd;\n        if (currentIsFocused && currentSelectionStart === selectionStart && currentSelectionEnd === selectionEnd) {\n            // No change\n            // Firefox iframe bug https://github.com/microsoft/monaco-editor/issues/643#issuecomment-367871377\n            if (browser.isFirefox && activeWindow.parent !== activeWindow) {\n                textArea.focus();\n            }\n            return;\n        }\n        // console.log('reason: ' + reason + ', setSelectionRange: ' + selectionStart + ' -> ' + selectionEnd);\n        if (currentIsFocused) {\n            // No need to focus, only need to change the selection range\n            this.setIgnoreSelectionChangeTime('setSelectionRange');\n            textArea.setSelectionRange(selectionStart, selectionEnd);\n            if (browser.isFirefox && activeWindow.parent !== activeWindow) {\n                textArea.focus();\n            }\n            return;\n        }\n        // If the focus is outside the textarea, browsers will try really hard to reveal the textarea.\n        // Here, we try to undo the browser's desperate reveal.\n        try {\n            const scrollState = dom.saveParentsScrollTop(textArea);\n            this.setIgnoreSelectionChangeTime('setSelectionRange');\n            textArea.focus();\n            textArea.setSelectionRange(selectionStart, selectionEnd);\n            dom.restoreParentsScrollTop(textArea, scrollState);\n        }\n        catch (e) {\n            // Sometimes IE throws when setting selection (e.g. textarea is off-DOM)\n        }\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { Range } from '../../common/core/range.js';\nexport const _debugComposition = false;\nexport class TextAreaState {\n    constructor(value, \n    /** the offset where selection starts inside `value` */\n    selectionStart, \n    /** the offset where selection ends inside `value` */\n    selectionEnd, \n    /** the editor range in the view coordinate system that matches the selection inside `value` */\n    selection, \n    /** the visible line count (wrapped, not necessarily matching \\n characters) for the text in `value` before `selectionStart` */\n    newlineCountBeforeSelection) {\n        this.value = value;\n        this.selectionStart = selectionStart;\n        this.selectionEnd = selectionEnd;\n        this.selection = selection;\n        this.newlineCountBeforeSelection = newlineCountBeforeSelection;\n    }\n    toString() {\n        return `[ <${this.value}>, selectionStart: ${this.selectionStart}, selectionEnd: ${this.selectionEnd}]`;\n    }\n    static readFromTextArea(textArea, previousState) {\n        const value = textArea.getValue();\n        const selectionStart = textArea.getSelectionStart();\n        const selectionEnd = textArea.getSelectionEnd();\n        let newlineCountBeforeSelection = undefined;\n        if (previousState) {\n            const valueBeforeSelectionStart = value.substring(0, selectionStart);\n            const previousValueBeforeSelectionStart = previousState.value.substring(0, previousState.selectionStart);\n            if (valueBeforeSelectionStart === previousValueBeforeSelectionStart) {\n                newlineCountBeforeSelection = previousState.newlineCountBeforeSelection;\n            }\n        }\n        return new TextAreaState(value, selectionStart, selectionEnd, null, newlineCountBeforeSelection);\n    }\n    collapseSelection() {\n        if (this.selectionStart === this.value.length) {\n            return this;\n        }\n        return new TextAreaState(this.value, this.value.length, this.value.length, null, undefined);\n    }\n    writeToTextArea(reason, textArea, select) {\n        if (_debugComposition) {\n            console.log(`writeToTextArea ${reason}: ${this.toString()}`);\n        }\n        textArea.setValue(reason, this.value);\n        if (select) {\n            textArea.setSelectionRange(reason, this.selectionStart, this.selectionEnd);\n        }\n    }\n    deduceEditorPosition(offset) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        if (offset <= this.selectionStart) {\n            const str = this.value.substring(offset, this.selectionStart);\n            return this._finishDeduceEditorPosition((_b = (_a = this.selection) === null || _a === void 0 ? void 0 : _a.getStartPosition()) !== null && _b !== void 0 ? _b : null, str, -1);\n        }\n        if (offset >= this.selectionEnd) {\n            const str = this.value.substring(this.selectionEnd, offset);\n            return this._finishDeduceEditorPosition((_d = (_c = this.selection) === null || _c === void 0 ? void 0 : _c.getEndPosition()) !== null && _d !== void 0 ? _d : null, str, 1);\n        }\n        const str1 = this.value.substring(this.selectionStart, offset);\n        if (str1.indexOf(String.fromCharCode(8230)) === -1) {\n            return this._finishDeduceEditorPosition((_f = (_e = this.selection) === null || _e === void 0 ? void 0 : _e.getStartPosition()) !== null && _f !== void 0 ? _f : null, str1, 1);\n        }\n        const str2 = this.value.substring(offset, this.selectionEnd);\n        return this._finishDeduceEditorPosition((_h = (_g = this.selection) === null || _g === void 0 ? void 0 : _g.getEndPosition()) !== null && _h !== void 0 ? _h : null, str2, -1);\n    }\n    _finishDeduceEditorPosition(anchor, deltaText, signum) {\n        let lineFeedCnt = 0;\n        let lastLineFeedIndex = -1;\n        while ((lastLineFeedIndex = deltaText.indexOf('\\n', lastLineFeedIndex + 1)) !== -1) {\n            lineFeedCnt++;\n        }\n        return [anchor, signum * deltaText.length, lineFeedCnt];\n    }\n    static deduceInput(previousState, currentState, couldBeEmojiInput) {\n        if (!previousState) {\n            // This is the EMPTY state\n            return {\n                text: '',\n                replacePrevCharCnt: 0,\n                replaceNextCharCnt: 0,\n                positionDelta: 0\n            };\n        }\n        if (_debugComposition) {\n            console.log('------------------------deduceInput');\n            console.log(`PREVIOUS STATE: ${previousState.toString()}`);\n            console.log(`CURRENT STATE: ${currentState.toString()}`);\n        }\n        const prefixLength = Math.min(strings.commonPrefixLength(previousState.value, currentState.value), previousState.selectionStart, currentState.selectionStart);\n        const suffixLength = Math.min(strings.commonSuffixLength(previousState.value, currentState.value), previousState.value.length - previousState.selectionEnd, currentState.value.length - currentState.selectionEnd);\n        const previousValue = previousState.value.substring(prefixLength, previousState.value.length - suffixLength);\n        const currentValue = currentState.value.substring(prefixLength, currentState.value.length - suffixLength);\n        const previousSelectionStart = previousState.selectionStart - prefixLength;\n        const previousSelectionEnd = previousState.selectionEnd - prefixLength;\n        const currentSelectionStart = currentState.selectionStart - prefixLength;\n        const currentSelectionEnd = currentState.selectionEnd - prefixLength;\n        if (_debugComposition) {\n            console.log(`AFTER DIFFING PREVIOUS STATE: <${previousValue}>, selectionStart: ${previousSelectionStart}, selectionEnd: ${previousSelectionEnd}`);\n            console.log(`AFTER DIFFING CURRENT STATE: <${currentValue}>, selectionStart: ${currentSelectionStart}, selectionEnd: ${currentSelectionEnd}`);\n        }\n        if (currentSelectionStart === currentSelectionEnd) {\n            // no current selection\n            const replacePreviousCharacters = (previousState.selectionStart - prefixLength);\n            if (_debugComposition) {\n                console.log(`REMOVE PREVIOUS: ${replacePreviousCharacters} chars`);\n            }\n            return {\n                text: currentValue,\n                replacePrevCharCnt: replacePreviousCharacters,\n                replaceNextCharCnt: 0,\n                positionDelta: 0\n            };\n        }\n        // there is a current selection => composition case\n        const replacePreviousCharacters = previousSelectionEnd - previousSelectionStart;\n        return {\n            text: currentValue,\n            replacePrevCharCnt: replacePreviousCharacters,\n            replaceNextCharCnt: 0,\n            positionDelta: 0\n        };\n    }\n    static deduceAndroidCompositionInput(previousState, currentState) {\n        if (!previousState) {\n            // This is the EMPTY state\n            return {\n                text: '',\n                replacePrevCharCnt: 0,\n                replaceNextCharCnt: 0,\n                positionDelta: 0\n            };\n        }\n        if (_debugComposition) {\n            console.log('------------------------deduceAndroidCompositionInput');\n            console.log(`PREVIOUS STATE: ${previousState.toString()}`);\n            console.log(`CURRENT STATE: ${currentState.toString()}`);\n        }\n        if (previousState.value === currentState.value) {\n            return {\n                text: '',\n                replacePrevCharCnt: 0,\n                replaceNextCharCnt: 0,\n                positionDelta: currentState.selectionEnd - previousState.selectionEnd\n            };\n        }\n        const prefixLength = Math.min(strings.commonPrefixLength(previousState.value, currentState.value), previousState.selectionEnd);\n        const suffixLength = Math.min(strings.commonSuffixLength(previousState.value, currentState.value), previousState.value.length - previousState.selectionEnd);\n        const previousValue = previousState.value.substring(prefixLength, previousState.value.length - suffixLength);\n        const currentValue = currentState.value.substring(prefixLength, currentState.value.length - suffixLength);\n        const previousSelectionStart = previousState.selectionStart - prefixLength;\n        const previousSelectionEnd = previousState.selectionEnd - prefixLength;\n        const currentSelectionStart = currentState.selectionStart - prefixLength;\n        const currentSelectionEnd = currentState.selectionEnd - prefixLength;\n        if (_debugComposition) {\n            console.log(`AFTER DIFFING PREVIOUS STATE: <${previousValue}>, selectionStart: ${previousSelectionStart}, selectionEnd: ${previousSelectionEnd}`);\n            console.log(`AFTER DIFFING CURRENT STATE: <${currentValue}>, selectionStart: ${currentSelectionStart}, selectionEnd: ${currentSelectionEnd}`);\n        }\n        return {\n            text: currentValue,\n            replacePrevCharCnt: previousSelectionEnd,\n            replaceNextCharCnt: previousValue.length - previousSelectionEnd,\n            positionDelta: currentSelectionEnd - currentValue.length\n        };\n    }\n}\nTextAreaState.EMPTY = new TextAreaState('', 0, 0, null, undefined);\nexport class PagedScreenReaderStrategy {\n    static _getPageOfLine(lineNumber, linesPerPage) {\n        return Math.floor((lineNumber - 1) / linesPerPage);\n    }\n    static _getRangeForPage(page, linesPerPage) {\n        const offset = page * linesPerPage;\n        const startLineNumber = offset + 1;\n        const endLineNumber = offset + linesPerPage;\n        return new Range(startLineNumber, 1, endLineNumber + 1, 1);\n    }\n    static fromEditorSelection(model, selection, linesPerPage, trimLongText) {\n        // Chromium handles very poorly text even of a few thousand chars\n        // Cut text to avoid stalling the entire UI\n        const LIMIT_CHARS = 500;\n        const selectionStartPage = PagedScreenReaderStrategy._getPageOfLine(selection.startLineNumber, linesPerPage);\n        const selectionStartPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionStartPage, linesPerPage);\n        const selectionEndPage = PagedScreenReaderStrategy._getPageOfLine(selection.endLineNumber, linesPerPage);\n        const selectionEndPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionEndPage, linesPerPage);\n        let pretextRange = selectionStartPageRange.intersectRanges(new Range(1, 1, selection.startLineNumber, selection.startColumn));\n        if (trimLongText && model.getValueLengthInRange(pretextRange, 1 /* EndOfLinePreference.LF */) > LIMIT_CHARS) {\n            const pretextStart = model.modifyPosition(pretextRange.getEndPosition(), -LIMIT_CHARS);\n            pretextRange = Range.fromPositions(pretextStart, pretextRange.getEndPosition());\n        }\n        const pretext = model.getValueInRange(pretextRange, 1 /* EndOfLinePreference.LF */);\n        const lastLine = model.getLineCount();\n        const lastLineMaxColumn = model.getLineMaxColumn(lastLine);\n        let posttextRange = selectionEndPageRange.intersectRanges(new Range(selection.endLineNumber, selection.endColumn, lastLine, lastLineMaxColumn));\n        if (trimLongText && model.getValueLengthInRange(posttextRange, 1 /* EndOfLinePreference.LF */) > LIMIT_CHARS) {\n            const posttextEnd = model.modifyPosition(posttextRange.getStartPosition(), LIMIT_CHARS);\n            posttextRange = Range.fromPositions(posttextRange.getStartPosition(), posttextEnd);\n        }\n        const posttext = model.getValueInRange(posttextRange, 1 /* EndOfLinePreference.LF */);\n        let text;\n        if (selectionStartPage === selectionEndPage || selectionStartPage + 1 === selectionEndPage) {\n            // take full selection\n            text = model.getValueInRange(selection, 1 /* EndOfLinePreference.LF */);\n        }\n        else {\n            const selectionRange1 = selectionStartPageRange.intersectRanges(selection);\n            const selectionRange2 = selectionEndPageRange.intersectRanges(selection);\n            text = (model.getValueInRange(selectionRange1, 1 /* EndOfLinePreference.LF */)\n                + String.fromCharCode(8230)\n                + model.getValueInRange(selectionRange2, 1 /* EndOfLinePreference.LF */));\n        }\n        if (trimLongText && text.length > 2 * LIMIT_CHARS) {\n            text = text.substring(0, LIMIT_CHARS) + String.fromCharCode(8230) + text.substring(text.length - LIMIT_CHARS, text.length);\n        }\n        return new TextAreaState(pretext + text + posttext, pretext.length, pretext.length + text.length, selection, pretextRange.endLineNumber - pretextRange.startLineNumber);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport './textAreaHandler.css';\nimport * as nls from '../../../nls.js';\nimport * as browser from '../../../base/browser/browser.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { CopyOptions, TextAreaInput, TextAreaWrapper } from './textAreaInput.js';\nimport { PagedScreenReaderStrategy, TextAreaState, _debugComposition } from './textAreaState.js';\nimport { PartFingerprints, ViewPart } from '../view/viewPart.js';\nimport { LineNumbersOverlay } from '../viewParts/lineNumbers/lineNumbers.js';\nimport { Margin } from '../viewParts/margin/margin.js';\nimport { EditorOptions } from '../../common/config/editorOptions.js';\nimport { getMapForWordSeparators } from '../../common/core/wordCharacterClassifier.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../base/browser/ui/mouseCursor/mouseCursor.js';\nimport { TokenizationRegistry } from '../../common/languages.js';\nimport { Color } from '../../../base/common/color.js';\nimport { IME } from '../../../base/common/ime.js';\nimport { IKeybindingService } from '../../../platform/keybinding/common/keybinding.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nclass VisibleTextAreaData {\n    constructor(_context, modelLineNumber, distanceToModelLineStart, widthOfHiddenLineTextBefore, distanceToModelLineEnd) {\n        this._context = _context;\n        this.modelLineNumber = modelLineNumber;\n        this.distanceToModelLineStart = distanceToModelLineStart;\n        this.widthOfHiddenLineTextBefore = widthOfHiddenLineTextBefore;\n        this.distanceToModelLineEnd = distanceToModelLineEnd;\n        this._visibleTextAreaBrand = undefined;\n        this.startPosition = null;\n        this.endPosition = null;\n        this.visibleTextareaStart = null;\n        this.visibleTextareaEnd = null;\n        /**\n         * When doing composition, the currently composed text might be split up into\n         * multiple tokens, then merged again into a single token, etc. Here we attempt\n         * to keep the presentation of the <textarea> stable by using the previous used\n         * style if multiple tokens come into play. This avoids flickering.\n         */\n        this._previousPresentation = null;\n    }\n    prepareRender(visibleRangeProvider) {\n        const startModelPosition = new Position(this.modelLineNumber, this.distanceToModelLineStart + 1);\n        const endModelPosition = new Position(this.modelLineNumber, this._context.viewModel.model.getLineMaxColumn(this.modelLineNumber) - this.distanceToModelLineEnd);\n        this.startPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(startModelPosition);\n        this.endPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(endModelPosition);\n        if (this.startPosition.lineNumber === this.endPosition.lineNumber) {\n            this.visibleTextareaStart = visibleRangeProvider.visibleRangeForPosition(this.startPosition);\n            this.visibleTextareaEnd = visibleRangeProvider.visibleRangeForPosition(this.endPosition);\n        }\n        else {\n            // TODO: what if the view positions are not on the same line?\n            this.visibleTextareaStart = null;\n            this.visibleTextareaEnd = null;\n        }\n    }\n    definePresentation(tokenPresentation) {\n        if (!this._previousPresentation) {\n            // To avoid flickering, once set, always reuse a presentation throughout the entire IME session\n            if (tokenPresentation) {\n                this._previousPresentation = tokenPresentation;\n            }\n            else {\n                this._previousPresentation = {\n                    foreground: 1 /* ColorId.DefaultForeground */,\n                    italic: false,\n                    bold: false,\n                    underline: false,\n                    strikethrough: false,\n                };\n            }\n        }\n        return this._previousPresentation;\n    }\n}\nconst canUseZeroSizeTextarea = (browser.isFirefox);\nlet TextAreaHandler = class TextAreaHandler extends ViewPart {\n    constructor(context, viewController, visibleRangeProvider, _keybindingService, _instantiationService) {\n        super(context);\n        this._keybindingService = _keybindingService;\n        this._instantiationService = _instantiationService;\n        this._primaryCursorPosition = new Position(1, 1);\n        this._primaryCursorVisibleRange = null;\n        this._viewController = viewController;\n        this._visibleRangeProvider = visibleRangeProvider;\n        this._scrollLeft = 0;\n        this._scrollTop = 0;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this._setAccessibilityOptions(options);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentHeight = layoutInfo.height;\n        this._fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._emptySelectionClipboard = options.get(37 /* EditorOption.emptySelectionClipboard */);\n        this._copyWithSyntaxHighlighting = options.get(25 /* EditorOption.copyWithSyntaxHighlighting */);\n        this._visibleTextArea = null;\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._modelSelections = [new Selection(1, 1, 1, 1)];\n        this._lastRenderPosition = null;\n        // Text Area (The focus will always be in the textarea when the cursor is blinking)\n        this.textArea = createFastDomNode(document.createElement('textarea'));\n        PartFingerprints.write(this.textArea, 7 /* PartFingerprint.TextArea */);\n        this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        this.textArea.setAttribute('wrap', this._textAreaWrapping && !this._visibleTextArea ? 'on' : 'off');\n        const { tabSize } = this._context.viewModel.model.getOptions();\n        this.textArea.domNode.style.tabSize = `${tabSize * this._fontInfo.spaceWidth}px`;\n        this.textArea.setAttribute('autocorrect', 'off');\n        this.textArea.setAttribute('autocapitalize', 'off');\n        this.textArea.setAttribute('autocomplete', 'off');\n        this.textArea.setAttribute('spellcheck', 'false');\n        this.textArea.setAttribute('aria-label', this._getAriaLabel(options));\n        this.textArea.setAttribute('aria-required', options.get(5 /* EditorOption.ariaRequired */) ? 'true' : 'false');\n        this.textArea.setAttribute('tabindex', String(options.get(124 /* EditorOption.tabIndex */)));\n        this.textArea.setAttribute('role', 'textbox');\n        this.textArea.setAttribute('aria-roledescription', nls.localize('editor', \"editor\"));\n        this.textArea.setAttribute('aria-multiline', 'true');\n        this.textArea.setAttribute('aria-autocomplete', options.get(91 /* EditorOption.readOnly */) ? 'none' : 'both');\n        this._ensureReadOnlyAttribute();\n        this.textAreaCover = createFastDomNode(document.createElement('div'));\n        this.textAreaCover.setPosition('absolute');\n        const simpleModel = {\n            getLineCount: () => {\n                return this._context.viewModel.getLineCount();\n            },\n            getLineMaxColumn: (lineNumber) => {\n                return this._context.viewModel.getLineMaxColumn(lineNumber);\n            },\n            getValueInRange: (range, eol) => {\n                return this._context.viewModel.getValueInRange(range, eol);\n            },\n            getValueLengthInRange: (range, eol) => {\n                return this._context.viewModel.getValueLengthInRange(range, eol);\n            },\n            modifyPosition: (position, offset) => {\n                return this._context.viewModel.modifyPosition(position, offset);\n            }\n        };\n        const textAreaInputHost = {\n            getDataToCopy: () => {\n                const rawTextToCopy = this._context.viewModel.getPlainTextToCopy(this._modelSelections, this._emptySelectionClipboard, platform.isWindows);\n                const newLineCharacter = this._context.viewModel.model.getEOL();\n                const isFromEmptySelection = (this._emptySelectionClipboard && this._modelSelections.length === 1 && this._modelSelections[0].isEmpty());\n                const multicursorText = (Array.isArray(rawTextToCopy) ? rawTextToCopy : null);\n                const text = (Array.isArray(rawTextToCopy) ? rawTextToCopy.join(newLineCharacter) : rawTextToCopy);\n                let html = undefined;\n                let mode = null;\n                if (CopyOptions.forceCopyWithSyntaxHighlighting || (this._copyWithSyntaxHighlighting && text.length < 65536)) {\n                    const richText = this._context.viewModel.getRichTextToCopy(this._modelSelections, this._emptySelectionClipboard);\n                    if (richText) {\n                        html = richText.html;\n                        mode = richText.mode;\n                    }\n                }\n                return {\n                    isFromEmptySelection,\n                    multicursorText,\n                    text,\n                    html,\n                    mode\n                };\n            },\n            getScreenReaderContent: () => {\n                if (this._accessibilitySupport === 1 /* AccessibilitySupport.Disabled */) {\n                    // We know for a fact that a screen reader is not attached\n                    // On OSX, we write the character before the cursor to allow for \"long-press\" composition\n                    // Also on OSX, we write the word before the cursor to allow for the Accessibility Keyboard to give good hints\n                    const selection = this._selections[0];\n                    if (platform.isMacintosh && selection.isEmpty()) {\n                        const position = selection.getStartPosition();\n                        let textBefore = this._getWordBeforePosition(position);\n                        if (textBefore.length === 0) {\n                            textBefore = this._getCharacterBeforePosition(position);\n                        }\n                        if (textBefore.length > 0) {\n                            return new TextAreaState(textBefore, textBefore.length, textBefore.length, Range.fromPositions(position), 0);\n                        }\n                    }\n                    // on macOS, write current selection into textarea will allow system text services pick selected text,\n                    // but we still want to limit the amount of text given Chromium handles very poorly text even of a few\n                    // thousand chars\n                    // (https://github.com/microsoft/vscode/issues/27799)\n                    const LIMIT_CHARS = 500;\n                    if (platform.isMacintosh && !selection.isEmpty() && simpleModel.getValueLengthInRange(selection, 0 /* EndOfLinePreference.TextDefined */) < LIMIT_CHARS) {\n                        const text = simpleModel.getValueInRange(selection, 0 /* EndOfLinePreference.TextDefined */);\n                        return new TextAreaState(text, 0, text.length, selection, 0);\n                    }\n                    // on Safari, document.execCommand('cut') and document.execCommand('copy') will just not work\n                    // if the textarea has no content selected. So if there is an editor selection, ensure something\n                    // is selected in the textarea.\n                    if (browser.isSafari && !selection.isEmpty()) {\n                        const placeholderText = 'vscode-placeholder';\n                        return new TextAreaState(placeholderText, 0, placeholderText.length, null, undefined);\n                    }\n                    return TextAreaState.EMPTY;\n                }\n                if (browser.isAndroid) {\n                    // when tapping in the editor on a word, Android enters composition mode.\n                    // in the `compositionstart` event we cannot clear the textarea, because\n                    // it then forgets to ever send a `compositionend`.\n                    // we therefore only write the current word in the textarea\n                    const selection = this._selections[0];\n                    if (selection.isEmpty()) {\n                        const position = selection.getStartPosition();\n                        const [wordAtPosition, positionOffsetInWord] = this._getAndroidWordAtPosition(position);\n                        if (wordAtPosition.length > 0) {\n                            return new TextAreaState(wordAtPosition, positionOffsetInWord, positionOffsetInWord, Range.fromPositions(position), 0);\n                        }\n                    }\n                    return TextAreaState.EMPTY;\n                }\n                return PagedScreenReaderStrategy.fromEditorSelection(simpleModel, this._selections[0], this._accessibilityPageSize, this._accessibilitySupport === 0 /* AccessibilitySupport.Unknown */);\n            },\n            deduceModelPosition: (viewAnchorPosition, deltaOffset, lineFeedCnt) => {\n                return this._context.viewModel.deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt);\n            }\n        };\n        const textAreaWrapper = this._register(new TextAreaWrapper(this.textArea.domNode));\n        this._textAreaInput = this._register(this._instantiationService.createInstance(TextAreaInput, textAreaInputHost, textAreaWrapper, platform.OS, {\n            isAndroid: browser.isAndroid,\n            isChrome: browser.isChrome,\n            isFirefox: browser.isFirefox,\n            isSafari: browser.isSafari,\n        }));\n        this._register(this._textAreaInput.onKeyDown((e) => {\n            this._viewController.emitKeyDown(e);\n        }));\n        this._register(this._textAreaInput.onKeyUp((e) => {\n            this._viewController.emitKeyUp(e);\n        }));\n        this._register(this._textAreaInput.onPaste((e) => {\n            let pasteOnNewLine = false;\n            let multicursorText = null;\n            let mode = null;\n            if (e.metadata) {\n                pasteOnNewLine = (this._emptySelectionClipboard && !!e.metadata.isFromEmptySelection);\n                multicursorText = (typeof e.metadata.multicursorText !== 'undefined' ? e.metadata.multicursorText : null);\n                mode = e.metadata.mode;\n            }\n            this._viewController.paste(e.text, pasteOnNewLine, multicursorText, mode);\n        }));\n        this._register(this._textAreaInput.onCut(() => {\n            this._viewController.cut();\n        }));\n        this._register(this._textAreaInput.onType((e) => {\n            if (e.replacePrevCharCnt || e.replaceNextCharCnt || e.positionDelta) {\n                // must be handled through the new command\n                if (_debugComposition) {\n                    console.log(` => compositionType: <<${e.text}>>, ${e.replacePrevCharCnt}, ${e.replaceNextCharCnt}, ${e.positionDelta}`);\n                }\n                this._viewController.compositionType(e.text, e.replacePrevCharCnt, e.replaceNextCharCnt, e.positionDelta);\n            }\n            else {\n                if (_debugComposition) {\n                    console.log(` => type: <<${e.text}>>`);\n                }\n                this._viewController.type(e.text);\n            }\n        }));\n        this._register(this._textAreaInput.onSelectionChangeRequest((modelSelection) => {\n            this._viewController.setSelection(modelSelection);\n        }));\n        this._register(this._textAreaInput.onCompositionStart((e) => {\n            // The textarea might contain some content when composition starts.\n            //\n            // When we make the textarea visible, it always has a height of 1 line,\n            // so we don't need to worry too much about content on lines above or below\n            // the selection.\n            //\n            // However, the text on the current line needs to be made visible because\n            // some IME methods allow to move to other glyphs on the current line\n            // (by pressing arrow keys).\n            //\n            // (1) The textarea might contain only some parts of the current line,\n            // like the word before the selection. Also, the content inside the textarea\n            // can grow or shrink as composition occurs. We therefore anchor the textarea\n            // in terms of distance to a certain line start and line end.\n            //\n            // (2) Also, we should not make \\t characters visible, because their rendering\n            // inside the <textarea> will not align nicely with our rendering. We therefore\n            // will hide (if necessary) some of the leading text on the current line.\n            const ta = this.textArea.domNode;\n            const modelSelection = this._modelSelections[0];\n            const { distanceToModelLineStart, widthOfHiddenTextBefore } = (() => {\n                // Find the text that is on the current line before the selection\n                const textBeforeSelection = ta.value.substring(0, Math.min(ta.selectionStart, ta.selectionEnd));\n                const lineFeedOffset1 = textBeforeSelection.lastIndexOf('\\n');\n                const lineTextBeforeSelection = textBeforeSelection.substring(lineFeedOffset1 + 1);\n                // We now search to see if we should hide some part of it (if it contains \\t)\n                const tabOffset1 = lineTextBeforeSelection.lastIndexOf('\\t');\n                const desiredVisibleBeforeCharCount = lineTextBeforeSelection.length - tabOffset1 - 1;\n                const startModelPosition = modelSelection.getStartPosition();\n                const visibleBeforeCharCount = Math.min(startModelPosition.column - 1, desiredVisibleBeforeCharCount);\n                const distanceToModelLineStart = startModelPosition.column - 1 - visibleBeforeCharCount;\n                const hiddenLineTextBefore = lineTextBeforeSelection.substring(0, lineTextBeforeSelection.length - visibleBeforeCharCount);\n                const { tabSize } = this._context.viewModel.model.getOptions();\n                const widthOfHiddenTextBefore = measureText(this.textArea.domNode.ownerDocument, hiddenLineTextBefore, this._fontInfo, tabSize);\n                return { distanceToModelLineStart, widthOfHiddenTextBefore };\n            })();\n            const { distanceToModelLineEnd } = (() => {\n                // Find the text that is on the current line after the selection\n                const textAfterSelection = ta.value.substring(Math.max(ta.selectionStart, ta.selectionEnd));\n                const lineFeedOffset2 = textAfterSelection.indexOf('\\n');\n                const lineTextAfterSelection = lineFeedOffset2 === -1 ? textAfterSelection : textAfterSelection.substring(0, lineFeedOffset2);\n                const tabOffset2 = lineTextAfterSelection.indexOf('\\t');\n                const desiredVisibleAfterCharCount = (tabOffset2 === -1 ? lineTextAfterSelection.length : lineTextAfterSelection.length - tabOffset2 - 1);\n                const endModelPosition = modelSelection.getEndPosition();\n                const visibleAfterCharCount = Math.min(this._context.viewModel.model.getLineMaxColumn(endModelPosition.lineNumber) - endModelPosition.column, desiredVisibleAfterCharCount);\n                const distanceToModelLineEnd = this._context.viewModel.model.getLineMaxColumn(endModelPosition.lineNumber) - endModelPosition.column - visibleAfterCharCount;\n                return { distanceToModelLineEnd };\n            })();\n            // Scroll to reveal the location in the editor where composition occurs\n            this._context.viewModel.revealRange('keyboard', true, Range.fromPositions(this._selections[0].getStartPosition()), 0 /* viewEvents.VerticalRevealType.Simple */, 1 /* ScrollType.Immediate */);\n            this._visibleTextArea = new VisibleTextAreaData(this._context, modelSelection.startLineNumber, distanceToModelLineStart, widthOfHiddenTextBefore, distanceToModelLineEnd);\n            // We turn off wrapping if the <textarea> becomes visible for composition\n            this.textArea.setAttribute('wrap', this._textAreaWrapping && !this._visibleTextArea ? 'on' : 'off');\n            this._visibleTextArea.prepareRender(this._visibleRangeProvider);\n            this._render();\n            // Show the textarea\n            this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME} ime-input`);\n            this._viewController.compositionStart();\n            this._context.viewModel.onCompositionStart();\n        }));\n        this._register(this._textAreaInput.onCompositionUpdate((e) => {\n            if (!this._visibleTextArea) {\n                return;\n            }\n            this._visibleTextArea.prepareRender(this._visibleRangeProvider);\n            this._render();\n        }));\n        this._register(this._textAreaInput.onCompositionEnd(() => {\n            this._visibleTextArea = null;\n            // We turn on wrapping as necessary if the <textarea> hides after composition\n            this.textArea.setAttribute('wrap', this._textAreaWrapping && !this._visibleTextArea ? 'on' : 'off');\n            this._render();\n            this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n            this._viewController.compositionEnd();\n            this._context.viewModel.onCompositionEnd();\n        }));\n        this._register(this._textAreaInput.onFocus(() => {\n            this._context.viewModel.setHasFocus(true);\n        }));\n        this._register(this._textAreaInput.onBlur(() => {\n            this._context.viewModel.setHasFocus(false);\n        }));\n        this._register(IME.onDidChange(() => {\n            this._ensureReadOnlyAttribute();\n        }));\n    }\n    writeScreenReaderContent(reason) {\n        this._textAreaInput.writeNativeTextAreaContent(reason);\n    }\n    dispose() {\n        super.dispose();\n    }\n    _getAndroidWordAtPosition(position) {\n        const ANDROID_WORD_SEPARATORS = '`~!@#$%^&*()-=+[{]}\\\\|;:\",.<>/?';\n        const lineContent = this._context.viewModel.getLineContent(position.lineNumber);\n        const wordSeparators = getMapForWordSeparators(ANDROID_WORD_SEPARATORS);\n        let goingLeft = true;\n        let startColumn = position.column;\n        let goingRight = true;\n        let endColumn = position.column;\n        let distance = 0;\n        while (distance < 50 && (goingLeft || goingRight)) {\n            if (goingLeft && startColumn <= 1) {\n                goingLeft = false;\n            }\n            if (goingLeft) {\n                const charCode = lineContent.charCodeAt(startColumn - 2);\n                const charClass = wordSeparators.get(charCode);\n                if (charClass !== 0 /* WordCharacterClass.Regular */) {\n                    goingLeft = false;\n                }\n                else {\n                    startColumn--;\n                }\n            }\n            if (goingRight && endColumn > lineContent.length) {\n                goingRight = false;\n            }\n            if (goingRight) {\n                const charCode = lineContent.charCodeAt(endColumn - 1);\n                const charClass = wordSeparators.get(charCode);\n                if (charClass !== 0 /* WordCharacterClass.Regular */) {\n                    goingRight = false;\n                }\n                else {\n                    endColumn++;\n                }\n            }\n            distance++;\n        }\n        return [lineContent.substring(startColumn - 1, endColumn - 1), position.column - startColumn];\n    }\n    _getWordBeforePosition(position) {\n        const lineContent = this._context.viewModel.getLineContent(position.lineNumber);\n        const wordSeparators = getMapForWordSeparators(this._context.configuration.options.get(130 /* EditorOption.wordSeparators */));\n        let column = position.column;\n        let distance = 0;\n        while (column > 1) {\n            const charCode = lineContent.charCodeAt(column - 2);\n            const charClass = wordSeparators.get(charCode);\n            if (charClass !== 0 /* WordCharacterClass.Regular */ || distance > 50) {\n                return lineContent.substring(column - 1, position.column - 1);\n            }\n            distance++;\n            column--;\n        }\n        return lineContent.substring(0, position.column - 1);\n    }\n    _getCharacterBeforePosition(position) {\n        if (position.column > 1) {\n            const lineContent = this._context.viewModel.getLineContent(position.lineNumber);\n            const charBefore = lineContent.charAt(position.column - 2);\n            if (!strings.isHighSurrogate(charBefore.charCodeAt(0))) {\n                return charBefore;\n            }\n        }\n        return '';\n    }\n    _getAriaLabel(options) {\n        var _a, _b, _c;\n        const accessibilitySupport = options.get(2 /* EditorOption.accessibilitySupport */);\n        if (accessibilitySupport === 1 /* AccessibilitySupport.Disabled */) {\n            const toggleKeybindingLabel = (_a = this._keybindingService.lookupKeybinding('editor.action.toggleScreenReaderAccessibilityMode')) === null || _a === void 0 ? void 0 : _a.getAriaLabel();\n            const runCommandKeybindingLabel = (_b = this._keybindingService.lookupKeybinding('workbench.action.showCommands')) === null || _b === void 0 ? void 0 : _b.getAriaLabel();\n            const keybindingEditorKeybindingLabel = (_c = this._keybindingService.lookupKeybinding('workbench.action.openGlobalKeybindings')) === null || _c === void 0 ? void 0 : _c.getAriaLabel();\n            const editorNotAccessibleMessage = nls.localize('accessibilityModeOff', \"The editor is not accessible at this time.\");\n            if (toggleKeybindingLabel) {\n                return nls.localize('accessibilityOffAriaLabel', \"{0} To enable screen reader optimized mode, use {1}\", editorNotAccessibleMessage, toggleKeybindingLabel);\n            }\n            else if (runCommandKeybindingLabel) {\n                return nls.localize('accessibilityOffAriaLabelNoKb', \"{0} To enable screen reader optimized mode, open the quick pick with {1} and run the command Toggle Screen Reader Accessibility Mode, which is currently not triggerable via keyboard.\", editorNotAccessibleMessage, runCommandKeybindingLabel);\n            }\n            else if (keybindingEditorKeybindingLabel) {\n                return nls.localize('accessibilityOffAriaLabelNoKbs', \"{0} Please assign a keybinding for the command Toggle Screen Reader Accessibility Mode by accessing the keybindings editor with {1} and run it.\", editorNotAccessibleMessage, keybindingEditorKeybindingLabel);\n            }\n            else {\n                // SOS\n                return editorNotAccessibleMessage;\n            }\n        }\n        return options.get(4 /* EditorOption.ariaLabel */);\n    }\n    _setAccessibilityOptions(options) {\n        this._accessibilitySupport = options.get(2 /* EditorOption.accessibilitySupport */);\n        const accessibilityPageSize = options.get(3 /* EditorOption.accessibilityPageSize */);\n        if (this._accessibilitySupport === 2 /* AccessibilitySupport.Enabled */ && accessibilityPageSize === EditorOptions.accessibilityPageSize.defaultValue) {\n            // If a screen reader is attached and the default value is not set we should automatically increase the page size to 500 for a better experience\n            this._accessibilityPageSize = 500;\n        }\n        else {\n            this._accessibilityPageSize = accessibilityPageSize;\n        }\n        // When wrapping is enabled and a screen reader might be attached,\n        // we will size the textarea to match the width used for wrapping points computation (see `domLineBreaksComputer.ts`).\n        // This is because screen readers will read the text in the textarea and we'd like that the\n        // wrapping points in the textarea match the wrapping points in the editor.\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        const wrappingColumn = layoutInfo.wrappingColumn;\n        if (wrappingColumn !== -1 && this._accessibilitySupport !== 1 /* AccessibilitySupport.Disabled */) {\n            const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n            this._textAreaWrapping = true;\n            this._textAreaWidth = Math.round(wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\n        }\n        else {\n            this._textAreaWrapping = false;\n            this._textAreaWidth = (canUseZeroSizeTextarea ? 0 : 1);\n        }\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this._setAccessibilityOptions(options);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentHeight = layoutInfo.height;\n        this._fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._emptySelectionClipboard = options.get(37 /* EditorOption.emptySelectionClipboard */);\n        this._copyWithSyntaxHighlighting = options.get(25 /* EditorOption.copyWithSyntaxHighlighting */);\n        this.textArea.setAttribute('wrap', this._textAreaWrapping && !this._visibleTextArea ? 'on' : 'off');\n        const { tabSize } = this._context.viewModel.model.getOptions();\n        this.textArea.domNode.style.tabSize = `${tabSize * this._fontInfo.spaceWidth}px`;\n        this.textArea.setAttribute('aria-label', this._getAriaLabel(options));\n        this.textArea.setAttribute('aria-required', options.get(5 /* EditorOption.ariaRequired */) ? 'true' : 'false');\n        this.textArea.setAttribute('tabindex', String(options.get(124 /* EditorOption.tabIndex */)));\n        if (e.hasChanged(34 /* EditorOption.domReadOnly */) || e.hasChanged(91 /* EditorOption.readOnly */)) {\n            this._ensureReadOnlyAttribute();\n        }\n        if (e.hasChanged(2 /* EditorOption.accessibilitySupport */)) {\n            this._textAreaInput.writeNativeTextAreaContent('strategy changed');\n        }\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections.slice(0);\n        this._modelSelections = e.modelSelections.slice(0);\n        // We must update the <textarea> synchronously, otherwise long press IME on macos breaks.\n        // See https://github.com/microsoft/vscode/issues/165821\n        this._textAreaInput.writeNativeTextAreaContent('selection changed');\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        this._scrollLeft = e.scrollLeft;\n        this._scrollTop = e.scrollTop;\n        return true;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    // --- begin view API\n    isFocused() {\n        return this._textAreaInput.isFocused();\n    }\n    focusTextArea() {\n        this._textAreaInput.focusTextArea();\n    }\n    getLastRenderData() {\n        return this._lastRenderPosition;\n    }\n    setAriaOptions(options) {\n        if (options.activeDescendant) {\n            this.textArea.setAttribute('aria-haspopup', 'true');\n            this.textArea.setAttribute('aria-autocomplete', 'list');\n            this.textArea.setAttribute('aria-activedescendant', options.activeDescendant);\n        }\n        else {\n            this.textArea.setAttribute('aria-haspopup', 'false');\n            this.textArea.setAttribute('aria-autocomplete', 'both');\n            this.textArea.removeAttribute('aria-activedescendant');\n        }\n        if (options.role) {\n            this.textArea.setAttribute('role', options.role);\n        }\n    }\n    // --- end view API\n    _ensureReadOnlyAttribute() {\n        const options = this._context.configuration.options;\n        // When someone requests to disable IME, we set the \"readonly\" attribute on the <textarea>.\n        // This will prevent composition.\n        const useReadOnly = !IME.enabled || (options.get(34 /* EditorOption.domReadOnly */) && options.get(91 /* EditorOption.readOnly */));\n        if (useReadOnly) {\n            this.textArea.setAttribute('readonly', 'true');\n        }\n        else {\n            this.textArea.removeAttribute('readonly');\n        }\n    }\n    prepareRender(ctx) {\n        var _a;\n        this._primaryCursorPosition = new Position(this._selections[0].positionLineNumber, this._selections[0].positionColumn);\n        this._primaryCursorVisibleRange = ctx.visibleRangeForPosition(this._primaryCursorPosition);\n        (_a = this._visibleTextArea) === null || _a === void 0 ? void 0 : _a.prepareRender(ctx);\n    }\n    render(ctx) {\n        this._textAreaInput.writeNativeTextAreaContent('render');\n        this._render();\n    }\n    _render() {\n        var _a;\n        if (this._visibleTextArea) {\n            // The text area is visible for composition reasons\n            const visibleStart = this._visibleTextArea.visibleTextareaStart;\n            const visibleEnd = this._visibleTextArea.visibleTextareaEnd;\n            const startPosition = this._visibleTextArea.startPosition;\n            const endPosition = this._visibleTextArea.endPosition;\n            if (startPosition && endPosition && visibleStart && visibleEnd && visibleEnd.left >= this._scrollLeft && visibleStart.left <= this._scrollLeft + this._contentWidth) {\n                const top = (this._context.viewLayout.getVerticalOffsetForLineNumber(this._primaryCursorPosition.lineNumber) - this._scrollTop);\n                const lineCount = this._newlinecount(this.textArea.domNode.value.substr(0, this.textArea.domNode.selectionStart));\n                let scrollLeft = this._visibleTextArea.widthOfHiddenLineTextBefore;\n                let left = (this._contentLeft + visibleStart.left - this._scrollLeft);\n                // See https://github.com/microsoft/vscode/issues/141725#issuecomment-1050670841\n                // Here we are adding +1 to avoid flickering that might be caused by having a width that is too small.\n                // This could be caused by rounding errors that might only show up with certain font families.\n                // In other words, a pixel might be lost when doing something like\n                //      `Math.round(end) - Math.round(start)`\n                // vs\n                //      `Math.round(end - start)`\n                let width = visibleEnd.left - visibleStart.left + 1;\n                if (left < this._contentLeft) {\n                    // the textarea would be rendered on top of the margin,\n                    // so reduce its width. We use the same technique as\n                    // for hiding text before\n                    const delta = (this._contentLeft - left);\n                    left += delta;\n                    scrollLeft += delta;\n                    width -= delta;\n                }\n                if (width > this._contentWidth) {\n                    // the textarea would be wider than the content width,\n                    // so reduce its width.\n                    width = this._contentWidth;\n                }\n                // Try to render the textarea with the color/font style to match the text under it\n                const viewLineData = this._context.viewModel.getViewLineData(startPosition.lineNumber);\n                const startTokenIndex = viewLineData.tokens.findTokenIndexAtOffset(startPosition.column - 1);\n                const endTokenIndex = viewLineData.tokens.findTokenIndexAtOffset(endPosition.column - 1);\n                const textareaSpansSingleToken = (startTokenIndex === endTokenIndex);\n                const presentation = this._visibleTextArea.definePresentation((textareaSpansSingleToken ? viewLineData.tokens.getPresentation(startTokenIndex) : null));\n                this.textArea.domNode.scrollTop = lineCount * this._lineHeight;\n                this.textArea.domNode.scrollLeft = scrollLeft;\n                this._doRender({\n                    lastRenderPosition: null,\n                    top: top,\n                    left: left,\n                    width: width,\n                    height: this._lineHeight,\n                    useCover: false,\n                    color: (TokenizationRegistry.getColorMap() || [])[presentation.foreground],\n                    italic: presentation.italic,\n                    bold: presentation.bold,\n                    underline: presentation.underline,\n                    strikethrough: presentation.strikethrough\n                });\n            }\n            return;\n        }\n        if (!this._primaryCursorVisibleRange) {\n            // The primary cursor is outside the viewport => place textarea to the top left\n            this._renderAtTopLeft();\n            return;\n        }\n        const left = this._contentLeft + this._primaryCursorVisibleRange.left - this._scrollLeft;\n        if (left < this._contentLeft || left > this._contentLeft + this._contentWidth) {\n            // cursor is outside the viewport\n            this._renderAtTopLeft();\n            return;\n        }\n        const top = this._context.viewLayout.getVerticalOffsetForLineNumber(this._selections[0].positionLineNumber) - this._scrollTop;\n        if (top < 0 || top > this._contentHeight) {\n            // cursor is outside the viewport\n            this._renderAtTopLeft();\n            return;\n        }\n        // The primary cursor is in the viewport (at least vertically) => place textarea on the cursor\n        if (platform.isMacintosh || this._accessibilitySupport === 2 /* AccessibilitySupport.Enabled */) {\n            // For the popup emoji input, we will make the text area as high as the line height\n            // We will also make the fontSize and lineHeight the correct dimensions to help with the placement of these pickers\n            this._doRender({\n                lastRenderPosition: this._primaryCursorPosition,\n                top,\n                left: this._textAreaWrapping ? this._contentLeft : left,\n                width: this._textAreaWidth,\n                height: this._lineHeight,\n                useCover: false\n            });\n            // In case the textarea contains a word, we're going to try to align the textarea's cursor\n            // with our cursor by scrolling the textarea as much as possible\n            this.textArea.domNode.scrollLeft = this._primaryCursorVisibleRange.left;\n            const lineCount = (_a = this._textAreaInput.textAreaState.newlineCountBeforeSelection) !== null && _a !== void 0 ? _a : this._newlinecount(this.textArea.domNode.value.substr(0, this.textArea.domNode.selectionStart));\n            this.textArea.domNode.scrollTop = lineCount * this._lineHeight;\n            return;\n        }\n        this._doRender({\n            lastRenderPosition: this._primaryCursorPosition,\n            top: top,\n            left: this._textAreaWrapping ? this._contentLeft : left,\n            width: this._textAreaWidth,\n            height: (canUseZeroSizeTextarea ? 0 : 1),\n            useCover: false\n        });\n    }\n    _newlinecount(text) {\n        let result = 0;\n        let startIndex = -1;\n        do {\n            startIndex = text.indexOf('\\n', startIndex + 1);\n            if (startIndex === -1) {\n                break;\n            }\n            result++;\n        } while (true);\n        return result;\n    }\n    _renderAtTopLeft() {\n        // (in WebKit the textarea is 1px by 1px because it cannot handle input to a 0x0 textarea)\n        // specifically, when doing Korean IME, setting the textarea to 0x0 breaks IME badly.\n        this._doRender({\n            lastRenderPosition: null,\n            top: 0,\n            left: 0,\n            width: this._textAreaWidth,\n            height: (canUseZeroSizeTextarea ? 0 : 1),\n            useCover: true\n        });\n    }\n    _doRender(renderData) {\n        this._lastRenderPosition = renderData.lastRenderPosition;\n        const ta = this.textArea;\n        const tac = this.textAreaCover;\n        applyFontInfo(ta, this._fontInfo);\n        ta.setTop(renderData.top);\n        ta.setLeft(renderData.left);\n        ta.setWidth(renderData.width);\n        ta.setHeight(renderData.height);\n        ta.setColor(renderData.color ? Color.Format.CSS.formatHex(renderData.color) : '');\n        ta.setFontStyle(renderData.italic ? 'italic' : '');\n        if (renderData.bold) {\n            // fontWeight is also set by `applyFontInfo`, so only overwrite it if necessary\n            ta.setFontWeight('bold');\n        }\n        ta.setTextDecoration(`${renderData.underline ? ' underline' : ''}${renderData.strikethrough ? ' line-through' : ''}`);\n        tac.setTop(renderData.useCover ? renderData.top : 0);\n        tac.setLeft(renderData.useCover ? renderData.left : 0);\n        tac.setWidth(renderData.useCover ? renderData.width : 0);\n        tac.setHeight(renderData.useCover ? renderData.height : 0);\n        const options = this._context.configuration.options;\n        if (options.get(57 /* EditorOption.glyphMargin */)) {\n            tac.setClassName('monaco-editor-background textAreaCover ' + Margin.OUTER_CLASS_NAME);\n        }\n        else {\n            if (options.get(68 /* EditorOption.lineNumbers */).renderType !== 0 /* RenderLineNumbersType.Off */) {\n                tac.setClassName('monaco-editor-background textAreaCover ' + LineNumbersOverlay.CLASS_NAME);\n            }\n            else {\n                tac.setClassName('monaco-editor-background textAreaCover');\n            }\n        }\n    }\n};\nTextAreaHandler = __decorate([\n    __param(3, IKeybindingService),\n    __param(4, IInstantiationService)\n], TextAreaHandler);\nexport { TextAreaHandler };\nfunction measureText(targetDocument, text, fontInfo, tabSize) {\n    if (text.length === 0) {\n        return 0;\n    }\n    const container = targetDocument.createElement('div');\n    container.style.position = 'absolute';\n    container.style.top = '-50000px';\n    container.style.width = '50000px';\n    const regularDomNode = targetDocument.createElement('span');\n    applyFontInfo(regularDomNode, fontInfo);\n    regularDomNode.style.whiteSpace = 'pre'; // just like the textarea\n    regularDomNode.style.tabSize = `${tabSize * fontInfo.spaceWidth}px`; // just like the textarea\n    regularDomNode.append(text);\n    container.appendChild(regularDomNode);\n    targetDocument.body.appendChild(container);\n    const res = regularDomNode.offsetWidth;\n    targetDocument.body.removeChild(container);\n    return res;\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './lineNumbers.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { editorDimmedLineNumber, editorLineNumbers } from '../../../common/core/editorColorRegistry.js';\nexport class LineNumbersOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._readConfig();\n        this._lastCursorModelPosition = new Position(1, 1);\n        this._renderResult = null;\n        this._activeLineNumber = 1;\n        this._context.addEventHandler(this);\n    }\n    _readConfig() {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        const lineNumbers = options.get(68 /* EditorOption.lineNumbers */);\n        this._renderLineNumbers = lineNumbers.renderType;\n        this._renderCustomLineNumbers = lineNumbers.renderFn;\n        this._renderFinalNewline = options.get(95 /* EditorOption.renderFinalNewline */);\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this._lineNumbersLeft = layoutInfo.lineNumbersLeft;\n        this._lineNumbersWidth = layoutInfo.lineNumbersWidth;\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        this._readConfig();\n        return true;\n    }\n    onCursorStateChanged(e) {\n        const primaryViewPosition = e.selections[0].getPosition();\n        this._lastCursorModelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(primaryViewPosition);\n        let shouldRender = false;\n        if (this._activeLineNumber !== primaryViewPosition.lineNumber) {\n            this._activeLineNumber = primaryViewPosition.lineNumber;\n            shouldRender = true;\n        }\n        if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */ || this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n            shouldRender = true;\n        }\n        return shouldRender;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return e.affectsLineNumber;\n    }\n    // --- end event handlers\n    _getLineRenderLineNumber(viewLineNumber) {\n        const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(viewLineNumber, 1));\n        if (modelPosition.column !== 1) {\n            return '';\n        }\n        const modelLineNumber = modelPosition.lineNumber;\n        if (this._renderCustomLineNumbers) {\n            return this._renderCustomLineNumbers(modelLineNumber);\n        }\n        if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */) {\n            const diff = Math.abs(this._lastCursorModelPosition.lineNumber - modelLineNumber);\n            if (diff === 0) {\n                return '<span class=\"relative-current-line-number\">' + modelLineNumber + '</span>';\n            }\n            return String(diff);\n        }\n        if (this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n            if (this._lastCursorModelPosition.lineNumber === modelLineNumber) {\n                return String(modelLineNumber);\n            }\n            if (modelLineNumber % 10 === 0) {\n                return String(modelLineNumber);\n            }\n            return '';\n        }\n        return String(modelLineNumber);\n    }\n    prepareRender(ctx) {\n        if (this._renderLineNumbers === 0 /* RenderLineNumbersType.Off */) {\n            this._renderResult = null;\n            return;\n        }\n        const lineHeightClassName = (platform.isLinux ? (this._lineHeight % 2 === 0 ? ' lh-even' : ' lh-odd') : '');\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const lineNoDecorations = this._context.viewModel.getDecorationsInViewport(ctx.visibleRange).filter(d => !!d.options.lineNumberClassName);\n        lineNoDecorations.sort((a, b) => Range.compareRangesUsingEnds(a.range, b.range));\n        let decorationStartIndex = 0;\n        const lineCount = this._context.viewModel.getLineCount();\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            let renderLineNumber = this._getLineRenderLineNumber(lineNumber);\n            let extraClassNames = '';\n            // skip decorations whose end positions we've already passed\n            while (decorationStartIndex < lineNoDecorations.length && lineNoDecorations[decorationStartIndex].range.endLineNumber < lineNumber) {\n                decorationStartIndex++;\n            }\n            for (let i = decorationStartIndex; i < lineNoDecorations.length; i++) {\n                const { range, options } = lineNoDecorations[i];\n                if (range.startLineNumber <= lineNumber) {\n                    extraClassNames += ' ' + options.lineNumberClassName;\n                }\n            }\n            if (!renderLineNumber && !extraClassNames) {\n                output[lineIndex] = '';\n                continue;\n            }\n            if (lineNumber === lineCount && this._context.viewModel.getLineLength(lineNumber) === 0) {\n                // this is the last line\n                if (this._renderFinalNewline === 'off') {\n                    renderLineNumber = '';\n                }\n                if (this._renderFinalNewline === 'dimmed') {\n                    extraClassNames += ' dimmed-line-number';\n                }\n            }\n            if (lineNumber === this._activeLineNumber) {\n                extraClassNames += ' active-line-number';\n            }\n            output[lineIndex] = (`<div class=\"${LineNumbersOverlay.CLASS_NAME}${lineHeightClassName}${extraClassNames}\" style=\"left:${this._lineNumbersLeft}px;width:${this._lineNumbersWidth}px;\">${renderLineNumber}</div>`);\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nLineNumbersOverlay.CLASS_NAME = 'line-numbers';\nregisterThemingParticipant((theme, collector) => {\n    const editorLineNumbersColor = theme.getColor(editorLineNumbers);\n    const editorDimmedLineNumberColor = theme.getColor(editorDimmedLineNumber);\n    if (editorDimmedLineNumberColor) {\n        collector.addRule(`.monaco-editor .line-numbers.dimmed-line-number { color: ${editorDimmedLineNumberColor}; }`);\n    }\n    else if (editorLineNumbersColor) {\n        collector.addRule(`.monaco-editor .line-numbers.dimmed-line-number { color: ${editorLineNumbersColor.transparent(0.4)}; }`);\n    }\n});\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ViewEventHandler } from '../../common/viewEventHandler.js';\nexport class DynamicViewOverlay extends ViewEventHandler {\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './margin.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class Margin extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this._canUseLayerHinting = !options.get(32 /* EditorOption.disableLayerHinting */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setClassName(Margin.OUTER_CLASS_NAME);\n        this._domNode.setPosition('absolute');\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._glyphMarginBackgroundDomNode = createFastDomNode(document.createElement('div'));\n        this._glyphMarginBackgroundDomNode.setClassName(Margin.CLASS_NAME);\n        this._domNode.appendChild(this._glyphMarginBackgroundDomNode);\n    }\n    dispose() {\n        super.dispose();\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this._canUseLayerHinting = !options.get(32 /* EditorOption.disableLayerHinting */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        return true;\n    }\n    onScrollChanged(e) {\n        return super.onScrollChanged(e) || e.scrollTopChanged;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setLayerHinting(this._canUseLayerHinting);\n        this._domNode.setContain('strict');\n        const adjustedScrollTop = ctx.scrollTop - ctx.bigNumbersDelta;\n        this._domNode.setTop(-adjustedScrollTop);\n        const height = Math.min(ctx.scrollHeight, 1000000);\n        this._domNode.setHeight(height);\n        this._domNode.setWidth(this._contentLeft);\n        this._glyphMarginBackgroundDomNode.setLeft(this._glyphMarginLeft);\n        this._glyphMarginBackgroundDomNode.setWidth(this._glyphMarginWidth);\n        this._glyphMarginBackgroundDomNode.setHeight(height);\n    }\n}\nMargin.CLASS_NAME = 'glyph-margin';\nMargin.OUTER_CLASS_NAME = 'margin';\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './mouseCursor.css';\nexport const MOUSE_CURSOR_TEXT_CSS_CLASS_NAME = `monaco-mouse-cursor-text`;\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nimport { isFirefox } from '../../base/browser/browser.js';\nimport * as types from '../../base/common/types.js';\nimport { status } from '../../base/browser/ui/aria/aria.js';\nimport { Command, EditorCommand, registerEditorCommand, UndoCommand, RedoCommand, SelectAllCommand } from './editorExtensions.js';\nimport { ICodeEditorService } from './services/codeEditorService.js';\nimport { ColumnSelection } from '../common/cursor/cursorColumnSelection.js';\nimport { CursorState } from '../common/cursorCommon.js';\nimport { DeleteOperations } from '../common/cursor/cursorDeleteOperations.js';\nimport { CursorMove as CursorMove_, CursorMoveCommands } from '../common/cursor/cursorMoveCommands.js';\nimport { TypeOperations } from '../common/cursor/cursorTypeOperations.js';\nimport { Position } from '../common/core/position.js';\nimport { Range } from '../common/core/range.js';\nimport { EditorContextKeys } from '../common/editorContextKeys.js';\nimport { ContextKeyExpr } from '../../platform/contextkey/common/contextkey.js';\nimport { KeybindingsRegistry } from '../../platform/keybinding/common/keybindingsRegistry.js';\nimport { getActiveElement } from '../../base/browser/dom.js';\nconst CORE_WEIGHT = 0 /* KeybindingWeight.EditorCore */;\nexport class CoreEditorCommand extends EditorCommand {\n    runEditorCommand(accessor, editor, args) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            // the editor has no view => has no cursors\n            return;\n        }\n        this.runCoreEditorCommand(viewModel, args || {});\n    }\n}\nexport var EditorScroll_;\n(function (EditorScroll_) {\n    const isEditorScrollArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        const scrollArg = arg;\n        if (!types.isString(scrollArg.to)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.by) && !types.isString(scrollArg.by)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.value) && !types.isNumber(scrollArg.value)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.revealCursor) && !types.isBoolean(scrollArg.revealCursor)) {\n            return false;\n        }\n        return true;\n    };\n    EditorScroll_.metadata = {\n        description: 'Scroll editor in the given direction',\n        args: [\n            {\n                name: 'Editor scroll argument object',\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory direction value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'up', 'down'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'page', 'halfPage', 'editor'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\n\t\t\t\t`,\n                constraint: isEditorScrollArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['to'],\n                    'properties': {\n                        'to': {\n                            'type': 'string',\n                            'enum': ['up', 'down']\n                        },\n                        'by': {\n                            'type': 'string',\n                            'enum': ['line', 'wrappedLine', 'page', 'halfPage', 'editor']\n                        },\n                        'value': {\n                            'type': 'number',\n                            'default': 1\n                        },\n                        'revealCursor': {\n                            'type': 'boolean',\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Directions in the view for editor scroll command.\n     */\n    EditorScroll_.RawDirection = {\n        Up: 'up',\n        Right: 'right',\n        Down: 'down',\n        Left: 'left'\n    };\n    /**\n     * Units for editor scroll 'by' argument\n     */\n    EditorScroll_.RawUnit = {\n        Line: 'line',\n        WrappedLine: 'wrappedLine',\n        Page: 'page',\n        HalfPage: 'halfPage',\n        Editor: 'editor',\n        Column: 'column'\n    };\n    function parse(args) {\n        let direction;\n        switch (args.to) {\n            case EditorScroll_.RawDirection.Up:\n                direction = 1 /* Direction.Up */;\n                break;\n            case EditorScroll_.RawDirection.Right:\n                direction = 2 /* Direction.Right */;\n                break;\n            case EditorScroll_.RawDirection.Down:\n                direction = 3 /* Direction.Down */;\n                break;\n            case EditorScroll_.RawDirection.Left:\n                direction = 4 /* Direction.Left */;\n                break;\n            default:\n                // Illegal arguments\n                return null;\n        }\n        let unit;\n        switch (args.by) {\n            case EditorScroll_.RawUnit.Line:\n                unit = 1 /* Unit.Line */;\n                break;\n            case EditorScroll_.RawUnit.WrappedLine:\n                unit = 2 /* Unit.WrappedLine */;\n                break;\n            case EditorScroll_.RawUnit.Page:\n                unit = 3 /* Unit.Page */;\n                break;\n            case EditorScroll_.RawUnit.HalfPage:\n                unit = 4 /* Unit.HalfPage */;\n                break;\n            case EditorScroll_.RawUnit.Editor:\n                unit = 5 /* Unit.Editor */;\n                break;\n            case EditorScroll_.RawUnit.Column:\n                unit = 6 /* Unit.Column */;\n                break;\n            default:\n                unit = 2 /* Unit.WrappedLine */;\n        }\n        const value = Math.floor(args.value || 1);\n        const revealCursor = !!args.revealCursor;\n        return {\n            direction: direction,\n            unit: unit,\n            value: value,\n            revealCursor: revealCursor,\n            select: (!!args.select)\n        };\n    }\n    EditorScroll_.parse = parse;\n})(EditorScroll_ || (EditorScroll_ = {}));\nexport var RevealLine_;\n(function (RevealLine_) {\n    const isRevealLineArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        const reveaLineArg = arg;\n        if (!types.isNumber(reveaLineArg.lineNumber) && !types.isString(reveaLineArg.lineNumber)) {\n            return false;\n        }\n        if (!types.isUndefined(reveaLineArg.at) && !types.isString(reveaLineArg.at)) {\n            return false;\n        }\n        return true;\n    };\n    RevealLine_.metadata = {\n        description: 'Reveal the given line at the given logical position',\n        args: [\n            {\n                name: 'Reveal line argument object',\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'lineNumber': A mandatory line number value.\n\t\t\t\t\t* 'at': Logical position at which line has to be revealed.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'top', 'center', 'bottom'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t`,\n                constraint: isRevealLineArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['lineNumber'],\n                    'properties': {\n                        'lineNumber': {\n                            'type': ['number', 'string'],\n                        },\n                        'at': {\n                            'type': 'string',\n                            'enum': ['top', 'center', 'bottom']\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Values for reveal line 'at' argument\n     */\n    RevealLine_.RawAtArgument = {\n        Top: 'top',\n        Center: 'center',\n        Bottom: 'bottom'\n    };\n})(RevealLine_ || (RevealLine_ = {}));\nclass EditorOrNativeTextInputCommand {\n    constructor(target) {\n        // 1. handle case when focus is in editor.\n        target.addImplementation(10000, 'code-editor', (accessor, args) => {\n            // Only if editor text focus (i.e. not if editor has widget focus).\n            const focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n            if (focusedEditor && focusedEditor.hasTextFocus()) {\n                return this._runEditorCommand(accessor, focusedEditor, args);\n            }\n            return false;\n        });\n        // 2. handle case when focus is in some other `input` / `textarea`.\n        target.addImplementation(1000, 'generic-dom-input-textarea', (accessor, args) => {\n            // Only if focused on an element that allows for entering text\n            const activeElement = getActiveElement();\n            if (activeElement && ['input', 'textarea'].indexOf(activeElement.tagName.toLowerCase()) >= 0) {\n                this.runDOMCommand(activeElement);\n                return true;\n            }\n            return false;\n        });\n        // 3. (default) handle case when focus is somewhere else.\n        target.addImplementation(0, 'generic-dom', (accessor, args) => {\n            // Redirecting to active editor\n            const activeEditor = accessor.get(ICodeEditorService).getActiveCodeEditor();\n            if (activeEditor) {\n                activeEditor.focus();\n                return this._runEditorCommand(accessor, activeEditor, args);\n            }\n            return false;\n        });\n    }\n    _runEditorCommand(accessor, editor, args) {\n        const result = this.runEditorCommand(accessor, editor, args);\n        if (result) {\n            return result;\n        }\n        return true;\n    }\n}\nexport var CoreNavigationCommands;\n(function (CoreNavigationCommands) {\n    class BaseMoveToCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            viewModel.model.pushStackElement();\n            const cursorStateChanged = viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)\n            ]);\n            if (cursorStateChanged && args.revealType !== 2 /* NavigationCommandRevealType.None */) {\n                viewModel.revealPrimaryCursor(args.source, true, true);\n            }\n        }\n    }\n    CoreNavigationCommands.MoveTo = registerEditorCommand(new BaseMoveToCommand({\n        id: '_moveTo',\n        inSelectionMode: false,\n        precondition: undefined\n    }));\n    CoreNavigationCommands.MoveToSelect = registerEditorCommand(new BaseMoveToCommand({\n        id: '_moveToSelect',\n        inSelectionMode: true,\n        precondition: undefined\n    }));\n    class ColumnSelectCommand extends CoreEditorCommand {\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            const result = this._getColumnSelectResult(viewModel, viewModel.getPrimaryCursorState(), viewModel.getCursorColumnSelectData(), args);\n            if (result === null) {\n                // invalid arguments\n                return;\n            }\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, result.viewStates.map((viewState) => CursorState.fromViewState(viewState)));\n            viewModel.setCursorColumnSelectData({\n                isReal: true,\n                fromViewLineNumber: result.fromLineNumber,\n                fromViewVisualColumn: result.fromVisualColumn,\n                toViewLineNumber: result.toLineNumber,\n                toViewVisualColumn: result.toVisualColumn\n            });\n            if (result.reversed) {\n                viewModel.revealTopMostCursor(args.source);\n            }\n            else {\n                viewModel.revealBottomMostCursor(args.source);\n            }\n        }\n    }\n    CoreNavigationCommands.ColumnSelect = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'columnSelect',\n                precondition: undefined\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            if (typeof args.position === 'undefined' || typeof args.viewPosition === 'undefined' || typeof args.mouseColumn === 'undefined') {\n                return null;\n            }\n            // validate `args`\n            const validatedPosition = viewModel.model.validatePosition(args.position);\n            const validatedViewPosition = viewModel.coordinatesConverter.validateViewPosition(new Position(args.viewPosition.lineNumber, args.viewPosition.column), validatedPosition);\n            const fromViewLineNumber = args.doColumnSelect ? prevColumnSelectData.fromViewLineNumber : validatedViewPosition.lineNumber;\n            const fromViewVisualColumn = args.doColumnSelect ? prevColumnSelectData.fromViewVisualColumn : args.mouseColumn - 1;\n            return ColumnSelection.columnSelect(viewModel.cursorConfig, viewModel, fromViewLineNumber, fromViewVisualColumn, validatedViewPosition.lineNumber, args.mouseColumn - 1);\n        }\n    });\n    CoreNavigationCommands.CursorColumnSelectLeft = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'cursorColumnSelectLeft',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 15 /* KeyCode.LeftArrow */,\n                    linux: { primary: 0 }\n                }\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectLeft(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n        }\n    });\n    CoreNavigationCommands.CursorColumnSelectRight = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'cursorColumnSelectRight',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 17 /* KeyCode.RightArrow */,\n                    linux: { primary: 0 }\n                }\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectRight(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n        }\n    });\n    class ColumnSelectUpCommand extends ColumnSelectCommand {\n        constructor(opts) {\n            super(opts);\n            this._isPaged = opts.isPaged;\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectUp(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n        }\n    }\n    CoreNavigationCommands.CursorColumnSelectUp = registerEditorCommand(new ColumnSelectUpCommand({\n        isPaged: false,\n        id: 'cursorColumnSelectUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */,\n            linux: { primary: 0 }\n        }\n    }));\n    CoreNavigationCommands.CursorColumnSelectPageUp = registerEditorCommand(new ColumnSelectUpCommand({\n        isPaged: true,\n        id: 'cursorColumnSelectPageUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */,\n            linux: { primary: 0 }\n        }\n    }));\n    class ColumnSelectDownCommand extends ColumnSelectCommand {\n        constructor(opts) {\n            super(opts);\n            this._isPaged = opts.isPaged;\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectDown(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n        }\n    }\n    CoreNavigationCommands.CursorColumnSelectDown = registerEditorCommand(new ColumnSelectDownCommand({\n        isPaged: false,\n        id: 'cursorColumnSelectDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */,\n            linux: { primary: 0 }\n        }\n    }));\n    CoreNavigationCommands.CursorColumnSelectPageDown = registerEditorCommand(new ColumnSelectDownCommand({\n        isPaged: true,\n        id: 'cursorColumnSelectPageDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */,\n            linux: { primary: 0 }\n        }\n    }));\n    class CursorMoveImpl extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'cursorMove',\n                precondition: undefined,\n                metadata: CursorMove_.metadata\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const parsed = CursorMove_.parse(args);\n            if (!parsed) {\n                // illegal arguments\n                return;\n            }\n            this._runCursorMove(viewModel, args.source, parsed);\n        }\n        _runCursorMove(viewModel, source, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(source, 3 /* CursorChangeReason.Explicit */, CursorMoveImpl._move(viewModel, viewModel.getCursorStates(), args));\n            viewModel.revealPrimaryCursor(source, true);\n        }\n        static _move(viewModel, cursors, args) {\n            const inSelectionMode = args.select;\n            const value = args.value;\n            switch (args.direction) {\n                case 0 /* CursorMove_.Direction.Left */:\n                case 1 /* CursorMove_.Direction.Right */:\n                case 2 /* CursorMove_.Direction.Up */:\n                case 3 /* CursorMove_.Direction.Down */:\n                case 4 /* CursorMove_.Direction.PrevBlankLine */:\n                case 5 /* CursorMove_.Direction.NextBlankLine */:\n                case 6 /* CursorMove_.Direction.WrappedLineStart */:\n                case 7 /* CursorMove_.Direction.WrappedLineFirstNonWhitespaceCharacter */:\n                case 8 /* CursorMove_.Direction.WrappedLineColumnCenter */:\n                case 9 /* CursorMove_.Direction.WrappedLineEnd */:\n                case 10 /* CursorMove_.Direction.WrappedLineLastNonWhitespaceCharacter */:\n                    return CursorMoveCommands.simpleMove(viewModel, cursors, args.direction, inSelectionMode, value, args.unit);\n                case 11 /* CursorMove_.Direction.ViewPortTop */:\n                case 13 /* CursorMove_.Direction.ViewPortBottom */:\n                case 12 /* CursorMove_.Direction.ViewPortCenter */:\n                case 14 /* CursorMove_.Direction.ViewPortIfOutside */:\n                    return CursorMoveCommands.viewportMove(viewModel, cursors, args.direction, inSelectionMode, value);\n                default:\n                    return null;\n            }\n        }\n    }\n    CoreNavigationCommands.CursorMoveImpl = CursorMoveImpl;\n    CoreNavigationCommands.CursorMove = registerEditorCommand(new CursorMoveImpl());\n    class CursorMoveBasedCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._staticArgs = opts.args;\n        }\n        runCoreEditorCommand(viewModel, dynamicArgs) {\n            let args = this._staticArgs;\n            if (this._staticArgs.value === -1 /* Constants.PAGE_SIZE_MARKER */) {\n                // -1 is a marker for page size\n                args = {\n                    direction: this._staticArgs.direction,\n                    unit: this._staticArgs.unit,\n                    select: this._staticArgs.select,\n                    value: dynamicArgs.pageSize || viewModel.cursorConfig.pageSize\n                };\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(dynamicArgs.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.simpleMove(viewModel, viewModel.getCursorStates(), args.direction, args.select, args.value, args.unit));\n            viewModel.revealPrimaryCursor(dynamicArgs.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorLeft = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 0 /* CursorMove_.Direction.Left */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorLeft',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 15 /* KeyCode.LeftArrow */,\n            mac: { primary: 15 /* KeyCode.LeftArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 32 /* KeyCode.KeyB */] }\n        }\n    }));\n    CoreNavigationCommands.CursorLeftSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 0 /* CursorMove_.Direction.Left */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorLeftSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */\n        }\n    }));\n    CoreNavigationCommands.CursorRight = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 1 /* CursorMove_.Direction.Right */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorRight',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 17 /* KeyCode.RightArrow */,\n            mac: { primary: 17 /* KeyCode.RightArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 36 /* KeyCode.KeyF */] }\n        }\n    }));\n    CoreNavigationCommands.CursorRightSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 1 /* CursorMove_.Direction.Right */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorRightSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */\n        }\n    }));\n    CoreNavigationCommands.CursorUp = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 16 /* KeyCode.UpArrow */,\n            mac: { primary: 16 /* KeyCode.UpArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 46 /* KeyCode.KeyP */] }\n        }\n    }));\n    CoreNavigationCommands.CursorUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorUpSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */,\n            secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */],\n            mac: { primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ },\n            linux: { primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorPageUp = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 11 /* KeyCode.PageUp */\n        }\n    }));\n    CoreNavigationCommands.CursorPageUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageUpSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 11 /* KeyCode.PageUp */\n        }\n    }));\n    CoreNavigationCommands.CursorDown = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 18 /* KeyCode.DownArrow */,\n            mac: { primary: 18 /* KeyCode.DownArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 44 /* KeyCode.KeyN */] }\n        }\n    }));\n    CoreNavigationCommands.CursorDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorDownSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */,\n            secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */],\n            mac: { primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ },\n            linux: { primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorPageDown = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 12 /* KeyCode.PageDown */\n        }\n    }));\n    CoreNavigationCommands.CursorPageDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageDownSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 12 /* KeyCode.PageDown */\n        }\n    }));\n    CoreNavigationCommands.CreateCursor = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'createCursor',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            let newState;\n            if (args.wholeLine) {\n                newState = CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n            }\n            else {\n                newState = CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n            }\n            const states = viewModel.getCursorStates();\n            // Check if we should remove a cursor (sort of like a toggle)\n            if (states.length > 1) {\n                const newModelPosition = (newState.modelState ? newState.modelState.position : null);\n                const newViewPosition = (newState.viewState ? newState.viewState.position : null);\n                for (let i = 0, len = states.length; i < len; i++) {\n                    const state = states[i];\n                    if (newModelPosition && !state.modelState.selection.containsPosition(newModelPosition)) {\n                        continue;\n                    }\n                    if (newViewPosition && !state.viewState.selection.containsPosition(newViewPosition)) {\n                        continue;\n                    }\n                    // => Remove the cursor\n                    states.splice(i, 1);\n                    viewModel.model.pushStackElement();\n                    viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, states);\n                    return;\n                }\n            }\n            // => Add the new cursor\n            states.push(newState);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, states);\n        }\n    });\n    CoreNavigationCommands.LastCursorMoveToSelect = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: '_lastCursorMoveToSelect',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.moveTo(viewModel, states[lastAddedCursorIndex], true, args.position, args.viewPosition);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n        }\n    });\n    class HomeCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToBeginningOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorHome = registerEditorCommand(new HomeCommand({\n        inSelectionMode: false,\n        id: 'cursorHome',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 14 /* KeyCode.Home */,\n            mac: { primary: 14 /* KeyCode.Home */, secondary: [2048 /* KeyMod.CtrlCmd */ | 15 /* KeyCode.LeftArrow */] }\n        }\n    }));\n    CoreNavigationCommands.CursorHomeSelect = registerEditorCommand(new HomeCommand({\n        inSelectionMode: true,\n        id: 'cursorHomeSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */,\n            mac: { primary: 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */, secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */] }\n        }\n    }));\n    class LineStartCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, this._exec(viewModel.getCursorStates()));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n        _exec(cursors) {\n            const result = [];\n            for (let i = 0, len = cursors.length; i < len; i++) {\n                const cursor = cursors[i];\n                const lineNumber = cursor.modelState.position.lineNumber;\n                result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, 1, 0));\n            }\n            return result;\n        }\n    }\n    CoreNavigationCommands.CursorLineStart = registerEditorCommand(new LineStartCommand({\n        inSelectionMode: false,\n        id: 'cursorLineStart',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 31 /* KeyCode.KeyA */ }\n        }\n    }));\n    CoreNavigationCommands.CursorLineStartSelect = registerEditorCommand(new LineStartCommand({\n        inSelectionMode: true,\n        id: 'cursorLineStartSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 31 /* KeyCode.KeyA */ }\n        }\n    }));\n    class EndCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToEndOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode, args.sticky || false));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorEnd = registerEditorCommand(new EndCommand({\n        inSelectionMode: false,\n        id: 'cursorEnd',\n        precondition: undefined,\n        kbOpts: {\n            args: { sticky: false },\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 13 /* KeyCode.End */,\n            mac: { primary: 13 /* KeyCode.End */, secondary: [2048 /* KeyMod.CtrlCmd */ | 17 /* KeyCode.RightArrow */] }\n        },\n        metadata: {\n            description: `Go to End`,\n            args: [{\n                    name: 'args',\n                    schema: {\n                        type: 'object',\n                        properties: {\n                            'sticky': {\n                                description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n                                type: 'boolean',\n                                default: false\n                            }\n                        }\n                    }\n                }]\n        }\n    }));\n    CoreNavigationCommands.CursorEndSelect = registerEditorCommand(new EndCommand({\n        inSelectionMode: true,\n        id: 'cursorEndSelect',\n        precondition: undefined,\n        kbOpts: {\n            args: { sticky: false },\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */,\n            mac: { primary: 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */, secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */] }\n        },\n        metadata: {\n            description: `Select to End`,\n            args: [{\n                    name: 'args',\n                    schema: {\n                        type: 'object',\n                        properties: {\n                            'sticky': {\n                                description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n                                type: 'boolean',\n                                default: false\n                            }\n                        }\n                    }\n                }]\n        }\n    }));\n    class LineEndCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, this._exec(viewModel, viewModel.getCursorStates()));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n        _exec(viewModel, cursors) {\n            const result = [];\n            for (let i = 0, len = cursors.length; i < len; i++) {\n                const cursor = cursors[i];\n                const lineNumber = cursor.modelState.position.lineNumber;\n                const maxColumn = viewModel.model.getLineMaxColumn(lineNumber);\n                result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, maxColumn, 0));\n            }\n            return result;\n        }\n    }\n    CoreNavigationCommands.CursorLineEnd = registerEditorCommand(new LineEndCommand({\n        inSelectionMode: false,\n        id: 'cursorLineEnd',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 35 /* KeyCode.KeyE */ }\n        }\n    }));\n    CoreNavigationCommands.CursorLineEndSelect = registerEditorCommand(new LineEndCommand({\n        inSelectionMode: true,\n        id: 'cursorLineEndSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 35 /* KeyCode.KeyE */ }\n        }\n    }));\n    class TopCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToBeginningOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorTop = registerEditorCommand(new TopCommand({\n        inSelectionMode: false,\n        id: 'cursorTop',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 14 /* KeyCode.Home */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 16 /* KeyCode.UpArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorTopSelect = registerEditorCommand(new TopCommand({\n        inSelectionMode: true,\n        id: 'cursorTopSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ }\n        }\n    }));\n    class BottomCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToEndOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorBottom = registerEditorCommand(new BottomCommand({\n        inSelectionMode: false,\n        id: 'cursorBottom',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 13 /* KeyCode.End */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 18 /* KeyCode.DownArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorBottomSelect = registerEditorCommand(new BottomCommand({\n        inSelectionMode: true,\n        id: 'cursorBottomSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ }\n        }\n    }));\n    class EditorScrollImpl extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'editorScroll',\n                precondition: undefined,\n                metadata: EditorScroll_.metadata\n            });\n        }\n        determineScrollMethod(args) {\n            const horizontalUnits = [6 /* EditorScroll_.Unit.Column */];\n            const verticalUnits = [\n                1 /* EditorScroll_.Unit.Line */,\n                2 /* EditorScroll_.Unit.WrappedLine */,\n                3 /* EditorScroll_.Unit.Page */,\n                4 /* EditorScroll_.Unit.HalfPage */,\n                5 /* EditorScroll_.Unit.Editor */,\n                6 /* EditorScroll_.Unit.Column */\n            ];\n            const horizontalDirections = [4 /* EditorScroll_.Direction.Left */, 2 /* EditorScroll_.Direction.Right */];\n            const verticalDirections = [1 /* EditorScroll_.Direction.Up */, 3 /* EditorScroll_.Direction.Down */];\n            if (horizontalUnits.includes(args.unit) && horizontalDirections.includes(args.direction)) {\n                return this._runHorizontalEditorScroll.bind(this);\n            }\n            if (verticalUnits.includes(args.unit) && verticalDirections.includes(args.direction)) {\n                return this._runVerticalEditorScroll.bind(this);\n            }\n            return null;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const parsed = EditorScroll_.parse(args);\n            if (!parsed) {\n                // illegal arguments\n                return;\n            }\n            const runEditorScroll = this.determineScrollMethod(parsed);\n            if (!runEditorScroll) {\n                // Incompatible unit and direction\n                return;\n            }\n            runEditorScroll(viewModel, args.source, parsed);\n        }\n        _runVerticalEditorScroll(viewModel, source, args) {\n            const desiredScrollTop = this._computeDesiredScrollTop(viewModel, args);\n            if (args.revealCursor) {\n                // must ensure cursor is in new visible range\n                const desiredVisibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(desiredScrollTop);\n                viewModel.setCursorStates(source, 3 /* CursorChangeReason.Explicit */, [\n                    CursorMoveCommands.findPositionInViewportIfOutside(viewModel, viewModel.getPrimaryCursorState(), desiredVisibleViewRange, args.select)\n                ]);\n            }\n            viewModel.viewLayout.setScrollPosition({ scrollTop: desiredScrollTop }, 0 /* ScrollType.Smooth */);\n        }\n        _computeDesiredScrollTop(viewModel, args) {\n            if (args.unit === 1 /* EditorScroll_.Unit.Line */) {\n                // scrolling by model lines\n                const futureViewport = viewModel.viewLayout.getFutureViewport();\n                const visibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(futureViewport.top);\n                const visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n                let desiredTopModelLineNumber;\n                if (args.direction === 1 /* EditorScroll_.Direction.Up */) {\n                    // must go x model lines up\n                    desiredTopModelLineNumber = Math.max(1, visibleModelRange.startLineNumber - args.value);\n                }\n                else {\n                    // must go x model lines down\n                    desiredTopModelLineNumber = Math.min(viewModel.model.getLineCount(), visibleModelRange.startLineNumber + args.value);\n                }\n                const viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(new Position(desiredTopModelLineNumber, 1));\n                return viewModel.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n            }\n            if (args.unit === 5 /* EditorScroll_.Unit.Editor */) {\n                let desiredTopModelLineNumber = 0;\n                if (args.direction === 3 /* EditorScroll_.Direction.Down */) {\n                    desiredTopModelLineNumber = viewModel.model.getLineCount() - viewModel.cursorConfig.pageSize;\n                }\n                return viewModel.viewLayout.getVerticalOffsetForLineNumber(desiredTopModelLineNumber);\n            }\n            let noOfLines;\n            if (args.unit === 3 /* EditorScroll_.Unit.Page */) {\n                noOfLines = viewModel.cursorConfig.pageSize * args.value;\n            }\n            else if (args.unit === 4 /* EditorScroll_.Unit.HalfPage */) {\n                noOfLines = Math.round(viewModel.cursorConfig.pageSize / 2) * args.value;\n            }\n            else {\n                noOfLines = args.value;\n            }\n            const deltaLines = (args.direction === 1 /* EditorScroll_.Direction.Up */ ? -1 : 1) * noOfLines;\n            return viewModel.viewLayout.getCurrentScrollTop() + deltaLines * viewModel.cursorConfig.lineHeight;\n        }\n        _runHorizontalEditorScroll(viewModel, source, args) {\n            const desiredScrollLeft = this._computeDesiredScrollLeft(viewModel, args);\n            viewModel.viewLayout.setScrollPosition({ scrollLeft: desiredScrollLeft }, 0 /* ScrollType.Smooth */);\n        }\n        _computeDesiredScrollLeft(viewModel, args) {\n            const deltaColumns = (args.direction === 4 /* EditorScroll_.Direction.Left */ ? -1 : 1) * args.value;\n            return viewModel.viewLayout.getCurrentScrollLeft() + deltaColumns * viewModel.cursorConfig.typicalHalfwidthCharacterWidth;\n        }\n    }\n    CoreNavigationCommands.EditorScrollImpl = EditorScrollImpl;\n    CoreNavigationCommands.EditorScroll = registerEditorCommand(new EditorScrollImpl());\n    CoreNavigationCommands.ScrollLineUp = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollLineUp',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 16 /* KeyCode.UpArrow */,\n                    mac: { primary: 256 /* KeyMod.WinCtrl */ | 11 /* KeyCode.PageUp */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Up,\n                by: EditorScroll_.RawUnit.WrappedLine,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollPageUp = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollPageUp',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 11 /* KeyCode.PageUp */,\n                    win: { primary: 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */ },\n                    linux: { primary: 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Up,\n                by: EditorScroll_.RawUnit.Page,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollEditorTop = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollEditorTop',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Up,\n                by: EditorScroll_.RawUnit.Editor,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollLineDown = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollLineDown',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 18 /* KeyCode.DownArrow */,\n                    mac: { primary: 256 /* KeyMod.WinCtrl */ | 12 /* KeyCode.PageDown */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Down,\n                by: EditorScroll_.RawUnit.WrappedLine,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollPageDown = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollPageDown',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 12 /* KeyCode.PageDown */,\n                    win: { primary: 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */ },\n                    linux: { primary: 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Down,\n                by: EditorScroll_.RawUnit.Page,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollEditorBottom = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollEditorBottom',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Down,\n                by: EditorScroll_.RawUnit.Editor,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollLeft = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollLeft',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Left,\n                by: EditorScroll_.RawUnit.Column,\n                value: 2,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollRight = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollRight',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Right,\n                by: EditorScroll_.RawUnit.Column,\n                value: 2,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    class WordCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.word(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position)\n            ]);\n            if (args.revealType !== 2 /* NavigationCommandRevealType.None */) {\n                viewModel.revealPrimaryCursor(args.source, true, true);\n            }\n        }\n    }\n    CoreNavigationCommands.WordSelect = registerEditorCommand(new WordCommand({\n        inSelectionMode: false,\n        id: '_wordSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.WordSelectDrag = registerEditorCommand(new WordCommand({\n        inSelectionMode: true,\n        id: '_wordSelectDrag',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LastCursorWordSelect = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'lastCursorWordSelect',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            const lastAddedState = states[lastAddedCursorIndex];\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.word(viewModel, lastAddedState, lastAddedState.modelState.hasSelection(), args.position);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n        }\n    });\n    class LineCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)\n            ]);\n            if (args.revealType !== 2 /* NavigationCommandRevealType.None */) {\n                viewModel.revealPrimaryCursor(args.source, false, true);\n            }\n        }\n    }\n    CoreNavigationCommands.LineSelect = registerEditorCommand(new LineCommand({\n        inSelectionMode: false,\n        id: '_lineSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LineSelectDrag = registerEditorCommand(new LineCommand({\n        inSelectionMode: true,\n        id: '_lineSelectDrag',\n        precondition: undefined\n    }));\n    class LastCursorLineCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.line(viewModel, states[lastAddedCursorIndex], this._inSelectionMode, args.position, args.viewPosition);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n        }\n    }\n    CoreNavigationCommands.LastCursorLineSelect = registerEditorCommand(new LastCursorLineCommand({\n        inSelectionMode: false,\n        id: 'lastCursorLineSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LastCursorLineSelectDrag = registerEditorCommand(new LastCursorLineCommand({\n        inSelectionMode: true,\n        id: 'lastCursorLineSelectDrag',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.CancelSelection = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'cancelSelection',\n                precondition: EditorContextKeys.hasNonEmptySelection,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 9 /* KeyCode.Escape */,\n                    secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.cancelSelection(viewModel, viewModel.getPrimaryCursorState())\n            ]);\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    });\n    CoreNavigationCommands.RemoveSecondaryCursors = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'removeSecondaryCursors',\n                precondition: EditorContextKeys.hasMultipleSelections,\n                kbOpts: {\n                    weight: CORE_WEIGHT + 1,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 9 /* KeyCode.Escape */,\n                    secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                viewModel.getPrimaryCursorState()\n            ]);\n            viewModel.revealPrimaryCursor(args.source, true);\n            status(nls.localize('removedCursor', \"Removed secondary cursors\"));\n        }\n    });\n    CoreNavigationCommands.RevealLine = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'revealLine',\n                precondition: undefined,\n                metadata: RevealLine_.metadata\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const revealLineArg = args;\n            const lineNumberArg = revealLineArg.lineNumber || 0;\n            let lineNumber = typeof lineNumberArg === 'number' ? (lineNumberArg + 1) : (parseInt(lineNumberArg) + 1);\n            if (lineNumber < 1) {\n                lineNumber = 1;\n            }\n            const lineCount = viewModel.model.getLineCount();\n            if (lineNumber > lineCount) {\n                lineNumber = lineCount;\n            }\n            const range = new Range(lineNumber, 1, lineNumber, viewModel.model.getLineMaxColumn(lineNumber));\n            let revealAt = 0 /* VerticalRevealType.Simple */;\n            if (revealLineArg.at) {\n                switch (revealLineArg.at) {\n                    case RevealLine_.RawAtArgument.Top:\n                        revealAt = 3 /* VerticalRevealType.Top */;\n                        break;\n                    case RevealLine_.RawAtArgument.Center:\n                        revealAt = 1 /* VerticalRevealType.Center */;\n                        break;\n                    case RevealLine_.RawAtArgument.Bottom:\n                        revealAt = 4 /* VerticalRevealType.Bottom */;\n                        break;\n                    default:\n                        break;\n                }\n            }\n            const viewRange = viewModel.coordinatesConverter.convertModelRangeToViewRange(range);\n            viewModel.revealRange(args.source, false, viewRange, revealAt, 0 /* ScrollType.Smooth */);\n        }\n    });\n    CoreNavigationCommands.SelectAll = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(SelectAllCommand);\n        }\n        runDOMCommand(activeElement) {\n            if (isFirefox) {\n                activeElement.focus();\n                activeElement.select();\n            }\n            activeElement.ownerDocument.execCommand('selectAll');\n        }\n        runEditorCommand(accessor, editor, args) {\n            const viewModel = editor._getViewModel();\n            if (!viewModel) {\n                // the editor has no view => has no cursors\n                return;\n            }\n            this.runCoreEditorCommand(viewModel, args);\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates('keyboard', 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.selectAll(viewModel, viewModel.getPrimaryCursorState())\n            ]);\n        }\n    }();\n    CoreNavigationCommands.SetSelection = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'setSelection',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.selection) {\n                return;\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorState.fromModelSelection(args.selection)\n            ]);\n        }\n    });\n})(CoreNavigationCommands || (CoreNavigationCommands = {}));\nconst columnSelectionCondition = ContextKeyExpr.and(EditorContextKeys.textInputFocus, EditorContextKeys.columnSelection);\nfunction registerColumnSelection(id, keybinding) {\n    KeybindingsRegistry.registerKeybindingRule({\n        id: id,\n        primary: keybinding,\n        when: columnSelectionCondition,\n        weight: CORE_WEIGHT + 1\n    });\n}\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectLeft.id, 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectRight.id, 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectUp.id, 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageUp.id, 1024 /* KeyMod.Shift */ | 11 /* KeyCode.PageUp */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectDown.id, 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageDown.id, 1024 /* KeyMod.Shift */ | 12 /* KeyCode.PageDown */);\nfunction registerCommand(command) {\n    command.register();\n    return command;\n}\nexport var CoreEditingCommands;\n(function (CoreEditingCommands) {\n    class CoreEditingCommand extends EditorCommand {\n        runEditorCommand(accessor, editor, args) {\n            const viewModel = editor._getViewModel();\n            if (!viewModel) {\n                // the editor has no view => has no cursors\n                return;\n            }\n            this.runCoreEditingCommand(editor, viewModel, args || {});\n        }\n    }\n    CoreEditingCommands.CoreEditingCommand = CoreEditingCommand;\n    CoreEditingCommands.LineBreakInsert = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'lineBreakInsert',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 0,\n                    mac: { primary: 256 /* KeyMod.WinCtrl */ | 45 /* KeyCode.KeyO */ }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.lineBreakInsert(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n        }\n    });\n    CoreEditingCommands.Outdent = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'outdent',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n                    primary: 1024 /* KeyMod.Shift */ | 2 /* KeyCode.Tab */\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.outdent(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n            editor.pushUndoStop();\n        }\n    });\n    CoreEditingCommands.Tab = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'tab',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n                    primary: 2 /* KeyCode.Tab */\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.tab(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n            editor.pushUndoStop();\n        }\n    });\n    CoreEditingCommands.DeleteLeft = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'deleteLeft',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 1 /* KeyCode.Backspace */,\n                    secondary: [1024 /* KeyMod.Shift */ | 1 /* KeyCode.Backspace */],\n                    mac: { primary: 1 /* KeyCode.Backspace */, secondary: [1024 /* KeyMod.Shift */ | 1 /* KeyCode.Backspace */, 256 /* KeyMod.WinCtrl */ | 38 /* KeyCode.KeyH */, 256 /* KeyMod.WinCtrl */ | 1 /* KeyCode.Backspace */] }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteLeft(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection), viewModel.getCursorAutoClosedCharacters());\n            if (shouldPushStackElementBefore) {\n                editor.pushUndoStop();\n            }\n            editor.executeCommands(this.id, commands);\n            viewModel.setPrevEditOperationType(2 /* EditOperationType.DeletingLeft */);\n        }\n    });\n    CoreEditingCommands.DeleteRight = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'deleteRight',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 20 /* KeyCode.Delete */,\n                    mac: { primary: 20 /* KeyCode.Delete */, secondary: [256 /* KeyMod.WinCtrl */ | 34 /* KeyCode.KeyD */, 256 /* KeyMod.WinCtrl */ | 20 /* KeyCode.Delete */] }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteRight(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection));\n            if (shouldPushStackElementBefore) {\n                editor.pushUndoStop();\n            }\n            editor.executeCommands(this.id, commands);\n            viewModel.setPrevEditOperationType(3 /* EditOperationType.DeletingRight */);\n        }\n    });\n    CoreEditingCommands.Undo = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(UndoCommand);\n        }\n        runDOMCommand(activeElement) {\n            activeElement.ownerDocument.execCommand('undo');\n        }\n        runEditorCommand(accessor, editor, args) {\n            if (!editor.hasModel() || editor.getOption(91 /* EditorOption.readOnly */) === true) {\n                return;\n            }\n            return editor.getModel().undo();\n        }\n    }();\n    CoreEditingCommands.Redo = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(RedoCommand);\n        }\n        runDOMCommand(activeElement) {\n            activeElement.ownerDocument.execCommand('redo');\n        }\n        runEditorCommand(accessor, editor, args) {\n            if (!editor.hasModel() || editor.getOption(91 /* EditorOption.readOnly */) === true) {\n                return;\n            }\n            return editor.getModel().redo();\n        }\n    }();\n})(CoreEditingCommands || (CoreEditingCommands = {}));\n/**\n * A command that will invoke a command on the focused editor.\n */\nclass EditorHandlerCommand extends Command {\n    constructor(id, handlerId, metadata) {\n        super({\n            id: id,\n            precondition: undefined,\n            metadata\n        });\n        this._handlerId = handlerId;\n    }\n    runCommand(accessor, args) {\n        const editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n        if (!editor) {\n            return;\n        }\n        editor.trigger('keyboard', this._handlerId, args);\n    }\n}\nfunction registerOverwritableCommand(handlerId, metadata) {\n    registerCommand(new EditorHandlerCommand('default:' + handlerId, handlerId));\n    registerCommand(new EditorHandlerCommand(handlerId, handlerId, metadata));\n}\nregisterOverwritableCommand(\"type\" /* Handler.Type */, {\n    description: `Type`,\n    args: [{\n            name: 'args',\n            schema: {\n                'type': 'object',\n                'required': ['text'],\n                'properties': {\n                    'text': {\n                        'type': 'string'\n                    }\n                },\n            }\n        }]\n});\nregisterOverwritableCommand(\"replacePreviousChar\" /* Handler.ReplacePreviousChar */);\nregisterOverwritableCommand(\"compositionType\" /* Handler.CompositionType */);\nregisterOverwritableCommand(\"compositionStart\" /* Handler.CompositionStart */);\nregisterOverwritableCommand(\"compositionEnd\" /* Handler.CompositionEnd */);\nregisterOverwritableCommand(\"paste\" /* Handler.Paste */);\nregisterOverwritableCommand(\"cut\" /* Handler.Cut */);\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './core/position.js';\nimport { Range } from './core/range.js';\nimport { Selection } from './core/selection.js';\nimport { createScopedLineTokens } from './languages/supports.js';\nimport { CursorColumns } from './core/cursorColumns.js';\nimport { normalizeIndentation } from './core/indentation.js';\nconst autoCloseAlways = () => true;\nconst autoCloseNever = () => false;\nconst autoCloseBeforeWhitespace = (chr) => (chr === ' ' || chr === '\\t');\nexport class CursorConfiguration {\n    static shouldRecreate(e) {\n        return (e.hasChanged(144 /* EditorOption.layoutInfo */)\n            || e.hasChanged(130 /* EditorOption.wordSeparators */)\n            || e.hasChanged(37 /* EditorOption.emptySelectionClipboard */)\n            || e.hasChanged(77 /* EditorOption.multiCursorMergeOverlapping */)\n            || e.hasChanged(79 /* EditorOption.multiCursorPaste */)\n            || e.hasChanged(80 /* EditorOption.multiCursorLimit */)\n            || e.hasChanged(6 /* EditorOption.autoClosingBrackets */)\n            || e.hasChanged(7 /* EditorOption.autoClosingComments */)\n            || e.hasChanged(11 /* EditorOption.autoClosingQuotes */)\n            || e.hasChanged(9 /* EditorOption.autoClosingDelete */)\n            || e.hasChanged(10 /* EditorOption.autoClosingOvertype */)\n            || e.hasChanged(14 /* EditorOption.autoSurround */)\n            || e.hasChanged(128 /* EditorOption.useTabStops */)\n            || e.hasChanged(50 /* EditorOption.fontInfo */)\n            || e.hasChanged(91 /* EditorOption.readOnly */));\n    }\n    constructor(languageId, modelOptions, configuration, languageConfigurationService) {\n        var _a;\n        this.languageConfigurationService = languageConfigurationService;\n        this._cursorMoveConfigurationBrand = undefined;\n        this._languageId = languageId;\n        const options = configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        this.readOnly = options.get(91 /* EditorOption.readOnly */);\n        this.tabSize = modelOptions.tabSize;\n        this.indentSize = modelOptions.indentSize;\n        this.insertSpaces = modelOptions.insertSpaces;\n        this.stickyTabStops = options.get(116 /* EditorOption.stickyTabStops */);\n        this.lineHeight = fontInfo.lineHeight;\n        this.typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\n        this.useTabStops = options.get(128 /* EditorOption.useTabStops */);\n        this.wordSeparators = options.get(130 /* EditorOption.wordSeparators */);\n        this.emptySelectionClipboard = options.get(37 /* EditorOption.emptySelectionClipboard */);\n        this.copyWithSyntaxHighlighting = options.get(25 /* EditorOption.copyWithSyntaxHighlighting */);\n        this.multiCursorMergeOverlapping = options.get(77 /* EditorOption.multiCursorMergeOverlapping */);\n        this.multiCursorPaste = options.get(79 /* EditorOption.multiCursorPaste */);\n        this.multiCursorLimit = options.get(80 /* EditorOption.multiCursorLimit */);\n        this.autoClosingBrackets = options.get(6 /* EditorOption.autoClosingBrackets */);\n        this.autoClosingComments = options.get(7 /* EditorOption.autoClosingComments */);\n        this.autoClosingQuotes = options.get(11 /* EditorOption.autoClosingQuotes */);\n        this.autoClosingDelete = options.get(9 /* EditorOption.autoClosingDelete */);\n        this.autoClosingOvertype = options.get(10 /* EditorOption.autoClosingOvertype */);\n        this.autoSurround = options.get(14 /* EditorOption.autoSurround */);\n        this.autoIndent = options.get(12 /* EditorOption.autoIndent */);\n        this.surroundingPairs = {};\n        this._electricChars = null;\n        this.shouldAutoCloseBefore = {\n            quote: this._getShouldAutoClose(languageId, this.autoClosingQuotes, true),\n            comment: this._getShouldAutoClose(languageId, this.autoClosingComments, false),\n            bracket: this._getShouldAutoClose(languageId, this.autoClosingBrackets, false),\n        };\n        this.autoClosingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoClosingPairs();\n        const surroundingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getSurroundingPairs();\n        if (surroundingPairs) {\n            for (const pair of surroundingPairs) {\n                this.surroundingPairs[pair.open] = pair.close;\n            }\n        }\n        const commentsConfiguration = this.languageConfigurationService.getLanguageConfiguration(languageId).comments;\n        this.blockCommentStartToken = (_a = commentsConfiguration === null || commentsConfiguration === void 0 ? void 0 : commentsConfiguration.blockCommentStartToken) !== null && _a !== void 0 ? _a : null;\n    }\n    get electricChars() {\n        var _a;\n        if (!this._electricChars) {\n            this._electricChars = {};\n            const electricChars = (_a = this.languageConfigurationService.getLanguageConfiguration(this._languageId).electricCharacter) === null || _a === void 0 ? void 0 : _a.getElectricCharacters();\n            if (electricChars) {\n                for (const char of electricChars) {\n                    this._electricChars[char] = true;\n                }\n            }\n        }\n        return this._electricChars;\n    }\n    /**\n     * Should return opening bracket type to match indentation with\n     */\n    onElectricCharacter(character, context, column) {\n        const scopedLineTokens = createScopedLineTokens(context, column - 1);\n        const electricCharacterSupport = this.languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).electricCharacter;\n        if (!electricCharacterSupport) {\n            return null;\n        }\n        return electricCharacterSupport.onElectricCharacter(character, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\n    }\n    normalizeIndentation(str) {\n        return normalizeIndentation(str, this.indentSize, this.insertSpaces);\n    }\n    _getShouldAutoClose(languageId, autoCloseConfig, forQuotes) {\n        switch (autoCloseConfig) {\n            case 'beforeWhitespace':\n                return autoCloseBeforeWhitespace;\n            case 'languageDefined':\n                return this._getLanguageDefinedShouldAutoClose(languageId, forQuotes);\n            case 'always':\n                return autoCloseAlways;\n            case 'never':\n                return autoCloseNever;\n        }\n    }\n    _getLanguageDefinedShouldAutoClose(languageId, forQuotes) {\n        const autoCloseBeforeSet = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoCloseBeforeSet(forQuotes);\n        return c => autoCloseBeforeSet.indexOf(c) !== -1;\n    }\n    /**\n     * Returns a visible column from a column.\n     * @see {@link CursorColumns}\n     */\n    visibleColumnFromColumn(model, position) {\n        return CursorColumns.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, this.tabSize);\n    }\n    /**\n     * Returns a visible column from a column.\n     * @see {@link CursorColumns}\n     */\n    columnFromVisibleColumn(model, lineNumber, visibleColumn) {\n        const result = CursorColumns.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, this.tabSize);\n        const minColumn = model.getLineMinColumn(lineNumber);\n        if (result < minColumn) {\n            return minColumn;\n        }\n        const maxColumn = model.getLineMaxColumn(lineNumber);\n        if (result > maxColumn) {\n            return maxColumn;\n        }\n        return result;\n    }\n}\nexport class CursorState {\n    static fromModelState(modelState) {\n        return new PartialModelCursorState(modelState);\n    }\n    static fromViewState(viewState) {\n        return new PartialViewCursorState(viewState);\n    }\n    static fromModelSelection(modelSelection) {\n        const selection = Selection.liftSelection(modelSelection);\n        const modelState = new SingleCursorState(Range.fromPositions(selection.getSelectionStart()), 0 /* SelectionStartKind.Simple */, 0, selection.getPosition(), 0);\n        return CursorState.fromModelState(modelState);\n    }\n    static fromModelSelections(modelSelections) {\n        const states = [];\n        for (let i = 0, len = modelSelections.length; i < len; i++) {\n            states[i] = this.fromModelSelection(modelSelections[i]);\n        }\n        return states;\n    }\n    constructor(modelState, viewState) {\n        this._cursorStateBrand = undefined;\n        this.modelState = modelState;\n        this.viewState = viewState;\n    }\n    equals(other) {\n        return (this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState));\n    }\n}\nexport class PartialModelCursorState {\n    constructor(modelState) {\n        this.modelState = modelState;\n        this.viewState = null;\n    }\n}\nexport class PartialViewCursorState {\n    constructor(viewState) {\n        this.modelState = null;\n        this.viewState = viewState;\n    }\n}\n/**\n * Represents the cursor state on either the model or on the view model.\n */\nexport class SingleCursorState {\n    constructor(selectionStart, selectionStartKind, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\n        this.selectionStart = selectionStart;\n        this.selectionStartKind = selectionStartKind;\n        this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\n        this.position = position;\n        this.leftoverVisibleColumns = leftoverVisibleColumns;\n        this._singleCursorStateBrand = undefined;\n        this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n    }\n    equals(other) {\n        return (this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns\n            && this.leftoverVisibleColumns === other.leftoverVisibleColumns\n            && this.selectionStartKind === other.selectionStartKind\n            && this.position.equals(other.position)\n            && this.selectionStart.equalsRange(other.selectionStart));\n    }\n    hasSelection() {\n        return (!this.selection.isEmpty() || !this.selectionStart.isEmpty());\n    }\n    move(inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\n        if (inSelectionMode) {\n            // move just position\n            return new SingleCursorState(this.selectionStart, this.selectionStartKind, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n        }\n        else {\n            // move everything\n            return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), 0 /* SelectionStartKind.Simple */, leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n        }\n    }\n    static _computeSelection(selectionStart, position) {\n        if (selectionStart.isEmpty() || !position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n            return Selection.fromPositions(selectionStart.getStartPosition(), position);\n        }\n        else {\n            return Selection.fromPositions(selectionStart.getEndPosition(), position);\n        }\n    }\n}\nexport class EditOperationResult {\n    constructor(type, commands, opts) {\n        this._editOperationResultBrand = undefined;\n        this.type = type;\n        this.commands = commands;\n        this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n        this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n    }\n}\nexport function isQuote(ch) {\n    return (ch === '\\'' || ch === '\"' || ch === '`');\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { SingleCursorState } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nexport class ColumnSelection {\n    static columnSelect(config, model, fromLineNumber, fromVisibleColumn, toLineNumber, toVisibleColumn) {\n        const lineCount = Math.abs(toLineNumber - fromLineNumber) + 1;\n        const reversed = (fromLineNumber > toLineNumber);\n        const isRTL = (fromVisibleColumn > toVisibleColumn);\n        const isLTR = (fromVisibleColumn < toVisibleColumn);\n        const result = [];\n        // console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);\n        for (let i = 0; i < lineCount; i++) {\n            const lineNumber = fromLineNumber + (reversed ? -i : i);\n            const startColumn = config.columnFromVisibleColumn(model, lineNumber, fromVisibleColumn);\n            const endColumn = config.columnFromVisibleColumn(model, lineNumber, toVisibleColumn);\n            const visibleStartColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, startColumn));\n            const visibleEndColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, endColumn));\n            // console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);\n            if (isLTR) {\n                if (visibleStartColumn > toVisibleColumn) {\n                    continue;\n                }\n                if (visibleEndColumn < fromVisibleColumn) {\n                    continue;\n                }\n            }\n            if (isRTL) {\n                if (visibleEndColumn > fromVisibleColumn) {\n                    continue;\n                }\n                if (visibleStartColumn < toVisibleColumn) {\n                    continue;\n                }\n            }\n            result.push(new SingleCursorState(new Range(lineNumber, startColumn, lineNumber, startColumn), 0 /* SelectionStartKind.Simple */, 0, new Position(lineNumber, endColumn), 0));\n        }\n        if (result.length === 0) {\n            // We are after all the lines, so add cursor at the end of each line\n            for (let i = 0; i < lineCount; i++) {\n                const lineNumber = fromLineNumber + (reversed ? -i : i);\n                const maxColumn = model.getLineMaxColumn(lineNumber);\n                result.push(new SingleCursorState(new Range(lineNumber, maxColumn, lineNumber, maxColumn), 0 /* SelectionStartKind.Simple */, 0, new Position(lineNumber, maxColumn), 0));\n            }\n        }\n        return {\n            viewStates: result,\n            reversed: reversed,\n            fromLineNumber: fromLineNumber,\n            fromVisualColumn: fromVisibleColumn,\n            toLineNumber: toLineNumber,\n            toVisualColumn: toVisibleColumn\n        };\n    }\n    static columnSelectLeft(config, model, prevColumnSelectData) {\n        let toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n        if (toViewVisualColumn > 0) {\n            toViewVisualColumn--;\n        }\n        return ColumnSelection.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n    }\n    static columnSelectRight(config, model, prevColumnSelectData) {\n        let maxVisualViewColumn = 0;\n        const minViewLineNumber = Math.min(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n        const maxViewLineNumber = Math.max(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n        for (let lineNumber = minViewLineNumber; lineNumber <= maxViewLineNumber; lineNumber++) {\n            const lineMaxViewColumn = model.getLineMaxColumn(lineNumber);\n            const lineMaxVisualViewColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, lineMaxViewColumn));\n            maxVisualViewColumn = Math.max(maxVisualViewColumn, lineMaxVisualViewColumn);\n        }\n        let toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n        if (toViewVisualColumn < maxVisualViewColumn) {\n            toViewVisualColumn++;\n        }\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n    }\n    static columnSelectUp(config, model, prevColumnSelectData, isPaged) {\n        const linesCount = isPaged ? config.pageSize : 1;\n        const toViewLineNumber = Math.max(1, prevColumnSelectData.toViewLineNumber - linesCount);\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n    }\n    static columnSelectDown(config, model, prevColumnSelectData, isPaged) {\n        const linesCount = isPaged ? config.pageSize : 1;\n        const toViewLineNumber = Math.min(model.getLineCount(), prevColumnSelectData.toViewLineNumber + linesCount);\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { ReplaceCommand } from '../commands/replaceCommand.js';\nimport { EditOperationResult, isQuote } from '../cursorCommon.js';\nimport { CursorColumns } from '../core/cursorColumns.js';\nimport { MoveOperations } from './cursorMoveOperations.js';\nimport { Range } from '../core/range.js';\nimport { Position } from '../core/position.js';\nexport class DeleteOperations {\n    static deleteRight(prevEditOperationType, config, model, selections) {\n        const commands = [];\n        let shouldPushStackElementBefore = (prevEditOperationType !== 3 /* EditOperationType.DeletingRight */);\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            let deleteSelection = selection;\n            if (deleteSelection.isEmpty()) {\n                const position = selection.getPosition();\n                const rightOfPosition = MoveOperations.right(config, model, position);\n                deleteSelection = new Range(rightOfPosition.lineNumber, rightOfPosition.column, position.lineNumber, position.column);\n            }\n            if (deleteSelection.isEmpty()) {\n                // Probably at end of file => ignore\n                commands[i] = null;\n                continue;\n            }\n            if (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\n                shouldPushStackElementBefore = true;\n            }\n            commands[i] = new ReplaceCommand(deleteSelection, '');\n        }\n        return [shouldPushStackElementBefore, commands];\n    }\n    static isAutoClosingPairDelete(autoClosingDelete, autoClosingBrackets, autoClosingQuotes, autoClosingPairsOpen, model, selections, autoClosedCharacters) {\n        if (autoClosingBrackets === 'never' && autoClosingQuotes === 'never') {\n            return false;\n        }\n        if (autoClosingDelete === 'never') {\n            return false;\n        }\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            const position = selection.getPosition();\n            if (!selection.isEmpty()) {\n                return false;\n            }\n            const lineText = model.getLineContent(position.lineNumber);\n            if (position.column < 2 || position.column >= lineText.length + 1) {\n                return false;\n            }\n            const character = lineText.charAt(position.column - 2);\n            const autoClosingPairCandidates = autoClosingPairsOpen.get(character);\n            if (!autoClosingPairCandidates) {\n                return false;\n            }\n            if (isQuote(character)) {\n                if (autoClosingQuotes === 'never') {\n                    return false;\n                }\n            }\n            else {\n                if (autoClosingBrackets === 'never') {\n                    return false;\n                }\n            }\n            const afterCharacter = lineText.charAt(position.column - 1);\n            let foundAutoClosingPair = false;\n            for (const autoClosingPairCandidate of autoClosingPairCandidates) {\n                if (autoClosingPairCandidate.open === character && autoClosingPairCandidate.close === afterCharacter) {\n                    foundAutoClosingPair = true;\n                }\n            }\n            if (!foundAutoClosingPair) {\n                return false;\n            }\n            // Must delete the pair only if it was automatically inserted by the editor\n            if (autoClosingDelete === 'auto') {\n                let found = false;\n                for (let j = 0, lenJ = autoClosedCharacters.length; j < lenJ; j++) {\n                    const autoClosedCharacter = autoClosedCharacters[j];\n                    if (position.lineNumber === autoClosedCharacter.startLineNumber && position.column === autoClosedCharacter.startColumn) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    static _runAutoClosingPairDelete(config, model, selections) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const position = selections[i].getPosition();\n            const deleteSelection = new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column + 1);\n            commands[i] = new ReplaceCommand(deleteSelection, '');\n        }\n        return [true, commands];\n    }\n    static deleteLeft(prevEditOperationType, config, model, selections, autoClosedCharacters) {\n        if (this.isAutoClosingPairDelete(config.autoClosingDelete, config.autoClosingBrackets, config.autoClosingQuotes, config.autoClosingPairs.autoClosingPairsOpenByEnd, model, selections, autoClosedCharacters)) {\n            return this._runAutoClosingPairDelete(config, model, selections);\n        }\n        const commands = [];\n        let shouldPushStackElementBefore = (prevEditOperationType !== 2 /* EditOperationType.DeletingLeft */);\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const deleteRange = DeleteOperations.getDeleteRange(selections[i], model, config);\n            // Ignore empty delete ranges, as they have no effect\n            // They happen if the cursor is at the beginning of the file.\n            if (deleteRange.isEmpty()) {\n                commands[i] = null;\n                continue;\n            }\n            if (deleteRange.startLineNumber !== deleteRange.endLineNumber) {\n                shouldPushStackElementBefore = true;\n            }\n            commands[i] = new ReplaceCommand(deleteRange, '');\n        }\n        return [shouldPushStackElementBefore, commands];\n    }\n    static getDeleteRange(selection, model, config) {\n        if (!selection.isEmpty()) {\n            return selection;\n        }\n        const position = selection.getPosition();\n        // Unintend when using tab stops and cursor is within indentation\n        if (config.useTabStops && position.column > 1) {\n            const lineContent = model.getLineContent(position.lineNumber);\n            const firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n            const lastIndentationColumn = (firstNonWhitespaceIndex === -1\n                ? /* entire string is whitespace */ lineContent.length + 1\n                : firstNonWhitespaceIndex + 1);\n            if (position.column <= lastIndentationColumn) {\n                const fromVisibleColumn = config.visibleColumnFromColumn(model, position);\n                const toVisibleColumn = CursorColumns.prevIndentTabStop(fromVisibleColumn, config.indentSize);\n                const toColumn = config.columnFromVisibleColumn(model, position.lineNumber, toVisibleColumn);\n                return new Range(position.lineNumber, toColumn, position.lineNumber, position.column);\n            }\n        }\n        return Range.fromPositions(DeleteOperations.getPositionAfterDeleteLeft(position, model), position);\n    }\n    static getPositionAfterDeleteLeft(position, model) {\n        if (position.column > 1) {\n            // Convert 1-based columns to 0-based offsets and back.\n            const idx = strings.getLeftDeleteOffset(position.column - 1, model.getLineContent(position.lineNumber));\n            return position.with(undefined, idx + 1);\n        }\n        else if (position.lineNumber > 1) {\n            const newLine = position.lineNumber - 1;\n            return new Position(newLine, model.getLineMaxColumn(newLine));\n        }\n        else {\n            return position;\n        }\n    }\n    static cut(config, model, selections) {\n        const commands = [];\n        let lastCutRange = null;\n        selections.sort((a, b) => Position.compare(a.getStartPosition(), b.getEndPosition()));\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            if (selection.isEmpty()) {\n                if (config.emptySelectionClipboard) {\n                    // This is a full line cut\n                    const position = selection.getPosition();\n                    let startLineNumber, startColumn, endLineNumber, endColumn;\n                    if (position.lineNumber < model.getLineCount()) {\n                        // Cutting a line in the middle of the model\n                        startLineNumber = position.lineNumber;\n                        startColumn = 1;\n                        endLineNumber = position.lineNumber + 1;\n                        endColumn = 1;\n                    }\n                    else if (position.lineNumber > 1 && (lastCutRange === null || lastCutRange === void 0 ? void 0 : lastCutRange.endLineNumber) !== position.lineNumber) {\n                        // Cutting the last line & there are more than 1 lines in the model & a previous cut operation does not touch the current cut operation\n                        startLineNumber = position.lineNumber - 1;\n                        startColumn = model.getLineMaxColumn(position.lineNumber - 1);\n                        endLineNumber = position.lineNumber;\n                        endColumn = model.getLineMaxColumn(position.lineNumber);\n                    }\n                    else {\n                        // Cutting the single line that the model contains\n                        startLineNumber = position.lineNumber;\n                        startColumn = 1;\n                        endLineNumber = position.lineNumber;\n                        endColumn = model.getLineMaxColumn(position.lineNumber);\n                    }\n                    const deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n                    lastCutRange = deleteSelection;\n                    if (!deleteSelection.isEmpty()) {\n                        commands[i] = new ReplaceCommand(deleteSelection, '');\n                    }\n                    else {\n                        commands[i] = null;\n                    }\n                }\n                else {\n                    // Cannot cut empty selection\n                    commands[i] = null;\n                }\n            }\n            else {\n                commands[i] = new ReplaceCommand(selection, '');\n            }\n        }\n        return new EditOperationResult(0 /* EditOperationType.Other */, commands, {\n            shouldPushStackElementBefore: true,\n            shouldPushStackElementAfter: true\n        });\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Selection } from '../core/selection.js';\nexport class ReplaceCommand {\n    constructor(range, text, insertsAutoWhitespace = false) {\n        this._range = range;\n        this._text = text;\n        this.insertsAutoWhitespace = insertsAutoWhitespace;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text);\n    }\n    computeCursorState(model, helper) {\n        const inverseEditOperations = helper.getInverseEditOperations();\n        const srcRange = inverseEditOperations[0].range;\n        return Selection.fromPositions(srcRange.getEndPosition());\n    }\n}\nexport class ReplaceCommandThatSelectsText {\n    constructor(range, text) {\n        this._range = range;\n        this._text = text;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text);\n    }\n    computeCursorState(model, helper) {\n        const inverseEditOperations = helper.getInverseEditOperations();\n        const srcRange = inverseEditOperations[0].range;\n        return Selection.fromRange(srcRange, 0 /* SelectionDirection.LTR */);\n    }\n}\nexport class ReplaceCommandWithoutChangingPosition {\n    constructor(range, text, insertsAutoWhitespace = false) {\n        this._range = range;\n        this._text = text;\n        this.insertsAutoWhitespace = insertsAutoWhitespace;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text);\n    }\n    computeCursorState(model, helper) {\n        const inverseEditOperations = helper.getInverseEditOperations();\n        const srcRange = inverseEditOperations[0].range;\n        return Selection.fromPositions(srcRange.getStartPosition());\n    }\n}\nexport class ReplaceCommandWithOffsetCursorState {\n    constructor(range, text, lineNumberDeltaOffset, columnDeltaOffset, insertsAutoWhitespace = false) {\n        this._range = range;\n        this._text = text;\n        this._columnDeltaOffset = columnDeltaOffset;\n        this._lineNumberDeltaOffset = lineNumberDeltaOffset;\n        this.insertsAutoWhitespace = insertsAutoWhitespace;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text);\n    }\n    computeCursorState(model, helper) {\n        const inverseEditOperations = helper.getInverseEditOperations();\n        const srcRange = inverseEditOperations[0].range;\n        return Selection.fromPositions(srcRange.getEndPosition().delta(this._lineNumberDeltaOffset, this._columnDeltaOffset));\n    }\n}\nexport class ReplaceCommandThatPreservesSelection {\n    constructor(editRange, text, initialSelection, forceMoveMarkers = false) {\n        this._range = editRange;\n        this._text = text;\n        this._initialSelection = initialSelection;\n        this._forceMoveMarkers = forceMoveMarkers;\n        this._selectionId = null;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text, this._forceMoveMarkers);\n        this._selectionId = builder.trackSelection(this._initialSelection);\n    }\n    computeCursorState(model, helper) {\n        return helper.getTrackedSelection(this._selectionId);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { CursorColumns } from '../core/cursorColumns.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { AtomicTabMoveOperations } from './cursorAtomicMoveOperations.js';\nimport { SingleCursorState } from '../cursorCommon.js';\nexport class CursorPosition {\n    constructor(lineNumber, column, leftoverVisibleColumns) {\n        this._cursorPositionBrand = undefined;\n        this.lineNumber = lineNumber;\n        this.column = column;\n        this.leftoverVisibleColumns = leftoverVisibleColumns;\n    }\n}\nexport class MoveOperations {\n    static leftPosition(model, position) {\n        if (position.column > model.getLineMinColumn(position.lineNumber)) {\n            return position.delta(undefined, -strings.prevCharLength(model.getLineContent(position.lineNumber), position.column - 1));\n        }\n        else if (position.lineNumber > 1) {\n            const newLineNumber = position.lineNumber - 1;\n            return new Position(newLineNumber, model.getLineMaxColumn(newLineNumber));\n        }\n        else {\n            return position;\n        }\n    }\n    static leftPositionAtomicSoftTabs(model, position, tabSize) {\n        if (position.column <= model.getLineIndentColumn(position.lineNumber)) {\n            const minColumn = model.getLineMinColumn(position.lineNumber);\n            const lineContent = model.getLineContent(position.lineNumber);\n            const newPosition = AtomicTabMoveOperations.atomicPosition(lineContent, position.column - 1, tabSize, 0 /* Direction.Left */);\n            if (newPosition !== -1 && newPosition + 1 >= minColumn) {\n                return new Position(position.lineNumber, newPosition + 1);\n            }\n        }\n        return this.leftPosition(model, position);\n    }\n    static left(config, model, position) {\n        const pos = config.stickyTabStops\n            ? MoveOperations.leftPositionAtomicSoftTabs(model, position, config.tabSize)\n            : MoveOperations.leftPosition(model, position);\n        return new CursorPosition(pos.lineNumber, pos.column, 0);\n    }\n    /**\n     * @param noOfColumns Must be either `1`\n     * or `Math.round(viewModel.getLineContent(viewLineNumber).length / 2)` (for half lines).\n    */\n    static moveLeft(config, model, cursor, inSelectionMode, noOfColumns) {\n        let lineNumber, column;\n        if (cursor.hasSelection() && !inSelectionMode) {\n            // If the user has a selection and does not want to extend it,\n            // put the cursor at the beginning of the selection.\n            lineNumber = cursor.selection.startLineNumber;\n            column = cursor.selection.startColumn;\n        }\n        else {\n            // This has no effect if noOfColumns === 1.\n            // It is ok to do so in the half-line scenario.\n            const pos = cursor.position.delta(undefined, -(noOfColumns - 1));\n            // We clip the position before normalization, as normalization is not defined\n            // for possibly negative columns.\n            const normalizedPos = model.normalizePosition(MoveOperations.clipPositionColumn(pos, model), 0 /* PositionAffinity.Left */);\n            const p = MoveOperations.left(config, model, normalizedPos);\n            lineNumber = p.lineNumber;\n            column = p.column;\n        }\n        return cursor.move(inSelectionMode, lineNumber, column, 0);\n    }\n    /**\n     * Adjusts the column so that it is within min/max of the line.\n    */\n    static clipPositionColumn(position, model) {\n        return new Position(position.lineNumber, MoveOperations.clipRange(position.column, model.getLineMinColumn(position.lineNumber), model.getLineMaxColumn(position.lineNumber)));\n    }\n    static clipRange(value, min, max) {\n        if (value < min) {\n            return min;\n        }\n        if (value > max) {\n            return max;\n        }\n        return value;\n    }\n    static rightPosition(model, lineNumber, column) {\n        if (column < model.getLineMaxColumn(lineNumber)) {\n            column = column + strings.nextCharLength(model.getLineContent(lineNumber), column - 1);\n        }\n        else if (lineNumber < model.getLineCount()) {\n            lineNumber = lineNumber + 1;\n            column = model.getLineMinColumn(lineNumber);\n        }\n        return new Position(lineNumber, column);\n    }\n    static rightPositionAtomicSoftTabs(model, lineNumber, column, tabSize, indentSize) {\n        if (column < model.getLineIndentColumn(lineNumber)) {\n            const lineContent = model.getLineContent(lineNumber);\n            const newPosition = AtomicTabMoveOperations.atomicPosition(lineContent, column - 1, tabSize, 1 /* Direction.Right */);\n            if (newPosition !== -1) {\n                return new Position(lineNumber, newPosition + 1);\n            }\n        }\n        return this.rightPosition(model, lineNumber, column);\n    }\n    static right(config, model, position) {\n        const pos = config.stickyTabStops\n            ? MoveOperations.rightPositionAtomicSoftTabs(model, position.lineNumber, position.column, config.tabSize, config.indentSize)\n            : MoveOperations.rightPosition(model, position.lineNumber, position.column);\n        return new CursorPosition(pos.lineNumber, pos.column, 0);\n    }\n    static moveRight(config, model, cursor, inSelectionMode, noOfColumns) {\n        let lineNumber, column;\n        if (cursor.hasSelection() && !inSelectionMode) {\n            // If we are in selection mode, move right without selection cancels selection and puts cursor at the end of the selection\n            lineNumber = cursor.selection.endLineNumber;\n            column = cursor.selection.endColumn;\n        }\n        else {\n            const pos = cursor.position.delta(undefined, noOfColumns - 1);\n            const normalizedPos = model.normalizePosition(MoveOperations.clipPositionColumn(pos, model), 1 /* PositionAffinity.Right */);\n            const r = MoveOperations.right(config, model, normalizedPos);\n            lineNumber = r.lineNumber;\n            column = r.column;\n        }\n        return cursor.move(inSelectionMode, lineNumber, column, 0);\n    }\n    static vertical(config, model, lineNumber, column, leftoverVisibleColumns, newLineNumber, allowMoveOnEdgeLine, normalizationAffinity) {\n        const currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\n        const lineCount = model.getLineCount();\n        const wasOnFirstPosition = (lineNumber === 1 && column === 1);\n        const wasOnLastPosition = (lineNumber === lineCount && column === model.getLineMaxColumn(lineNumber));\n        const wasAtEdgePosition = (newLineNumber < lineNumber ? wasOnFirstPosition : wasOnLastPosition);\n        lineNumber = newLineNumber;\n        if (lineNumber < 1) {\n            lineNumber = 1;\n            if (allowMoveOnEdgeLine) {\n                column = model.getLineMinColumn(lineNumber);\n            }\n            else {\n                column = Math.min(model.getLineMaxColumn(lineNumber), column);\n            }\n        }\n        else if (lineNumber > lineCount) {\n            lineNumber = lineCount;\n            if (allowMoveOnEdgeLine) {\n                column = model.getLineMaxColumn(lineNumber);\n            }\n            else {\n                column = Math.min(model.getLineMaxColumn(lineNumber), column);\n            }\n        }\n        else {\n            column = config.columnFromVisibleColumn(model, lineNumber, currentVisibleColumn);\n        }\n        if (wasAtEdgePosition) {\n            leftoverVisibleColumns = 0;\n        }\n        else {\n            leftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\n        }\n        if (normalizationAffinity !== undefined) {\n            const position = new Position(lineNumber, column);\n            const newPosition = model.normalizePosition(position, normalizationAffinity);\n            leftoverVisibleColumns = leftoverVisibleColumns + (column - newPosition.column);\n            lineNumber = newPosition.lineNumber;\n            column = newPosition.column;\n        }\n        return new CursorPosition(lineNumber, column, leftoverVisibleColumns);\n    }\n    static down(config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnLastLine) {\n        return this.vertical(config, model, lineNumber, column, leftoverVisibleColumns, lineNumber + count, allowMoveOnLastLine, 4 /* PositionAffinity.RightOfInjectedText */);\n    }\n    static moveDown(config, model, cursor, inSelectionMode, linesCount) {\n        let lineNumber, column;\n        if (cursor.hasSelection() && !inSelectionMode) {\n            // If we are in selection mode, move down acts relative to the end of selection\n            lineNumber = cursor.selection.endLineNumber;\n            column = cursor.selection.endColumn;\n        }\n        else {\n            lineNumber = cursor.position.lineNumber;\n            column = cursor.position.column;\n        }\n        let i = 0;\n        let r;\n        do {\n            r = MoveOperations.down(config, model, lineNumber + i, column, cursor.leftoverVisibleColumns, linesCount, true);\n            const np = model.normalizePosition(new Position(r.lineNumber, r.column), 2 /* PositionAffinity.None */);\n            if (np.lineNumber > lineNumber) {\n                break;\n            }\n        } while (i++ < 10 && lineNumber + i < model.getLineCount());\n        return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n    }\n    static translateDown(config, model, cursor) {\n        const selection = cursor.selection;\n        const selectionStart = MoveOperations.down(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n        const position = MoveOperations.down(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n        return new SingleCursorState(new Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), 0 /* SelectionStartKind.Simple */, selectionStart.leftoverVisibleColumns, new Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\n    }\n    static up(config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnFirstLine) {\n        return this.vertical(config, model, lineNumber, column, leftoverVisibleColumns, lineNumber - count, allowMoveOnFirstLine, 3 /* PositionAffinity.LeftOfInjectedText */);\n    }\n    static moveUp(config, model, cursor, inSelectionMode, linesCount) {\n        let lineNumber, column;\n        if (cursor.hasSelection() && !inSelectionMode) {\n            // If we are in selection mode, move up acts relative to the beginning of selection\n            lineNumber = cursor.selection.startLineNumber;\n            column = cursor.selection.startColumn;\n        }\n        else {\n            lineNumber = cursor.position.lineNumber;\n            column = cursor.position.column;\n        }\n        const r = MoveOperations.up(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\n        return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n    }\n    static translateUp(config, model, cursor) {\n        const selection = cursor.selection;\n        const selectionStart = MoveOperations.up(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n        const position = MoveOperations.up(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n        return new SingleCursorState(new Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), 0 /* SelectionStartKind.Simple */, selectionStart.leftoverVisibleColumns, new Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\n    }\n    static _isBlankLine(model, lineNumber) {\n        if (model.getLineFirstNonWhitespaceColumn(lineNumber) === 0) {\n            // empty or contains only whitespace\n            return true;\n        }\n        return false;\n    }\n    static moveToPrevBlankLine(config, model, cursor, inSelectionMode) {\n        let lineNumber = cursor.position.lineNumber;\n        // If our current line is blank, move to the previous non-blank line\n        while (lineNumber > 1 && this._isBlankLine(model, lineNumber)) {\n            lineNumber--;\n        }\n        // Find the previous blank line\n        while (lineNumber > 1 && !this._isBlankLine(model, lineNumber)) {\n            lineNumber--;\n        }\n        return cursor.move(inSelectionMode, lineNumber, model.getLineMinColumn(lineNumber), 0);\n    }\n    static moveToNextBlankLine(config, model, cursor, inSelectionMode) {\n        const lineCount = model.getLineCount();\n        let lineNumber = cursor.position.lineNumber;\n        // If our current line is blank, move to the next non-blank line\n        while (lineNumber < lineCount && this._isBlankLine(model, lineNumber)) {\n            lineNumber++;\n        }\n        // Find the next blank line\n        while (lineNumber < lineCount && !this._isBlankLine(model, lineNumber)) {\n            lineNumber++;\n        }\n        return cursor.move(inSelectionMode, lineNumber, model.getLineMinColumn(lineNumber), 0);\n    }\n    static moveToBeginningOfLine(config, model, cursor, inSelectionMode) {\n        const lineNumber = cursor.position.lineNumber;\n        const minColumn = model.getLineMinColumn(lineNumber);\n        const firstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(lineNumber) || minColumn;\n        let column;\n        const relevantColumnNumber = cursor.position.column;\n        if (relevantColumnNumber === firstNonBlankColumn) {\n            column = minColumn;\n        }\n        else {\n            column = firstNonBlankColumn;\n        }\n        return cursor.move(inSelectionMode, lineNumber, column, 0);\n    }\n    static moveToEndOfLine(config, model, cursor, inSelectionMode, sticky) {\n        const lineNumber = cursor.position.lineNumber;\n        const maxColumn = model.getLineMaxColumn(lineNumber);\n        return cursor.move(inSelectionMode, lineNumber, maxColumn, sticky ? 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */ - maxColumn : 0);\n    }\n    static moveToBeginningOfBuffer(config, model, cursor, inSelectionMode) {\n        return cursor.move(inSelectionMode, 1, 1, 0);\n    }\n    static moveToEndOfBuffer(config, model, cursor, inSelectionMode) {\n        const lastLineNumber = model.getLineCount();\n        const lastColumn = model.getLineMaxColumn(lastLineNumber);\n        return cursor.move(inSelectionMode, lastLineNumber, lastColumn, 0);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as types from '../../../base/common/types.js';\nimport { CursorState, SingleCursorState } from '../cursorCommon.js';\nimport { MoveOperations } from './cursorMoveOperations.js';\nimport { WordOperations } from './cursorWordOperations.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nexport class CursorMoveCommands {\n    static addCursorDown(viewModel, cursors, useLogicalLine) {\n        const result = [];\n        let resultLen = 0;\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n            if (useLogicalLine) {\n                result[resultLen++] = CursorState.fromModelState(MoveOperations.translateDown(viewModel.cursorConfig, viewModel.model, cursor.modelState));\n            }\n            else {\n                result[resultLen++] = CursorState.fromViewState(MoveOperations.translateDown(viewModel.cursorConfig, viewModel, cursor.viewState));\n            }\n        }\n        return result;\n    }\n    static addCursorUp(viewModel, cursors, useLogicalLine) {\n        const result = [];\n        let resultLen = 0;\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n            if (useLogicalLine) {\n                result[resultLen++] = CursorState.fromModelState(MoveOperations.translateUp(viewModel.cursorConfig, viewModel.model, cursor.modelState));\n            }\n            else {\n                result[resultLen++] = CursorState.fromViewState(MoveOperations.translateUp(viewModel.cursorConfig, viewModel, cursor.viewState));\n            }\n        }\n        return result;\n    }\n    static moveToBeginningOfLine(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = this._moveToLineStart(viewModel, cursor, inSelectionMode);\n        }\n        return result;\n    }\n    static _moveToLineStart(viewModel, cursor, inSelectionMode) {\n        const currentViewStateColumn = cursor.viewState.position.column;\n        const currentModelStateColumn = cursor.modelState.position.column;\n        const isFirstLineOfWrappedLine = currentViewStateColumn === currentModelStateColumn;\n        const currentViewStatelineNumber = cursor.viewState.position.lineNumber;\n        const firstNonBlankColumn = viewModel.getLineFirstNonWhitespaceColumn(currentViewStatelineNumber);\n        const isBeginningOfViewLine = currentViewStateColumn === firstNonBlankColumn;\n        if (!isFirstLineOfWrappedLine && !isBeginningOfViewLine) {\n            return this._moveToLineStartByView(viewModel, cursor, inSelectionMode);\n        }\n        else {\n            return this._moveToLineStartByModel(viewModel, cursor, inSelectionMode);\n        }\n    }\n    static _moveToLineStartByView(viewModel, cursor, inSelectionMode) {\n        return CursorState.fromViewState(MoveOperations.moveToBeginningOfLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode));\n    }\n    static _moveToLineStartByModel(viewModel, cursor, inSelectionMode) {\n        return CursorState.fromModelState(MoveOperations.moveToBeginningOfLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n    }\n    static moveToEndOfLine(viewModel, cursors, inSelectionMode, sticky) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = this._moveToLineEnd(viewModel, cursor, inSelectionMode, sticky);\n        }\n        return result;\n    }\n    static _moveToLineEnd(viewModel, cursor, inSelectionMode, sticky) {\n        const viewStatePosition = cursor.viewState.position;\n        const viewModelMaxColumn = viewModel.getLineMaxColumn(viewStatePosition.lineNumber);\n        const isEndOfViewLine = viewStatePosition.column === viewModelMaxColumn;\n        const modelStatePosition = cursor.modelState.position;\n        const modelMaxColumn = viewModel.model.getLineMaxColumn(modelStatePosition.lineNumber);\n        const isEndLineOfWrappedLine = viewModelMaxColumn - viewStatePosition.column === modelMaxColumn - modelStatePosition.column;\n        if (isEndOfViewLine || isEndLineOfWrappedLine) {\n            return this._moveToLineEndByModel(viewModel, cursor, inSelectionMode, sticky);\n        }\n        else {\n            return this._moveToLineEndByView(viewModel, cursor, inSelectionMode, sticky);\n        }\n    }\n    static _moveToLineEndByView(viewModel, cursor, inSelectionMode, sticky) {\n        return CursorState.fromViewState(MoveOperations.moveToEndOfLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, sticky));\n    }\n    static _moveToLineEndByModel(viewModel, cursor, inSelectionMode, sticky) {\n        return CursorState.fromModelState(MoveOperations.moveToEndOfLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, sticky));\n    }\n    static expandLineSelection(viewModel, cursors) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const startLineNumber = cursor.modelState.selection.startLineNumber;\n            const lineCount = viewModel.model.getLineCount();\n            let endLineNumber = cursor.modelState.selection.endLineNumber;\n            let endColumn;\n            if (endLineNumber === lineCount) {\n                endColumn = viewModel.model.getLineMaxColumn(lineCount);\n            }\n            else {\n                endLineNumber++;\n                endColumn = 1;\n            }\n            result[i] = CursorState.fromModelState(new SingleCursorState(new Range(startLineNumber, 1, startLineNumber, 1), 0 /* SelectionStartKind.Simple */, 0, new Position(endLineNumber, endColumn), 0));\n        }\n        return result;\n    }\n    static moveToBeginningOfBuffer(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromModelState(MoveOperations.moveToBeginningOfBuffer(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n        }\n        return result;\n    }\n    static moveToEndOfBuffer(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromModelState(MoveOperations.moveToEndOfBuffer(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n        }\n        return result;\n    }\n    static selectAll(viewModel, cursor) {\n        const lineCount = viewModel.model.getLineCount();\n        const maxColumn = viewModel.model.getLineMaxColumn(lineCount);\n        return CursorState.fromModelState(new SingleCursorState(new Range(1, 1, 1, 1), 0 /* SelectionStartKind.Simple */, 0, new Position(lineCount, maxColumn), 0));\n    }\n    static line(viewModel, cursor, inSelectionMode, _position, _viewPosition) {\n        const position = viewModel.model.validatePosition(_position);\n        const viewPosition = (_viewPosition\n            ? viewModel.coordinatesConverter.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position)\n            : viewModel.coordinatesConverter.convertModelPositionToViewPosition(position));\n        if (!inSelectionMode) {\n            // Entering line selection for the first time\n            const lineCount = viewModel.model.getLineCount();\n            let selectToLineNumber = position.lineNumber + 1;\n            let selectToColumn = 1;\n            if (selectToLineNumber > lineCount) {\n                selectToLineNumber = lineCount;\n                selectToColumn = viewModel.model.getLineMaxColumn(selectToLineNumber);\n            }\n            return CursorState.fromModelState(new SingleCursorState(new Range(position.lineNumber, 1, selectToLineNumber, selectToColumn), 2 /* SelectionStartKind.Line */, 0, new Position(selectToLineNumber, selectToColumn), 0));\n        }\n        // Continuing line selection\n        const enteringLineNumber = cursor.modelState.selectionStart.getStartPosition().lineNumber;\n        if (position.lineNumber < enteringLineNumber) {\n            return CursorState.fromViewState(cursor.viewState.move(true, viewPosition.lineNumber, 1, 0));\n        }\n        else if (position.lineNumber > enteringLineNumber) {\n            const lineCount = viewModel.getLineCount();\n            let selectToViewLineNumber = viewPosition.lineNumber + 1;\n            let selectToViewColumn = 1;\n            if (selectToViewLineNumber > lineCount) {\n                selectToViewLineNumber = lineCount;\n                selectToViewColumn = viewModel.getLineMaxColumn(selectToViewLineNumber);\n            }\n            return CursorState.fromViewState(cursor.viewState.move(true, selectToViewLineNumber, selectToViewColumn, 0));\n        }\n        else {\n            const endPositionOfSelectionStart = cursor.modelState.selectionStart.getEndPosition();\n            return CursorState.fromModelState(cursor.modelState.move(true, endPositionOfSelectionStart.lineNumber, endPositionOfSelectionStart.column, 0));\n        }\n    }\n    static word(viewModel, cursor, inSelectionMode, _position) {\n        const position = viewModel.model.validatePosition(_position);\n        return CursorState.fromModelState(WordOperations.word(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, position));\n    }\n    static cancelSelection(viewModel, cursor) {\n        if (!cursor.modelState.hasSelection()) {\n            return new CursorState(cursor.modelState, cursor.viewState);\n        }\n        const lineNumber = cursor.viewState.position.lineNumber;\n        const column = cursor.viewState.position.column;\n        return CursorState.fromViewState(new SingleCursorState(new Range(lineNumber, column, lineNumber, column), 0 /* SelectionStartKind.Simple */, 0, new Position(lineNumber, column), 0));\n    }\n    static moveTo(viewModel, cursor, inSelectionMode, _position, _viewPosition) {\n        if (inSelectionMode) {\n            if (cursor.modelState.selectionStartKind === 1 /* SelectionStartKind.Word */) {\n                return this.word(viewModel, cursor, inSelectionMode, _position);\n            }\n            if (cursor.modelState.selectionStartKind === 2 /* SelectionStartKind.Line */) {\n                return this.line(viewModel, cursor, inSelectionMode, _position, _viewPosition);\n            }\n        }\n        const position = viewModel.model.validatePosition(_position);\n        const viewPosition = (_viewPosition\n            ? viewModel.coordinatesConverter.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position)\n            : viewModel.coordinatesConverter.convertModelPositionToViewPosition(position));\n        return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, viewPosition.lineNumber, viewPosition.column, 0));\n    }\n    static simpleMove(viewModel, cursors, direction, inSelectionMode, value, unit) {\n        switch (direction) {\n            case 0 /* CursorMove.Direction.Left */: {\n                if (unit === 4 /* CursorMove.Unit.HalfLine */) {\n                    // Move left by half the current line length\n                    return this._moveHalfLineLeft(viewModel, cursors, inSelectionMode);\n                }\n                else {\n                    // Move left by `moveParams.value` columns\n                    return this._moveLeft(viewModel, cursors, inSelectionMode, value);\n                }\n            }\n            case 1 /* CursorMove.Direction.Right */: {\n                if (unit === 4 /* CursorMove.Unit.HalfLine */) {\n                    // Move right by half the current line length\n                    return this._moveHalfLineRight(viewModel, cursors, inSelectionMode);\n                }\n                else {\n                    // Move right by `moveParams.value` columns\n                    return this._moveRight(viewModel, cursors, inSelectionMode, value);\n                }\n            }\n            case 2 /* CursorMove.Direction.Up */: {\n                if (unit === 2 /* CursorMove.Unit.WrappedLine */) {\n                    // Move up by view lines\n                    return this._moveUpByViewLines(viewModel, cursors, inSelectionMode, value);\n                }\n                else {\n                    // Move up by model lines\n                    return this._moveUpByModelLines(viewModel, cursors, inSelectionMode, value);\n                }\n            }\n            case 3 /* CursorMove.Direction.Down */: {\n                if (unit === 2 /* CursorMove.Unit.WrappedLine */) {\n                    // Move down by view lines\n                    return this._moveDownByViewLines(viewModel, cursors, inSelectionMode, value);\n                }\n                else {\n                    // Move down by model lines\n                    return this._moveDownByModelLines(viewModel, cursors, inSelectionMode, value);\n                }\n            }\n            case 4 /* CursorMove.Direction.PrevBlankLine */: {\n                if (unit === 2 /* CursorMove.Unit.WrappedLine */) {\n                    return cursors.map(cursor => CursorState.fromViewState(MoveOperations.moveToPrevBlankLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode)));\n                }\n                else {\n                    return cursors.map(cursor => CursorState.fromModelState(MoveOperations.moveToPrevBlankLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode)));\n                }\n            }\n            case 5 /* CursorMove.Direction.NextBlankLine */: {\n                if (unit === 2 /* CursorMove.Unit.WrappedLine */) {\n                    return cursors.map(cursor => CursorState.fromViewState(MoveOperations.moveToNextBlankLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode)));\n                }\n                else {\n                    return cursors.map(cursor => CursorState.fromModelState(MoveOperations.moveToNextBlankLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode)));\n                }\n            }\n            case 6 /* CursorMove.Direction.WrappedLineStart */: {\n                // Move to the beginning of the current view line\n                return this._moveToViewMinColumn(viewModel, cursors, inSelectionMode);\n            }\n            case 7 /* CursorMove.Direction.WrappedLineFirstNonWhitespaceCharacter */: {\n                // Move to the first non-whitespace column of the current view line\n                return this._moveToViewFirstNonWhitespaceColumn(viewModel, cursors, inSelectionMode);\n            }\n            case 8 /* CursorMove.Direction.WrappedLineColumnCenter */: {\n                // Move to the \"center\" of the current view line\n                return this._moveToViewCenterColumn(viewModel, cursors, inSelectionMode);\n            }\n            case 9 /* CursorMove.Direction.WrappedLineEnd */: {\n                // Move to the end of the current view line\n                return this._moveToViewMaxColumn(viewModel, cursors, inSelectionMode);\n            }\n            case 10 /* CursorMove.Direction.WrappedLineLastNonWhitespaceCharacter */: {\n                // Move to the last non-whitespace column of the current view line\n                return this._moveToViewLastNonWhitespaceColumn(viewModel, cursors, inSelectionMode);\n            }\n            default:\n                return null;\n        }\n    }\n    static viewportMove(viewModel, cursors, direction, inSelectionMode, value) {\n        const visibleViewRange = viewModel.getCompletelyVisibleViewRange();\n        const visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n        switch (direction) {\n            case 11 /* CursorMove.Direction.ViewPortTop */: {\n                // Move to the nth line start in the viewport (from the top)\n                const modelLineNumber = this._firstLineNumberInRange(viewModel.model, visibleModelRange, value);\n                const modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n                return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\n            }\n            case 13 /* CursorMove.Direction.ViewPortBottom */: {\n                // Move to the nth line start in the viewport (from the bottom)\n                const modelLineNumber = this._lastLineNumberInRange(viewModel.model, visibleModelRange, value);\n                const modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n                return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\n            }\n            case 12 /* CursorMove.Direction.ViewPortCenter */: {\n                // Move to the line start in the viewport center\n                const modelLineNumber = Math.round((visibleModelRange.startLineNumber + visibleModelRange.endLineNumber) / 2);\n                const modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n                return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\n            }\n            case 14 /* CursorMove.Direction.ViewPortIfOutside */: {\n                // Move to a position inside the viewport\n                const result = [];\n                for (let i = 0, len = cursors.length; i < len; i++) {\n                    const cursor = cursors[i];\n                    result[i] = this.findPositionInViewportIfOutside(viewModel, cursor, visibleViewRange, inSelectionMode);\n                }\n                return result;\n            }\n            default:\n                return null;\n        }\n    }\n    static findPositionInViewportIfOutside(viewModel, cursor, visibleViewRange, inSelectionMode) {\n        const viewLineNumber = cursor.viewState.position.lineNumber;\n        if (visibleViewRange.startLineNumber <= viewLineNumber && viewLineNumber <= visibleViewRange.endLineNumber - 1) {\n            // Nothing to do, cursor is in viewport\n            return new CursorState(cursor.modelState, cursor.viewState);\n        }\n        else {\n            let newViewLineNumber;\n            if (viewLineNumber > visibleViewRange.endLineNumber - 1) {\n                newViewLineNumber = visibleViewRange.endLineNumber - 1;\n            }\n            else if (viewLineNumber < visibleViewRange.startLineNumber) {\n                newViewLineNumber = visibleViewRange.startLineNumber;\n            }\n            else {\n                newViewLineNumber = viewLineNumber;\n            }\n            const position = MoveOperations.vertical(viewModel.cursorConfig, viewModel, viewLineNumber, cursor.viewState.position.column, cursor.viewState.leftoverVisibleColumns, newViewLineNumber, false);\n            return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, position.lineNumber, position.column, position.leftoverVisibleColumns));\n        }\n    }\n    /**\n     * Find the nth line start included in the range (from the start).\n     */\n    static _firstLineNumberInRange(model, range, count) {\n        let startLineNumber = range.startLineNumber;\n        if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n            // Move on to the second line if the first line start is not included in the range\n            startLineNumber++;\n        }\n        return Math.min(range.endLineNumber, startLineNumber + count - 1);\n    }\n    /**\n     * Find the nth line start included in the range (from the end).\n     */\n    static _lastLineNumberInRange(model, range, count) {\n        let startLineNumber = range.startLineNumber;\n        if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n            // Move on to the second line if the first line start is not included in the range\n            startLineNumber++;\n        }\n        return Math.max(startLineNumber, range.endLineNumber - count + 1);\n    }\n    static _moveLeft(viewModel, cursors, inSelectionMode, noOfColumns) {\n        return cursors.map(cursor => CursorState.fromViewState(MoveOperations.moveLeft(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, noOfColumns)));\n    }\n    static _moveHalfLineLeft(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const halfLine = Math.round(viewModel.getLineLength(viewLineNumber) / 2);\n            result[i] = CursorState.fromViewState(MoveOperations.moveLeft(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, halfLine));\n        }\n        return result;\n    }\n    static _moveRight(viewModel, cursors, inSelectionMode, noOfColumns) {\n        return cursors.map(cursor => CursorState.fromViewState(MoveOperations.moveRight(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, noOfColumns)));\n    }\n    static _moveHalfLineRight(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const halfLine = Math.round(viewModel.getLineLength(viewLineNumber) / 2);\n            result[i] = CursorState.fromViewState(MoveOperations.moveRight(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, halfLine));\n        }\n        return result;\n    }\n    static _moveDownByViewLines(viewModel, cursors, inSelectionMode, linesCount) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromViewState(MoveOperations.moveDown(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, linesCount));\n        }\n        return result;\n    }\n    static _moveDownByModelLines(viewModel, cursors, inSelectionMode, linesCount) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromModelState(MoveOperations.moveDown(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, linesCount));\n        }\n        return result;\n    }\n    static _moveUpByViewLines(viewModel, cursors, inSelectionMode, linesCount) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromViewState(MoveOperations.moveUp(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, linesCount));\n        }\n        return result;\n    }\n    static _moveUpByModelLines(viewModel, cursors, inSelectionMode, linesCount) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromModelState(MoveOperations.moveUp(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, linesCount));\n        }\n        return result;\n    }\n    static _moveToViewPosition(viewModel, cursor, inSelectionMode, toViewLineNumber, toViewColumn) {\n        return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, toViewLineNumber, toViewColumn, 0));\n    }\n    static _moveToModelPosition(viewModel, cursor, inSelectionMode, toModelLineNumber, toModelColumn) {\n        return CursorState.fromModelState(cursor.modelState.move(inSelectionMode, toModelLineNumber, toModelColumn, 0));\n    }\n    static _moveToViewMinColumn(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const viewColumn = viewModel.getLineMinColumn(viewLineNumber);\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    }\n    static _moveToViewFirstNonWhitespaceColumn(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const viewColumn = viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    }\n    static _moveToViewCenterColumn(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const viewColumn = Math.round((viewModel.getLineMaxColumn(viewLineNumber) + viewModel.getLineMinColumn(viewLineNumber)) / 2);\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    }\n    static _moveToViewMaxColumn(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const viewColumn = viewModel.getLineMaxColumn(viewLineNumber);\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    }\n    static _moveToViewLastNonWhitespaceColumn(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const viewColumn = viewModel.getLineLastNonWhitespaceColumn(viewLineNumber);\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    }\n}\nexport var CursorMove;\n(function (CursorMove) {\n    const isCursorMoveArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        const cursorMoveArg = arg;\n        if (!types.isString(cursorMoveArg.to)) {\n            return false;\n        }\n        if (!types.isUndefined(cursorMoveArg.select) && !types.isBoolean(cursorMoveArg.select)) {\n            return false;\n        }\n        if (!types.isUndefined(cursorMoveArg.by) && !types.isString(cursorMoveArg.by)) {\n            return false;\n        }\n        if (!types.isUndefined(cursorMoveArg.value) && !types.isNumber(cursorMoveArg.value)) {\n            return false;\n        }\n        return true;\n    };\n    CursorMove.metadata = {\n        description: 'Move cursor to a logical position in the view',\n        args: [\n            {\n                name: 'Cursor move argument object',\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory logical position value providing where to move the cursor.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'left', 'right', 'up', 'down', 'prevBlankLine', 'nextBlankLine',\n\t\t\t\t\t\t'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\n\t\t\t\t\t\t'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'\n\t\t\t\t\t\t'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'character', 'halfLine'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'select': If 'true' makes the selection. Default is 'false'.\n\t\t\t\t`,\n                constraint: isCursorMoveArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['to'],\n                    'properties': {\n                        'to': {\n                            'type': 'string',\n                            'enum': ['left', 'right', 'up', 'down', 'prevBlankLine', 'nextBlankLine', 'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter', 'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter', 'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside']\n                        },\n                        'by': {\n                            'type': 'string',\n                            'enum': ['line', 'wrappedLine', 'character', 'halfLine']\n                        },\n                        'value': {\n                            'type': 'number',\n                            'default': 1\n                        },\n                        'select': {\n                            'type': 'boolean',\n                            'default': false\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Positions in the view for cursor move command.\n     */\n    CursorMove.RawDirection = {\n        Left: 'left',\n        Right: 'right',\n        Up: 'up',\n        Down: 'down',\n        PrevBlankLine: 'prevBlankLine',\n        NextBlankLine: 'nextBlankLine',\n        WrappedLineStart: 'wrappedLineStart',\n        WrappedLineFirstNonWhitespaceCharacter: 'wrappedLineFirstNonWhitespaceCharacter',\n        WrappedLineColumnCenter: 'wrappedLineColumnCenter',\n        WrappedLineEnd: 'wrappedLineEnd',\n        WrappedLineLastNonWhitespaceCharacter: 'wrappedLineLastNonWhitespaceCharacter',\n        ViewPortTop: 'viewPortTop',\n        ViewPortCenter: 'viewPortCenter',\n        ViewPortBottom: 'viewPortBottom',\n        ViewPortIfOutside: 'viewPortIfOutside'\n    };\n    /**\n     * Units for Cursor move 'by' argument\n     */\n    CursorMove.RawUnit = {\n        Line: 'line',\n        WrappedLine: 'wrappedLine',\n        Character: 'character',\n        HalfLine: 'halfLine'\n    };\n    function parse(args) {\n        if (!args.to) {\n            // illegal arguments\n            return null;\n        }\n        let direction;\n        switch (args.to) {\n            case CursorMove.RawDirection.Left:\n                direction = 0 /* Direction.Left */;\n                break;\n            case CursorMove.RawDirection.Right:\n                direction = 1 /* Direction.Right */;\n                break;\n            case CursorMove.RawDirection.Up:\n                direction = 2 /* Direction.Up */;\n                break;\n            case CursorMove.RawDirection.Down:\n                direction = 3 /* Direction.Down */;\n                break;\n            case CursorMove.RawDirection.PrevBlankLine:\n                direction = 4 /* Direction.PrevBlankLine */;\n                break;\n            case CursorMove.RawDirection.NextBlankLine:\n                direction = 5 /* Direction.NextBlankLine */;\n                break;\n            case CursorMove.RawDirection.WrappedLineStart:\n                direction = 6 /* Direction.WrappedLineStart */;\n                break;\n            case CursorMove.RawDirection.WrappedLineFirstNonWhitespaceCharacter:\n                direction = 7 /* Direction.WrappedLineFirstNonWhitespaceCharacter */;\n                break;\n            case CursorMove.RawDirection.WrappedLineColumnCenter:\n                direction = 8 /* Direction.WrappedLineColumnCenter */;\n                break;\n            case CursorMove.RawDirection.WrappedLineEnd:\n                direction = 9 /* Direction.WrappedLineEnd */;\n                break;\n            case CursorMove.RawDirection.WrappedLineLastNonWhitespaceCharacter:\n                direction = 10 /* Direction.WrappedLineLastNonWhitespaceCharacter */;\n                break;\n            case CursorMove.RawDirection.ViewPortTop:\n                direction = 11 /* Direction.ViewPortTop */;\n                break;\n            case CursorMove.RawDirection.ViewPortBottom:\n                direction = 13 /* Direction.ViewPortBottom */;\n                break;\n            case CursorMove.RawDirection.ViewPortCenter:\n                direction = 12 /* Direction.ViewPortCenter */;\n                break;\n            case CursorMove.RawDirection.ViewPortIfOutside:\n                direction = 14 /* Direction.ViewPortIfOutside */;\n                break;\n            default:\n                // illegal arguments\n                return null;\n        }\n        let unit = 0 /* Unit.None */;\n        switch (args.by) {\n            case CursorMove.RawUnit.Line:\n                unit = 1 /* Unit.Line */;\n                break;\n            case CursorMove.RawUnit.WrappedLine:\n                unit = 2 /* Unit.WrappedLine */;\n                break;\n            case CursorMove.RawUnit.Character:\n                unit = 3 /* Unit.Character */;\n                break;\n            case CursorMove.RawUnit.HalfLine:\n                unit = 4 /* Unit.HalfLine */;\n                break;\n        }\n        return {\n            direction: direction,\n            unit: unit,\n            select: (!!args.select),\n            value: (args.value || 1)\n        };\n    }\n    CursorMove.parse = parse;\n})(CursorMove || (CursorMove = {}));\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { SingleCursorState } from '../cursorCommon.js';\nimport { DeleteOperations } from './cursorDeleteOperations.js';\nimport { getMapForWordSeparators } from '../core/wordCharacterClassifier.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nexport class WordOperations {\n    static _createWord(lineContent, wordType, nextCharClass, start, end) {\n        // console.log('WORD ==> ' + start + ' => ' + end + ':::: <<<' + lineContent.substring(start, end) + '>>>');\n        return { start: start, end: end, wordType: wordType, nextCharClass: nextCharClass };\n    }\n    static _findPreviousWordOnLine(wordSeparators, model, position) {\n        const lineContent = model.getLineContent(position.lineNumber);\n        return this._doFindPreviousWordOnLine(lineContent, wordSeparators, position);\n    }\n    static _doFindPreviousWordOnLine(lineContent, wordSeparators, position) {\n        let wordType = 0 /* WordType.None */;\n        for (let chIndex = position.column - 2; chIndex >= 0; chIndex--) {\n            const chCode = lineContent.charCodeAt(chIndex);\n            const chClass = wordSeparators.get(chCode);\n            if (chClass === 0 /* WordCharacterClass.Regular */) {\n                if (wordType === 2 /* WordType.Separator */) {\n                    return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\n                }\n                wordType = 1 /* WordType.Regular */;\n            }\n            else if (chClass === 2 /* WordCharacterClass.WordSeparator */) {\n                if (wordType === 1 /* WordType.Regular */) {\n                    return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\n                }\n                wordType = 2 /* WordType.Separator */;\n            }\n            else if (chClass === 1 /* WordCharacterClass.Whitespace */) {\n                if (wordType !== 0 /* WordType.None */) {\n                    return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\n                }\n            }\n        }\n        if (wordType !== 0 /* WordType.None */) {\n            return this._createWord(lineContent, wordType, 1 /* WordCharacterClass.Whitespace */, 0, this._findEndOfWord(lineContent, wordSeparators, wordType, 0));\n        }\n        return null;\n    }\n    static _findEndOfWord(lineContent, wordSeparators, wordType, startIndex) {\n        const len = lineContent.length;\n        for (let chIndex = startIndex; chIndex < len; chIndex++) {\n            const chCode = lineContent.charCodeAt(chIndex);\n            const chClass = wordSeparators.get(chCode);\n            if (chClass === 1 /* WordCharacterClass.Whitespace */) {\n                return chIndex;\n            }\n            if (wordType === 1 /* WordType.Regular */ && chClass === 2 /* WordCharacterClass.WordSeparator */) {\n                return chIndex;\n            }\n            if (wordType === 2 /* WordType.Separator */ && chClass === 0 /* WordCharacterClass.Regular */) {\n                return chIndex;\n            }\n        }\n        return len;\n    }\n    static _findNextWordOnLine(wordSeparators, model, position) {\n        const lineContent = model.getLineContent(position.lineNumber);\n        return this._doFindNextWordOnLine(lineContent, wordSeparators, position);\n    }\n    static _doFindNextWordOnLine(lineContent, wordSeparators, position) {\n        let wordType = 0 /* WordType.None */;\n        const len = lineContent.length;\n        for (let chIndex = position.column - 1; chIndex < len; chIndex++) {\n            const chCode = lineContent.charCodeAt(chIndex);\n            const chClass = wordSeparators.get(chCode);\n            if (chClass === 0 /* WordCharacterClass.Regular */) {\n                if (wordType === 2 /* WordType.Separator */) {\n                    return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\n                }\n                wordType = 1 /* WordType.Regular */;\n            }\n            else if (chClass === 2 /* WordCharacterClass.WordSeparator */) {\n                if (wordType === 1 /* WordType.Regular */) {\n                    return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\n                }\n                wordType = 2 /* WordType.Separator */;\n            }\n            else if (chClass === 1 /* WordCharacterClass.Whitespace */) {\n                if (wordType !== 0 /* WordType.None */) {\n                    return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\n                }\n            }\n        }\n        if (wordType !== 0 /* WordType.None */) {\n            return this._createWord(lineContent, wordType, 1 /* WordCharacterClass.Whitespace */, this._findStartOfWord(lineContent, wordSeparators, wordType, len - 1), len);\n        }\n        return null;\n    }\n    static _findStartOfWord(lineContent, wordSeparators, wordType, startIndex) {\n        for (let chIndex = startIndex; chIndex >= 0; chIndex--) {\n            const chCode = lineContent.charCodeAt(chIndex);\n            const chClass = wordSeparators.get(chCode);\n            if (chClass === 1 /* WordCharacterClass.Whitespace */) {\n                return chIndex + 1;\n            }\n            if (wordType === 1 /* WordType.Regular */ && chClass === 2 /* WordCharacterClass.WordSeparator */) {\n                return chIndex + 1;\n            }\n            if (wordType === 2 /* WordType.Separator */ && chClass === 0 /* WordCharacterClass.Regular */) {\n                return chIndex + 1;\n            }\n        }\n        return 0;\n    }\n    static moveWordLeft(wordSeparators, model, position, wordNavigationType) {\n        let lineNumber = position.lineNumber;\n        let column = position.column;\n        if (column === 1) {\n            if (lineNumber > 1) {\n                lineNumber = lineNumber - 1;\n                column = model.getLineMaxColumn(lineNumber);\n            }\n        }\n        let prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, column));\n        if (wordNavigationType === 0 /* WordNavigationType.WordStart */) {\n            return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\n        }\n        if (wordNavigationType === 1 /* WordNavigationType.WordStartFast */) {\n            if (prevWordOnLine\n                && prevWordOnLine.wordType === 2 /* WordType.Separator */\n                && prevWordOnLine.end - prevWordOnLine.start === 1\n                && prevWordOnLine.nextCharClass === 0 /* WordCharacterClass.Regular */) {\n                // Skip over a word made up of one single separator and followed by a regular character\n                prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\n            }\n            return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\n        }\n        if (wordNavigationType === 3 /* WordNavigationType.WordAccessibility */) {\n            while (prevWordOnLine\n                && prevWordOnLine.wordType === 2 /* WordType.Separator */) {\n                // Skip over words made up of only separators\n                prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\n            }\n            return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\n        }\n        // We are stopping at the ending of words\n        if (prevWordOnLine && column <= prevWordOnLine.end + 1) {\n            prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\n        }\n        return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.end + 1 : 1);\n    }\n    static _moveWordPartLeft(model, position) {\n        const lineNumber = position.lineNumber;\n        const maxColumn = model.getLineMaxColumn(lineNumber);\n        if (position.column === 1) {\n            return (lineNumber > 1 ? new Position(lineNumber - 1, model.getLineMaxColumn(lineNumber - 1)) : position);\n        }\n        const lineContent = model.getLineContent(lineNumber);\n        for (let column = position.column - 1; column > 1; column--) {\n            const left = lineContent.charCodeAt(column - 2);\n            const right = lineContent.charCodeAt(column - 1);\n            if (left === 95 /* CharCode.Underline */ && right !== 95 /* CharCode.Underline */) {\n                // snake_case_variables\n                return new Position(lineNumber, column);\n            }\n            if (left === 45 /* CharCode.Dash */ && right !== 45 /* CharCode.Dash */) {\n                // kebab-case-variables\n                return new Position(lineNumber, column);\n            }\n            if ((strings.isLowerAsciiLetter(left) || strings.isAsciiDigit(left)) && strings.isUpperAsciiLetter(right)) {\n                // camelCaseVariables\n                return new Position(lineNumber, column);\n            }\n            if (strings.isUpperAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\n                // thisIsACamelCaseWithOneLetterWords\n                if (column + 1 < maxColumn) {\n                    const rightRight = lineContent.charCodeAt(column);\n                    if (strings.isLowerAsciiLetter(rightRight) || strings.isAsciiDigit(rightRight)) {\n                        return new Position(lineNumber, column);\n                    }\n                }\n            }\n        }\n        return new Position(lineNumber, 1);\n    }\n    static moveWordRight(wordSeparators, model, position, wordNavigationType) {\n        let lineNumber = position.lineNumber;\n        let column = position.column;\n        let movedDown = false;\n        if (column === model.getLineMaxColumn(lineNumber)) {\n            if (lineNumber < model.getLineCount()) {\n                movedDown = true;\n                lineNumber = lineNumber + 1;\n                column = 1;\n            }\n        }\n        let nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, column));\n        if (wordNavigationType === 2 /* WordNavigationType.WordEnd */) {\n            if (nextWordOnLine && nextWordOnLine.wordType === 2 /* WordType.Separator */) {\n                if (nextWordOnLine.end - nextWordOnLine.start === 1 && nextWordOnLine.nextCharClass === 0 /* WordCharacterClass.Regular */) {\n                    // Skip over a word made up of one single separator and followed by a regular character\n                    nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\n                }\n            }\n            if (nextWordOnLine) {\n                column = nextWordOnLine.end + 1;\n            }\n            else {\n                column = model.getLineMaxColumn(lineNumber);\n            }\n        }\n        else if (wordNavigationType === 3 /* WordNavigationType.WordAccessibility */) {\n            if (movedDown) {\n                // If we move to the next line, pretend that the cursor is right before the first character.\n                // This is needed when the first word starts right at the first character - and in order not to miss it,\n                // we need to start before.\n                column = 0;\n            }\n            while (nextWordOnLine\n                && (nextWordOnLine.wordType === 2 /* WordType.Separator */\n                    || nextWordOnLine.start + 1 <= column)) {\n                // Skip over a word made up of one single separator\n                // Also skip over word if it begins before current cursor position to ascertain we're moving forward at least 1 character.\n                nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\n            }\n            if (nextWordOnLine) {\n                column = nextWordOnLine.start + 1;\n            }\n            else {\n                column = model.getLineMaxColumn(lineNumber);\n            }\n        }\n        else {\n            if (nextWordOnLine && !movedDown && column >= nextWordOnLine.start + 1) {\n                nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\n            }\n            if (nextWordOnLine) {\n                column = nextWordOnLine.start + 1;\n            }\n            else {\n                column = model.getLineMaxColumn(lineNumber);\n            }\n        }\n        return new Position(lineNumber, column);\n    }\n    static _moveWordPartRight(model, position) {\n        const lineNumber = position.lineNumber;\n        const maxColumn = model.getLineMaxColumn(lineNumber);\n        if (position.column === maxColumn) {\n            return (lineNumber < model.getLineCount() ? new Position(lineNumber + 1, 1) : position);\n        }\n        const lineContent = model.getLineContent(lineNumber);\n        for (let column = position.column + 1; column < maxColumn; column++) {\n            const left = lineContent.charCodeAt(column - 2);\n            const right = lineContent.charCodeAt(column - 1);\n            if (left !== 95 /* CharCode.Underline */ && right === 95 /* CharCode.Underline */) {\n                // snake_case_variables\n                return new Position(lineNumber, column);\n            }\n            if (left !== 45 /* CharCode.Dash */ && right === 45 /* CharCode.Dash */) {\n                // kebab-case-variables\n                return new Position(lineNumber, column);\n            }\n            if ((strings.isLowerAsciiLetter(left) || strings.isAsciiDigit(left)) && strings.isUpperAsciiLetter(right)) {\n                // camelCaseVariables\n                return new Position(lineNumber, column);\n            }\n            if (strings.isUpperAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\n                // thisIsACamelCaseWithOneLetterWords\n                if (column + 1 < maxColumn) {\n                    const rightRight = lineContent.charCodeAt(column);\n                    if (strings.isLowerAsciiLetter(rightRight) || strings.isAsciiDigit(rightRight)) {\n                        return new Position(lineNumber, column);\n                    }\n                }\n            }\n        }\n        return new Position(lineNumber, maxColumn);\n    }\n    static _deleteWordLeftWhitespace(model, position) {\n        const lineContent = model.getLineContent(position.lineNumber);\n        const startIndex = position.column - 2;\n        const lastNonWhitespace = strings.lastNonWhitespaceIndex(lineContent, startIndex);\n        if (lastNonWhitespace + 1 < startIndex) {\n            return new Range(position.lineNumber, lastNonWhitespace + 2, position.lineNumber, position.column);\n        }\n        return null;\n    }\n    static deleteWordLeft(ctx, wordNavigationType) {\n        const wordSeparators = ctx.wordSeparators;\n        const model = ctx.model;\n        const selection = ctx.selection;\n        const whitespaceHeuristics = ctx.whitespaceHeuristics;\n        if (!selection.isEmpty()) {\n            return selection;\n        }\n        if (DeleteOperations.isAutoClosingPairDelete(ctx.autoClosingDelete, ctx.autoClosingBrackets, ctx.autoClosingQuotes, ctx.autoClosingPairs.autoClosingPairsOpenByEnd, ctx.model, [ctx.selection], ctx.autoClosedCharacters)) {\n            const position = ctx.selection.getPosition();\n            return new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column + 1);\n        }\n        const position = new Position(selection.positionLineNumber, selection.positionColumn);\n        let lineNumber = position.lineNumber;\n        let column = position.column;\n        if (lineNumber === 1 && column === 1) {\n            // Ignore deleting at beginning of file\n            return null;\n        }\n        if (whitespaceHeuristics) {\n            const r = this._deleteWordLeftWhitespace(model, position);\n            if (r) {\n                return r;\n            }\n        }\n        let prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, position);\n        if (wordNavigationType === 0 /* WordNavigationType.WordStart */) {\n            if (prevWordOnLine) {\n                column = prevWordOnLine.start + 1;\n            }\n            else {\n                if (column > 1) {\n                    column = 1;\n                }\n                else {\n                    lineNumber--;\n                    column = model.getLineMaxColumn(lineNumber);\n                }\n            }\n        }\n        else {\n            if (prevWordOnLine && column <= prevWordOnLine.end + 1) {\n                prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\n            }\n            if (prevWordOnLine) {\n                column = prevWordOnLine.end + 1;\n            }\n            else {\n                if (column > 1) {\n                    column = 1;\n                }\n                else {\n                    lineNumber--;\n                    column = model.getLineMaxColumn(lineNumber);\n                }\n            }\n        }\n        return new Range(lineNumber, column, position.lineNumber, position.column);\n    }\n    static deleteInsideWord(wordSeparators, model, selection) {\n        if (!selection.isEmpty()) {\n            return selection;\n        }\n        const position = new Position(selection.positionLineNumber, selection.positionColumn);\n        const r = this._deleteInsideWordWhitespace(model, position);\n        if (r) {\n            return r;\n        }\n        return this._deleteInsideWordDetermineDeleteRange(wordSeparators, model, position);\n    }\n    static _charAtIsWhitespace(str, index) {\n        const charCode = str.charCodeAt(index);\n        return (charCode === 32 /* CharCode.Space */ || charCode === 9 /* CharCode.Tab */);\n    }\n    static _deleteInsideWordWhitespace(model, position) {\n        const lineContent = model.getLineContent(position.lineNumber);\n        const lineContentLength = lineContent.length;\n        if (lineContentLength === 0) {\n            // empty line\n            return null;\n        }\n        let leftIndex = Math.max(position.column - 2, 0);\n        if (!this._charAtIsWhitespace(lineContent, leftIndex)) {\n            // touches a non-whitespace character to the left\n            return null;\n        }\n        let rightIndex = Math.min(position.column - 1, lineContentLength - 1);\n        if (!this._charAtIsWhitespace(lineContent, rightIndex)) {\n            // touches a non-whitespace character to the right\n            return null;\n        }\n        // walk over whitespace to the left\n        while (leftIndex > 0 && this._charAtIsWhitespace(lineContent, leftIndex - 1)) {\n            leftIndex--;\n        }\n        // walk over whitespace to the right\n        while (rightIndex + 1 < lineContentLength && this._charAtIsWhitespace(lineContent, rightIndex + 1)) {\n            rightIndex++;\n        }\n        return new Range(position.lineNumber, leftIndex + 1, position.lineNumber, rightIndex + 2);\n    }\n    static _deleteInsideWordDetermineDeleteRange(wordSeparators, model, position) {\n        const lineContent = model.getLineContent(position.lineNumber);\n        const lineLength = lineContent.length;\n        if (lineLength === 0) {\n            // empty line\n            if (position.lineNumber > 1) {\n                return new Range(position.lineNumber - 1, model.getLineMaxColumn(position.lineNumber - 1), position.lineNumber, 1);\n            }\n            else {\n                if (position.lineNumber < model.getLineCount()) {\n                    return new Range(position.lineNumber, 1, position.lineNumber + 1, 1);\n                }\n                else {\n                    // empty model\n                    return new Range(position.lineNumber, 1, position.lineNumber, 1);\n                }\n            }\n        }\n        const touchesWord = (word) => {\n            return (word.start + 1 <= position.column && position.column <= word.end + 1);\n        };\n        const createRangeWithPosition = (startColumn, endColumn) => {\n            startColumn = Math.min(startColumn, position.column);\n            endColumn = Math.max(endColumn, position.column);\n            return new Range(position.lineNumber, startColumn, position.lineNumber, endColumn);\n        };\n        const deleteWordAndAdjacentWhitespace = (word) => {\n            let startColumn = word.start + 1;\n            let endColumn = word.end + 1;\n            let expandedToTheRight = false;\n            while (endColumn - 1 < lineLength && this._charAtIsWhitespace(lineContent, endColumn - 1)) {\n                expandedToTheRight = true;\n                endColumn++;\n            }\n            if (!expandedToTheRight) {\n                while (startColumn > 1 && this._charAtIsWhitespace(lineContent, startColumn - 2)) {\n                    startColumn--;\n                }\n            }\n            return createRangeWithPosition(startColumn, endColumn);\n        };\n        const prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, position);\n        if (prevWordOnLine && touchesWord(prevWordOnLine)) {\n            return deleteWordAndAdjacentWhitespace(prevWordOnLine);\n        }\n        const nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, position);\n        if (nextWordOnLine && touchesWord(nextWordOnLine)) {\n            return deleteWordAndAdjacentWhitespace(nextWordOnLine);\n        }\n        if (prevWordOnLine && nextWordOnLine) {\n            return createRangeWithPosition(prevWordOnLine.end + 1, nextWordOnLine.start + 1);\n        }\n        if (prevWordOnLine) {\n            return createRangeWithPosition(prevWordOnLine.start + 1, prevWordOnLine.end + 1);\n        }\n        if (nextWordOnLine) {\n            return createRangeWithPosition(nextWordOnLine.start + 1, nextWordOnLine.end + 1);\n        }\n        return createRangeWithPosition(1, lineLength + 1);\n    }\n    static _deleteWordPartLeft(model, selection) {\n        if (!selection.isEmpty()) {\n            return selection;\n        }\n        const pos = selection.getPosition();\n        const toPosition = WordOperations._moveWordPartLeft(model, pos);\n        return new Range(pos.lineNumber, pos.column, toPosition.lineNumber, toPosition.column);\n    }\n    static _findFirstNonWhitespaceChar(str, startIndex) {\n        const len = str.length;\n        for (let chIndex = startIndex; chIndex < len; chIndex++) {\n            const ch = str.charAt(chIndex);\n            if (ch !== ' ' && ch !== '\\t') {\n                return chIndex;\n            }\n        }\n        return len;\n    }\n    static _deleteWordRightWhitespace(model, position) {\n        const lineContent = model.getLineContent(position.lineNumber);\n        const startIndex = position.column - 1;\n        const firstNonWhitespace = this._findFirstNonWhitespaceChar(lineContent, startIndex);\n        if (startIndex + 1 < firstNonWhitespace) {\n            // bingo\n            return new Range(position.lineNumber, position.column, position.lineNumber, firstNonWhitespace + 1);\n        }\n        return null;\n    }\n    static deleteWordRight(ctx, wordNavigationType) {\n        const wordSeparators = ctx.wordSeparators;\n        const model = ctx.model;\n        const selection = ctx.selection;\n        const whitespaceHeuristics = ctx.whitespaceHeuristics;\n        if (!selection.isEmpty()) {\n            return selection;\n        }\n        const position = new Position(selection.positionLineNumber, selection.positionColumn);\n        let lineNumber = position.lineNumber;\n        let column = position.column;\n        const lineCount = model.getLineCount();\n        const maxColumn = model.getLineMaxColumn(lineNumber);\n        if (lineNumber === lineCount && column === maxColumn) {\n            // Ignore deleting at end of file\n            return null;\n        }\n        if (whitespaceHeuristics) {\n            const r = this._deleteWordRightWhitespace(model, position);\n            if (r) {\n                return r;\n            }\n        }\n        let nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, position);\n        if (wordNavigationType === 2 /* WordNavigationType.WordEnd */) {\n            if (nextWordOnLine) {\n                column = nextWordOnLine.end + 1;\n            }\n            else {\n                if (column < maxColumn || lineNumber === lineCount) {\n                    column = maxColumn;\n                }\n                else {\n                    lineNumber++;\n                    nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, 1));\n                    if (nextWordOnLine) {\n                        column = nextWordOnLine.start + 1;\n                    }\n                    else {\n                        column = model.getLineMaxColumn(lineNumber);\n                    }\n                }\n            }\n        }\n        else {\n            if (nextWordOnLine && column >= nextWordOnLine.start + 1) {\n                nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\n            }\n            if (nextWordOnLine) {\n                column = nextWordOnLine.start + 1;\n            }\n            else {\n                if (column < maxColumn || lineNumber === lineCount) {\n                    column = maxColumn;\n                }\n                else {\n                    lineNumber++;\n                    nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, 1));\n                    if (nextWordOnLine) {\n                        column = nextWordOnLine.start + 1;\n                    }\n                    else {\n                        column = model.getLineMaxColumn(lineNumber);\n                    }\n                }\n            }\n        }\n        return new Range(lineNumber, column, position.lineNumber, position.column);\n    }\n    static _deleteWordPartRight(model, selection) {\n        if (!selection.isEmpty()) {\n            return selection;\n        }\n        const pos = selection.getPosition();\n        const toPosition = WordOperations._moveWordPartRight(model, pos);\n        return new Range(pos.lineNumber, pos.column, toPosition.lineNumber, toPosition.column);\n    }\n    static _createWordAtPosition(model, lineNumber, word) {\n        const range = new Range(lineNumber, word.start + 1, lineNumber, word.end + 1);\n        return {\n            word: model.getValueInRange(range),\n            startColumn: range.startColumn,\n            endColumn: range.endColumn\n        };\n    }\n    static getWordAtPosition(model, _wordSeparators, position) {\n        const wordSeparators = getMapForWordSeparators(_wordSeparators);\n        const prevWord = WordOperations._findPreviousWordOnLine(wordSeparators, model, position);\n        if (prevWord && prevWord.wordType === 1 /* WordType.Regular */ && prevWord.start <= position.column - 1 && position.column - 1 <= prevWord.end) {\n            return WordOperations._createWordAtPosition(model, position.lineNumber, prevWord);\n        }\n        const nextWord = WordOperations._findNextWordOnLine(wordSeparators, model, position);\n        if (nextWord && nextWord.wordType === 1 /* WordType.Regular */ && nextWord.start <= position.column - 1 && position.column - 1 <= nextWord.end) {\n            return WordOperations._createWordAtPosition(model, position.lineNumber, nextWord);\n        }\n        return null;\n    }\n    static word(config, model, cursor, inSelectionMode, position) {\n        const wordSeparators = getMapForWordSeparators(config.wordSeparators);\n        const prevWord = WordOperations._findPreviousWordOnLine(wordSeparators, model, position);\n        const nextWord = WordOperations._findNextWordOnLine(wordSeparators, model, position);\n        if (!inSelectionMode) {\n            // Entering word selection for the first time\n            let startColumn;\n            let endColumn;\n            if (prevWord && prevWord.wordType === 1 /* WordType.Regular */ && prevWord.start <= position.column - 1 && position.column - 1 <= prevWord.end) {\n                // isTouchingPrevWord\n                startColumn = prevWord.start + 1;\n                endColumn = prevWord.end + 1;\n            }\n            else if (nextWord && nextWord.wordType === 1 /* WordType.Regular */ && nextWord.start <= position.column - 1 && position.column - 1 <= nextWord.end) {\n                // isTouchingNextWord\n                startColumn = nextWord.start + 1;\n                endColumn = nextWord.end + 1;\n            }\n            else {\n                if (prevWord) {\n                    startColumn = prevWord.end + 1;\n                }\n                else {\n                    startColumn = 1;\n                }\n                if (nextWord) {\n                    endColumn = nextWord.start + 1;\n                }\n                else {\n                    endColumn = model.getLineMaxColumn(position.lineNumber);\n                }\n            }\n            return new SingleCursorState(new Range(position.lineNumber, startColumn, position.lineNumber, endColumn), 1 /* SelectionStartKind.Word */, 0, new Position(position.lineNumber, endColumn), 0);\n        }\n        let startColumn;\n        let endColumn;\n        if (prevWord && prevWord.wordType === 1 /* WordType.Regular */ && prevWord.start < position.column - 1 && position.column - 1 < prevWord.end) {\n            // isInsidePrevWord\n            startColumn = prevWord.start + 1;\n            endColumn = prevWord.end + 1;\n        }\n        else if (nextWord && nextWord.wordType === 1 /* WordType.Regular */ && nextWord.start < position.column - 1 && position.column - 1 < nextWord.end) {\n            // isInsideNextWord\n            startColumn = nextWord.start + 1;\n            endColumn = nextWord.end + 1;\n        }\n        else {\n            startColumn = position.column;\n            endColumn = position.column;\n        }\n        const lineNumber = position.lineNumber;\n        let column;\n        if (cursor.selectionStart.containsPosition(position)) {\n            column = cursor.selectionStart.endColumn;\n        }\n        else if (position.isBeforeOrEqual(cursor.selectionStart.getStartPosition())) {\n            column = startColumn;\n            const possiblePosition = new Position(lineNumber, column);\n            if (cursor.selectionStart.containsPosition(possiblePosition)) {\n                column = cursor.selectionStart.endColumn;\n            }\n        }\n        else {\n            column = endColumn;\n            const possiblePosition = new Position(lineNumber, column);\n            if (cursor.selectionStart.containsPosition(possiblePosition)) {\n                column = cursor.selectionStart.startColumn;\n            }\n        }\n        return cursor.move(true, lineNumber, column, 0);\n    }\n}\nexport class WordPartOperations extends WordOperations {\n    static deleteWordPartLeft(ctx) {\n        const candidates = enforceDefined([\n            WordOperations.deleteWordLeft(ctx, 0 /* WordNavigationType.WordStart */),\n            WordOperations.deleteWordLeft(ctx, 2 /* WordNavigationType.WordEnd */),\n            WordOperations._deleteWordPartLeft(ctx.model, ctx.selection)\n        ]);\n        candidates.sort(Range.compareRangesUsingEnds);\n        return candidates[2];\n    }\n    static deleteWordPartRight(ctx) {\n        const candidates = enforceDefined([\n            WordOperations.deleteWordRight(ctx, 0 /* WordNavigationType.WordStart */),\n            WordOperations.deleteWordRight(ctx, 2 /* WordNavigationType.WordEnd */),\n            WordOperations._deleteWordPartRight(ctx.model, ctx.selection)\n        ]);\n        candidates.sort(Range.compareRangesUsingStarts);\n        return candidates[0];\n    }\n    static moveWordPartLeft(wordSeparators, model, position) {\n        const candidates = enforceDefined([\n            WordOperations.moveWordLeft(wordSeparators, model, position, 0 /* WordNavigationType.WordStart */),\n            WordOperations.moveWordLeft(wordSeparators, model, position, 2 /* WordNavigationType.WordEnd */),\n            WordOperations._moveWordPartLeft(model, position)\n        ]);\n        candidates.sort(Position.compare);\n        return candidates[2];\n    }\n    static moveWordPartRight(wordSeparators, model, position) {\n        const candidates = enforceDefined([\n            WordOperations.moveWordRight(wordSeparators, model, position, 0 /* WordNavigationType.WordStart */),\n            WordOperations.moveWordRight(wordSeparators, model, position, 2 /* WordNavigationType.WordEnd */),\n            WordOperations._moveWordPartRight(model, position)\n        ]);\n        candidates.sort(Position.compare);\n        return candidates[0];\n    }\n}\nfunction enforceDefined(arr) {\n    return arr.filter(el => Boolean(el));\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { ReplaceCommand, ReplaceCommandWithOffsetCursorState, ReplaceCommandWithoutChangingPosition, ReplaceCommandThatPreservesSelection } from '../commands/replaceCommand.js';\nimport { ShiftCommand } from '../commands/shiftCommand.js';\nimport { CompositionSurroundSelectionCommand, SurroundSelectionCommand } from '../commands/surroundSelectionCommand.js';\nimport { EditOperationResult, isQuote } from '../cursorCommon.js';\nimport { getMapForWordSeparators } from '../core/wordCharacterClassifier.js';\nimport { Range } from '../core/range.js';\nimport { Position } from '../core/position.js';\nimport { IndentAction } from '../languages/languageConfiguration.js';\nimport { getIndentationAtPosition } from '../languages/languageConfigurationRegistry.js';\nimport { createScopedLineTokens } from '../languages/supports.js';\nimport { getIndentActionForType, getIndentForEnter, getInheritIndentForLine } from '../languages/autoIndent.js';\nimport { getEnterAction } from '../languages/enterAction.js';\nexport class TypeOperations {\n    static indent(config, model, selections) {\n        if (model === null || selections === null) {\n            return [];\n        }\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new ShiftCommand(selections[i], {\n                isUnshift: false,\n                tabSize: config.tabSize,\n                indentSize: config.indentSize,\n                insertSpaces: config.insertSpaces,\n                useTabStops: config.useTabStops,\n                autoIndent: config.autoIndent\n            }, config.languageConfigurationService);\n        }\n        return commands;\n    }\n    static outdent(config, model, selections) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new ShiftCommand(selections[i], {\n                isUnshift: true,\n                tabSize: config.tabSize,\n                indentSize: config.indentSize,\n                insertSpaces: config.insertSpaces,\n                useTabStops: config.useTabStops,\n                autoIndent: config.autoIndent\n            }, config.languageConfigurationService);\n        }\n        return commands;\n    }\n    static shiftIndent(config, indentation, count) {\n        count = count || 1;\n        return ShiftCommand.shiftIndent(indentation, indentation.length + count, config.tabSize, config.indentSize, config.insertSpaces);\n    }\n    static unshiftIndent(config, indentation, count) {\n        count = count || 1;\n        return ShiftCommand.unshiftIndent(indentation, indentation.length + count, config.tabSize, config.indentSize, config.insertSpaces);\n    }\n    static _distributedPaste(config, model, selections, text) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new ReplaceCommand(selections[i], text[i]);\n        }\n        return new EditOperationResult(0 /* EditOperationType.Other */, commands, {\n            shouldPushStackElementBefore: true,\n            shouldPushStackElementAfter: true\n        });\n    }\n    static _simplePaste(config, model, selections, text, pasteOnNewLine) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            const position = selection.getPosition();\n            if (pasteOnNewLine && !selection.isEmpty()) {\n                pasteOnNewLine = false;\n            }\n            if (pasteOnNewLine && text.indexOf('\\n') !== text.length - 1) {\n                pasteOnNewLine = false;\n            }\n            if (pasteOnNewLine) {\n                // Paste entire line at the beginning of line\n                const typeSelection = new Range(position.lineNumber, 1, position.lineNumber, 1);\n                commands[i] = new ReplaceCommandThatPreservesSelection(typeSelection, text, selection, true);\n            }\n            else {\n                commands[i] = new ReplaceCommand(selection, text);\n            }\n        }\n        return new EditOperationResult(0 /* EditOperationType.Other */, commands, {\n            shouldPushStackElementBefore: true,\n            shouldPushStackElementAfter: true\n        });\n    }\n    static _distributePasteToCursors(config, selections, text, pasteOnNewLine, multicursorText) {\n        if (pasteOnNewLine) {\n            return null;\n        }\n        if (selections.length === 1) {\n            return null;\n        }\n        if (multicursorText && multicursorText.length === selections.length) {\n            return multicursorText;\n        }\n        if (config.multiCursorPaste === 'spread') {\n            // Try to spread the pasted text in case the line count matches the cursor count\n            // Remove trailing \\n if present\n            if (text.charCodeAt(text.length - 1) === 10 /* CharCode.LineFeed */) {\n                text = text.substr(0, text.length - 1);\n            }\n            // Remove trailing \\r if present\n            if (text.charCodeAt(text.length - 1) === 13 /* CharCode.CarriageReturn */) {\n                text = text.substr(0, text.length - 1);\n            }\n            const lines = strings.splitLines(text);\n            if (lines.length === selections.length) {\n                return lines;\n            }\n        }\n        return null;\n    }\n    static paste(config, model, selections, text, pasteOnNewLine, multicursorText) {\n        const distributedPaste = this._distributePasteToCursors(config, selections, text, pasteOnNewLine, multicursorText);\n        if (distributedPaste) {\n            selections = selections.sort(Range.compareRangesUsingStarts);\n            return this._distributedPaste(config, model, selections, distributedPaste);\n        }\n        else {\n            return this._simplePaste(config, model, selections, text, pasteOnNewLine);\n        }\n    }\n    static _goodIndentForLine(config, model, lineNumber) {\n        let action = null;\n        let indentation = '';\n        const expectedIndentAction = getInheritIndentForLine(config.autoIndent, model, lineNumber, false, config.languageConfigurationService);\n        if (expectedIndentAction) {\n            action = expectedIndentAction.action;\n            indentation = expectedIndentAction.indentation;\n        }\n        else if (lineNumber > 1) {\n            let lastLineNumber;\n            for (lastLineNumber = lineNumber - 1; lastLineNumber >= 1; lastLineNumber--) {\n                const lineText = model.getLineContent(lastLineNumber);\n                const nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineText);\n                if (nonWhitespaceIdx >= 0) {\n                    break;\n                }\n            }\n            if (lastLineNumber < 1) {\n                // No previous line with content found\n                return null;\n            }\n            const maxColumn = model.getLineMaxColumn(lastLineNumber);\n            const expectedEnterAction = getEnterAction(config.autoIndent, model, new Range(lastLineNumber, maxColumn, lastLineNumber, maxColumn), config.languageConfigurationService);\n            if (expectedEnterAction) {\n                indentation = expectedEnterAction.indentation + expectedEnterAction.appendText;\n            }\n        }\n        if (action) {\n            if (action === IndentAction.Indent) {\n                indentation = TypeOperations.shiftIndent(config, indentation);\n            }\n            if (action === IndentAction.Outdent) {\n                indentation = TypeOperations.unshiftIndent(config, indentation);\n            }\n            indentation = config.normalizeIndentation(indentation);\n        }\n        if (!indentation) {\n            return null;\n        }\n        return indentation;\n    }\n    static _replaceJumpToNextIndent(config, model, selection, insertsAutoWhitespace) {\n        let typeText = '';\n        const position = selection.getStartPosition();\n        if (config.insertSpaces) {\n            const visibleColumnFromColumn = config.visibleColumnFromColumn(model, position);\n            const indentSize = config.indentSize;\n            const spacesCnt = indentSize - (visibleColumnFromColumn % indentSize);\n            for (let i = 0; i < spacesCnt; i++) {\n                typeText += ' ';\n            }\n        }\n        else {\n            typeText = '\\t';\n        }\n        return new ReplaceCommand(selection, typeText, insertsAutoWhitespace);\n    }\n    static tab(config, model, selections) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            if (selection.isEmpty()) {\n                const lineText = model.getLineContent(selection.startLineNumber);\n                if (/^\\s*$/.test(lineText) && model.tokenization.isCheapToTokenize(selection.startLineNumber)) {\n                    let goodIndent = this._goodIndentForLine(config, model, selection.startLineNumber);\n                    goodIndent = goodIndent || '\\t';\n                    const possibleTypeText = config.normalizeIndentation(goodIndent);\n                    if (!lineText.startsWith(possibleTypeText)) {\n                        commands[i] = new ReplaceCommand(new Range(selection.startLineNumber, 1, selection.startLineNumber, lineText.length + 1), possibleTypeText, true);\n                        continue;\n                    }\n                }\n                commands[i] = this._replaceJumpToNextIndent(config, model, selection, true);\n            }\n            else {\n                if (selection.startLineNumber === selection.endLineNumber) {\n                    const lineMaxColumn = model.getLineMaxColumn(selection.startLineNumber);\n                    if (selection.startColumn !== 1 || selection.endColumn !== lineMaxColumn) {\n                        // This is a single line selection that is not the entire line\n                        commands[i] = this._replaceJumpToNextIndent(config, model, selection, false);\n                        continue;\n                    }\n                }\n                commands[i] = new ShiftCommand(selection, {\n                    isUnshift: false,\n                    tabSize: config.tabSize,\n                    indentSize: config.indentSize,\n                    insertSpaces: config.insertSpaces,\n                    useTabStops: config.useTabStops,\n                    autoIndent: config.autoIndent\n                }, config.languageConfigurationService);\n            }\n        }\n        return commands;\n    }\n    static compositionType(prevEditOperationType, config, model, selections, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta) {\n        const commands = selections.map(selection => this._compositionType(model, selection, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta));\n        return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n            shouldPushStackElementBefore: shouldPushStackElementBetween(prevEditOperationType, 4 /* EditOperationType.TypingOther */),\n            shouldPushStackElementAfter: false\n        });\n    }\n    static _compositionType(model, selection, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta) {\n        if (!selection.isEmpty()) {\n            // looks like https://github.com/microsoft/vscode/issues/2773\n            // where a cursor operation occurred before a canceled composition\n            // => ignore composition\n            return null;\n        }\n        const pos = selection.getPosition();\n        const startColumn = Math.max(1, pos.column - replacePrevCharCnt);\n        const endColumn = Math.min(model.getLineMaxColumn(pos.lineNumber), pos.column + replaceNextCharCnt);\n        const range = new Range(pos.lineNumber, startColumn, pos.lineNumber, endColumn);\n        const oldText = model.getValueInRange(range);\n        if (oldText === text && positionDelta === 0) {\n            // => ignore composition that doesn't do anything\n            return null;\n        }\n        return new ReplaceCommandWithOffsetCursorState(range, text, 0, positionDelta);\n    }\n    static _typeCommand(range, text, keepPosition) {\n        if (keepPosition) {\n            return new ReplaceCommandWithoutChangingPosition(range, text, true);\n        }\n        else {\n            return new ReplaceCommand(range, text, true);\n        }\n    }\n    static _enter(config, model, keepPosition, range) {\n        if (config.autoIndent === 0 /* EditorAutoIndentStrategy.None */) {\n            return TypeOperations._typeCommand(range, '\\n', keepPosition);\n        }\n        if (!model.tokenization.isCheapToTokenize(range.getStartPosition().lineNumber) || config.autoIndent === 1 /* EditorAutoIndentStrategy.Keep */) {\n            const lineText = model.getLineContent(range.startLineNumber);\n            const indentation = strings.getLeadingWhitespace(lineText).substring(0, range.startColumn - 1);\n            return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(indentation), keepPosition);\n        }\n        const r = getEnterAction(config.autoIndent, model, range, config.languageConfigurationService);\n        if (r) {\n            if (r.indentAction === IndentAction.None) {\n                // Nothing special\n                return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(r.indentation + r.appendText), keepPosition);\n            }\n            else if (r.indentAction === IndentAction.Indent) {\n                // Indent once\n                return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(r.indentation + r.appendText), keepPosition);\n            }\n            else if (r.indentAction === IndentAction.IndentOutdent) {\n                // Ultra special\n                const normalIndent = config.normalizeIndentation(r.indentation);\n                const increasedIndent = config.normalizeIndentation(r.indentation + r.appendText);\n                const typeText = '\\n' + increasedIndent + '\\n' + normalIndent;\n                if (keepPosition) {\n                    return new ReplaceCommandWithoutChangingPosition(range, typeText, true);\n                }\n                else {\n                    return new ReplaceCommandWithOffsetCursorState(range, typeText, -1, increasedIndent.length - normalIndent.length, true);\n                }\n            }\n            else if (r.indentAction === IndentAction.Outdent) {\n                const actualIndentation = TypeOperations.unshiftIndent(config, r.indentation);\n                return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(actualIndentation + r.appendText), keepPosition);\n            }\n        }\n        const lineText = model.getLineContent(range.startLineNumber);\n        const indentation = strings.getLeadingWhitespace(lineText).substring(0, range.startColumn - 1);\n        if (config.autoIndent >= 4 /* EditorAutoIndentStrategy.Full */) {\n            const ir = getIndentForEnter(config.autoIndent, model, range, {\n                unshiftIndent: (indent) => {\n                    return TypeOperations.unshiftIndent(config, indent);\n                },\n                shiftIndent: (indent) => {\n                    return TypeOperations.shiftIndent(config, indent);\n                },\n                normalizeIndentation: (indent) => {\n                    return config.normalizeIndentation(indent);\n                }\n            }, config.languageConfigurationService);\n            if (ir) {\n                let oldEndViewColumn = config.visibleColumnFromColumn(model, range.getEndPosition());\n                const oldEndColumn = range.endColumn;\n                const newLineContent = model.getLineContent(range.endLineNumber);\n                const firstNonWhitespace = strings.firstNonWhitespaceIndex(newLineContent);\n                if (firstNonWhitespace >= 0) {\n                    range = range.setEndPosition(range.endLineNumber, Math.max(range.endColumn, firstNonWhitespace + 1));\n                }\n                else {\n                    range = range.setEndPosition(range.endLineNumber, model.getLineMaxColumn(range.endLineNumber));\n                }\n                if (keepPosition) {\n                    return new ReplaceCommandWithoutChangingPosition(range, '\\n' + config.normalizeIndentation(ir.afterEnter), true);\n                }\n                else {\n                    let offset = 0;\n                    if (oldEndColumn <= firstNonWhitespace + 1) {\n                        if (!config.insertSpaces) {\n                            oldEndViewColumn = Math.ceil(oldEndViewColumn / config.indentSize);\n                        }\n                        offset = Math.min(oldEndViewColumn + 1 - config.normalizeIndentation(ir.afterEnter).length - 1, 0);\n                    }\n                    return new ReplaceCommandWithOffsetCursorState(range, '\\n' + config.normalizeIndentation(ir.afterEnter), 0, offset, true);\n                }\n            }\n        }\n        return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(indentation), keepPosition);\n    }\n    static _isAutoIndentType(config, model, selections) {\n        if (config.autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n            return false;\n        }\n        for (let i = 0, len = selections.length; i < len; i++) {\n            if (!model.tokenization.isCheapToTokenize(selections[i].getEndPosition().lineNumber)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static _runAutoIndentType(config, model, range, ch) {\n        const currentIndentation = getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\n        const actualIndentation = getIndentActionForType(config.autoIndent, model, range, ch, {\n            shiftIndent: (indentation) => {\n                return TypeOperations.shiftIndent(config, indentation);\n            },\n            unshiftIndent: (indentation) => {\n                return TypeOperations.unshiftIndent(config, indentation);\n            },\n        }, config.languageConfigurationService);\n        if (actualIndentation === null) {\n            return null;\n        }\n        if (actualIndentation !== config.normalizeIndentation(currentIndentation)) {\n            const firstNonWhitespace = model.getLineFirstNonWhitespaceColumn(range.startLineNumber);\n            if (firstNonWhitespace === 0) {\n                return TypeOperations._typeCommand(new Range(range.startLineNumber, 1, range.endLineNumber, range.endColumn), config.normalizeIndentation(actualIndentation) + ch, false);\n            }\n            else {\n                return TypeOperations._typeCommand(new Range(range.startLineNumber, 1, range.endLineNumber, range.endColumn), config.normalizeIndentation(actualIndentation) +\n                    model.getLineContent(range.startLineNumber).substring(firstNonWhitespace - 1, range.startColumn - 1) + ch, false);\n            }\n        }\n        return null;\n    }\n    static _isAutoClosingOvertype(config, model, selections, autoClosedCharacters, ch) {\n        if (config.autoClosingOvertype === 'never') {\n            return false;\n        }\n        if (!config.autoClosingPairs.autoClosingPairsCloseSingleChar.has(ch)) {\n            return false;\n        }\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            if (!selection.isEmpty()) {\n                return false;\n            }\n            const position = selection.getPosition();\n            const lineText = model.getLineContent(position.lineNumber);\n            const afterCharacter = lineText.charAt(position.column - 1);\n            if (afterCharacter !== ch) {\n                return false;\n            }\n            // Do not over-type quotes after a backslash\n            const chIsQuote = isQuote(ch);\n            const beforeCharacter = position.column > 2 ? lineText.charCodeAt(position.column - 2) : 0 /* CharCode.Null */;\n            if (beforeCharacter === 92 /* CharCode.Backslash */ && chIsQuote) {\n                return false;\n            }\n            // Must over-type a closing character typed by the editor\n            if (config.autoClosingOvertype === 'auto') {\n                let found = false;\n                for (let j = 0, lenJ = autoClosedCharacters.length; j < lenJ; j++) {\n                    const autoClosedCharacter = autoClosedCharacters[j];\n                    if (position.lineNumber === autoClosedCharacter.startLineNumber && position.column === autoClosedCharacter.startColumn) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    static _runAutoClosingOvertype(prevEditOperationType, config, model, selections, ch) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            const position = selection.getPosition();\n            const typeSelection = new Range(position.lineNumber, position.column, position.lineNumber, position.column + 1);\n            commands[i] = new ReplaceCommand(typeSelection, ch);\n        }\n        return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n            shouldPushStackElementBefore: shouldPushStackElementBetween(prevEditOperationType, 4 /* EditOperationType.TypingOther */),\n            shouldPushStackElementAfter: false\n        });\n    }\n    static _isBeforeClosingBrace(config, lineAfter) {\n        // If the start of lineAfter can be interpretted as both a starting or ending brace, default to returning false\n        const nextChar = lineAfter.charAt(0);\n        const potentialStartingBraces = config.autoClosingPairs.autoClosingPairsOpenByStart.get(nextChar) || [];\n        const potentialClosingBraces = config.autoClosingPairs.autoClosingPairsCloseByStart.get(nextChar) || [];\n        const isBeforeStartingBrace = potentialStartingBraces.some(x => lineAfter.startsWith(x.open));\n        const isBeforeClosingBrace = potentialClosingBraces.some(x => lineAfter.startsWith(x.close));\n        return !isBeforeStartingBrace && isBeforeClosingBrace;\n    }\n    /**\n     * Determine if typing `ch` at all `positions` in the `model` results in an\n     * auto closing open sequence being typed.\n     *\n     * Auto closing open sequences can consist of multiple characters, which\n     * can lead to ambiguities. In such a case, the longest auto-closing open\n     * sequence is returned.\n     */\n    static _findAutoClosingPairOpen(config, model, positions, ch) {\n        const candidates = config.autoClosingPairs.autoClosingPairsOpenByEnd.get(ch);\n        if (!candidates) {\n            return null;\n        }\n        // Determine which auto-closing pair it is\n        let result = null;\n        for (const candidate of candidates) {\n            if (result === null || candidate.open.length > result.open.length) {\n                let candidateIsMatch = true;\n                for (const position of positions) {\n                    const relevantText = model.getValueInRange(new Range(position.lineNumber, position.column - candidate.open.length + 1, position.lineNumber, position.column));\n                    if (relevantText + ch !== candidate.open) {\n                        candidateIsMatch = false;\n                        break;\n                    }\n                }\n                if (candidateIsMatch) {\n                    result = candidate;\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Find another auto-closing pair that is contained by the one passed in.\n     *\n     * e.g. when having [(,)] and [(*,*)] as auto-closing pairs\n     * this method will find [(,)] as a containment pair for [(*,*)]\n     */\n    static _findContainedAutoClosingPair(config, pair) {\n        if (pair.open.length <= 1) {\n            return null;\n        }\n        const lastChar = pair.close.charAt(pair.close.length - 1);\n        // get candidates with the same last character as close\n        const candidates = config.autoClosingPairs.autoClosingPairsCloseByEnd.get(lastChar) || [];\n        let result = null;\n        for (const candidate of candidates) {\n            if (candidate.open !== pair.open && pair.open.includes(candidate.open) && pair.close.endsWith(candidate.close)) {\n                if (!result || candidate.open.length > result.open.length) {\n                    result = candidate;\n                }\n            }\n        }\n        return result;\n    }\n    static _getAutoClosingPairClose(config, model, selections, ch, chIsAlreadyTyped) {\n        for (const selection of selections) {\n            if (!selection.isEmpty()) {\n                return null;\n            }\n        }\n        // This method is called both when typing (regularly) and when composition ends\n        // This means that we need to work with a text buffer where sometimes `ch` is not\n        // there (it is being typed right now) or with a text buffer where `ch` has already been typed\n        //\n        // In order to avoid adding checks for `chIsAlreadyTyped` in all places, we will work\n        // with two conceptual positions, the position before `ch` and the position after `ch`\n        //\n        const positions = selections.map((s) => {\n            const position = s.getPosition();\n            if (chIsAlreadyTyped) {\n                return { lineNumber: position.lineNumber, beforeColumn: position.column - ch.length, afterColumn: position.column };\n            }\n            else {\n                return { lineNumber: position.lineNumber, beforeColumn: position.column, afterColumn: position.column };\n            }\n        });\n        // Find the longest auto-closing open pair in case of multiple ending in `ch`\n        // e.g. when having [f\",\"] and [\",\"], it picks [f\",\"] if the character before is f\n        const pair = this._findAutoClosingPairOpen(config, model, positions.map(p => new Position(p.lineNumber, p.beforeColumn)), ch);\n        if (!pair) {\n            return null;\n        }\n        let autoCloseConfig;\n        let shouldAutoCloseBefore;\n        const chIsQuote = isQuote(ch);\n        if (chIsQuote) {\n            autoCloseConfig = config.autoClosingQuotes;\n            shouldAutoCloseBefore = config.shouldAutoCloseBefore.quote;\n        }\n        else {\n            const pairIsForComments = config.blockCommentStartToken ? pair.open.includes(config.blockCommentStartToken) : false;\n            if (pairIsForComments) {\n                autoCloseConfig = config.autoClosingComments;\n                shouldAutoCloseBefore = config.shouldAutoCloseBefore.comment;\n            }\n            else {\n                autoCloseConfig = config.autoClosingBrackets;\n                shouldAutoCloseBefore = config.shouldAutoCloseBefore.bracket;\n            }\n        }\n        if (autoCloseConfig === 'never') {\n            return null;\n        }\n        // Sometimes, it is possible to have two auto-closing pairs that have a containment relationship\n        // e.g. when having [(,)] and [(*,*)]\n        // - when typing (, the resulting state is (|)\n        // - when typing *, the desired resulting state is (*|*), not (*|*))\n        const containedPair = this._findContainedAutoClosingPair(config, pair);\n        const containedPairClose = containedPair ? containedPair.close : '';\n        let isContainedPairPresent = true;\n        for (const position of positions) {\n            const { lineNumber, beforeColumn, afterColumn } = position;\n            const lineText = model.getLineContent(lineNumber);\n            const lineBefore = lineText.substring(0, beforeColumn - 1);\n            const lineAfter = lineText.substring(afterColumn - 1);\n            if (!lineAfter.startsWith(containedPairClose)) {\n                isContainedPairPresent = false;\n            }\n            // Only consider auto closing the pair if an allowed character follows or if another autoclosed pair closing brace follows\n            if (lineAfter.length > 0) {\n                const characterAfter = lineAfter.charAt(0);\n                const isBeforeCloseBrace = TypeOperations._isBeforeClosingBrace(config, lineAfter);\n                if (!isBeforeCloseBrace && !shouldAutoCloseBefore(characterAfter)) {\n                    return null;\n                }\n            }\n            // Do not auto-close ' or \" after a word character\n            if (pair.open.length === 1 && (ch === '\\'' || ch === '\"') && autoCloseConfig !== 'always') {\n                const wordSeparators = getMapForWordSeparators(config.wordSeparators);\n                if (lineBefore.length > 0) {\n                    const characterBefore = lineBefore.charCodeAt(lineBefore.length - 1);\n                    if (wordSeparators.get(characterBefore) === 0 /* WordCharacterClass.Regular */) {\n                        return null;\n                    }\n                }\n            }\n            if (!model.tokenization.isCheapToTokenize(lineNumber)) {\n                // Do not force tokenization\n                return null;\n            }\n            model.tokenization.forceTokenization(lineNumber);\n            const lineTokens = model.tokenization.getLineTokens(lineNumber);\n            const scopedLineTokens = createScopedLineTokens(lineTokens, beforeColumn - 1);\n            if (!pair.shouldAutoClose(scopedLineTokens, beforeColumn - scopedLineTokens.firstCharOffset)) {\n                return null;\n            }\n            // Typing for example a quote could either start a new string, in which case auto-closing is desirable\n            // or it could end a previously started string, in which case auto-closing is not desirable\n            //\n            // In certain cases, it is really not possible to look at the previous token to determine\n            // what would happen. That's why we do something really unusual, we pretend to type a different\n            // character and ask the tokenizer what the outcome of doing that is: after typing a neutral\n            // character, are we in a string (i.e. the quote would most likely end a string) or not?\n            //\n            const neutralCharacter = pair.findNeutralCharacter();\n            if (neutralCharacter) {\n                const tokenType = model.tokenization.getTokenTypeIfInsertingCharacter(lineNumber, beforeColumn, neutralCharacter);\n                if (!pair.isOK(tokenType)) {\n                    return null;\n                }\n            }\n        }\n        if (isContainedPairPresent) {\n            return pair.close.substring(0, pair.close.length - containedPairClose.length);\n        }\n        else {\n            return pair.close;\n        }\n    }\n    static _runAutoClosingOpenCharType(prevEditOperationType, config, model, selections, ch, chIsAlreadyTyped, autoClosingPairClose) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            commands[i] = new TypeWithAutoClosingCommand(selection, ch, !chIsAlreadyTyped, autoClosingPairClose);\n        }\n        return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n            shouldPushStackElementBefore: true,\n            shouldPushStackElementAfter: false\n        });\n    }\n    static _shouldSurroundChar(config, ch) {\n        if (isQuote(ch)) {\n            return (config.autoSurround === 'quotes' || config.autoSurround === 'languageDefined');\n        }\n        else {\n            // Character is a bracket\n            return (config.autoSurround === 'brackets' || config.autoSurround === 'languageDefined');\n        }\n    }\n    static _isSurroundSelectionType(config, model, selections, ch) {\n        if (!TypeOperations._shouldSurroundChar(config, ch) || !config.surroundingPairs.hasOwnProperty(ch)) {\n            return false;\n        }\n        const isTypingAQuoteCharacter = isQuote(ch);\n        for (const selection of selections) {\n            if (selection.isEmpty()) {\n                return false;\n            }\n            let selectionContainsOnlyWhitespace = true;\n            for (let lineNumber = selection.startLineNumber; lineNumber <= selection.endLineNumber; lineNumber++) {\n                const lineText = model.getLineContent(lineNumber);\n                const startIndex = (lineNumber === selection.startLineNumber ? selection.startColumn - 1 : 0);\n                const endIndex = (lineNumber === selection.endLineNumber ? selection.endColumn - 1 : lineText.length);\n                const selectedText = lineText.substring(startIndex, endIndex);\n                if (/[^ \\t]/.test(selectedText)) {\n                    // this selected text contains something other than whitespace\n                    selectionContainsOnlyWhitespace = false;\n                    break;\n                }\n            }\n            if (selectionContainsOnlyWhitespace) {\n                return false;\n            }\n            if (isTypingAQuoteCharacter && selection.startLineNumber === selection.endLineNumber && selection.startColumn + 1 === selection.endColumn) {\n                const selectionText = model.getValueInRange(selection);\n                if (isQuote(selectionText)) {\n                    // Typing a quote character on top of another quote character\n                    // => disable surround selection type\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    static _runSurroundSelectionType(prevEditOperationType, config, model, selections, ch) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            const closeCharacter = config.surroundingPairs[ch];\n            commands[i] = new SurroundSelectionCommand(selection, ch, closeCharacter);\n        }\n        return new EditOperationResult(0 /* EditOperationType.Other */, commands, {\n            shouldPushStackElementBefore: true,\n            shouldPushStackElementAfter: true\n        });\n    }\n    static _isTypeInterceptorElectricChar(config, model, selections) {\n        if (selections.length === 1 && model.tokenization.isCheapToTokenize(selections[0].getEndPosition().lineNumber)) {\n            return true;\n        }\n        return false;\n    }\n    static _typeInterceptorElectricChar(prevEditOperationType, config, model, selection, ch) {\n        if (!config.electricChars.hasOwnProperty(ch) || !selection.isEmpty()) {\n            return null;\n        }\n        const position = selection.getPosition();\n        model.tokenization.forceTokenization(position.lineNumber);\n        const lineTokens = model.tokenization.getLineTokens(position.lineNumber);\n        let electricAction;\n        try {\n            electricAction = config.onElectricCharacter(ch, lineTokens, position.column);\n        }\n        catch (e) {\n            onUnexpectedError(e);\n            return null;\n        }\n        if (!electricAction) {\n            return null;\n        }\n        if (electricAction.matchOpenBracket) {\n            const endColumn = (lineTokens.getLineContent() + ch).lastIndexOf(electricAction.matchOpenBracket) + 1;\n            const match = model.bracketPairs.findMatchingBracketUp(electricAction.matchOpenBracket, {\n                lineNumber: position.lineNumber,\n                column: endColumn\n            }, 500 /* give at most 500ms to compute */);\n            if (match) {\n                if (match.startLineNumber === position.lineNumber) {\n                    // matched something on the same line => no change in indentation\n                    return null;\n                }\n                const matchLine = model.getLineContent(match.startLineNumber);\n                const matchLineIndentation = strings.getLeadingWhitespace(matchLine);\n                const newIndentation = config.normalizeIndentation(matchLineIndentation);\n                const lineText = model.getLineContent(position.lineNumber);\n                const lineFirstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(position.lineNumber) || position.column;\n                const prefix = lineText.substring(lineFirstNonBlankColumn - 1, position.column - 1);\n                const typeText = newIndentation + prefix + ch;\n                const typeSelection = new Range(position.lineNumber, 1, position.lineNumber, position.column);\n                const command = new ReplaceCommand(typeSelection, typeText);\n                return new EditOperationResult(getTypingOperation(typeText, prevEditOperationType), [command], {\n                    shouldPushStackElementBefore: false,\n                    shouldPushStackElementAfter: true\n                });\n            }\n        }\n        return null;\n    }\n    /**\n     * This is very similar with typing, but the character is already in the text buffer!\n     */\n    static compositionEndWithInterceptors(prevEditOperationType, config, model, compositions, selections, autoClosedCharacters) {\n        if (!compositions) {\n            // could not deduce what the composition did\n            return null;\n        }\n        let insertedText = null;\n        for (const composition of compositions) {\n            if (insertedText === null) {\n                insertedText = composition.insertedText;\n            }\n            else if (insertedText !== composition.insertedText) {\n                // not all selections agree on what was typed\n                return null;\n            }\n        }\n        if (!insertedText || insertedText.length !== 1) {\n            // we're only interested in the case where a single character was inserted\n            return null;\n        }\n        const ch = insertedText;\n        let hasDeletion = false;\n        for (const composition of compositions) {\n            if (composition.deletedText.length !== 0) {\n                hasDeletion = true;\n                break;\n            }\n        }\n        if (hasDeletion) {\n            // Check if this could have been a surround selection\n            if (!TypeOperations._shouldSurroundChar(config, ch) || !config.surroundingPairs.hasOwnProperty(ch)) {\n                return null;\n            }\n            const isTypingAQuoteCharacter = isQuote(ch);\n            for (const composition of compositions) {\n                if (composition.deletedSelectionStart !== 0 || composition.deletedSelectionEnd !== composition.deletedText.length) {\n                    // more text was deleted than was selected, so this could not have been a surround selection\n                    return null;\n                }\n                if (/^[ \\t]+$/.test(composition.deletedText)) {\n                    // deleted text was only whitespace\n                    return null;\n                }\n                if (isTypingAQuoteCharacter && isQuote(composition.deletedText)) {\n                    // deleted text was a quote\n                    return null;\n                }\n            }\n            const positions = [];\n            for (const selection of selections) {\n                if (!selection.isEmpty()) {\n                    return null;\n                }\n                positions.push(selection.getPosition());\n            }\n            if (positions.length !== compositions.length) {\n                return null;\n            }\n            const commands = [];\n            for (let i = 0, len = positions.length; i < len; i++) {\n                commands.push(new CompositionSurroundSelectionCommand(positions[i], compositions[i].deletedText, config.surroundingPairs[ch]));\n            }\n            return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n                shouldPushStackElementBefore: true,\n                shouldPushStackElementAfter: false\n            });\n        }\n        if (this._isAutoClosingOvertype(config, model, selections, autoClosedCharacters, ch)) {\n            // Unfortunately, the close character is at this point \"doubled\", so we need to delete it...\n            const commands = selections.map(s => new ReplaceCommand(new Range(s.positionLineNumber, s.positionColumn, s.positionLineNumber, s.positionColumn + 1), '', false));\n            return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n                shouldPushStackElementBefore: true,\n                shouldPushStackElementAfter: false\n            });\n        }\n        const autoClosingPairClose = this._getAutoClosingPairClose(config, model, selections, ch, true);\n        if (autoClosingPairClose !== null) {\n            return this._runAutoClosingOpenCharType(prevEditOperationType, config, model, selections, ch, true, autoClosingPairClose);\n        }\n        return null;\n    }\n    static typeWithInterceptors(isDoingComposition, prevEditOperationType, config, model, selections, autoClosedCharacters, ch) {\n        if (!isDoingComposition && ch === '\\n') {\n            const commands = [];\n            for (let i = 0, len = selections.length; i < len; i++) {\n                commands[i] = TypeOperations._enter(config, model, false, selections[i]);\n            }\n            return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n                shouldPushStackElementBefore: true,\n                shouldPushStackElementAfter: false,\n            });\n        }\n        if (!isDoingComposition && this._isAutoIndentType(config, model, selections)) {\n            const commands = [];\n            let autoIndentFails = false;\n            for (let i = 0, len = selections.length; i < len; i++) {\n                commands[i] = this._runAutoIndentType(config, model, selections[i], ch);\n                if (!commands[i]) {\n                    autoIndentFails = true;\n                    break;\n                }\n            }\n            if (!autoIndentFails) {\n                return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n                    shouldPushStackElementBefore: true,\n                    shouldPushStackElementAfter: false,\n                });\n            }\n        }\n        if (this._isAutoClosingOvertype(config, model, selections, autoClosedCharacters, ch)) {\n            return this._runAutoClosingOvertype(prevEditOperationType, config, model, selections, ch);\n        }\n        if (!isDoingComposition) {\n            const autoClosingPairClose = this._getAutoClosingPairClose(config, model, selections, ch, false);\n            if (autoClosingPairClose) {\n                return this._runAutoClosingOpenCharType(prevEditOperationType, config, model, selections, ch, false, autoClosingPairClose);\n            }\n        }\n        if (!isDoingComposition && this._isSurroundSelectionType(config, model, selections, ch)) {\n            return this._runSurroundSelectionType(prevEditOperationType, config, model, selections, ch);\n        }\n        // Electric characters make sense only when dealing with a single cursor,\n        // as multiple cursors typing brackets for example would interfer with bracket matching\n        if (!isDoingComposition && this._isTypeInterceptorElectricChar(config, model, selections)) {\n            const r = this._typeInterceptorElectricChar(prevEditOperationType, config, model, selections[0], ch);\n            if (r) {\n                return r;\n            }\n        }\n        // A simple character type\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new ReplaceCommand(selections[i], ch);\n        }\n        const opType = getTypingOperation(ch, prevEditOperationType);\n        return new EditOperationResult(opType, commands, {\n            shouldPushStackElementBefore: shouldPushStackElementBetween(prevEditOperationType, opType),\n            shouldPushStackElementAfter: false\n        });\n    }\n    static typeWithoutInterceptors(prevEditOperationType, config, model, selections, str) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new ReplaceCommand(selections[i], str);\n        }\n        const opType = getTypingOperation(str, prevEditOperationType);\n        return new EditOperationResult(opType, commands, {\n            shouldPushStackElementBefore: shouldPushStackElementBetween(prevEditOperationType, opType),\n            shouldPushStackElementAfter: false\n        });\n    }\n    static lineInsertBefore(config, model, selections) {\n        if (model === null || selections === null) {\n            return [];\n        }\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            let lineNumber = selections[i].positionLineNumber;\n            if (lineNumber === 1) {\n                commands[i] = new ReplaceCommandWithoutChangingPosition(new Range(1, 1, 1, 1), '\\n');\n            }\n            else {\n                lineNumber--;\n                const column = model.getLineMaxColumn(lineNumber);\n                commands[i] = this._enter(config, model, false, new Range(lineNumber, column, lineNumber, column));\n            }\n        }\n        return commands;\n    }\n    static lineInsertAfter(config, model, selections) {\n        if (model === null || selections === null) {\n            return [];\n        }\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const lineNumber = selections[i].positionLineNumber;\n            const column = model.getLineMaxColumn(lineNumber);\n            commands[i] = this._enter(config, model, false, new Range(lineNumber, column, lineNumber, column));\n        }\n        return commands;\n    }\n    static lineBreakInsert(config, model, selections) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = this._enter(config, model, true, selections[i]);\n        }\n        return commands;\n    }\n}\nexport class TypeWithAutoClosingCommand extends ReplaceCommandWithOffsetCursorState {\n    constructor(selection, openCharacter, insertOpenCharacter, closeCharacter) {\n        super(selection, (insertOpenCharacter ? openCharacter : '') + closeCharacter, 0, -closeCharacter.length);\n        this._openCharacter = openCharacter;\n        this._closeCharacter = closeCharacter;\n        this.closeCharacterRange = null;\n        this.enclosingRange = null;\n    }\n    computeCursorState(model, helper) {\n        const inverseEditOperations = helper.getInverseEditOperations();\n        const range = inverseEditOperations[0].range;\n        this.closeCharacterRange = new Range(range.startLineNumber, range.endColumn - this._closeCharacter.length, range.endLineNumber, range.endColumn);\n        this.enclosingRange = new Range(range.startLineNumber, range.endColumn - this._openCharacter.length - this._closeCharacter.length, range.endLineNumber, range.endColumn);\n        return super.computeCursorState(model, helper);\n    }\n}\nexport class CompositionOutcome {\n    constructor(deletedText, deletedSelectionStart, deletedSelectionEnd, insertedText, insertedSelectionStart, insertedSelectionEnd) {\n        this.deletedText = deletedText;\n        this.deletedSelectionStart = deletedSelectionStart;\n        this.deletedSelectionEnd = deletedSelectionEnd;\n        this.insertedText = insertedText;\n        this.insertedSelectionStart = insertedSelectionStart;\n        this.insertedSelectionEnd = insertedSelectionEnd;\n    }\n}\nfunction getTypingOperation(typedText, previousTypingOperation) {\n    if (typedText === ' ') {\n        return previousTypingOperation === 5 /* EditOperationType.TypingFirstSpace */\n            || previousTypingOperation === 6 /* EditOperationType.TypingConsecutiveSpace */\n            ? 6 /* EditOperationType.TypingConsecutiveSpace */\n            : 5 /* EditOperationType.TypingFirstSpace */;\n    }\n    return 4 /* EditOperationType.TypingOther */;\n}\nfunction shouldPushStackElementBetween(previousTypingOperation, typingOperation) {\n    if (isTypingOperation(previousTypingOperation) && !isTypingOperation(typingOperation)) {\n        // Always set an undo stop before non-type operations\n        return true;\n    }\n    if (previousTypingOperation === 5 /* EditOperationType.TypingFirstSpace */) {\n        // `abc |d`: No undo stop\n        // `abc  |d`: Undo stop\n        return false;\n    }\n    // Insert undo stop between different operation types\n    return normalizeOperationType(previousTypingOperation) !== normalizeOperationType(typingOperation);\n}\nfunction normalizeOperationType(type) {\n    return (type === 6 /* EditOperationType.TypingConsecutiveSpace */ || type === 5 /* EditOperationType.TypingFirstSpace */)\n        ? 'space'\n        : type;\n}\nfunction isTypingOperation(type) {\n    return type === 4 /* EditOperationType.TypingOther */\n        || type === 5 /* EditOperationType.TypingFirstSpace */\n        || type === 6 /* EditOperationType.TypingConsecutiveSpace */;\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar ShiftCommand_1;\nimport * as strings from '../../../base/common/strings.js';\nimport { CursorColumns } from '../core/cursorColumns.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { getEnterAction } from '../languages/enterAction.js';\nimport { ILanguageConfigurationService } from '../languages/languageConfigurationRegistry.js';\nconst repeatCache = Object.create(null);\nfunction cachedStringRepeat(str, count) {\n    if (count <= 0) {\n        return '';\n    }\n    if (!repeatCache[str]) {\n        repeatCache[str] = ['', str];\n    }\n    const cache = repeatCache[str];\n    for (let i = cache.length; i <= count; i++) {\n        cache[i] = cache[i - 1] + str;\n    }\n    return cache[count];\n}\nlet ShiftCommand = ShiftCommand_1 = class ShiftCommand {\n    static unshiftIndent(line, column, tabSize, indentSize, insertSpaces) {\n        // Determine the visible column where the content starts\n        const contentStartVisibleColumn = CursorColumns.visibleColumnFromColumn(line, column, tabSize);\n        if (insertSpaces) {\n            const indent = cachedStringRepeat(' ', indentSize);\n            const desiredTabStop = CursorColumns.prevIndentTabStop(contentStartVisibleColumn, indentSize);\n            const indentCount = desiredTabStop / indentSize; // will be an integer\n            return cachedStringRepeat(indent, indentCount);\n        }\n        else {\n            const indent = '\\t';\n            const desiredTabStop = CursorColumns.prevRenderTabStop(contentStartVisibleColumn, tabSize);\n            const indentCount = desiredTabStop / tabSize; // will be an integer\n            return cachedStringRepeat(indent, indentCount);\n        }\n    }\n    static shiftIndent(line, column, tabSize, indentSize, insertSpaces) {\n        // Determine the visible column where the content starts\n        const contentStartVisibleColumn = CursorColumns.visibleColumnFromColumn(line, column, tabSize);\n        if (insertSpaces) {\n            const indent = cachedStringRepeat(' ', indentSize);\n            const desiredTabStop = CursorColumns.nextIndentTabStop(contentStartVisibleColumn, indentSize);\n            const indentCount = desiredTabStop / indentSize; // will be an integer\n            return cachedStringRepeat(indent, indentCount);\n        }\n        else {\n            const indent = '\\t';\n            const desiredTabStop = CursorColumns.nextRenderTabStop(contentStartVisibleColumn, tabSize);\n            const indentCount = desiredTabStop / tabSize; // will be an integer\n            return cachedStringRepeat(indent, indentCount);\n        }\n    }\n    constructor(range, opts, _languageConfigurationService) {\n        this._languageConfigurationService = _languageConfigurationService;\n        this._opts = opts;\n        this._selection = range;\n        this._selectionId = null;\n        this._useLastEditRangeForCursorEndPosition = false;\n        this._selectionStartColumnStaysPut = false;\n    }\n    _addEditOperation(builder, range, text) {\n        if (this._useLastEditRangeForCursorEndPosition) {\n            builder.addTrackedEditOperation(range, text);\n        }\n        else {\n            builder.addEditOperation(range, text);\n        }\n    }\n    getEditOperations(model, builder) {\n        const startLine = this._selection.startLineNumber;\n        let endLine = this._selection.endLineNumber;\n        if (this._selection.endColumn === 1 && startLine !== endLine) {\n            endLine = endLine - 1;\n        }\n        const { tabSize, indentSize, insertSpaces } = this._opts;\n        const shouldIndentEmptyLines = (startLine === endLine);\n        if (this._opts.useTabStops) {\n            // if indenting or outdenting on a whitespace only line\n            if (this._selection.isEmpty()) {\n                if (/^\\s*$/.test(model.getLineContent(startLine))) {\n                    this._useLastEditRangeForCursorEndPosition = true;\n                }\n            }\n            // keep track of previous line's \"miss-alignment\"\n            let previousLineExtraSpaces = 0, extraSpaces = 0;\n            for (let lineNumber = startLine; lineNumber <= endLine; lineNumber++, previousLineExtraSpaces = extraSpaces) {\n                extraSpaces = 0;\n                const lineText = model.getLineContent(lineNumber);\n                let indentationEndIndex = strings.firstNonWhitespaceIndex(lineText);\n                if (this._opts.isUnshift && (lineText.length === 0 || indentationEndIndex === 0)) {\n                    // empty line or line with no leading whitespace => nothing to do\n                    continue;\n                }\n                if (!shouldIndentEmptyLines && !this._opts.isUnshift && lineText.length === 0) {\n                    // do not indent empty lines => nothing to do\n                    continue;\n                }\n                if (indentationEndIndex === -1) {\n                    // the entire line is whitespace\n                    indentationEndIndex = lineText.length;\n                }\n                if (lineNumber > 1) {\n                    const contentStartVisibleColumn = CursorColumns.visibleColumnFromColumn(lineText, indentationEndIndex + 1, tabSize);\n                    if (contentStartVisibleColumn % indentSize !== 0) {\n                        // The current line is \"miss-aligned\", so let's see if this is expected...\n                        // This can only happen when it has trailing commas in the indent\n                        if (model.tokenization.isCheapToTokenize(lineNumber - 1)) {\n                            const enterAction = getEnterAction(this._opts.autoIndent, model, new Range(lineNumber - 1, model.getLineMaxColumn(lineNumber - 1), lineNumber - 1, model.getLineMaxColumn(lineNumber - 1)), this._languageConfigurationService);\n                            if (enterAction) {\n                                extraSpaces = previousLineExtraSpaces;\n                                if (enterAction.appendText) {\n                                    for (let j = 0, lenJ = enterAction.appendText.length; j < lenJ && extraSpaces < indentSize; j++) {\n                                        if (enterAction.appendText.charCodeAt(j) === 32 /* CharCode.Space */) {\n                                            extraSpaces++;\n                                        }\n                                        else {\n                                            break;\n                                        }\n                                    }\n                                }\n                                if (enterAction.removeText) {\n                                    extraSpaces = Math.max(0, extraSpaces - enterAction.removeText);\n                                }\n                                // Act as if `prefixSpaces` is not part of the indentation\n                                for (let j = 0; j < extraSpaces; j++) {\n                                    if (indentationEndIndex === 0 || lineText.charCodeAt(indentationEndIndex - 1) !== 32 /* CharCode.Space */) {\n                                        break;\n                                    }\n                                    indentationEndIndex--;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (this._opts.isUnshift && indentationEndIndex === 0) {\n                    // line with no leading whitespace => nothing to do\n                    continue;\n                }\n                let desiredIndent;\n                if (this._opts.isUnshift) {\n                    desiredIndent = ShiftCommand_1.unshiftIndent(lineText, indentationEndIndex + 1, tabSize, indentSize, insertSpaces);\n                }\n                else {\n                    desiredIndent = ShiftCommand_1.shiftIndent(lineText, indentationEndIndex + 1, tabSize, indentSize, insertSpaces);\n                }\n                this._addEditOperation(builder, new Range(lineNumber, 1, lineNumber, indentationEndIndex + 1), desiredIndent);\n                if (lineNumber === startLine && !this._selection.isEmpty()) {\n                    // Force the startColumn to stay put because we're inserting after it\n                    this._selectionStartColumnStaysPut = (this._selection.startColumn <= indentationEndIndex + 1);\n                }\n            }\n        }\n        else {\n            // if indenting or outdenting on a whitespace only line\n            if (!this._opts.isUnshift && this._selection.isEmpty() && model.getLineLength(startLine) === 0) {\n                this._useLastEditRangeForCursorEndPosition = true;\n            }\n            const oneIndent = (insertSpaces ? cachedStringRepeat(' ', indentSize) : '\\t');\n            for (let lineNumber = startLine; lineNumber <= endLine; lineNumber++) {\n                const lineText = model.getLineContent(lineNumber);\n                let indentationEndIndex = strings.firstNonWhitespaceIndex(lineText);\n                if (this._opts.isUnshift && (lineText.length === 0 || indentationEndIndex === 0)) {\n                    // empty line or line with no leading whitespace => nothing to do\n                    continue;\n                }\n                if (!shouldIndentEmptyLines && !this._opts.isUnshift && lineText.length === 0) {\n                    // do not indent empty lines => nothing to do\n                    continue;\n                }\n                if (indentationEndIndex === -1) {\n                    // the entire line is whitespace\n                    indentationEndIndex = lineText.length;\n                }\n                if (this._opts.isUnshift && indentationEndIndex === 0) {\n                    // line with no leading whitespace => nothing to do\n                    continue;\n                }\n                if (this._opts.isUnshift) {\n                    indentationEndIndex = Math.min(indentationEndIndex, indentSize);\n                    for (let i = 0; i < indentationEndIndex; i++) {\n                        const chr = lineText.charCodeAt(i);\n                        if (chr === 9 /* CharCode.Tab */) {\n                            indentationEndIndex = i + 1;\n                            break;\n                        }\n                    }\n                    this._addEditOperation(builder, new Range(lineNumber, 1, lineNumber, indentationEndIndex + 1), '');\n                }\n                else {\n                    this._addEditOperation(builder, new Range(lineNumber, 1, lineNumber, 1), oneIndent);\n                    if (lineNumber === startLine && !this._selection.isEmpty()) {\n                        // Force the startColumn to stay put because we're inserting after it\n                        this._selectionStartColumnStaysPut = (this._selection.startColumn === 1);\n                    }\n                }\n            }\n        }\n        this._selectionId = builder.trackSelection(this._selection);\n    }\n    computeCursorState(model, helper) {\n        if (this._useLastEditRangeForCursorEndPosition) {\n            const lastOp = helper.getInverseEditOperations()[0];\n            return new Selection(lastOp.range.endLineNumber, lastOp.range.endColumn, lastOp.range.endLineNumber, lastOp.range.endColumn);\n        }\n        const result = helper.getTrackedSelection(this._selectionId);\n        if (this._selectionStartColumnStaysPut) {\n            // The selection start should not move\n            const initialStartColumn = this._selection.startColumn;\n            const resultStartColumn = result.startColumn;\n            if (resultStartColumn <= initialStartColumn) {\n                return result;\n            }\n            if (result.getDirection() === 0 /* SelectionDirection.LTR */) {\n                return new Selection(result.startLineNumber, initialStartColumn, result.endLineNumber, result.endColumn);\n            }\n            return new Selection(result.endLineNumber, result.endColumn, result.startLineNumber, initialStartColumn);\n        }\n        return result;\n    }\n};\nShiftCommand = ShiftCommand_1 = __decorate([\n    __param(2, ILanguageConfigurationService)\n], ShiftCommand);\nexport { ShiftCommand };\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { IndentAction } from './languageConfiguration.js';\nimport { getIndentationAtPosition, getScopedLineTokens } from './languageConfigurationRegistry.js';\nexport function getEnterAction(autoIndent, model, range, languageConfigurationService) {\n    const scopedLineTokens = getScopedLineTokens(model, range.startLineNumber, range.startColumn);\n    const richEditSupport = languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId);\n    if (!richEditSupport) {\n        return null;\n    }\n    const scopedLineText = scopedLineTokens.getLineContent();\n    const beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    // selection support\n    let afterEnterText;\n    if (range.isEmpty()) {\n        afterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    else {\n        const endScopedLineTokens = getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n        afterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    let previousLineText = '';\n    if (range.startLineNumber > 1 && scopedLineTokens.firstCharOffset === 0) {\n        // This is not the first line and the entire line belongs to this mode\n        const oneLineAboveScopedLineTokens = getScopedLineTokens(model, range.startLineNumber - 1);\n        if (oneLineAboveScopedLineTokens.languageId === scopedLineTokens.languageId) {\n            // The line above ends with text belonging to the same mode\n            previousLineText = oneLineAboveScopedLineTokens.getLineContent();\n        }\n    }\n    const enterResult = richEditSupport.onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText);\n    if (!enterResult) {\n        return null;\n    }\n    const indentAction = enterResult.indentAction;\n    let appendText = enterResult.appendText;\n    const removeText = enterResult.removeText || 0;\n    // Here we add `\\t` to appendText first because enterAction is leveraging appendText and removeText to change indentation.\n    if (!appendText) {\n        if ((indentAction === IndentAction.Indent) ||\n            (indentAction === IndentAction.IndentOutdent)) {\n            appendText = '\\t';\n        }\n        else {\n            appendText = '';\n        }\n    }\n    else if (indentAction === IndentAction.Indent) {\n        appendText = '\\t' + appendText;\n    }\n    let indentation = getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\n    if (removeText) {\n        indentation = indentation.substring(0, indentation.length - removeText);\n    }\n    return {\n        indentAction: indentAction,\n        appendText: appendText,\n        removeText: removeText,\n        indentation: indentation\n    };\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nexport class SurroundSelectionCommand {\n    constructor(range, charBeforeSelection, charAfterSelection) {\n        this._range = range;\n        this._charBeforeSelection = charBeforeSelection;\n        this._charAfterSelection = charAfterSelection;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(new Range(this._range.startLineNumber, this._range.startColumn, this._range.startLineNumber, this._range.startColumn), this._charBeforeSelection);\n        builder.addTrackedEditOperation(new Range(this._range.endLineNumber, this._range.endColumn, this._range.endLineNumber, this._range.endColumn), this._charAfterSelection);\n    }\n    computeCursorState(model, helper) {\n        const inverseEditOperations = helper.getInverseEditOperations();\n        const firstOperationRange = inverseEditOperations[0].range;\n        const secondOperationRange = inverseEditOperations[1].range;\n        return new Selection(firstOperationRange.endLineNumber, firstOperationRange.endColumn, secondOperationRange.endLineNumber, secondOperationRange.endColumn - this._charAfterSelection.length);\n    }\n}\n/**\n * A surround selection command that runs after composition finished.\n */\nexport class CompositionSurroundSelectionCommand {\n    constructor(_position, _text, _charAfter) {\n        this._position = _position;\n        this._text = _text;\n        this._charAfter = _charAfter;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(new Range(this._position.lineNumber, this._position.column, this._position.lineNumber, this._position.column), this._text + this._charAfter);\n    }\n    computeCursorState(model, helper) {\n        const inverseEditOperations = helper.getInverseEditOperations();\n        const opRange = inverseEditOperations[0].range;\n        return new Selection(opRange.endLineNumber, opRange.startColumn, opRange.endLineNumber, opRange.endColumn - this._charAfter.length);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { IndentAction } from './languageConfiguration.js';\nimport { createScopedLineTokens } from './supports.js';\nimport { getScopedLineTokens } from './languageConfigurationRegistry.js';\n/**\n * Get nearest preceding line which doesn't match unIndentPattern or contains all whitespace.\n * Result:\n * -1: run into the boundary of embedded languages\n * 0: every line above are invalid\n * else: nearest preceding line of the same language\n */\nfunction getPrecedingValidLine(model, lineNumber, indentRulesSupport) {\n    const languageId = model.tokenization.getLanguageIdAtPosition(lineNumber, 0);\n    if (lineNumber > 1) {\n        let lastLineNumber;\n        let resultLineNumber = -1;\n        for (lastLineNumber = lineNumber - 1; lastLineNumber >= 1; lastLineNumber--) {\n            if (model.tokenization.getLanguageIdAtPosition(lastLineNumber, 0) !== languageId) {\n                return resultLineNumber;\n            }\n            const text = model.getLineContent(lastLineNumber);\n            if (indentRulesSupport.shouldIgnore(text) || /^\\s+$/.test(text) || text === '') {\n                resultLineNumber = lastLineNumber;\n                continue;\n            }\n            return lastLineNumber;\n        }\n    }\n    return -1;\n}\n/**\n * Get inherited indentation from above lines.\n * 1. Find the nearest preceding line which doesn't match unIndentedLinePattern.\n * 2. If this line matches indentNextLinePattern or increaseIndentPattern, it means that the indent level of `lineNumber` should be 1 greater than this line.\n * 3. If this line doesn't match any indent rules\n *   a. check whether the line above it matches indentNextLinePattern\n *   b. If not, the indent level of this line is the result\n *   c. If so, it means the indent of this line is *temporary*, go upward utill we find a line whose indent is not temporary (the same workflow a -> b -> c).\n * 4. Otherwise, we fail to get an inherited indent from aboves. Return null and we should not touch the indent of `lineNumber`\n *\n * This function only return the inherited indent based on above lines, it doesn't check whether current line should decrease or not.\n */\nexport function getInheritIndentForLine(autoIndent, model, lineNumber, honorIntentialIndent = true, languageConfigurationService) {\n    if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n        return null;\n    }\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(model.tokenization.getLanguageId()).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    if (lineNumber <= 1) {\n        return {\n            indentation: '',\n            action: null\n        };\n    }\n    // Use no indent if this is the first non-blank line\n    for (let priorLineNumber = lineNumber - 1; priorLineNumber > 0; priorLineNumber--) {\n        if (model.getLineContent(priorLineNumber) !== '') {\n            break;\n        }\n        if (priorLineNumber === 1) {\n            return {\n                indentation: '',\n                action: null\n            };\n        }\n    }\n    const precedingUnIgnoredLine = getPrecedingValidLine(model, lineNumber, indentRulesSupport);\n    if (precedingUnIgnoredLine < 0) {\n        return null;\n    }\n    else if (precedingUnIgnoredLine < 1) {\n        return {\n            indentation: '',\n            action: null\n        };\n    }\n    const precedingUnIgnoredLineContent = model.getLineContent(precedingUnIgnoredLine);\n    if (indentRulesSupport.shouldIncrease(precedingUnIgnoredLineContent) || indentRulesSupport.shouldIndentNextLine(precedingUnIgnoredLineContent)) {\n        return {\n            indentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n            action: IndentAction.Indent,\n            line: precedingUnIgnoredLine\n        };\n    }\n    else if (indentRulesSupport.shouldDecrease(precedingUnIgnoredLineContent)) {\n        return {\n            indentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n            action: null,\n            line: precedingUnIgnoredLine\n        };\n    }\n    else {\n        // precedingUnIgnoredLine can not be ignored.\n        // it doesn't increase indent of following lines\n        // it doesn't increase just next line\n        // so current line is not affect by precedingUnIgnoredLine\n        // and then we should get a correct inheritted indentation from above lines\n        if (precedingUnIgnoredLine === 1) {\n            return {\n                indentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n                action: null,\n                line: precedingUnIgnoredLine\n            };\n        }\n        const previousLine = precedingUnIgnoredLine - 1;\n        const previousLineIndentMetadata = indentRulesSupport.getIndentMetadata(model.getLineContent(previousLine));\n        if (!(previousLineIndentMetadata & (1 /* IndentConsts.INCREASE_MASK */ | 2 /* IndentConsts.DECREASE_MASK */)) &&\n            (previousLineIndentMetadata & 4 /* IndentConsts.INDENT_NEXTLINE_MASK */)) {\n            let stopLine = 0;\n            for (let i = previousLine - 1; i > 0; i--) {\n                if (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\n                    continue;\n                }\n                stopLine = i;\n                break;\n            }\n            return {\n                indentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n                action: null,\n                line: stopLine + 1\n            };\n        }\n        if (honorIntentialIndent) {\n            return {\n                indentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n                action: null,\n                line: precedingUnIgnoredLine\n            };\n        }\n        else {\n            // search from precedingUnIgnoredLine until we find one whose indent is not temporary\n            for (let i = precedingUnIgnoredLine; i > 0; i--) {\n                const lineContent = model.getLineContent(i);\n                if (indentRulesSupport.shouldIncrease(lineContent)) {\n                    return {\n                        indentation: strings.getLeadingWhitespace(lineContent),\n                        action: IndentAction.Indent,\n                        line: i\n                    };\n                }\n                else if (indentRulesSupport.shouldIndentNextLine(lineContent)) {\n                    let stopLine = 0;\n                    for (let j = i - 1; j > 0; j--) {\n                        if (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\n                            continue;\n                        }\n                        stopLine = j;\n                        break;\n                    }\n                    return {\n                        indentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n                        action: null,\n                        line: stopLine + 1\n                    };\n                }\n                else if (indentRulesSupport.shouldDecrease(lineContent)) {\n                    return {\n                        indentation: strings.getLeadingWhitespace(lineContent),\n                        action: null,\n                        line: i\n                    };\n                }\n            }\n            return {\n                indentation: strings.getLeadingWhitespace(model.getLineContent(1)),\n                action: null,\n                line: 1\n            };\n        }\n    }\n}\nexport function getGoodIndentForLine(autoIndent, virtualModel, languageId, lineNumber, indentConverter, languageConfigurationService) {\n    if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n        return null;\n    }\n    const richEditSupport = languageConfigurationService.getLanguageConfiguration(languageId);\n    if (!richEditSupport) {\n        return null;\n    }\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(languageId).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    const indent = getInheritIndentForLine(autoIndent, virtualModel, lineNumber, undefined, languageConfigurationService);\n    const lineContent = virtualModel.getLineContent(lineNumber);\n    if (indent) {\n        const inheritLine = indent.line;\n        if (inheritLine !== undefined) {\n            // Apply enter action as long as there are only whitespace lines between inherited line and this line.\n            let shouldApplyEnterRules = true;\n            for (let inBetweenLine = inheritLine; inBetweenLine < lineNumber - 1; inBetweenLine++) {\n                if (!/^\\s*$/.test(virtualModel.getLineContent(inBetweenLine))) {\n                    shouldApplyEnterRules = false;\n                    break;\n                }\n            }\n            if (shouldApplyEnterRules) {\n                const enterResult = richEditSupport.onEnter(autoIndent, '', virtualModel.getLineContent(inheritLine), '');\n                if (enterResult) {\n                    let indentation = strings.getLeadingWhitespace(virtualModel.getLineContent(inheritLine));\n                    if (enterResult.removeText) {\n                        indentation = indentation.substring(0, indentation.length - enterResult.removeText);\n                    }\n                    if ((enterResult.indentAction === IndentAction.Indent) ||\n                        (enterResult.indentAction === IndentAction.IndentOutdent)) {\n                        indentation = indentConverter.shiftIndent(indentation);\n                    }\n                    else if (enterResult.indentAction === IndentAction.Outdent) {\n                        indentation = indentConverter.unshiftIndent(indentation);\n                    }\n                    if (indentRulesSupport.shouldDecrease(lineContent)) {\n                        indentation = indentConverter.unshiftIndent(indentation);\n                    }\n                    if (enterResult.appendText) {\n                        indentation += enterResult.appendText;\n                    }\n                    return strings.getLeadingWhitespace(indentation);\n                }\n            }\n        }\n        if (indentRulesSupport.shouldDecrease(lineContent)) {\n            if (indent.action === IndentAction.Indent) {\n                return indent.indentation;\n            }\n            else {\n                return indentConverter.unshiftIndent(indent.indentation);\n            }\n        }\n        else {\n            if (indent.action === IndentAction.Indent) {\n                return indentConverter.shiftIndent(indent.indentation);\n            }\n            else {\n                return indent.indentation;\n            }\n        }\n    }\n    return null;\n}\nexport function getIndentForEnter(autoIndent, model, range, indentConverter, languageConfigurationService) {\n    if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n        return null;\n    }\n    model.tokenization.forceTokenization(range.startLineNumber);\n    const lineTokens = model.tokenization.getLineTokens(range.startLineNumber);\n    const scopedLineTokens = createScopedLineTokens(lineTokens, range.startColumn - 1);\n    const scopedLineText = scopedLineTokens.getLineContent();\n    let embeddedLanguage = false;\n    let beforeEnterText;\n    if (scopedLineTokens.firstCharOffset > 0 && lineTokens.getLanguageId(0) !== scopedLineTokens.languageId) {\n        // we are in the embeded language content\n        embeddedLanguage = true; // if embeddedLanguage is true, then we don't touch the indentation of current line\n        beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    else {\n        beforeEnterText = lineTokens.getLineContent().substring(0, range.startColumn - 1);\n    }\n    let afterEnterText;\n    if (range.isEmpty()) {\n        afterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    else {\n        const endScopedLineTokens = getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n        afterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    const beforeEnterResult = beforeEnterText;\n    const beforeEnterIndent = strings.getLeadingWhitespace(beforeEnterText);\n    const virtualModel = {\n        tokenization: {\n            getLineTokens: (lineNumber) => {\n                return model.tokenization.getLineTokens(lineNumber);\n            },\n            getLanguageId: () => {\n                return model.getLanguageId();\n            },\n            getLanguageIdAtPosition: (lineNumber, column) => {\n                return model.getLanguageIdAtPosition(lineNumber, column);\n            },\n        },\n        getLineContent: (lineNumber) => {\n            if (lineNumber === range.startLineNumber) {\n                return beforeEnterResult;\n            }\n            else {\n                return model.getLineContent(lineNumber);\n            }\n        }\n    };\n    const currentLineIndent = strings.getLeadingWhitespace(lineTokens.getLineContent());\n    const afterEnterAction = getInheritIndentForLine(autoIndent, virtualModel, range.startLineNumber + 1, undefined, languageConfigurationService);\n    if (!afterEnterAction) {\n        const beforeEnter = embeddedLanguage ? currentLineIndent : beforeEnterIndent;\n        return {\n            beforeEnter: beforeEnter,\n            afterEnter: beforeEnter\n        };\n    }\n    let afterEnterIndent = embeddedLanguage ? currentLineIndent : afterEnterAction.indentation;\n    if (afterEnterAction.action === IndentAction.Indent) {\n        afterEnterIndent = indentConverter.shiftIndent(afterEnterIndent);\n    }\n    if (indentRulesSupport.shouldDecrease(afterEnterText)) {\n        afterEnterIndent = indentConverter.unshiftIndent(afterEnterIndent);\n    }\n    return {\n        beforeEnter: embeddedLanguage ? currentLineIndent : beforeEnterIndent,\n        afterEnter: afterEnterIndent\n    };\n}\n/**\n * We should always allow intentional indentation. It means, if users change the indentation of `lineNumber` and the content of\n * this line doesn't match decreaseIndentPattern, we should not adjust the indentation.\n */\nexport function getIndentActionForType(autoIndent, model, range, ch, indentConverter, languageConfigurationService) {\n    if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n        return null;\n    }\n    const scopedLineTokens = getScopedLineTokens(model, range.startLineNumber, range.startColumn);\n    if (scopedLineTokens.firstCharOffset) {\n        // this line has mixed languages and indentation rules will not work\n        return null;\n    }\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    const scopedLineText = scopedLineTokens.getLineContent();\n    const beforeTypeText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    // selection support\n    let afterTypeText;\n    if (range.isEmpty()) {\n        afterTypeText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    else {\n        const endScopedLineTokens = getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n        afterTypeText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    // If previous content already matches decreaseIndentPattern, it means indentation of this line should already be adjusted\n    // Users might change the indentation by purpose and we should honor that instead of readjusting.\n    if (!indentRulesSupport.shouldDecrease(beforeTypeText + afterTypeText) && indentRulesSupport.shouldDecrease(beforeTypeText + ch + afterTypeText)) {\n        // after typing `ch`, the content matches decreaseIndentPattern, we should adjust the indent to a good manner.\n        // 1. Get inherited indent action\n        const r = getInheritIndentForLine(autoIndent, model, range.startLineNumber, false, languageConfigurationService);\n        if (!r) {\n            return null;\n        }\n        let indentation = r.indentation;\n        if (r.action !== IndentAction.Indent) {\n            indentation = indentConverter.unshiftIndent(indentation);\n        }\n        return indentation;\n    }\n    return null;\n}\nexport function getIndentMetadata(model, lineNumber, languageConfigurationService) {\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    if (lineNumber < 1 || lineNumber > model.getLineCount()) {\n        return null;\n    }\n    return indentRulesSupport.getIndentMetadata(model.getLineContent(lineNumber));\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CoreNavigationCommands } from '../coreCommands.js';\nimport { Position } from '../../common/core/position.js';\nimport * as platform from '../../../base/common/platform.js';\nexport class ViewController {\n    constructor(configuration, viewModel, userInputEvents, commandDelegate) {\n        this.configuration = configuration;\n        this.viewModel = viewModel;\n        this.userInputEvents = userInputEvents;\n        this.commandDelegate = commandDelegate;\n    }\n    paste(text, pasteOnNewLine, multicursorText, mode) {\n        this.commandDelegate.paste(text, pasteOnNewLine, multicursorText, mode);\n    }\n    type(text) {\n        this.commandDelegate.type(text);\n    }\n    compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta) {\n        this.commandDelegate.compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta);\n    }\n    compositionStart() {\n        this.commandDelegate.startComposition();\n    }\n    compositionEnd() {\n        this.commandDelegate.endComposition();\n    }\n    cut() {\n        this.commandDelegate.cut();\n    }\n    setSelection(modelSelection) {\n        CoreNavigationCommands.SetSelection.runCoreEditorCommand(this.viewModel, {\n            source: 'keyboard',\n            selection: modelSelection\n        });\n    }\n    _validateViewColumn(viewPosition) {\n        const minColumn = this.viewModel.getLineMinColumn(viewPosition.lineNumber);\n        if (viewPosition.column < minColumn) {\n            return new Position(viewPosition.lineNumber, minColumn);\n        }\n        return viewPosition;\n    }\n    _hasMulticursorModifier(data) {\n        switch (this.configuration.options.get(78 /* EditorOption.multiCursorModifier */)) {\n            case 'altKey':\n                return data.altKey;\n            case 'ctrlKey':\n                return data.ctrlKey;\n            case 'metaKey':\n                return data.metaKey;\n            default:\n                return false;\n        }\n    }\n    _hasNonMulticursorModifier(data) {\n        switch (this.configuration.options.get(78 /* EditorOption.multiCursorModifier */)) {\n            case 'altKey':\n                return data.ctrlKey || data.metaKey;\n            case 'ctrlKey':\n                return data.altKey || data.metaKey;\n            case 'metaKey':\n                return data.ctrlKey || data.altKey;\n            default:\n                return false;\n        }\n    }\n    dispatchMouse(data) {\n        const options = this.configuration.options;\n        const selectionClipboardIsOn = (platform.isLinux && options.get(107 /* EditorOption.selectionClipboard */));\n        const columnSelection = options.get(22 /* EditorOption.columnSelection */);\n        if (data.middleButton && !selectionClipboardIsOn) {\n            this._columnSelect(data.position, data.mouseColumn, data.inSelectionMode);\n        }\n        else if (data.startedOnLineNumbers) {\n            // If the dragging started on the gutter, then have operations work on the entire line\n            if (this._hasMulticursorModifier(data)) {\n                if (data.inSelectionMode) {\n                    this._lastCursorLineSelect(data.position, data.revealType);\n                }\n                else {\n                    this._createCursor(data.position, true);\n                }\n            }\n            else {\n                if (data.inSelectionMode) {\n                    this._lineSelectDrag(data.position, data.revealType);\n                }\n                else {\n                    this._lineSelect(data.position, data.revealType);\n                }\n            }\n        }\n        else if (data.mouseDownCount >= 4) {\n            this._selectAll();\n        }\n        else if (data.mouseDownCount === 3) {\n            if (this._hasMulticursorModifier(data)) {\n                if (data.inSelectionMode) {\n                    this._lastCursorLineSelectDrag(data.position, data.revealType);\n                }\n                else {\n                    this._lastCursorLineSelect(data.position, data.revealType);\n                }\n            }\n            else {\n                if (data.inSelectionMode) {\n                    this._lineSelectDrag(data.position, data.revealType);\n                }\n                else {\n                    this._lineSelect(data.position, data.revealType);\n                }\n            }\n        }\n        else if (data.mouseDownCount === 2) {\n            if (!data.onInjectedText) {\n                if (this._hasMulticursorModifier(data)) {\n                    this._lastCursorWordSelect(data.position, data.revealType);\n                }\n                else {\n                    if (data.inSelectionMode) {\n                        this._wordSelectDrag(data.position, data.revealType);\n                    }\n                    else {\n                        this._wordSelect(data.position, data.revealType);\n                    }\n                }\n            }\n        }\n        else {\n            if (this._hasMulticursorModifier(data)) {\n                if (!this._hasNonMulticursorModifier(data)) {\n                    if (data.shiftKey) {\n                        this._columnSelect(data.position, data.mouseColumn, true);\n                    }\n                    else {\n                        // Do multi-cursor operations only when purely alt is pressed\n                        if (data.inSelectionMode) {\n                            this._lastCursorMoveToSelect(data.position, data.revealType);\n                        }\n                        else {\n                            this._createCursor(data.position, false);\n                        }\n                    }\n                }\n            }\n            else {\n                if (data.inSelectionMode) {\n                    if (data.altKey) {\n                        this._columnSelect(data.position, data.mouseColumn, true);\n                    }\n                    else {\n                        if (columnSelection) {\n                            this._columnSelect(data.position, data.mouseColumn, true);\n                        }\n                        else {\n                            this._moveToSelect(data.position, data.revealType);\n                        }\n                    }\n                }\n                else {\n                    this.moveTo(data.position, data.revealType);\n                }\n            }\n        }\n    }\n    _usualArgs(viewPosition, revealType) {\n        viewPosition = this._validateViewColumn(viewPosition);\n        return {\n            source: 'mouse',\n            position: this._convertViewToModelPosition(viewPosition),\n            viewPosition,\n            revealType\n        };\n    }\n    moveTo(viewPosition, revealType) {\n        CoreNavigationCommands.MoveTo.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n    _moveToSelect(viewPosition, revealType) {\n        CoreNavigationCommands.MoveToSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n    _columnSelect(viewPosition, mouseColumn, doColumnSelect) {\n        viewPosition = this._validateViewColumn(viewPosition);\n        CoreNavigationCommands.ColumnSelect.runCoreEditorCommand(this.viewModel, {\n            source: 'mouse',\n            position: this._convertViewToModelPosition(viewPosition),\n            viewPosition: viewPosition,\n            mouseColumn: mouseColumn,\n            doColumnSelect: doColumnSelect\n        });\n    }\n    _createCursor(viewPosition, wholeLine) {\n        viewPosition = this._validateViewColumn(viewPosition);\n        CoreNavigationCommands.CreateCursor.runCoreEditorCommand(this.viewModel, {\n            source: 'mouse',\n            position: this._convertViewToModelPosition(viewPosition),\n            viewPosition: viewPosition,\n            wholeLine: wholeLine\n        });\n    }\n    _lastCursorMoveToSelect(viewPosition, revealType) {\n        CoreNavigationCommands.LastCursorMoveToSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n    _wordSelect(viewPosition, revealType) {\n        CoreNavigationCommands.WordSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n    _wordSelectDrag(viewPosition, revealType) {\n        CoreNavigationCommands.WordSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n    _lastCursorWordSelect(viewPosition, revealType) {\n        CoreNavigationCommands.LastCursorWordSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n    _lineSelect(viewPosition, revealType) {\n        CoreNavigationCommands.LineSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n    _lineSelectDrag(viewPosition, revealType) {\n        CoreNavigationCommands.LineSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n    _lastCursorLineSelect(viewPosition, revealType) {\n        CoreNavigationCommands.LastCursorLineSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n    _lastCursorLineSelectDrag(viewPosition, revealType) {\n        CoreNavigationCommands.LastCursorLineSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n    _selectAll() {\n        CoreNavigationCommands.SelectAll.runCoreEditorCommand(this.viewModel, { source: 'mouse' });\n    }\n    // ----------------------\n    _convertViewToModelPosition(viewPosition) {\n        return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(viewPosition);\n    }\n    emitKeyDown(e) {\n        this.userInputEvents.emitKeyDown(e);\n    }\n    emitKeyUp(e) {\n        this.userInputEvents.emitKeyUp(e);\n    }\n    emitContextMenu(e) {\n        this.userInputEvents.emitContextMenu(e);\n    }\n    emitMouseMove(e) {\n        this.userInputEvents.emitMouseMove(e);\n    }\n    emitMouseLeave(e) {\n        this.userInputEvents.emitMouseLeave(e);\n    }\n    emitMouseUp(e) {\n        this.userInputEvents.emitMouseUp(e);\n    }\n    emitMouseDown(e) {\n        this.userInputEvents.emitMouseDown(e);\n    }\n    emitMouseDrag(e) {\n        this.userInputEvents.emitMouseDrag(e);\n    }\n    emitMouseDrop(e) {\n        this.userInputEvents.emitMouseDrop(e);\n    }\n    emitMouseDropCanceled() {\n        this.userInputEvents.emitMouseDropCanceled();\n    }\n    emitMouseWheel(e) {\n        this.userInputEvents.emitMouseWheel(e);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { createTrustedTypesPolicy } from '../../../base/browser/trustedTypes.js';\nimport { BugIndicatingError } from '../../../base/common/errors.js';\nimport { StringBuilder } from '../../common/core/stringBuilder.js';\nexport class RenderedLinesCollection {\n    constructor(createLine) {\n        this._createLine = createLine;\n        this._set(1, []);\n    }\n    flush() {\n        this._set(1, []);\n    }\n    _set(rendLineNumberStart, lines) {\n        this._lines = lines;\n        this._rendLineNumberStart = rendLineNumberStart;\n    }\n    _get() {\n        return {\n            rendLineNumberStart: this._rendLineNumberStart,\n            lines: this._lines\n        };\n    }\n    /**\n     * @returns Inclusive line number that is inside this collection\n     */\n    getStartLineNumber() {\n        return this._rendLineNumberStart;\n    }\n    /**\n     * @returns Inclusive line number that is inside this collection\n     */\n    getEndLineNumber() {\n        return this._rendLineNumberStart + this._lines.length - 1;\n    }\n    getCount() {\n        return this._lines.length;\n    }\n    getLine(lineNumber) {\n        const lineIndex = lineNumber - this._rendLineNumberStart;\n        if (lineIndex < 0 || lineIndex >= this._lines.length) {\n            throw new BugIndicatingError('Illegal value for lineNumber');\n        }\n        return this._lines[lineIndex];\n    }\n    /**\n     * @returns Lines that were removed from this collection\n     */\n    onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\n        if (this.getCount() === 0) {\n            // no lines\n            return null;\n        }\n        const startLineNumber = this.getStartLineNumber();\n        const endLineNumber = this.getEndLineNumber();\n        if (deleteToLineNumber < startLineNumber) {\n            // deleting above the viewport\n            const deleteCnt = deleteToLineNumber - deleteFromLineNumber + 1;\n            this._rendLineNumberStart -= deleteCnt;\n            return null;\n        }\n        if (deleteFromLineNumber > endLineNumber) {\n            // deleted below the viewport\n            return null;\n        }\n        // Record what needs to be deleted\n        let deleteStartIndex = 0;\n        let deleteCount = 0;\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - this._rendLineNumberStart;\n            if (deleteFromLineNumber <= lineNumber && lineNumber <= deleteToLineNumber) {\n                // this is a line to be deleted\n                if (deleteCount === 0) {\n                    // this is the first line to be deleted\n                    deleteStartIndex = lineIndex;\n                    deleteCount = 1;\n                }\n                else {\n                    deleteCount++;\n                }\n            }\n        }\n        // Adjust this._rendLineNumberStart for lines deleted above\n        if (deleteFromLineNumber < startLineNumber) {\n            // Something was deleted above\n            let deleteAboveCount = 0;\n            if (deleteToLineNumber < startLineNumber) {\n                // the entire deleted lines are above\n                deleteAboveCount = deleteToLineNumber - deleteFromLineNumber + 1;\n            }\n            else {\n                deleteAboveCount = startLineNumber - deleteFromLineNumber;\n            }\n            this._rendLineNumberStart -= deleteAboveCount;\n        }\n        const deleted = this._lines.splice(deleteStartIndex, deleteCount);\n        return deleted;\n    }\n    onLinesChanged(changeFromLineNumber, changeCount) {\n        const changeToLineNumber = changeFromLineNumber + changeCount - 1;\n        if (this.getCount() === 0) {\n            // no lines\n            return false;\n        }\n        const startLineNumber = this.getStartLineNumber();\n        const endLineNumber = this.getEndLineNumber();\n        let someoneNotified = false;\n        for (let changedLineNumber = changeFromLineNumber; changedLineNumber <= changeToLineNumber; changedLineNumber++) {\n            if (changedLineNumber >= startLineNumber && changedLineNumber <= endLineNumber) {\n                // Notify the line\n                this._lines[changedLineNumber - this._rendLineNumberStart].onContentChanged();\n                someoneNotified = true;\n            }\n        }\n        return someoneNotified;\n    }\n    onLinesInserted(insertFromLineNumber, insertToLineNumber) {\n        if (this.getCount() === 0) {\n            // no lines\n            return null;\n        }\n        const insertCnt = insertToLineNumber - insertFromLineNumber + 1;\n        const startLineNumber = this.getStartLineNumber();\n        const endLineNumber = this.getEndLineNumber();\n        if (insertFromLineNumber <= startLineNumber) {\n            // inserting above the viewport\n            this._rendLineNumberStart += insertCnt;\n            return null;\n        }\n        if (insertFromLineNumber > endLineNumber) {\n            // inserting below the viewport\n            return null;\n        }\n        if (insertCnt + insertFromLineNumber > endLineNumber) {\n            // insert inside the viewport in such a way that all remaining lines are pushed outside\n            const deleted = this._lines.splice(insertFromLineNumber - this._rendLineNumberStart, endLineNumber - insertFromLineNumber + 1);\n            return deleted;\n        }\n        // insert inside the viewport, push out some lines, but not all remaining lines\n        const newLines = [];\n        for (let i = 0; i < insertCnt; i++) {\n            newLines[i] = this._createLine();\n        }\n        const insertIndex = insertFromLineNumber - this._rendLineNumberStart;\n        const beforeLines = this._lines.slice(0, insertIndex);\n        const afterLines = this._lines.slice(insertIndex, this._lines.length - insertCnt);\n        const deletedLines = this._lines.slice(this._lines.length - insertCnt, this._lines.length);\n        this._lines = beforeLines.concat(newLines).concat(afterLines);\n        return deletedLines;\n    }\n    onTokensChanged(ranges) {\n        if (this.getCount() === 0) {\n            // no lines\n            return false;\n        }\n        const startLineNumber = this.getStartLineNumber();\n        const endLineNumber = this.getEndLineNumber();\n        let notifiedSomeone = false;\n        for (let i = 0, len = ranges.length; i < len; i++) {\n            const rng = ranges[i];\n            if (rng.toLineNumber < startLineNumber || rng.fromLineNumber > endLineNumber) {\n                // range outside viewport\n                continue;\n            }\n            const from = Math.max(startLineNumber, rng.fromLineNumber);\n            const to = Math.min(endLineNumber, rng.toLineNumber);\n            for (let lineNumber = from; lineNumber <= to; lineNumber++) {\n                const lineIndex = lineNumber - this._rendLineNumberStart;\n                this._lines[lineIndex].onTokensChanged();\n                notifiedSomeone = true;\n            }\n        }\n        return notifiedSomeone;\n    }\n}\nexport class VisibleLinesCollection {\n    constructor(host) {\n        this._host = host;\n        this.domNode = this._createDomNode();\n        this._linesCollection = new RenderedLinesCollection(() => this._host.createVisibleLine());\n    }\n    _createDomNode() {\n        const domNode = createFastDomNode(document.createElement('div'));\n        domNode.setClassName('view-layer');\n        domNode.setPosition('absolute');\n        domNode.domNode.setAttribute('role', 'presentation');\n        domNode.domNode.setAttribute('aria-hidden', 'true');\n        return domNode;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        if (e.hasChanged(144 /* EditorOption.layoutInfo */)) {\n            return true;\n        }\n        return false;\n    }\n    onFlushed(e) {\n        this._linesCollection.flush();\n        // No need to clear the dom node because a full .innerHTML will occur in ViewLayerRenderer._render\n        return true;\n    }\n    onLinesChanged(e) {\n        return this._linesCollection.onLinesChanged(e.fromLineNumber, e.count);\n    }\n    onLinesDeleted(e) {\n        const deleted = this._linesCollection.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\n        if (deleted) {\n            // Remove from DOM\n            for (let i = 0, len = deleted.length; i < len; i++) {\n                const lineDomNode = deleted[i].getDomNode();\n                if (lineDomNode) {\n                    this.domNode.domNode.removeChild(lineDomNode);\n                }\n            }\n        }\n        return true;\n    }\n    onLinesInserted(e) {\n        const deleted = this._linesCollection.onLinesInserted(e.fromLineNumber, e.toLineNumber);\n        if (deleted) {\n            // Remove from DOM\n            for (let i = 0, len = deleted.length; i < len; i++) {\n                const lineDomNode = deleted[i].getDomNode();\n                if (lineDomNode) {\n                    this.domNode.domNode.removeChild(lineDomNode);\n                }\n            }\n        }\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onTokensChanged(e) {\n        return this._linesCollection.onTokensChanged(e.ranges);\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // ---- end view event handlers\n    getStartLineNumber() {\n        return this._linesCollection.getStartLineNumber();\n    }\n    getEndLineNumber() {\n        return this._linesCollection.getEndLineNumber();\n    }\n    getVisibleLine(lineNumber) {\n        return this._linesCollection.getLine(lineNumber);\n    }\n    renderLines(viewportData) {\n        const inp = this._linesCollection._get();\n        const renderer = new ViewLayerRenderer(this.domNode.domNode, this._host, viewportData);\n        const ctx = {\n            rendLineNumberStart: inp.rendLineNumberStart,\n            lines: inp.lines,\n            linesLength: inp.lines.length\n        };\n        // Decide if this render will do a single update (single large .innerHTML) or many updates (inserting/removing dom nodes)\n        const resCtx = renderer.render(ctx, viewportData.startLineNumber, viewportData.endLineNumber, viewportData.relativeVerticalOffset);\n        this._linesCollection._set(resCtx.rendLineNumberStart, resCtx.lines);\n    }\n}\nclass ViewLayerRenderer {\n    constructor(domNode, host, viewportData) {\n        this.domNode = domNode;\n        this.host = host;\n        this.viewportData = viewportData;\n    }\n    render(inContext, startLineNumber, stopLineNumber, deltaTop) {\n        const ctx = {\n            rendLineNumberStart: inContext.rendLineNumberStart,\n            lines: inContext.lines.slice(0),\n            linesLength: inContext.linesLength\n        };\n        if ((ctx.rendLineNumberStart + ctx.linesLength - 1 < startLineNumber) || (stopLineNumber < ctx.rendLineNumberStart)) {\n            // There is no overlap whatsoever\n            ctx.rendLineNumberStart = startLineNumber;\n            ctx.linesLength = stopLineNumber - startLineNumber + 1;\n            ctx.lines = [];\n            for (let x = startLineNumber; x <= stopLineNumber; x++) {\n                ctx.lines[x - startLineNumber] = this.host.createVisibleLine();\n            }\n            this._finishRendering(ctx, true, deltaTop);\n            return ctx;\n        }\n        // Update lines which will remain untouched\n        this._renderUntouchedLines(ctx, Math.max(startLineNumber - ctx.rendLineNumberStart, 0), Math.min(stopLineNumber - ctx.rendLineNumberStart, ctx.linesLength - 1), deltaTop, startLineNumber);\n        if (ctx.rendLineNumberStart > startLineNumber) {\n            // Insert lines before\n            const fromLineNumber = startLineNumber;\n            const toLineNumber = Math.min(stopLineNumber, ctx.rendLineNumberStart - 1);\n            if (fromLineNumber <= toLineNumber) {\n                this._insertLinesBefore(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\n                ctx.linesLength += toLineNumber - fromLineNumber + 1;\n            }\n        }\n        else if (ctx.rendLineNumberStart < startLineNumber) {\n            // Remove lines before\n            const removeCnt = Math.min(ctx.linesLength, startLineNumber - ctx.rendLineNumberStart);\n            if (removeCnt > 0) {\n                this._removeLinesBefore(ctx, removeCnt);\n                ctx.linesLength -= removeCnt;\n            }\n        }\n        ctx.rendLineNumberStart = startLineNumber;\n        if (ctx.rendLineNumberStart + ctx.linesLength - 1 < stopLineNumber) {\n            // Insert lines after\n            const fromLineNumber = ctx.rendLineNumberStart + ctx.linesLength;\n            const toLineNumber = stopLineNumber;\n            if (fromLineNumber <= toLineNumber) {\n                this._insertLinesAfter(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\n                ctx.linesLength += toLineNumber - fromLineNumber + 1;\n            }\n        }\n        else if (ctx.rendLineNumberStart + ctx.linesLength - 1 > stopLineNumber) {\n            // Remove lines after\n            const fromLineNumber = Math.max(0, stopLineNumber - ctx.rendLineNumberStart + 1);\n            const toLineNumber = ctx.linesLength - 1;\n            const removeCnt = toLineNumber - fromLineNumber + 1;\n            if (removeCnt > 0) {\n                this._removeLinesAfter(ctx, removeCnt);\n                ctx.linesLength -= removeCnt;\n            }\n        }\n        this._finishRendering(ctx, false, deltaTop);\n        return ctx;\n    }\n    _renderUntouchedLines(ctx, startIndex, endIndex, deltaTop, deltaLN) {\n        const rendLineNumberStart = ctx.rendLineNumberStart;\n        const lines = ctx.lines;\n        for (let i = startIndex; i <= endIndex; i++) {\n            const lineNumber = rendLineNumberStart + i;\n            lines[i].layoutLine(lineNumber, deltaTop[lineNumber - deltaLN]);\n        }\n    }\n    _insertLinesBefore(ctx, fromLineNumber, toLineNumber, deltaTop, deltaLN) {\n        const newLines = [];\n        let newLinesLen = 0;\n        for (let lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n            newLines[newLinesLen++] = this.host.createVisibleLine();\n        }\n        ctx.lines = newLines.concat(ctx.lines);\n    }\n    _removeLinesBefore(ctx, removeCount) {\n        for (let i = 0; i < removeCount; i++) {\n            const lineDomNode = ctx.lines[i].getDomNode();\n            if (lineDomNode) {\n                this.domNode.removeChild(lineDomNode);\n            }\n        }\n        ctx.lines.splice(0, removeCount);\n    }\n    _insertLinesAfter(ctx, fromLineNumber, toLineNumber, deltaTop, deltaLN) {\n        const newLines = [];\n        let newLinesLen = 0;\n        for (let lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n            newLines[newLinesLen++] = this.host.createVisibleLine();\n        }\n        ctx.lines = ctx.lines.concat(newLines);\n    }\n    _removeLinesAfter(ctx, removeCount) {\n        const removeIndex = ctx.linesLength - removeCount;\n        for (let i = 0; i < removeCount; i++) {\n            const lineDomNode = ctx.lines[removeIndex + i].getDomNode();\n            if (lineDomNode) {\n                this.domNode.removeChild(lineDomNode);\n            }\n        }\n        ctx.lines.splice(removeIndex, removeCount);\n    }\n    _finishRenderingNewLines(ctx, domNodeIsEmpty, newLinesHTML, wasNew) {\n        if (ViewLayerRenderer._ttPolicy) {\n            newLinesHTML = ViewLayerRenderer._ttPolicy.createHTML(newLinesHTML);\n        }\n        const lastChild = this.domNode.lastChild;\n        if (domNodeIsEmpty || !lastChild) {\n            this.domNode.innerHTML = newLinesHTML; // explains the ugly casts -> https://github.com/microsoft/vscode/issues/106396#issuecomment-692625393;\n        }\n        else {\n            lastChild.insertAdjacentHTML('afterend', newLinesHTML);\n        }\n        let currChild = this.domNode.lastChild;\n        for (let i = ctx.linesLength - 1; i >= 0; i--) {\n            const line = ctx.lines[i];\n            if (wasNew[i]) {\n                line.setDomNode(currChild);\n                currChild = currChild.previousSibling;\n            }\n        }\n    }\n    _finishRenderingInvalidLines(ctx, invalidLinesHTML, wasInvalid) {\n        const hugeDomNode = document.createElement('div');\n        if (ViewLayerRenderer._ttPolicy) {\n            invalidLinesHTML = ViewLayerRenderer._ttPolicy.createHTML(invalidLinesHTML);\n        }\n        hugeDomNode.innerHTML = invalidLinesHTML;\n        for (let i = 0; i < ctx.linesLength; i++) {\n            const line = ctx.lines[i];\n            if (wasInvalid[i]) {\n                const source = hugeDomNode.firstChild;\n                const lineDomNode = line.getDomNode();\n                lineDomNode.parentNode.replaceChild(source, lineDomNode);\n                line.setDomNode(source);\n            }\n        }\n    }\n    _finishRendering(ctx, domNodeIsEmpty, deltaTop) {\n        const sb = ViewLayerRenderer._sb;\n        const linesLength = ctx.linesLength;\n        const lines = ctx.lines;\n        const rendLineNumberStart = ctx.rendLineNumberStart;\n        const wasNew = [];\n        {\n            sb.reset();\n            let hadNewLine = false;\n            for (let i = 0; i < linesLength; i++) {\n                const line = lines[i];\n                wasNew[i] = false;\n                const lineDomNode = line.getDomNode();\n                if (lineDomNode) {\n                    // line is not new\n                    continue;\n                }\n                const renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this.viewportData, sb);\n                if (!renderResult) {\n                    // line does not need rendering\n                    continue;\n                }\n                wasNew[i] = true;\n                hadNewLine = true;\n            }\n            if (hadNewLine) {\n                this._finishRenderingNewLines(ctx, domNodeIsEmpty, sb.build(), wasNew);\n            }\n        }\n        {\n            sb.reset();\n            let hadInvalidLine = false;\n            const wasInvalid = [];\n            for (let i = 0; i < linesLength; i++) {\n                const line = lines[i];\n                wasInvalid[i] = false;\n                if (wasNew[i]) {\n                    // line was new\n                    continue;\n                }\n                const renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this.viewportData, sb);\n                if (!renderResult) {\n                    // line does not need rendering\n                    continue;\n                }\n                wasInvalid[i] = true;\n                hadInvalidLine = true;\n            }\n            if (hadInvalidLine) {\n                this._finishRenderingInvalidLines(ctx, sb.build(), wasInvalid);\n            }\n        }\n    }\n}\nViewLayerRenderer._ttPolicy = createTrustedTypesPolicy('editorViewLayer', { createHTML: value => value });\nViewLayerRenderer._sb = new StringBuilder(100000);\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { VisibleLinesCollection } from './viewLayer.js';\nimport { ViewPart } from './viewPart.js';\nexport class ViewOverlays extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._visibleLines = new VisibleLinesCollection(this);\n        this.domNode = this._visibleLines.domNode;\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        applyFontInfo(this.domNode, fontInfo);\n        this._dynamicOverlays = [];\n        this._isFocused = false;\n        this.domNode.setClassName('view-overlays');\n    }\n    shouldRender() {\n        if (super.shouldRender()) {\n            return true;\n        }\n        for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n            const dynamicOverlay = this._dynamicOverlays[i];\n            if (dynamicOverlay.shouldRender()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    dispose() {\n        super.dispose();\n        for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n            const dynamicOverlay = this._dynamicOverlays[i];\n            dynamicOverlay.dispose();\n        }\n        this._dynamicOverlays = [];\n    }\n    getDomNode() {\n        return this.domNode;\n    }\n    // ---- begin IVisibleLinesHost\n    createVisibleLine() {\n        return new ViewOverlayLine(this._context.configuration, this._dynamicOverlays);\n    }\n    // ---- end IVisibleLinesHost\n    addDynamicOverlay(overlay) {\n        this._dynamicOverlays.push(overlay);\n    }\n    // ----- event handlers\n    onConfigurationChanged(e) {\n        this._visibleLines.onConfigurationChanged(e);\n        const startLineNumber = this._visibleLines.getStartLineNumber();\n        const endLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const line = this._visibleLines.getVisibleLine(lineNumber);\n            line.onConfigurationChanged(e);\n        }\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        applyFontInfo(this.domNode, fontInfo);\n        return true;\n    }\n    onFlushed(e) {\n        return this._visibleLines.onFlushed(e);\n    }\n    onFocusChanged(e) {\n        this._isFocused = e.isFocused;\n        return true;\n    }\n    onLinesChanged(e) {\n        return this._visibleLines.onLinesChanged(e);\n    }\n    onLinesDeleted(e) {\n        return this._visibleLines.onLinesDeleted(e);\n    }\n    onLinesInserted(e) {\n        return this._visibleLines.onLinesInserted(e);\n    }\n    onScrollChanged(e) {\n        return this._visibleLines.onScrollChanged(e) || true;\n    }\n    onTokensChanged(e) {\n        return this._visibleLines.onTokensChanged(e);\n    }\n    onZonesChanged(e) {\n        return this._visibleLines.onZonesChanged(e);\n    }\n    // ----- end event handlers\n    prepareRender(ctx) {\n        const toRender = this._dynamicOverlays.filter(overlay => overlay.shouldRender());\n        for (let i = 0, len = toRender.length; i < len; i++) {\n            const dynamicOverlay = toRender[i];\n            dynamicOverlay.prepareRender(ctx);\n            dynamicOverlay.onDidRender();\n        }\n    }\n    render(ctx) {\n        // Overwriting to bypass `shouldRender` flag\n        this._viewOverlaysRender(ctx);\n        this.domNode.toggleClassName('focused', this._isFocused);\n    }\n    _viewOverlaysRender(ctx) {\n        this._visibleLines.renderLines(ctx.viewportData);\n    }\n}\nexport class ViewOverlayLine {\n    constructor(configuration, dynamicOverlays) {\n        this._configuration = configuration;\n        this._lineHeight = this._configuration.options.get(67 /* EditorOption.lineHeight */);\n        this._dynamicOverlays = dynamicOverlays;\n        this._domNode = null;\n        this._renderedContent = null;\n    }\n    getDomNode() {\n        if (!this._domNode) {\n            return null;\n        }\n        return this._domNode.domNode;\n    }\n    setDomNode(domNode) {\n        this._domNode = createFastDomNode(domNode);\n    }\n    onContentChanged() {\n        // Nothing\n    }\n    onTokensChanged() {\n        // Nothing\n    }\n    onConfigurationChanged(e) {\n        this._lineHeight = this._configuration.options.get(67 /* EditorOption.lineHeight */);\n    }\n    renderLine(lineNumber, deltaTop, viewportData, sb) {\n        let result = '';\n        for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n            const dynamicOverlay = this._dynamicOverlays[i];\n            result += dynamicOverlay.render(viewportData.startLineNumber, lineNumber);\n        }\n        if (this._renderedContent === result) {\n            // No rendering needed\n            return false;\n        }\n        this._renderedContent = result;\n        sb.appendString('<div style=\"position:absolute;top:');\n        sb.appendString(String(deltaTop));\n        sb.appendString('px;width:100%;height:');\n        sb.appendString(String(this._lineHeight));\n        sb.appendString('px;\">');\n        sb.appendString(result);\n        sb.appendString('</div>');\n        return true;\n    }\n    layoutLine(lineNumber, deltaTop) {\n        if (this._domNode) {\n            this._domNode.setTop(deltaTop);\n            this._domNode.setHeight(this._lineHeight);\n        }\n    }\n}\nexport class ContentViewOverlays extends ViewOverlays {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this.domNode.setHeight(0);\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this._contentWidth = layoutInfo.contentWidth;\n        return super.onConfigurationChanged(e) || true;\n    }\n    onScrollChanged(e) {\n        return super.onScrollChanged(e) || e.scrollWidthChanged;\n    }\n    // --- end event handlers\n    _viewOverlaysRender(ctx) {\n        super._viewOverlaysRender(ctx);\n        this.domNode.setWidth(Math.max(ctx.scrollWidth, this._contentWidth));\n    }\n}\nexport class MarginViewOverlays extends ViewOverlays {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this.domNode.setClassName('margin-view-overlays');\n        this.domNode.setWidth(1);\n        applyFontInfo(this.domNode, options.get(50 /* EditorOption.fontInfo */));\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        applyFontInfo(this.domNode, options.get(50 /* EditorOption.fontInfo */));\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this._contentLeft = layoutInfo.contentLeft;\n        return super.onConfigurationChanged(e) || true;\n    }\n    onScrollChanged(e) {\n        return super.onScrollChanged(e) || e.scrollHeightChanged;\n    }\n    _viewOverlaysRender(ctx) {\n        super._viewOverlaysRender(ctx);\n        const height = Math.min(ctx.scrollHeight, 1000000);\n        this.domNode.setHeight(height);\n        this.domNode.setWidth(this._contentLeft);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../../common/core/position.js';\nexport class ViewUserInputEvents {\n    constructor(coordinatesConverter) {\n        this.onKeyDown = null;\n        this.onKeyUp = null;\n        this.onContextMenu = null;\n        this.onMouseMove = null;\n        this.onMouseLeave = null;\n        this.onMouseDown = null;\n        this.onMouseUp = null;\n        this.onMouseDrag = null;\n        this.onMouseDrop = null;\n        this.onMouseDropCanceled = null;\n        this.onMouseWheel = null;\n        this._coordinatesConverter = coordinatesConverter;\n    }\n    emitKeyDown(e) {\n        var _a;\n        (_a = this.onKeyDown) === null || _a === void 0 ? void 0 : _a.call(this, e);\n    }\n    emitKeyUp(e) {\n        var _a;\n        (_a = this.onKeyUp) === null || _a === void 0 ? void 0 : _a.call(this, e);\n    }\n    emitContextMenu(e) {\n        var _a;\n        (_a = this.onContextMenu) === null || _a === void 0 ? void 0 : _a.call(this, this._convertViewToModelMouseEvent(e));\n    }\n    emitMouseMove(e) {\n        var _a;\n        (_a = this.onMouseMove) === null || _a === void 0 ? void 0 : _a.call(this, this._convertViewToModelMouseEvent(e));\n    }\n    emitMouseLeave(e) {\n        var _a;\n        (_a = this.onMouseLeave) === null || _a === void 0 ? void 0 : _a.call(this, this._convertViewToModelMouseEvent(e));\n    }\n    emitMouseDown(e) {\n        var _a;\n        (_a = this.onMouseDown) === null || _a === void 0 ? void 0 : _a.call(this, this._convertViewToModelMouseEvent(e));\n    }\n    emitMouseUp(e) {\n        var _a;\n        (_a = this.onMouseUp) === null || _a === void 0 ? void 0 : _a.call(this, this._convertViewToModelMouseEvent(e));\n    }\n    emitMouseDrag(e) {\n        var _a;\n        (_a = this.onMouseDrag) === null || _a === void 0 ? void 0 : _a.call(this, this._convertViewToModelMouseEvent(e));\n    }\n    emitMouseDrop(e) {\n        var _a;\n        (_a = this.onMouseDrop) === null || _a === void 0 ? void 0 : _a.call(this, this._convertViewToModelMouseEvent(e));\n    }\n    emitMouseDropCanceled() {\n        var _a;\n        (_a = this.onMouseDropCanceled) === null || _a === void 0 ? void 0 : _a.call(this);\n    }\n    emitMouseWheel(e) {\n        var _a;\n        (_a = this.onMouseWheel) === null || _a === void 0 ? void 0 : _a.call(this, e);\n    }\n    _convertViewToModelMouseEvent(e) {\n        if (e.target) {\n            return {\n                event: e.event,\n                target: this._convertViewToModelMouseTarget(e.target)\n            };\n        }\n        return e;\n    }\n    _convertViewToModelMouseTarget(target) {\n        return ViewUserInputEvents.convertViewToModelMouseTarget(target, this._coordinatesConverter);\n    }\n    static convertViewToModelMouseTarget(target, coordinatesConverter) {\n        const result = { ...target };\n        if (result.position) {\n            result.position = coordinatesConverter.convertViewPositionToModelPosition(result.position);\n        }\n        if (result.range) {\n            result.range = coordinatesConverter.convertViewRangeToModelRange(result.range);\n        }\n        if (result.type === 5 /* MouseTargetType.GUTTER_VIEW_ZONE */ || result.type === 8 /* MouseTargetType.CONTENT_VIEW_ZONE */) {\n            result.detail = this.convertViewToModelViewZoneData(result.detail, coordinatesConverter);\n        }\n        return result;\n    }\n    static convertViewToModelViewZoneData(data, coordinatesConverter) {\n        return {\n            viewZoneId: data.viewZoneId,\n            positionBefore: data.positionBefore ? coordinatesConverter.convertViewPositionToModelPosition(data.positionBefore) : data.positionBefore,\n            positionAfter: data.positionAfter ? coordinatesConverter.convertViewPositionToModelPosition(data.positionAfter) : data.positionAfter,\n            position: coordinatesConverter.convertViewPositionToModelPosition(data.position),\n            afterLineNumber: coordinatesConverter.convertViewPositionToModelPosition(new Position(data.afterLineNumber, 1)).lineNumber,\n        };\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport './blockDecorations.css';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class BlockDecorations extends ViewPart {\n    constructor(context) {\n        super(context);\n        this.blocks = [];\n        this.contentWidth = -1;\n        this.contentLeft = 0;\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this.domNode.setClassName('blockDecorations-container');\n        this.update();\n    }\n    update() {\n        let didChange = false;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        const newContentWidth = layoutInfo.contentWidth - layoutInfo.verticalScrollbarWidth;\n        if (this.contentWidth !== newContentWidth) {\n            this.contentWidth = newContentWidth;\n            didChange = true;\n        }\n        const newContentLeft = layoutInfo.contentLeft;\n        if (this.contentLeft !== newContentLeft) {\n            this.contentLeft = newContentLeft;\n            didChange = true;\n        }\n        return didChange;\n    }\n    dispose() {\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        return this.update();\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollLeftChanged;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        var _a;\n        let count = 0;\n        const decorations = ctx.getDecorationsInViewport();\n        for (const decoration of decorations) {\n            if (!decoration.options.blockClassName) {\n                continue;\n            }\n            let block = this.blocks[count];\n            if (!block) {\n                block = this.blocks[count] = createFastDomNode(document.createElement('div'));\n                this.domNode.appendChild(block);\n            }\n            let top;\n            let bottom;\n            if (decoration.options.blockIsAfterEnd) {\n                // range must be empty\n                top = ctx.getVerticalOffsetAfterLineNumber(decoration.range.endLineNumber, false);\n                bottom = ctx.getVerticalOffsetAfterLineNumber(decoration.range.endLineNumber, true);\n            }\n            else {\n                top = ctx.getVerticalOffsetForLineNumber(decoration.range.startLineNumber, true);\n                bottom = decoration.range.isEmpty() && !decoration.options.blockDoesNotCollapse\n                    ? ctx.getVerticalOffsetForLineNumber(decoration.range.startLineNumber, false)\n                    : ctx.getVerticalOffsetAfterLineNumber(decoration.range.endLineNumber, true);\n            }\n            const [paddingTop, paddingRight, paddingBottom, paddingLeft] = (_a = decoration.options.blockPadding) !== null && _a !== void 0 ? _a : [0, 0, 0, 0];\n            block.setClassName('blockDecorations-block ' + decoration.options.blockClassName);\n            block.setLeft(this.contentLeft - paddingLeft);\n            block.setWidth(this.contentWidth + paddingLeft + paddingRight);\n            block.setTop(top - ctx.scrollTop - paddingTop);\n            block.setHeight(bottom - top + paddingTop + paddingBottom);\n            count++;\n        }\n        for (let i = count; i < this.blocks.length; i++) {\n            this.blocks[i].domNode.remove();\n        }\n        this.blocks.length = count;\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nexport class ViewContentWidgets extends ViewPart {\n    constructor(context, viewDomNode) {\n        super(context);\n        this._viewDomNode = viewDomNode;\n        this._widgets = {};\n        this.domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this.domNode, 1 /* PartFingerprint.ContentWidgets */);\n        this.domNode.setClassName('contentWidgets');\n        this.domNode.setPosition('absolute');\n        this.domNode.setTop(0);\n        this.overflowingContentWidgetsDomNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this.overflowingContentWidgetsDomNode, 2 /* PartFingerprint.OverflowingContentWidgets */);\n        this.overflowingContentWidgetsDomNode.setClassName('overflowingContentWidgets');\n    }\n    dispose() {\n        super.dispose();\n        this._widgets = {};\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].onConfigurationChanged(e);\n        }\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLineMappingChanged(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onLinesChanged(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onLinesDeleted(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onLinesInserted(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // ---- end view event handlers\n    _updateAnchorsViewPositions() {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].updateAnchorViewPosition();\n        }\n    }\n    addWidget(_widget) {\n        const myWidget = new Widget(this._context, this._viewDomNode, _widget);\n        this._widgets[myWidget.id] = myWidget;\n        if (myWidget.allowEditorOverflow) {\n            this.overflowingContentWidgetsDomNode.appendChild(myWidget.domNode);\n        }\n        else {\n            this.domNode.appendChild(myWidget.domNode);\n        }\n        this.setShouldRender();\n    }\n    setWidgetPosition(widget, primaryAnchor, secondaryAnchor, preference, affinity) {\n        const myWidget = this._widgets[widget.getId()];\n        myWidget.setPosition(primaryAnchor, secondaryAnchor, preference, affinity);\n        this.setShouldRender();\n    }\n    removeWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            const myWidget = this._widgets[widgetId];\n            delete this._widgets[widgetId];\n            const domNode = myWidget.domNode.domNode;\n            domNode.parentNode.removeChild(domNode);\n            domNode.removeAttribute('monaco-visible-content-widget');\n            this.setShouldRender();\n        }\n    }\n    shouldSuppressMouseDownOnWidget(widgetId) {\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            return this._widgets[widgetId].suppressMouseDown;\n        }\n        return false;\n    }\n    onBeforeRender(viewportData) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].onBeforeRender(viewportData);\n        }\n    }\n    prepareRender(ctx) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].prepareRender(ctx);\n        }\n    }\n    render(ctx) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].render(ctx);\n        }\n    }\n}\nclass Widget {\n    constructor(context, viewDomNode, actual) {\n        this._primaryAnchor = new PositionPair(null, null);\n        this._secondaryAnchor = new PositionPair(null, null);\n        this._context = context;\n        this._viewDomNode = viewDomNode;\n        this._actual = actual;\n        this.domNode = createFastDomNode(this._actual.getDomNode());\n        this.id = this._actual.getId();\n        this.allowEditorOverflow = this._actual.allowEditorOverflow || false;\n        this.suppressMouseDown = this._actual.suppressMouseDown || false;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this._fixedOverflowWidgets = options.get(42 /* EditorOption.fixedOverflowWidgets */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._affinity = null;\n        this._preference = [];\n        this._cachedDomNodeOffsetWidth = -1;\n        this._cachedDomNodeOffsetHeight = -1;\n        this._maxWidth = this._getMaxWidth();\n        this._isVisible = false;\n        this._renderData = null;\n        this.domNode.setPosition((this._fixedOverflowWidgets && this.allowEditorOverflow) ? 'fixed' : 'absolute');\n        this.domNode.setDisplay('none');\n        this.domNode.setVisibility('hidden');\n        this.domNode.setAttribute('widgetId', this.id);\n        this.domNode.setMaxWidth(this._maxWidth);\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        if (e.hasChanged(144 /* EditorOption.layoutInfo */)) {\n            const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n            this._contentLeft = layoutInfo.contentLeft;\n            this._contentWidth = layoutInfo.contentWidth;\n            this._maxWidth = this._getMaxWidth();\n        }\n    }\n    updateAnchorViewPosition() {\n        this._setPosition(this._affinity, this._primaryAnchor.modelPosition, this._secondaryAnchor.modelPosition);\n    }\n    _setPosition(affinity, primaryAnchor, secondaryAnchor) {\n        this._affinity = affinity;\n        this._primaryAnchor = getValidPositionPair(primaryAnchor, this._context.viewModel, this._affinity);\n        this._secondaryAnchor = getValidPositionPair(secondaryAnchor, this._context.viewModel, this._affinity);\n        function getValidPositionPair(position, viewModel, affinity) {\n            if (!position) {\n                return new PositionPair(null, null);\n            }\n            // Do not trust that widgets give a valid position\n            const validModelPosition = viewModel.model.validatePosition(position);\n            if (viewModel.coordinatesConverter.modelPositionIsVisible(validModelPosition)) {\n                const viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(validModelPosition, affinity !== null && affinity !== void 0 ? affinity : undefined);\n                return new PositionPair(position, viewPosition);\n            }\n            return new PositionPair(position, null);\n        }\n    }\n    _getMaxWidth() {\n        const elDocument = this.domNode.domNode.ownerDocument;\n        const elWindow = elDocument.defaultView;\n        return (this.allowEditorOverflow\n            ? (elWindow === null || elWindow === void 0 ? void 0 : elWindow.innerWidth) || elDocument.documentElement.offsetWidth || elDocument.body.offsetWidth\n            : this._contentWidth);\n    }\n    setPosition(primaryAnchor, secondaryAnchor, preference, affinity) {\n        this._setPosition(affinity, primaryAnchor, secondaryAnchor);\n        this._preference = preference;\n        if (this._primaryAnchor.viewPosition && this._preference && this._preference.length > 0) {\n            // this content widget would like to be visible if possible\n            // we change it from `display:none` to `display:block` even if it\n            // might be outside the viewport such that we can measure its size\n            // in `prepareRender`\n            this.domNode.setDisplay('block');\n        }\n        else {\n            this.domNode.setDisplay('none');\n        }\n        this._cachedDomNodeOffsetWidth = -1;\n        this._cachedDomNodeOffsetHeight = -1;\n    }\n    _layoutBoxInViewport(anchor, width, height, ctx) {\n        // Our visible box is split horizontally by the current line => 2 boxes\n        // a) the box above the line\n        const aboveLineTop = anchor.top;\n        const heightAvailableAboveLine = aboveLineTop;\n        // b) the box under the line\n        const underLineTop = anchor.top + anchor.height;\n        const heightAvailableUnderLine = ctx.viewportHeight - underLineTop;\n        const aboveTop = aboveLineTop - height;\n        const fitsAbove = (heightAvailableAboveLine >= height);\n        const belowTop = underLineTop;\n        const fitsBelow = (heightAvailableUnderLine >= height);\n        // And its left\n        let left = anchor.left;\n        if (left + width > ctx.scrollLeft + ctx.viewportWidth) {\n            left = ctx.scrollLeft + ctx.viewportWidth - width;\n        }\n        if (left < ctx.scrollLeft) {\n            left = ctx.scrollLeft;\n        }\n        return { fitsAbove, aboveTop, fitsBelow, belowTop, left };\n    }\n    _layoutHorizontalSegmentInPage(windowSize, domNodePosition, left, width) {\n        var _a;\n        // Leave some clearance to the left/right\n        const LEFT_PADDING = 15;\n        const RIGHT_PADDING = 15;\n        // Initially, the limits are defined as the dom node limits\n        const MIN_LIMIT = Math.max(LEFT_PADDING, domNodePosition.left - width);\n        const MAX_LIMIT = Math.min(domNodePosition.left + domNodePosition.width + width, windowSize.width - RIGHT_PADDING);\n        const elDocument = this._viewDomNode.domNode.ownerDocument;\n        const elWindow = elDocument.defaultView;\n        let absoluteLeft = domNodePosition.left + left - ((_a = elWindow === null || elWindow === void 0 ? void 0 : elWindow.scrollX) !== null && _a !== void 0 ? _a : 0);\n        if (absoluteLeft + width > MAX_LIMIT) {\n            const delta = absoluteLeft - (MAX_LIMIT - width);\n            absoluteLeft -= delta;\n            left -= delta;\n        }\n        if (absoluteLeft < MIN_LIMIT) {\n            const delta = absoluteLeft - MIN_LIMIT;\n            absoluteLeft -= delta;\n            left -= delta;\n        }\n        return [left, absoluteLeft];\n    }\n    _layoutBoxInPage(anchor, width, height, ctx) {\n        var _a, _b;\n        const aboveTop = anchor.top - height;\n        const belowTop = anchor.top + anchor.height;\n        const domNodePosition = dom.getDomNodePagePosition(this._viewDomNode.domNode);\n        const elDocument = this._viewDomNode.domNode.ownerDocument;\n        const elWindow = elDocument.defaultView;\n        const absoluteAboveTop = domNodePosition.top + aboveTop - ((_a = elWindow === null || elWindow === void 0 ? void 0 : elWindow.scrollY) !== null && _a !== void 0 ? _a : 0);\n        const absoluteBelowTop = domNodePosition.top + belowTop - ((_b = elWindow === null || elWindow === void 0 ? void 0 : elWindow.scrollY) !== null && _b !== void 0 ? _b : 0);\n        const windowSize = dom.getClientArea(elDocument.body);\n        const [left, absoluteAboveLeft] = this._layoutHorizontalSegmentInPage(windowSize, domNodePosition, anchor.left - ctx.scrollLeft + this._contentLeft, width);\n        // Leave some clearance to the top/bottom\n        const TOP_PADDING = 22;\n        const BOTTOM_PADDING = 22;\n        const fitsAbove = (absoluteAboveTop >= TOP_PADDING);\n        const fitsBelow = (absoluteBelowTop + height <= windowSize.height - BOTTOM_PADDING);\n        if (this._fixedOverflowWidgets) {\n            return {\n                fitsAbove,\n                aboveTop: Math.max(absoluteAboveTop, TOP_PADDING),\n                fitsBelow,\n                belowTop: absoluteBelowTop,\n                left: absoluteAboveLeft\n            };\n        }\n        return { fitsAbove, aboveTop, fitsBelow, belowTop, left };\n    }\n    _prepareRenderWidgetAtExactPositionOverflowing(topLeft) {\n        return new Coordinate(topLeft.top, topLeft.left + this._contentLeft);\n    }\n    /**\n     * Compute the coordinates above and below the primary and secondary anchors.\n     * The content widget *must* touch the primary anchor.\n     * The content widget should touch if possible the secondary anchor.\n     */\n    _getAnchorsCoordinates(ctx) {\n        var _a, _b;\n        const primary = getCoordinates(this._primaryAnchor.viewPosition, this._affinity, this._lineHeight);\n        const secondaryViewPosition = (((_a = this._secondaryAnchor.viewPosition) === null || _a === void 0 ? void 0 : _a.lineNumber) === ((_b = this._primaryAnchor.viewPosition) === null || _b === void 0 ? void 0 : _b.lineNumber) ? this._secondaryAnchor.viewPosition : null);\n        const secondary = getCoordinates(secondaryViewPosition, this._affinity, this._lineHeight);\n        return { primary, secondary };\n        function getCoordinates(position, affinity, lineHeight) {\n            if (!position) {\n                return null;\n            }\n            const horizontalPosition = ctx.visibleRangeForPosition(position);\n            if (!horizontalPosition) {\n                return null;\n            }\n            // Left-align widgets that should appear :before content\n            const left = (position.column === 1 && affinity === 3 /* PositionAffinity.LeftOfInjectedText */ ? 0 : horizontalPosition.left);\n            const top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.scrollTop;\n            return new AnchorCoordinate(top, left, lineHeight);\n        }\n    }\n    _reduceAnchorCoordinates(primary, secondary, width) {\n        if (!secondary) {\n            return primary;\n        }\n        const fontInfo = this._context.configuration.options.get(50 /* EditorOption.fontInfo */);\n        let left = secondary.left;\n        if (left < primary.left) {\n            left = Math.max(left, primary.left - width + fontInfo.typicalFullwidthCharacterWidth);\n        }\n        else {\n            left = Math.min(left, primary.left + width - fontInfo.typicalFullwidthCharacterWidth);\n        }\n        return new AnchorCoordinate(primary.top, left, primary.height);\n    }\n    _prepareRenderWidget(ctx) {\n        if (!this._preference || this._preference.length === 0) {\n            return null;\n        }\n        const { primary, secondary } = this._getAnchorsCoordinates(ctx);\n        if (!primary) {\n            return null;\n        }\n        if (this._cachedDomNodeOffsetWidth === -1 || this._cachedDomNodeOffsetHeight === -1) {\n            let preferredDimensions = null;\n            if (typeof this._actual.beforeRender === 'function') {\n                preferredDimensions = safeInvoke(this._actual.beforeRender, this._actual);\n            }\n            if (preferredDimensions) {\n                this._cachedDomNodeOffsetWidth = preferredDimensions.width;\n                this._cachedDomNodeOffsetHeight = preferredDimensions.height;\n            }\n            else {\n                const domNode = this.domNode.domNode;\n                const clientRect = domNode.getBoundingClientRect();\n                this._cachedDomNodeOffsetWidth = Math.round(clientRect.width);\n                this._cachedDomNodeOffsetHeight = Math.round(clientRect.height);\n            }\n        }\n        const anchor = this._reduceAnchorCoordinates(primary, secondary, this._cachedDomNodeOffsetWidth);\n        let placement;\n        if (this.allowEditorOverflow) {\n            placement = this._layoutBoxInPage(anchor, this._cachedDomNodeOffsetWidth, this._cachedDomNodeOffsetHeight, ctx);\n        }\n        else {\n            placement = this._layoutBoxInViewport(anchor, this._cachedDomNodeOffsetWidth, this._cachedDomNodeOffsetHeight, ctx);\n        }\n        // Do two passes, first for perfect fit, second picks first option\n        for (let pass = 1; pass <= 2; pass++) {\n            for (const pref of this._preference) {\n                // placement\n                if (pref === 1 /* ContentWidgetPositionPreference.ABOVE */) {\n                    if (!placement) {\n                        // Widget outside of viewport\n                        return null;\n                    }\n                    if (pass === 2 || placement.fitsAbove) {\n                        return { coordinate: new Coordinate(placement.aboveTop, placement.left), position: 1 /* ContentWidgetPositionPreference.ABOVE */ };\n                    }\n                }\n                else if (pref === 2 /* ContentWidgetPositionPreference.BELOW */) {\n                    if (!placement) {\n                        // Widget outside of viewport\n                        return null;\n                    }\n                    if (pass === 2 || placement.fitsBelow) {\n                        return { coordinate: new Coordinate(placement.belowTop, placement.left), position: 2 /* ContentWidgetPositionPreference.BELOW */ };\n                    }\n                }\n                else {\n                    if (this.allowEditorOverflow) {\n                        return { coordinate: this._prepareRenderWidgetAtExactPositionOverflowing(new Coordinate(anchor.top, anchor.left)), position: 0 /* ContentWidgetPositionPreference.EXACT */ };\n                    }\n                    else {\n                        return { coordinate: new Coordinate(anchor.top, anchor.left), position: 0 /* ContentWidgetPositionPreference.EXACT */ };\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * On this first pass, we ensure that the content widget (if it is in the viewport) has the max width set correctly.\n     */\n    onBeforeRender(viewportData) {\n        if (!this._primaryAnchor.viewPosition || !this._preference) {\n            return;\n        }\n        if (this._primaryAnchor.viewPosition.lineNumber < viewportData.startLineNumber || this._primaryAnchor.viewPosition.lineNumber > viewportData.endLineNumber) {\n            // Outside of viewport\n            return;\n        }\n        this.domNode.setMaxWidth(this._maxWidth);\n    }\n    prepareRender(ctx) {\n        this._renderData = this._prepareRenderWidget(ctx);\n    }\n    render(ctx) {\n        if (!this._renderData) {\n            // This widget should be invisible\n            if (this._isVisible) {\n                this.domNode.removeAttribute('monaco-visible-content-widget');\n                this._isVisible = false;\n                this.domNode.setVisibility('hidden');\n            }\n            if (typeof this._actual.afterRender === 'function') {\n                safeInvoke(this._actual.afterRender, this._actual, null);\n            }\n            return;\n        }\n        // This widget should be visible\n        if (this.allowEditorOverflow) {\n            this.domNode.setTop(this._renderData.coordinate.top);\n            this.domNode.setLeft(this._renderData.coordinate.left);\n        }\n        else {\n            this.domNode.setTop(this._renderData.coordinate.top + ctx.scrollTop - ctx.bigNumbersDelta);\n            this.domNode.setLeft(this._renderData.coordinate.left);\n        }\n        if (!this._isVisible) {\n            this.domNode.setVisibility('inherit');\n            this.domNode.setAttribute('monaco-visible-content-widget', 'true');\n            this._isVisible = true;\n        }\n        if (typeof this._actual.afterRender === 'function') {\n            safeInvoke(this._actual.afterRender, this._actual, this._renderData.position);\n        }\n    }\n}\nclass PositionPair {\n    constructor(modelPosition, viewPosition) {\n        this.modelPosition = modelPosition;\n        this.viewPosition = viewPosition;\n    }\n}\nclass Coordinate {\n    constructor(top, left) {\n        this.top = top;\n        this.left = left;\n        this._coordinateBrand = undefined;\n    }\n}\nclass AnchorCoordinate {\n    constructor(top, left, height) {\n        this.top = top;\n        this.left = left;\n        this.height = height;\n        this._anchorCoordinateBrand = undefined;\n    }\n}\nfunction safeInvoke(fn, thisArg, ...args) {\n    try {\n        return fn.call(thisArg, ...args);\n    }\n    catch (_a) {\n        // ignore\n        return null;\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './currentLineHighlight.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorLineHighlight, editorLineHighlightBorder } from '../../../common/core/editorColorRegistry.js';\nimport * as arrays from '../../../../base/common/arrays.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nimport { Position } from '../../../common/core/position.js';\nexport class AbstractLineHighlightOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._renderLineHighlight = options.get(96 /* EditorOption.renderLineHighlight */);\n        this._renderLineHighlightOnlyWhenFocus = options.get(97 /* EditorOption.renderLineHighlightOnlyWhenFocus */);\n        this._wordWrap = layoutInfo.isViewportWrapping;\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        this._selectionIsEmpty = true;\n        this._focused = false;\n        this._cursorLineNumbers = [1];\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._renderData = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        super.dispose();\n    }\n    _readFromSelections() {\n        let hasChanged = false;\n        const lineNumbers = new Set();\n        for (const selection of this._selections) {\n            lineNumbers.add(selection.positionLineNumber);\n        }\n        const cursorsLineNumbers = Array.from(lineNumbers);\n        cursorsLineNumbers.sort((a, b) => a - b);\n        if (!arrays.equals(this._cursorLineNumbers, cursorsLineNumbers)) {\n            this._cursorLineNumbers = cursorsLineNumbers;\n            hasChanged = true;\n        }\n        const selectionIsEmpty = this._selections.every(s => s.isEmpty());\n        if (this._selectionIsEmpty !== selectionIsEmpty) {\n            this._selectionIsEmpty = selectionIsEmpty;\n            hasChanged = true;\n        }\n        return hasChanged;\n    }\n    // --- begin event handlers\n    onThemeChanged(e) {\n        return this._readFromSelections();\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._renderLineHighlight = options.get(96 /* EditorOption.renderLineHighlight */);\n        this._renderLineHighlightOnlyWhenFocus = options.get(97 /* EditorOption.renderLineHighlightOnlyWhenFocus */);\n        this._wordWrap = layoutInfo.isViewportWrapping;\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        return this._readFromSelections();\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollWidthChanged || e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onFocusChanged(e) {\n        if (!this._renderLineHighlightOnlyWhenFocus) {\n            return false;\n        }\n        this._focused = e.isFocused;\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (!this._shouldRenderThis()) {\n            this._renderData = null;\n            return;\n        }\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        // initialize renderData\n        const renderData = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            renderData[lineIndex] = '';\n        }\n        if (this._wordWrap) {\n            // do a first pass to render wrapped lines\n            const renderedLineWrapped = this._renderOne(ctx, false);\n            for (const cursorLineNumber of this._cursorLineNumbers) {\n                const coordinatesConverter = this._context.viewModel.coordinatesConverter;\n                const modelLineNumber = coordinatesConverter.convertViewPositionToModelPosition(new Position(cursorLineNumber, 1)).lineNumber;\n                const firstViewLineNumber = coordinatesConverter.convertModelPositionToViewPosition(new Position(modelLineNumber, 1)).lineNumber;\n                const lastViewLineNumber = coordinatesConverter.convertModelPositionToViewPosition(new Position(modelLineNumber, this._context.viewModel.model.getLineMaxColumn(modelLineNumber))).lineNumber;\n                const firstLine = Math.max(firstViewLineNumber, visibleStartLineNumber);\n                const lastLine = Math.min(lastViewLineNumber, visibleEndLineNumber);\n                for (let lineNumber = firstLine; lineNumber <= lastLine; lineNumber++) {\n                    const lineIndex = lineNumber - visibleStartLineNumber;\n                    renderData[lineIndex] = renderedLineWrapped;\n                }\n            }\n        }\n        // do a second pass to render exact lines\n        const renderedLineExact = this._renderOne(ctx, true);\n        for (const cursorLineNumber of this._cursorLineNumbers) {\n            if (cursorLineNumber < visibleStartLineNumber || cursorLineNumber > visibleEndLineNumber) {\n                continue;\n            }\n            const lineIndex = cursorLineNumber - visibleStartLineNumber;\n            renderData[lineIndex] = renderedLineExact;\n        }\n        this._renderData = renderData;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderData) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex >= this._renderData.length) {\n            return '';\n        }\n        return this._renderData[lineIndex];\n    }\n    _shouldRenderInMargin() {\n        return ((this._renderLineHighlight === 'gutter' || this._renderLineHighlight === 'all')\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\n    }\n    _shouldRenderInContent() {\n        return ((this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all')\n            && this._selectionIsEmpty\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\n    }\n}\nexport class CurrentLineHighlightOverlay extends AbstractLineHighlightOverlay {\n    _renderOne(ctx, exact) {\n        const className = 'current-line' + (this._shouldRenderInMargin() ? ' current-line-both' : '') + (exact ? ' current-line-exact' : '');\n        return `<div class=\"${className}\" style=\"width:${Math.max(ctx.scrollWidth, this._contentWidth)}px; height:${this._lineHeight}px;\"></div>`;\n    }\n    _shouldRenderThis() {\n        return this._shouldRenderInContent();\n    }\n    _shouldRenderOther() {\n        return this._shouldRenderInMargin();\n    }\n}\nexport class CurrentLineMarginHighlightOverlay extends AbstractLineHighlightOverlay {\n    _renderOne(ctx, exact) {\n        const className = 'current-line' + (this._shouldRenderInMargin() ? ' current-line-margin' : '') + (this._shouldRenderOther() ? ' current-line-margin-both' : '') + (this._shouldRenderInMargin() && exact ? ' current-line-exact-margin' : '');\n        return `<div class=\"${className}\" style=\"width:${this._contentLeft}px; height:${this._lineHeight}px;\"></div>`;\n    }\n    _shouldRenderThis() {\n        return true;\n    }\n    _shouldRenderOther() {\n        return this._shouldRenderInContent();\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const lineHighlight = theme.getColor(editorLineHighlight);\n    if (lineHighlight) {\n        collector.addRule(`.monaco-editor .view-overlays .current-line { background-color: ${lineHighlight}; }`);\n        collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { background-color: ${lineHighlight}; border: none; }`);\n    }\n    if (!lineHighlight || lineHighlight.isTransparent() || theme.defines(editorLineHighlightBorder)) {\n        const lineHighlightBorder = theme.getColor(editorLineHighlightBorder);\n        if (lineHighlightBorder) {\n            collector.addRule(`.monaco-editor .view-overlays .current-line-exact { border: 2px solid ${lineHighlightBorder}; }`);\n            collector.addRule(`.monaco-editor .margin-view-overlays .current-line-exact-margin { border: 2px solid ${lineHighlightBorder}; }`);\n            if (isHighContrast(theme.type)) {\n                collector.addRule(`.monaco-editor .view-overlays .current-line-exact { border-width: 1px; }`);\n                collector.addRule(`.monaco-editor .margin-view-overlays .current-line-exact-margin { border-width: 1px; }`);\n            }\n        }\n    }\n});\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './decorations.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { HorizontalRange } from '../../view/renderingContext.js';\nimport { Range } from '../../../common/core/range.js';\nexport class DecorationsOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        const _decorations = ctx.getDecorationsInViewport();\n        // Keep only decorations with `className`\n        let decorations = [];\n        let decorationsLen = 0;\n        for (let i = 0, len = _decorations.length; i < len; i++) {\n            const d = _decorations[i];\n            if (d.options.className) {\n                decorations[decorationsLen++] = d;\n            }\n        }\n        // Sort decorations for consistent render output\n        decorations = decorations.sort((a, b) => {\n            if (a.options.zIndex < b.options.zIndex) {\n                return -1;\n            }\n            if (a.options.zIndex > b.options.zIndex) {\n                return 1;\n            }\n            const aClassName = a.options.className;\n            const bClassName = b.options.className;\n            if (aClassName < bClassName) {\n                return -1;\n            }\n            if (aClassName > bClassName) {\n                return 1;\n            }\n            return Range.compareRangesUsingStarts(a.range, b.range);\n        });\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = '';\n        }\n        // Render first whole line decorations and then regular decorations\n        this._renderWholeLineDecorations(ctx, decorations, output);\n        this._renderNormalDecorations(ctx, decorations, output);\n        this._renderResult = output;\n    }\n    _renderWholeLineDecorations(ctx, decorations, output) {\n        const lineHeight = String(this._lineHeight);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n            const d = decorations[i];\n            if (!d.options.isWholeLine) {\n                continue;\n            }\n            const decorationOutput = ('<div class=\"cdr '\n                + d.options.className\n                + '\" style=\"left:0;width:100%;height:'\n                + lineHeight\n                + 'px;\"></div>');\n            const startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n            const endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n            for (let j = startLineNumber; j <= endLineNumber; j++) {\n                const lineIndex = j - visibleStartLineNumber;\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    }\n    _renderNormalDecorations(ctx, decorations, output) {\n        var _a;\n        const lineHeight = String(this._lineHeight);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        let prevClassName = null;\n        let prevShowIfCollapsed = false;\n        let prevRange = null;\n        let prevShouldFillLineOnLineBreak = false;\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n            const d = decorations[i];\n            if (d.options.isWholeLine) {\n                continue;\n            }\n            const className = d.options.className;\n            const showIfCollapsed = Boolean(d.options.showIfCollapsed);\n            let range = d.range;\n            if (showIfCollapsed && range.endColumn === 1 && range.endLineNumber !== range.startLineNumber) {\n                range = new Range(range.startLineNumber, range.startColumn, range.endLineNumber - 1, this._context.viewModel.getLineMaxColumn(range.endLineNumber - 1));\n            }\n            if (prevClassName === className && prevShowIfCollapsed === showIfCollapsed && Range.areIntersectingOrTouching(prevRange, range)) {\n                // merge into previous decoration\n                prevRange = Range.plusRange(prevRange, range);\n                continue;\n            }\n            // flush previous decoration\n            if (prevClassName !== null) {\n                this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShouldFillLineOnLineBreak, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n            }\n            prevClassName = className;\n            prevShowIfCollapsed = showIfCollapsed;\n            prevRange = range;\n            prevShouldFillLineOnLineBreak = (_a = d.options.shouldFillLineOnLineBreak) !== null && _a !== void 0 ? _a : false;\n        }\n        if (prevClassName !== null) {\n            this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShouldFillLineOnLineBreak, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n        }\n    }\n    _renderNormalDecoration(ctx, range, className, shouldFillLineOnLineBreak, showIfCollapsed, lineHeight, visibleStartLineNumber, output) {\n        const linesVisibleRanges = ctx.linesVisibleRangesForRange(range, /*TODO@Alex*/ className === 'findMatch');\n        if (!linesVisibleRanges) {\n            return;\n        }\n        for (let j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\n            const lineVisibleRanges = linesVisibleRanges[j];\n            if (lineVisibleRanges.outsideRenderedLine) {\n                continue;\n            }\n            const lineIndex = lineVisibleRanges.lineNumber - visibleStartLineNumber;\n            if (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\n                const singleVisibleRange = lineVisibleRanges.ranges[0];\n                if (singleVisibleRange.width < this._typicalHalfwidthCharacterWidth) {\n                    // collapsed/very small range case => make the decoration visible by expanding its width\n                    // expand its size on both sides (both to the left and to the right, keeping it centered)\n                    const center = Math.round(singleVisibleRange.left + singleVisibleRange.width / 2);\n                    const left = Math.max(0, Math.round(center - this._typicalHalfwidthCharacterWidth / 2));\n                    lineVisibleRanges.ranges[0] = new HorizontalRange(left, this._typicalHalfwidthCharacterWidth);\n                }\n            }\n            for (let k = 0, lenK = lineVisibleRanges.ranges.length; k < lenK; k++) {\n                const expandToLeft = shouldFillLineOnLineBreak && lineVisibleRanges.continuesOnNextLine && lenK === 1;\n                const visibleRange = lineVisibleRanges.ranges[k];\n                const decorationOutput = ('<div class=\"cdr '\n                    + className\n                    + '\" style=\"left:'\n                    + String(visibleRange.left)\n                    + (expandToLeft ?\n                        'px;width:100%;height:' :\n                        ('px;width:' + String(visibleRange.width) + 'px;height:'))\n                    + lineHeight\n                    + 'px;\"></div>');\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { SmoothScrollableElement } from '../../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { getThemeTypeSelector } from '../../../../platform/theme/common/themeService.js';\nexport class EditorScrollbar extends ViewPart {\n    constructor(context, linesContent, viewDomNode, overflowGuardDomNode) {\n        super(context);\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(103 /* EditorOption.scrollbar */);\n        const mouseWheelScrollSensitivity = options.get(75 /* EditorOption.mouseWheelScrollSensitivity */);\n        const fastScrollSensitivity = options.get(40 /* EditorOption.fastScrollSensitivity */);\n        const scrollPredominantAxis = options.get(106 /* EditorOption.scrollPredominantAxis */);\n        const scrollbarOptions = {\n            listenOnDomNode: viewDomNode.domNode,\n            className: 'editor-scrollable' + ' ' + getThemeTypeSelector(context.theme.type),\n            useShadows: false,\n            lazyRender: true,\n            vertical: scrollbar.vertical,\n            horizontal: scrollbar.horizontal,\n            verticalHasArrows: scrollbar.verticalHasArrows,\n            horizontalHasArrows: scrollbar.horizontalHasArrows,\n            verticalScrollbarSize: scrollbar.verticalScrollbarSize,\n            verticalSliderSize: scrollbar.verticalSliderSize,\n            horizontalScrollbarSize: scrollbar.horizontalScrollbarSize,\n            horizontalSliderSize: scrollbar.horizontalSliderSize,\n            handleMouseWheel: scrollbar.handleMouseWheel,\n            alwaysConsumeMouseWheel: scrollbar.alwaysConsumeMouseWheel,\n            arrowSize: scrollbar.arrowSize,\n            mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n            fastScrollSensitivity: fastScrollSensitivity,\n            scrollPredominantAxis: scrollPredominantAxis,\n            scrollByPage: scrollbar.scrollByPage,\n        };\n        this.scrollbar = this._register(new SmoothScrollableElement(linesContent.domNode, scrollbarOptions, this._context.viewLayout.getScrollable()));\n        PartFingerprints.write(this.scrollbar.getDomNode(), 6 /* PartFingerprint.ScrollableElement */);\n        this.scrollbarDomNode = createFastDomNode(this.scrollbar.getDomNode());\n        this.scrollbarDomNode.setPosition('absolute');\n        this._setLayout();\n        // When having a zone widget that calls .focus() on one of its dom elements,\n        // the browser will try desperately to reveal that dom node, unexpectedly\n        // changing the .scrollTop of this.linesContent\n        const onBrowserDesperateReveal = (domNode, lookAtScrollTop, lookAtScrollLeft) => {\n            const newScrollPosition = {};\n            if (lookAtScrollTop) {\n                const deltaTop = domNode.scrollTop;\n                if (deltaTop) {\n                    newScrollPosition.scrollTop = this._context.viewLayout.getCurrentScrollTop() + deltaTop;\n                    domNode.scrollTop = 0;\n                }\n            }\n            if (lookAtScrollLeft) {\n                const deltaLeft = domNode.scrollLeft;\n                if (deltaLeft) {\n                    newScrollPosition.scrollLeft = this._context.viewLayout.getCurrentScrollLeft() + deltaLeft;\n                    domNode.scrollLeft = 0;\n                }\n            }\n            this._context.viewModel.viewLayout.setScrollPosition(newScrollPosition, 1 /* ScrollType.Immediate */);\n        };\n        // I've seen this happen both on the view dom node & on the lines content dom node.\n        this._register(dom.addDisposableListener(viewDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(viewDomNode.domNode, true, true)));\n        this._register(dom.addDisposableListener(linesContent.domNode, 'scroll', (e) => onBrowserDesperateReveal(linesContent.domNode, true, false)));\n        this._register(dom.addDisposableListener(overflowGuardDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(overflowGuardDomNode.domNode, true, false)));\n        this._register(dom.addDisposableListener(this.scrollbarDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(this.scrollbarDomNode.domNode, true, false)));\n    }\n    dispose() {\n        super.dispose();\n    }\n    _setLayout() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this.scrollbarDomNode.setLeft(layoutInfo.contentLeft);\n        const minimap = options.get(73 /* EditorOption.minimap */);\n        const side = minimap.side;\n        if (side === 'right') {\n            this.scrollbarDomNode.setWidth(layoutInfo.contentWidth + layoutInfo.minimap.minimapWidth);\n        }\n        else {\n            this.scrollbarDomNode.setWidth(layoutInfo.contentWidth);\n        }\n        this.scrollbarDomNode.setHeight(layoutInfo.height);\n    }\n    getOverviewRulerLayoutInfo() {\n        return this.scrollbar.getOverviewRulerLayoutInfo();\n    }\n    getDomNode() {\n        return this.scrollbarDomNode;\n    }\n    delegateVerticalScrollbarPointerDown(browserEvent) {\n        this.scrollbar.delegateVerticalScrollbarPointerDown(browserEvent);\n    }\n    delegateScrollFromMouseWheelEvent(browserEvent) {\n        this.scrollbar.delegateScrollFromMouseWheelEvent(browserEvent);\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        if (e.hasChanged(103 /* EditorOption.scrollbar */)\n            || e.hasChanged(75 /* EditorOption.mouseWheelScrollSensitivity */)\n            || e.hasChanged(40 /* EditorOption.fastScrollSensitivity */)) {\n            const options = this._context.configuration.options;\n            const scrollbar = options.get(103 /* EditorOption.scrollbar */);\n            const mouseWheelScrollSensitivity = options.get(75 /* EditorOption.mouseWheelScrollSensitivity */);\n            const fastScrollSensitivity = options.get(40 /* EditorOption.fastScrollSensitivity */);\n            const scrollPredominantAxis = options.get(106 /* EditorOption.scrollPredominantAxis */);\n            const newOpts = {\n                vertical: scrollbar.vertical,\n                horizontal: scrollbar.horizontal,\n                verticalScrollbarSize: scrollbar.verticalScrollbarSize,\n                horizontalScrollbarSize: scrollbar.horizontalScrollbarSize,\n                scrollByPage: scrollbar.scrollByPage,\n                handleMouseWheel: scrollbar.handleMouseWheel,\n                mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n                fastScrollSensitivity: fastScrollSensitivity,\n                scrollPredominantAxis: scrollPredominantAxis\n            };\n            this.scrollbar.updateOptions(newOpts);\n        }\n        if (e.hasChanged(144 /* EditorOption.layoutInfo */)) {\n            this._setLayout();\n        }\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onThemeChanged(e) {\n        this.scrollbar.updateClassName('editor-scrollable' + ' ' + getThemeTypeSelector(this._context.theme.type));\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to do\n    }\n    render(ctx) {\n        this.scrollbar.renderNow();\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ArrayQueue } from '../../../../base/common/arrays.js';\nimport './glyphMargin.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { GlyphMarginLane } from '../../../common/model.js';\n/**\n * Represents a decoration that should be shown along the lines from `startLineNumber` to `endLineNumber`.\n * This can end up producing multiple `LineDecorationToRender`.\n */\nexport class DecorationToRender {\n    constructor(startLineNumber, endLineNumber, className, tooltip, zIndex) {\n        this.startLineNumber = startLineNumber;\n        this.endLineNumber = endLineNumber;\n        this.className = className;\n        this.tooltip = tooltip;\n        this._decorationToRenderBrand = undefined;\n        this.zIndex = zIndex !== null && zIndex !== void 0 ? zIndex : 0;\n    }\n}\n/**\n * A decoration that should be shown along a line.\n */\nexport class LineDecorationToRender {\n    constructor(className, zIndex, tooltip) {\n        this.className = className;\n        this.zIndex = zIndex;\n        this.tooltip = tooltip;\n    }\n}\n/**\n * Decorations to render on a visible line.\n */\nexport class VisibleLineDecorationsToRender {\n    constructor() {\n        this.decorations = [];\n    }\n    add(decoration) {\n        this.decorations.push(decoration);\n    }\n    getDecorations() {\n        return this.decorations;\n    }\n}\nexport class DedupOverlay extends DynamicViewOverlay {\n    /**\n     * Returns an array with an element for each visible line number.\n     */\n    _render(visibleStartLineNumber, visibleEndLineNumber, decorations) {\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = new VisibleLineDecorationsToRender();\n        }\n        if (decorations.length === 0) {\n            return output;\n        }\n        // Sort decorations by className, then by startLineNumber and then by endLineNumber\n        decorations.sort((a, b) => {\n            if (a.className === b.className) {\n                if (a.startLineNumber === b.startLineNumber) {\n                    return a.endLineNumber - b.endLineNumber;\n                }\n                return a.startLineNumber - b.startLineNumber;\n            }\n            return (a.className < b.className ? -1 : 1);\n        });\n        let prevClassName = null;\n        let prevEndLineIndex = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const className = d.className;\n            const zIndex = d.zIndex;\n            let startLineIndex = Math.max(d.startLineNumber, visibleStartLineNumber) - visibleStartLineNumber;\n            const endLineIndex = Math.min(d.endLineNumber, visibleEndLineNumber) - visibleStartLineNumber;\n            if (prevClassName === className) {\n                // Here we avoid rendering the same className multiple times on the same line\n                startLineIndex = Math.max(prevEndLineIndex + 1, startLineIndex);\n                prevEndLineIndex = Math.max(prevEndLineIndex, endLineIndex);\n            }\n            else {\n                prevClassName = className;\n                prevEndLineIndex = endLineIndex;\n            }\n            for (let i = startLineIndex; i <= prevEndLineIndex; i++) {\n                output[i].add(new LineDecorationToRender(className, zIndex, d.tooltip));\n            }\n        }\n        return output;\n    }\n}\nexport class GlyphMarginWidgets extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._widgets = {};\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName('glyph-margin-widgets');\n        this.domNode.setPosition('absolute');\n        this.domNode.setTop(0);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._glyphMargin = options.get(57 /* EditorOption.glyphMargin */);\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._glyphMarginDecorationLaneCount = layoutInfo.glyphMarginDecorationLaneCount;\n        this._managedDomNodes = [];\n        this._decorationGlyphsToRender = [];\n    }\n    dispose() {\n        this._managedDomNodes = [];\n        this._decorationGlyphsToRender = [];\n        this._widgets = {};\n        super.dispose();\n    }\n    getWidgets() {\n        return Object.values(this._widgets);\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._glyphMargin = options.get(57 /* EditorOption.glyphMargin */);\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._glyphMarginDecorationLaneCount = layoutInfo.glyphMarginDecorationLaneCount;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    // --- begin widget management\n    addWidget(widget) {\n        const domNode = createFastDomNode(widget.getDomNode());\n        this._widgets[widget.getId()] = {\n            widget: widget,\n            preference: widget.getPosition(),\n            domNode: domNode,\n            renderInfo: null\n        };\n        domNode.setPosition('absolute');\n        domNode.setDisplay('none');\n        domNode.setAttribute('widgetId', widget.getId());\n        this.domNode.appendChild(domNode);\n        this.setShouldRender();\n    }\n    setWidgetPosition(widget, preference) {\n        const myWidget = this._widgets[widget.getId()];\n        if (myWidget.preference.lane === preference.lane\n            && myWidget.preference.zIndex === preference.zIndex\n            && Range.equalsRange(myWidget.preference.range, preference.range)) {\n            return false;\n        }\n        myWidget.preference = preference;\n        this.setShouldRender();\n        return true;\n    }\n    removeWidget(widget) {\n        var _a;\n        const widgetId = widget.getId();\n        if (this._widgets[widgetId]) {\n            const widgetData = this._widgets[widgetId];\n            const domNode = widgetData.domNode.domNode;\n            delete this._widgets[widgetId];\n            (_a = domNode.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(domNode);\n            this.setShouldRender();\n        }\n    }\n    // --- end widget management\n    _collectDecorationBasedGlyphRenderRequest(ctx, requests) {\n        var _a, _b, _c;\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const decorations = ctx.getDecorationsInViewport();\n        for (const d of decorations) {\n            const glyphMarginClassName = d.options.glyphMarginClassName;\n            if (!glyphMarginClassName) {\n                continue;\n            }\n            const startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n            const endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n            const lane = (_b = (_a = d.options.glyphMargin) === null || _a === void 0 ? void 0 : _a.position) !== null && _b !== void 0 ? _b : GlyphMarginLane.Center;\n            const zIndex = (_c = d.options.zIndex) !== null && _c !== void 0 ? _c : 0;\n            for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n                const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber, 0));\n                const laneIndex = this._context.viewModel.glyphLanes.getLanesAtLine(modelPosition.lineNumber).indexOf(lane);\n                requests.push(new DecorationBasedGlyphRenderRequest(lineNumber, laneIndex, zIndex, glyphMarginClassName));\n            }\n        }\n    }\n    _collectWidgetBasedGlyphRenderRequest(ctx, requests) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (const widget of Object.values(this._widgets)) {\n            const range = widget.preference.range;\n            const { startLineNumber, endLineNumber } = this._context.viewModel.coordinatesConverter.convertModelRangeToViewRange(Range.lift(range));\n            if (!startLineNumber || !endLineNumber || endLineNumber < visibleStartLineNumber || startLineNumber > visibleEndLineNumber) {\n                // The widget is not in the viewport\n                continue;\n            }\n            // The widget is in the viewport, find a good line for it\n            const widgetLineNumber = Math.max(startLineNumber, visibleStartLineNumber);\n            const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(widgetLineNumber, 0));\n            const laneIndex = this._context.viewModel.glyphLanes.getLanesAtLine(modelPosition.lineNumber).indexOf(widget.preference.lane);\n            requests.push(new WidgetBasedGlyphRenderRequest(widgetLineNumber, laneIndex, widget.preference.zIndex, widget));\n        }\n    }\n    _collectSortedGlyphRenderRequests(ctx) {\n        const requests = [];\n        this._collectDecorationBasedGlyphRenderRequest(ctx, requests);\n        this._collectWidgetBasedGlyphRenderRequest(ctx, requests);\n        // sort requests by lineNumber ASC, lane  ASC, zIndex DESC, type DESC (widgets first), className ASC\n        // don't change this sort unless you understand `prepareRender` below.\n        requests.sort((a, b) => {\n            if (a.lineNumber === b.lineNumber) {\n                if (a.laneIndex === b.laneIndex) {\n                    if (a.zIndex === b.zIndex) {\n                        if (b.type === a.type) {\n                            if (a.type === 0 /* GlyphRenderRequestType.Decoration */ && b.type === 0 /* GlyphRenderRequestType.Decoration */) {\n                                return (a.className < b.className ? -1 : 1);\n                            }\n                            return 0;\n                        }\n                        return b.type - a.type;\n                    }\n                    return b.zIndex - a.zIndex;\n                }\n                return a.laneIndex - b.laneIndex;\n            }\n            return a.lineNumber - b.lineNumber;\n        });\n        return requests;\n    }\n    /**\n     * Will store render information in each widget's renderInfo and in `_decorationGlyphsToRender`.\n     */\n    prepareRender(ctx) {\n        if (!this._glyphMargin) {\n            this._decorationGlyphsToRender = [];\n            return;\n        }\n        for (const widget of Object.values(this._widgets)) {\n            widget.renderInfo = null;\n        }\n        const requests = new ArrayQueue(this._collectSortedGlyphRenderRequests(ctx));\n        const decorationGlyphsToRender = [];\n        while (requests.length > 0) {\n            const first = requests.peek();\n            if (!first) {\n                // not possible\n                break;\n            }\n            // Requests are sorted by lineNumber and lane, so we read all requests for this particular location\n            const requestsAtLocation = requests.takeWhile((el) => el.lineNumber === first.lineNumber && el.laneIndex === first.laneIndex);\n            if (!requestsAtLocation || requestsAtLocation.length === 0) {\n                // not possible\n                break;\n            }\n            const winner = requestsAtLocation[0];\n            if (winner.type === 0 /* GlyphRenderRequestType.Decoration */) {\n                // combine all decorations with the same z-index\n                const classNames = [];\n                // requests are sorted by zIndex, type, and className so we can dedup className by looking at the previous one\n                for (const request of requestsAtLocation) {\n                    if (request.zIndex !== winner.zIndex || request.type !== winner.type) {\n                        break;\n                    }\n                    if (classNames.length === 0 || classNames[classNames.length - 1] !== request.className) {\n                        classNames.push(request.className);\n                    }\n                }\n                decorationGlyphsToRender.push(winner.accept(classNames.join(' '))); // TODO@joyceerhl Implement overflow for remaining decorations\n            }\n            else {\n                // widgets cannot be combined\n                winner.widget.renderInfo = {\n                    lineNumber: winner.lineNumber,\n                    laneIndex: winner.laneIndex,\n                };\n            }\n        }\n        this._decorationGlyphsToRender = decorationGlyphsToRender;\n    }\n    render(ctx) {\n        if (!this._glyphMargin) {\n            for (const widget of Object.values(this._widgets)) {\n                widget.domNode.setDisplay('none');\n            }\n            while (this._managedDomNodes.length > 0) {\n                const domNode = this._managedDomNodes.pop();\n                domNode === null || domNode === void 0 ? void 0 : domNode.domNode.remove();\n            }\n            return;\n        }\n        const width = (Math.round(this._glyphMarginWidth / this._glyphMarginDecorationLaneCount));\n        // Render widgets\n        for (const widget of Object.values(this._widgets)) {\n            if (!widget.renderInfo) {\n                // this widget is not visible\n                widget.domNode.setDisplay('none');\n            }\n            else {\n                const top = ctx.viewportData.relativeVerticalOffset[widget.renderInfo.lineNumber - ctx.viewportData.startLineNumber];\n                const left = this._glyphMarginLeft + widget.renderInfo.laneIndex * this._lineHeight;\n                widget.domNode.setDisplay('block');\n                widget.domNode.setTop(top);\n                widget.domNode.setLeft(left);\n                widget.domNode.setWidth(width);\n                widget.domNode.setHeight(this._lineHeight);\n            }\n        }\n        // Render decorations, reusing previous dom nodes as possible\n        for (let i = 0; i < this._decorationGlyphsToRender.length; i++) {\n            const dec = this._decorationGlyphsToRender[i];\n            const top = ctx.viewportData.relativeVerticalOffset[dec.lineNumber - ctx.viewportData.startLineNumber];\n            const left = this._glyphMarginLeft + dec.laneIndex * this._lineHeight;\n            let domNode;\n            if (i < this._managedDomNodes.length) {\n                domNode = this._managedDomNodes[i];\n            }\n            else {\n                domNode = createFastDomNode(document.createElement('div'));\n                this._managedDomNodes.push(domNode);\n                this.domNode.appendChild(domNode);\n            }\n            domNode.setClassName(`cgmr codicon ` + dec.combinedClassName);\n            domNode.setPosition(`absolute`);\n            domNode.setTop(top);\n            domNode.setLeft(left);\n            domNode.setWidth(width);\n            domNode.setHeight(this._lineHeight);\n        }\n        // remove extra dom nodes\n        while (this._managedDomNodes.length > this._decorationGlyphsToRender.length) {\n            const domNode = this._managedDomNodes.pop();\n            domNode === null || domNode === void 0 ? void 0 : domNode.domNode.remove();\n        }\n    }\n}\n/**\n * A request to render a decoration in the glyph margin at a certain location.\n */\nclass DecorationBasedGlyphRenderRequest {\n    constructor(lineNumber, laneIndex, zIndex, className) {\n        this.lineNumber = lineNumber;\n        this.laneIndex = laneIndex;\n        this.zIndex = zIndex;\n        this.className = className;\n        this.type = 0 /* GlyphRenderRequestType.Decoration */;\n    }\n    accept(combinedClassName) {\n        return new DecorationBasedGlyph(this.lineNumber, this.laneIndex, combinedClassName);\n    }\n}\n/**\n * A request to render a widget in the glyph margin at a certain location.\n */\nclass WidgetBasedGlyphRenderRequest {\n    constructor(lineNumber, laneIndex, zIndex, widget) {\n        this.lineNumber = lineNumber;\n        this.laneIndex = laneIndex;\n        this.zIndex = zIndex;\n        this.widget = widget;\n        this.type = 1 /* GlyphRenderRequestType.Widget */;\n    }\n}\nclass DecorationBasedGlyph {\n    constructor(lineNumber, laneIndex, combinedClassName) {\n        this.lineNumber = lineNumber;\n        this.laneIndex = laneIndex;\n        this.combinedClassName = combinedClassName;\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './indentGuides.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorBracketHighlightingForeground1, editorBracketHighlightingForeground2, editorBracketHighlightingForeground3, editorBracketHighlightingForeground4, editorBracketHighlightingForeground5, editorBracketHighlightingForeground6, editorBracketPairGuideActiveBackground1, editorBracketPairGuideActiveBackground2, editorBracketPairGuideActiveBackground3, editorBracketPairGuideActiveBackground4, editorBracketPairGuideActiveBackground5, editorBracketPairGuideActiveBackground6, editorBracketPairGuideBackground1, editorBracketPairGuideBackground2, editorBracketPairGuideBackground3, editorBracketPairGuideBackground4, editorBracketPairGuideBackground5, editorBracketPairGuideBackground6, editorIndentGuide1, editorIndentGuide2, editorIndentGuide3, editorIndentGuide4, editorIndentGuide5, editorIndentGuide6, editorActiveIndentGuide1, editorActiveIndentGuide2, editorActiveIndentGuide3, editorActiveIndentGuide4, editorActiveIndentGuide5, editorActiveIndentGuide6 } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Position } from '../../../common/core/position.js';\nimport { ArrayQueue } from '../../../../base/common/arrays.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { BracketPairGuidesClassNames } from '../../../common/model/guidesTextModelPart.js';\nimport { IndentGuide, HorizontalGuidesState } from '../../../common/textModelGuides.js';\nexport class IndentGuidesOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._primaryPosition = null;\n        const options = this._context.configuration.options;\n        const wrappingInfo = options.get(145 /* EditorOption.wrappingInfo */);\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._spaceWidth = fontInfo.spaceWidth;\n        this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : (wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\n        this._bracketPairGuideOptions = options.get(16 /* EditorOption.guides */);\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const wrappingInfo = options.get(145 /* EditorOption.wrappingInfo */);\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._spaceWidth = fontInfo.spaceWidth;\n        this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : (wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\n        this._bracketPairGuideOptions = options.get(16 /* EditorOption.guides */);\n        return true;\n    }\n    onCursorStateChanged(e) {\n        var _a;\n        const selection = e.selections[0];\n        const newPosition = selection.getPosition();\n        if (!((_a = this._primaryPosition) === null || _a === void 0 ? void 0 : _a.equals(newPosition))) {\n            this._primaryPosition = newPosition;\n            return true;\n        }\n        return false;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged; // || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onLanguageConfigurationChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        var _a, _b, _c, _d;\n        if (!this._bracketPairGuideOptions.indentation && this._bracketPairGuideOptions.bracketPairs === false) {\n            this._renderResult = null;\n            return;\n        }\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const scrollWidth = ctx.scrollWidth;\n        const lineHeight = this._lineHeight;\n        const activeCursorPosition = this._primaryPosition;\n        const indents = this.getGuidesByLine(visibleStartLineNumber, Math.min(visibleEndLineNumber + 1, this._context.viewModel.getLineCount()), activeCursorPosition);\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const indent = indents[lineIndex];\n            let result = '';\n            const leftOffset = (_b = (_a = ctx.visibleRangeForPosition(new Position(lineNumber, 1))) === null || _a === void 0 ? void 0 : _a.left) !== null && _b !== void 0 ? _b : 0;\n            for (const guide of indent) {\n                const left = guide.column === -1\n                    ? leftOffset + (guide.visibleColumn - 1) * this._spaceWidth\n                    : ctx.visibleRangeForPosition(new Position(lineNumber, guide.column)).left;\n                if (left > scrollWidth || (this._maxIndentLeft > 0 && left > this._maxIndentLeft)) {\n                    break;\n                }\n                const className = guide.horizontalLine ? (guide.horizontalLine.top ? 'horizontal-top' : 'horizontal-bottom') : 'vertical';\n                const width = guide.horizontalLine\n                    ? ((_d = (_c = ctx.visibleRangeForPosition(new Position(lineNumber, guide.horizontalLine.endColumn))) === null || _c === void 0 ? void 0 : _c.left) !== null && _d !== void 0 ? _d : (left + this._spaceWidth)) - left\n                    : this._spaceWidth;\n                result += `<div class=\"core-guide ${guide.className} ${className}\" style=\"left:${left}px;height:${lineHeight}px;width:${width}px\"></div>`;\n            }\n            output[lineIndex] = result;\n        }\n        this._renderResult = output;\n    }\n    getGuidesByLine(visibleStartLineNumber, visibleEndLineNumber, activeCursorPosition) {\n        const bracketGuides = this._bracketPairGuideOptions.bracketPairs !== false\n            ? this._context.viewModel.getBracketGuidesInRangeByLine(visibleStartLineNumber, visibleEndLineNumber, activeCursorPosition, {\n                highlightActive: this._bracketPairGuideOptions.highlightActiveBracketPair,\n                horizontalGuides: this._bracketPairGuideOptions.bracketPairsHorizontal === true\n                    ? HorizontalGuidesState.Enabled\n                    : this._bracketPairGuideOptions.bracketPairsHorizontal === 'active'\n                        ? HorizontalGuidesState.EnabledForActive\n                        : HorizontalGuidesState.Disabled,\n                includeInactive: this._bracketPairGuideOptions.bracketPairs === true,\n            })\n            : null;\n        const indentGuides = this._bracketPairGuideOptions.indentation\n            ? this._context.viewModel.getLinesIndentGuides(visibleStartLineNumber, visibleEndLineNumber)\n            : null;\n        let activeIndentStartLineNumber = 0;\n        let activeIndentEndLineNumber = 0;\n        let activeIndentLevel = 0;\n        if (this._bracketPairGuideOptions.highlightActiveIndentation !== false && activeCursorPosition) {\n            const activeIndentInfo = this._context.viewModel.getActiveIndentGuide(activeCursorPosition.lineNumber, visibleStartLineNumber, visibleEndLineNumber);\n            activeIndentStartLineNumber = activeIndentInfo.startLineNumber;\n            activeIndentEndLineNumber = activeIndentInfo.endLineNumber;\n            activeIndentLevel = activeIndentInfo.indent;\n        }\n        const { indentSize } = this._context.viewModel.model.getOptions();\n        const result = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineGuides = new Array();\n            result.push(lineGuides);\n            const bracketGuidesInLine = bracketGuides ? bracketGuides[lineNumber - visibleStartLineNumber] : [];\n            const bracketGuidesInLineQueue = new ArrayQueue(bracketGuidesInLine);\n            const indentGuidesInLine = indentGuides ? indentGuides[lineNumber - visibleStartLineNumber] : 0;\n            for (let indentLvl = 1; indentLvl <= indentGuidesInLine; indentLvl++) {\n                const indentGuide = (indentLvl - 1) * indentSize + 1;\n                const isActive = \n                // Disable active indent guide if there are bracket guides.\n                (this._bracketPairGuideOptions.highlightActiveIndentation === 'always' || bracketGuidesInLine.length === 0) &&\n                    activeIndentStartLineNumber <= lineNumber &&\n                    lineNumber <= activeIndentEndLineNumber &&\n                    indentLvl === activeIndentLevel;\n                lineGuides.push(...bracketGuidesInLineQueue.takeWhile(g => g.visibleColumn < indentGuide) || []);\n                const peeked = bracketGuidesInLineQueue.peek();\n                if (!peeked || peeked.visibleColumn !== indentGuide || peeked.horizontalLine) {\n                    lineGuides.push(new IndentGuide(indentGuide, -1, `core-guide-indent lvl-${(indentLvl - 1) % 30}` + (isActive ? ' indent-active' : ''), null, -1, -1));\n                }\n            }\n            lineGuides.push(...bracketGuidesInLineQueue.takeWhile(g => true) || []);\n        }\n        return result;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nfunction transparentToUndefined(color) {\n    if (color && color.isTransparent()) {\n        return undefined;\n    }\n    return color;\n}\nregisterThemingParticipant((theme, collector) => {\n    const colors = [\n        { bracketColor: editorBracketHighlightingForeground1, guideColor: editorBracketPairGuideBackground1, guideColorActive: editorBracketPairGuideActiveBackground1 },\n        { bracketColor: editorBracketHighlightingForeground2, guideColor: editorBracketPairGuideBackground2, guideColorActive: editorBracketPairGuideActiveBackground2 },\n        { bracketColor: editorBracketHighlightingForeground3, guideColor: editorBracketPairGuideBackground3, guideColorActive: editorBracketPairGuideActiveBackground3 },\n        { bracketColor: editorBracketHighlightingForeground4, guideColor: editorBracketPairGuideBackground4, guideColorActive: editorBracketPairGuideActiveBackground4 },\n        { bracketColor: editorBracketHighlightingForeground5, guideColor: editorBracketPairGuideBackground5, guideColorActive: editorBracketPairGuideActiveBackground5 },\n        { bracketColor: editorBracketHighlightingForeground6, guideColor: editorBracketPairGuideBackground6, guideColorActive: editorBracketPairGuideActiveBackground6 }\n    ];\n    const colorProvider = new BracketPairGuidesClassNames();\n    const indentColors = [\n        { indentColor: editorIndentGuide1, indentColorActive: editorActiveIndentGuide1 },\n        { indentColor: editorIndentGuide2, indentColorActive: editorActiveIndentGuide2 },\n        { indentColor: editorIndentGuide3, indentColorActive: editorActiveIndentGuide3 },\n        { indentColor: editorIndentGuide4, indentColorActive: editorActiveIndentGuide4 },\n        { indentColor: editorIndentGuide5, indentColorActive: editorActiveIndentGuide5 },\n        { indentColor: editorIndentGuide6, indentColorActive: editorActiveIndentGuide6 },\n    ];\n    const colorValues = colors\n        .map(c => {\n        var _a, _b;\n        const bracketColor = theme.getColor(c.bracketColor);\n        const guideColor = theme.getColor(c.guideColor);\n        const guideColorActive = theme.getColor(c.guideColorActive);\n        const effectiveGuideColor = transparentToUndefined((_a = transparentToUndefined(guideColor)) !== null && _a !== void 0 ? _a : bracketColor === null || bracketColor === void 0 ? void 0 : bracketColor.transparent(0.3));\n        const effectiveGuideColorActive = transparentToUndefined((_b = transparentToUndefined(guideColorActive)) !== null && _b !== void 0 ? _b : bracketColor);\n        if (!effectiveGuideColor || !effectiveGuideColorActive) {\n            return undefined;\n        }\n        return {\n            guideColor: effectiveGuideColor,\n            guideColorActive: effectiveGuideColorActive,\n        };\n    })\n        .filter(isDefined);\n    const indentColorValues = indentColors\n        .map(c => {\n        const indentColor = theme.getColor(c.indentColor);\n        const indentColorActive = theme.getColor(c.indentColorActive);\n        const effectiveIndentColor = transparentToUndefined(indentColor);\n        const effectiveIndentColorActive = transparentToUndefined(indentColorActive);\n        if (!effectiveIndentColor || !effectiveIndentColorActive) {\n            return undefined;\n        }\n        return {\n            indentColor: effectiveIndentColor,\n            indentColorActive: effectiveIndentColorActive,\n        };\n    })\n        .filter(isDefined);\n    if (colorValues.length > 0) {\n        for (let level = 0; level < 30; level++) {\n            const colors = colorValues[level % colorValues.length];\n            collector.addRule(`.monaco-editor .${colorProvider.getInlineClassNameOfLevel(level).replace(/ /g, '.')} { --guide-color: ${colors.guideColor}; --guide-color-active: ${colors.guideColorActive}; }`);\n        }\n        collector.addRule(`.monaco-editor .vertical { box-shadow: 1px 0 0 0 var(--guide-color) inset; }`);\n        collector.addRule(`.monaco-editor .horizontal-top { border-top: 1px solid var(--guide-color); }`);\n        collector.addRule(`.monaco-editor .horizontal-bottom { border-bottom: 1px solid var(--guide-color); }`);\n        collector.addRule(`.monaco-editor .vertical.${colorProvider.activeClassName} { box-shadow: 1px 0 0 0 var(--guide-color-active) inset; }`);\n        collector.addRule(`.monaco-editor .horizontal-top.${colorProvider.activeClassName} { border-top: 1px solid var(--guide-color-active); }`);\n        collector.addRule(`.monaco-editor .horizontal-bottom.${colorProvider.activeClassName} { border-bottom: 1px solid var(--guide-color-active); }`);\n    }\n    if (indentColorValues.length > 0) {\n        for (let level = 0; level < 30; level++) {\n            const colors = indentColorValues[level % indentColorValues.length];\n            collector.addRule(`.monaco-editor .lines-content .core-guide-indent.lvl-${level} { --indent-color: ${colors.indentColor}; --indent-color-active: ${colors.indentColorActive}; }`);\n        }\n        collector.addRule(`.monaco-editor .lines-content .core-guide-indent { box-shadow: 1px 0 0 0 var(--indent-color) inset; }`);\n        collector.addRule(`.monaco-editor .lines-content .core-guide-indent.indent-active { box-shadow: 1px 0 0 0 var(--indent-color-active) inset; }`);\n    }\n});\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport './viewLines.css';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { HorizontalPosition, HorizontalRange, LineVisibleRanges } from '../../view/renderingContext.js';\nimport { VisibleLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { DomReadingContext } from './domReadingContext.js';\nimport { ViewLine, ViewLineOptions } from './viewLine.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nclass LastRenderedData {\n    constructor() {\n        this._currentVisibleRange = new Range(1, 1, 1, 1);\n    }\n    getCurrentVisibleRange() {\n        return this._currentVisibleRange;\n    }\n    setCurrentVisibleRange(currentVisibleRange) {\n        this._currentVisibleRange = currentVisibleRange;\n    }\n}\nclass HorizontalRevealRangeRequest {\n    constructor(minimalReveal, lineNumber, startColumn, endColumn, startScrollTop, stopScrollTop, scrollType) {\n        this.minimalReveal = minimalReveal;\n        this.lineNumber = lineNumber;\n        this.startColumn = startColumn;\n        this.endColumn = endColumn;\n        this.startScrollTop = startScrollTop;\n        this.stopScrollTop = stopScrollTop;\n        this.scrollType = scrollType;\n        this.type = 'range';\n        this.minLineNumber = lineNumber;\n        this.maxLineNumber = lineNumber;\n    }\n}\nclass HorizontalRevealSelectionsRequest {\n    constructor(minimalReveal, selections, startScrollTop, stopScrollTop, scrollType) {\n        this.minimalReveal = minimalReveal;\n        this.selections = selections;\n        this.startScrollTop = startScrollTop;\n        this.stopScrollTop = stopScrollTop;\n        this.scrollType = scrollType;\n        this.type = 'selections';\n        let minLineNumber = selections[0].startLineNumber;\n        let maxLineNumber = selections[0].endLineNumber;\n        for (let i = 1, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n            maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n        }\n        this.minLineNumber = minLineNumber;\n        this.maxLineNumber = maxLineNumber;\n    }\n}\nexport class ViewLines extends ViewPart {\n    constructor(context, linesContent) {\n        super(context);\n        this._linesContent = linesContent;\n        this._textRangeRestingSpot = document.createElement('div');\n        this._visibleLines = new VisibleLinesCollection(this);\n        this.domNode = this._visibleLines.domNode;\n        const conf = this._context.configuration;\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const wrappingInfo = options.get(145 /* EditorOption.wrappingInfo */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n        this._revealHorizontalRightPadding = options.get(100 /* EditorOption.revealHorizontalRightPadding */);\n        this._cursorSurroundingLines = options.get(29 /* EditorOption.cursorSurroundingLines */);\n        this._cursorSurroundingLinesStyle = options.get(30 /* EditorOption.cursorSurroundingLinesStyle */);\n        this._canUseLayerHinting = !options.get(32 /* EditorOption.disableLayerHinting */);\n        this._viewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n        PartFingerprints.write(this.domNode, 8 /* PartFingerprint.ViewLines */);\n        this.domNode.setClassName(`view-lines ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        applyFontInfo(this.domNode, fontInfo);\n        // --- width & height\n        this._maxLineWidth = 0;\n        this._asyncUpdateLineWidths = new RunOnceScheduler(() => {\n            this._updateLineWidthsSlow();\n        }, 200);\n        this._asyncCheckMonospaceFontAssumptions = new RunOnceScheduler(() => {\n            this._checkMonospaceFontAssumptions();\n        }, 2000);\n        this._lastRenderedData = new LastRenderedData();\n        this._horizontalRevealRequest = null;\n        // sticky scroll widget\n        this._stickyScrollEnabled = options.get(115 /* EditorOption.stickyScroll */).enabled;\n        this._maxNumberStickyLines = options.get(115 /* EditorOption.stickyScroll */).maxLineCount;\n    }\n    dispose() {\n        this._asyncUpdateLineWidths.dispose();\n        this._asyncCheckMonospaceFontAssumptions.dispose();\n        super.dispose();\n    }\n    getDomNode() {\n        return this.domNode;\n    }\n    // ---- begin IVisibleLinesHost\n    createVisibleLine() {\n        return new ViewLine(this._viewLineOptions);\n    }\n    // ---- end IVisibleLinesHost\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        this._visibleLines.onConfigurationChanged(e);\n        if (e.hasChanged(145 /* EditorOption.wrappingInfo */)) {\n            this._maxLineWidth = 0;\n        }\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const wrappingInfo = options.get(145 /* EditorOption.wrappingInfo */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n        this._revealHorizontalRightPadding = options.get(100 /* EditorOption.revealHorizontalRightPadding */);\n        this._cursorSurroundingLines = options.get(29 /* EditorOption.cursorSurroundingLines */);\n        this._cursorSurroundingLinesStyle = options.get(30 /* EditorOption.cursorSurroundingLinesStyle */);\n        this._canUseLayerHinting = !options.get(32 /* EditorOption.disableLayerHinting */);\n        // sticky scroll\n        this._stickyScrollEnabled = options.get(115 /* EditorOption.stickyScroll */).enabled;\n        this._maxNumberStickyLines = options.get(115 /* EditorOption.stickyScroll */).maxLineCount;\n        applyFontInfo(this.domNode, fontInfo);\n        this._onOptionsMaybeChanged();\n        if (e.hasChanged(144 /* EditorOption.layoutInfo */)) {\n            this._maxLineWidth = 0;\n        }\n        return true;\n    }\n    _onOptionsMaybeChanged() {\n        const conf = this._context.configuration;\n        const newViewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n        if (!this._viewLineOptions.equals(newViewLineOptions)) {\n            this._viewLineOptions = newViewLineOptions;\n            const startLineNumber = this._visibleLines.getStartLineNumber();\n            const endLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n                const line = this._visibleLines.getVisibleLine(lineNumber);\n                line.onOptionsChanged(this._viewLineOptions);\n            }\n            return true;\n        }\n        return false;\n    }\n    onCursorStateChanged(e) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        let r = false;\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            r = this._visibleLines.getVisibleLine(lineNumber).onSelectionChanged() || r;\n        }\n        return r;\n    }\n    onDecorationsChanged(e) {\n        if (true /*e.inlineDecorationsChanged*/) {\n            const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n            const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                this._visibleLines.getVisibleLine(lineNumber).onDecorationsChanged();\n            }\n        }\n        return true;\n    }\n    onFlushed(e) {\n        const shouldRender = this._visibleLines.onFlushed(e);\n        this._maxLineWidth = 0;\n        return shouldRender;\n    }\n    onLinesChanged(e) {\n        return this._visibleLines.onLinesChanged(e);\n    }\n    onLinesDeleted(e) {\n        return this._visibleLines.onLinesDeleted(e);\n    }\n    onLinesInserted(e) {\n        return this._visibleLines.onLinesInserted(e);\n    }\n    onRevealRangeRequest(e) {\n        // Using the future viewport here in order to handle multiple\n        // incoming reveal range requests that might all desire to be animated\n        const desiredScrollTop = this._computeScrollTopToRevealRange(this._context.viewLayout.getFutureViewport(), e.source, e.minimalReveal, e.range, e.selections, e.verticalType);\n        if (desiredScrollTop === -1) {\n            // marker to abort the reveal range request\n            return false;\n        }\n        // validate the new desired scroll top\n        let newScrollPosition = this._context.viewLayout.validateScrollPosition({ scrollTop: desiredScrollTop });\n        if (e.revealHorizontal) {\n            if (e.range && e.range.startLineNumber !== e.range.endLineNumber) {\n                // Two or more lines? => scroll to base (That's how you see most of the two lines)\n                newScrollPosition = {\n                    scrollTop: newScrollPosition.scrollTop,\n                    scrollLeft: 0\n                };\n            }\n            else if (e.range) {\n                // We don't necessarily know the horizontal offset of this range since the line might not be in the view...\n                this._horizontalRevealRequest = new HorizontalRevealRangeRequest(e.minimalReveal, e.range.startLineNumber, e.range.startColumn, e.range.endColumn, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n            }\n            else if (e.selections && e.selections.length > 0) {\n                this._horizontalRevealRequest = new HorizontalRevealSelectionsRequest(e.minimalReveal, e.selections, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n            }\n        }\n        else {\n            this._horizontalRevealRequest = null;\n        }\n        const scrollTopDelta = Math.abs(this._context.viewLayout.getCurrentScrollTop() - newScrollPosition.scrollTop);\n        const scrollType = (scrollTopDelta <= this._lineHeight ? 1 /* ScrollType.Immediate */ : e.scrollType);\n        this._context.viewModel.viewLayout.setScrollPosition(newScrollPosition, scrollType);\n        return true;\n    }\n    onScrollChanged(e) {\n        if (this._horizontalRevealRequest && e.scrollLeftChanged) {\n            // cancel any outstanding horizontal reveal request if someone else scrolls horizontally.\n            this._horizontalRevealRequest = null;\n        }\n        if (this._horizontalRevealRequest && e.scrollTopChanged) {\n            const min = Math.min(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n            const max = Math.max(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n            if (e.scrollTop < min || e.scrollTop > max) {\n                // cancel any outstanding horizontal reveal request if someone else scrolls vertically.\n                this._horizontalRevealRequest = null;\n            }\n        }\n        this.domNode.setWidth(e.scrollWidth);\n        return this._visibleLines.onScrollChanged(e) || true;\n    }\n    onTokensChanged(e) {\n        return this._visibleLines.onTokensChanged(e);\n    }\n    onZonesChanged(e) {\n        this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n        return this._visibleLines.onZonesChanged(e);\n    }\n    onThemeChanged(e) {\n        return this._onOptionsMaybeChanged();\n    }\n    // ---- end view event handlers\n    // ----------- HELPERS FOR OTHERS\n    getPositionFromDOMInfo(spanNode, offset) {\n        const viewLineDomNode = this._getViewLineDomNode(spanNode);\n        if (viewLineDomNode === null) {\n            // Couldn't find view line node\n            return null;\n        }\n        const lineNumber = this._getLineNumberFor(viewLineDomNode);\n        if (lineNumber === -1) {\n            // Couldn't find view line node\n            return null;\n        }\n        if (lineNumber < 1 || lineNumber > this._context.viewModel.getLineCount()) {\n            // lineNumber is outside range\n            return null;\n        }\n        if (this._context.viewModel.getLineMaxColumn(lineNumber) === 1) {\n            // Line is empty\n            return new Position(lineNumber, 1);\n        }\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n            // Couldn't find line\n            return null;\n        }\n        let column = this._visibleLines.getVisibleLine(lineNumber).getColumnOfNodeOffset(spanNode, offset);\n        const minColumn = this._context.viewModel.getLineMinColumn(lineNumber);\n        if (column < minColumn) {\n            column = minColumn;\n        }\n        return new Position(lineNumber, column);\n    }\n    _getViewLineDomNode(node) {\n        while (node && node.nodeType === 1) {\n            if (node.className === ViewLine.CLASS_NAME) {\n                return node;\n            }\n            node = node.parentElement;\n        }\n        return null;\n    }\n    /**\n     * @returns the line number of this view line dom node.\n     */\n    _getLineNumberFor(domNode) {\n        const startLineNumber = this._visibleLines.getStartLineNumber();\n        const endLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const line = this._visibleLines.getVisibleLine(lineNumber);\n            if (domNode === line.getDomNode()) {\n                return lineNumber;\n            }\n        }\n        return -1;\n    }\n    getLineWidth(lineNumber) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n            // Couldn't find line\n            return -1;\n        }\n        const context = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        const result = this._visibleLines.getVisibleLine(lineNumber).getWidth(context);\n        this._updateLineWidthsSlowIfDomDidLayout(context);\n        return result;\n    }\n    linesVisibleRangesForRange(_range, includeNewLines) {\n        if (this.shouldRender()) {\n            // Cannot read from the DOM because it is dirty\n            // i.e. the model & the dom are out of sync, so I'd be reading something stale\n            return null;\n        }\n        const originalEndLineNumber = _range.endLineNumber;\n        const range = Range.intersectRanges(_range, this._lastRenderedData.getCurrentVisibleRange());\n        if (!range) {\n            return null;\n        }\n        const visibleRanges = [];\n        let visibleRangesLen = 0;\n        const domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        let nextLineModelLineNumber = 0;\n        if (includeNewLines) {\n            nextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(range.startLineNumber, 1)).lineNumber;\n        }\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n            if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n                continue;\n            }\n            const startColumn = lineNumber === range.startLineNumber ? range.startColumn : 1;\n            const continuesInNextLine = lineNumber !== range.endLineNumber;\n            const endColumn = continuesInNextLine ? this._context.viewModel.getLineMaxColumn(lineNumber) : range.endColumn;\n            const visibleRangesForLine = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n            if (!visibleRangesForLine) {\n                continue;\n            }\n            if (includeNewLines && lineNumber < originalEndLineNumber) {\n                const currentLineModelLineNumber = nextLineModelLineNumber;\n                nextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber + 1, 1)).lineNumber;\n                if (currentLineModelLineNumber !== nextLineModelLineNumber) {\n                    visibleRangesForLine.ranges[visibleRangesForLine.ranges.length - 1].width += this._typicalHalfwidthCharacterWidth;\n                }\n            }\n            visibleRanges[visibleRangesLen++] = new LineVisibleRanges(visibleRangesForLine.outsideRenderedLine, lineNumber, HorizontalRange.from(visibleRangesForLine.ranges), continuesInNextLine);\n        }\n        this._updateLineWidthsSlowIfDomDidLayout(domReadingContext);\n        if (visibleRangesLen === 0) {\n            return null;\n        }\n        return visibleRanges;\n    }\n    _visibleRangesForLineRange(lineNumber, startColumn, endColumn) {\n        if (this.shouldRender()) {\n            // Cannot read from the DOM because it is dirty\n            // i.e. the model & the dom are out of sync, so I'd be reading something stale\n            return null;\n        }\n        if (lineNumber < this._visibleLines.getStartLineNumber() || lineNumber > this._visibleLines.getEndLineNumber()) {\n            return null;\n        }\n        const domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        const result = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n        this._updateLineWidthsSlowIfDomDidLayout(domReadingContext);\n        return result;\n    }\n    visibleRangeForPosition(position) {\n        const visibleRanges = this._visibleRangesForLineRange(position.lineNumber, position.column, position.column);\n        if (!visibleRanges) {\n            return null;\n        }\n        return new HorizontalPosition(visibleRanges.outsideRenderedLine, visibleRanges.ranges[0].left);\n    }\n    /**\n     * Updates the max line width if it is fast to compute.\n     * Returns true if all lines were taken into account.\n     * Returns false if some lines need to be reevaluated (in a slow fashion).\n     */\n    _updateLineWidthsFast() {\n        return this._updateLineWidths(true);\n    }\n    _updateLineWidthsSlow() {\n        this._updateLineWidths(false);\n    }\n    /**\n     * Update the line widths using DOM layout information after someone else\n     * has caused a synchronous layout.\n     */\n    _updateLineWidthsSlowIfDomDidLayout(domReadingContext) {\n        if (!domReadingContext.didDomLayout) {\n            // only proceed if we just did a layout\n            return;\n        }\n        if (this._asyncUpdateLineWidths.isScheduled()) {\n            // reading widths is not scheduled => widths are up-to-date\n            return;\n        }\n        this._asyncUpdateLineWidths.cancel();\n        this._updateLineWidthsSlow();\n    }\n    _updateLineWidths(fast) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        let localMaxLineWidth = 1;\n        let allWidthsComputed = true;\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n            if (fast && !visibleLine.getWidthIsFast()) {\n                // Cannot compute width in a fast way for this line\n                allWidthsComputed = false;\n                continue;\n            }\n            localMaxLineWidth = Math.max(localMaxLineWidth, visibleLine.getWidth(null));\n        }\n        if (allWidthsComputed && rendStartLineNumber === 1 && rendEndLineNumber === this._context.viewModel.getLineCount()) {\n            // we know the max line width for all the lines\n            this._maxLineWidth = 0;\n        }\n        this._ensureMaxLineWidth(localMaxLineWidth);\n        return allWidthsComputed;\n    }\n    _checkMonospaceFontAssumptions() {\n        // Problems with monospace assumptions are more apparent for longer lines,\n        // as small rounding errors start to sum up, so we will select the longest\n        // line for a closer inspection\n        let longestLineNumber = -1;\n        let longestWidth = -1;\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n            if (visibleLine.needsMonospaceFontCheck()) {\n                const lineWidth = visibleLine.getWidth(null);\n                if (lineWidth > longestWidth) {\n                    longestWidth = lineWidth;\n                    longestLineNumber = lineNumber;\n                }\n            }\n        }\n        if (longestLineNumber === -1) {\n            return;\n        }\n        if (!this._visibleLines.getVisibleLine(longestLineNumber).monospaceAssumptionsAreValid()) {\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n                visibleLine.onMonospaceAssumptionsInvalidated();\n            }\n        }\n    }\n    prepareRender() {\n        throw new Error('Not supported');\n    }\n    render() {\n        throw new Error('Not supported');\n    }\n    renderText(viewportData) {\n        // (1) render lines - ensures lines are in the DOM\n        this._visibleLines.renderLines(viewportData);\n        this._lastRenderedData.setCurrentVisibleRange(viewportData.visibleRange);\n        this.domNode.setWidth(this._context.viewLayout.getScrollWidth());\n        this.domNode.setHeight(Math.min(this._context.viewLayout.getScrollHeight(), 1000000));\n        // (2) compute horizontal scroll position:\n        //  - this must happen after the lines are in the DOM since it might need a line that rendered just now\n        //  - it might change `scrollWidth` and `scrollLeft`\n        if (this._horizontalRevealRequest) {\n            const horizontalRevealRequest = this._horizontalRevealRequest;\n            // Check that we have the line that contains the horizontal range in the viewport\n            if (viewportData.startLineNumber <= horizontalRevealRequest.minLineNumber && horizontalRevealRequest.maxLineNumber <= viewportData.endLineNumber) {\n                this._horizontalRevealRequest = null;\n                // allow `visibleRangesForRange2` to work\n                this.onDidRender();\n                // compute new scroll position\n                const newScrollLeft = this._computeScrollLeftToReveal(horizontalRevealRequest);\n                if (newScrollLeft) {\n                    if (!this._isViewportWrapping) {\n                        // ensure `scrollWidth` is large enough\n                        this._ensureMaxLineWidth(newScrollLeft.maxHorizontalOffset);\n                    }\n                    // set `scrollLeft`\n                    this._context.viewModel.viewLayout.setScrollPosition({\n                        scrollLeft: newScrollLeft.scrollLeft\n                    }, horizontalRevealRequest.scrollType);\n                }\n            }\n        }\n        // Update max line width (not so important, it is just so the horizontal scrollbar doesn't get too small)\n        if (!this._updateLineWidthsFast()) {\n            // Computing the width of some lines would be slow => delay it\n            this._asyncUpdateLineWidths.schedule();\n        }\n        else {\n            this._asyncUpdateLineWidths.cancel();\n        }\n        if (platform.isLinux && !this._asyncCheckMonospaceFontAssumptions.isScheduled()) {\n            const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n            const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n                if (visibleLine.needsMonospaceFontCheck()) {\n                    this._asyncCheckMonospaceFontAssumptions.schedule();\n                    break;\n                }\n            }\n        }\n        // (3) handle scrolling\n        this._linesContent.setLayerHinting(this._canUseLayerHinting);\n        this._linesContent.setContain('strict');\n        const adjustedScrollTop = this._context.viewLayout.getCurrentScrollTop() - viewportData.bigNumbersDelta;\n        this._linesContent.setTop(-adjustedScrollTop);\n        this._linesContent.setLeft(-this._context.viewLayout.getCurrentScrollLeft());\n    }\n    // --- width\n    _ensureMaxLineWidth(lineWidth) {\n        const iLineWidth = Math.ceil(lineWidth);\n        if (this._maxLineWidth < iLineWidth) {\n            this._maxLineWidth = iLineWidth;\n            this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n        }\n    }\n    _computeScrollTopToRevealRange(viewport, source, minimalReveal, range, selections, verticalType) {\n        const viewportStartY = viewport.top;\n        const viewportHeight = viewport.height;\n        const viewportEndY = viewportStartY + viewportHeight;\n        let boxIsSingleRange;\n        let boxStartY;\n        let boxEndY;\n        if (selections && selections.length > 0) {\n            let minLineNumber = selections[0].startLineNumber;\n            let maxLineNumber = selections[0].endLineNumber;\n            for (let i = 1, len = selections.length; i < len; i++) {\n                const selection = selections[i];\n                minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n                maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n            }\n            boxIsSingleRange = false;\n            boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(minLineNumber);\n            boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(maxLineNumber) + this._lineHeight;\n        }\n        else if (range) {\n            boxIsSingleRange = true;\n            boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.startLineNumber);\n            boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.endLineNumber) + this._lineHeight;\n        }\n        else {\n            return -1;\n        }\n        const shouldIgnoreScrollOff = (source === 'mouse' || minimalReveal) && this._cursorSurroundingLinesStyle === 'default';\n        let paddingTop = 0;\n        let paddingBottom = 0;\n        if (!shouldIgnoreScrollOff) {\n            const context = Math.min((viewportHeight / this._lineHeight) / 2, this._cursorSurroundingLines);\n            if (this._stickyScrollEnabled) {\n                paddingTop = Math.max(context, this._maxNumberStickyLines) * this._lineHeight;\n            }\n            else {\n                paddingTop = context * this._lineHeight;\n            }\n            paddingBottom = Math.max(0, (context - 1)) * this._lineHeight;\n        }\n        else {\n            if (!minimalReveal) {\n                // Reveal one more line above (this case is hit when dragging)\n                paddingTop = this._lineHeight;\n            }\n        }\n        if (!minimalReveal) {\n            if (verticalType === 0 /* viewEvents.VerticalRevealType.Simple */ || verticalType === 4 /* viewEvents.VerticalRevealType.Bottom */) {\n                // Reveal one line more when the last line would be covered by the scrollbar - arrow down case or revealing a line explicitly at bottom\n                paddingBottom += this._lineHeight;\n            }\n        }\n        boxStartY -= paddingTop;\n        boxEndY += paddingBottom;\n        let newScrollTop;\n        if (boxEndY - boxStartY > viewportHeight) {\n            // the box is larger than the viewport ... scroll to its top\n            if (!boxIsSingleRange) {\n                // do not reveal multiple cursors if there are more than fit the viewport\n                return -1;\n            }\n            newScrollTop = boxStartY;\n        }\n        else if (verticalType === 5 /* viewEvents.VerticalRevealType.NearTop */ || verticalType === 6 /* viewEvents.VerticalRevealType.NearTopIfOutsideViewport */) {\n            if (verticalType === 6 /* viewEvents.VerticalRevealType.NearTopIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n                // Box is already in the viewport... do nothing\n                newScrollTop = viewportStartY;\n            }\n            else {\n                // We want a gap that is 20% of the viewport, but with a minimum of 5 lines\n                const desiredGapAbove = Math.max(5 * this._lineHeight, viewportHeight * 0.2);\n                // Try to scroll just above the box with the desired gap\n                const desiredScrollTop = boxStartY - desiredGapAbove;\n                // But ensure that the box is not pushed out of viewport\n                const minScrollTop = boxEndY - viewportHeight;\n                newScrollTop = Math.max(minScrollTop, desiredScrollTop);\n            }\n        }\n        else if (verticalType === 1 /* viewEvents.VerticalRevealType.Center */ || verticalType === 2 /* viewEvents.VerticalRevealType.CenterIfOutsideViewport */) {\n            if (verticalType === 2 /* viewEvents.VerticalRevealType.CenterIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n                // Box is already in the viewport... do nothing\n                newScrollTop = viewportStartY;\n            }\n            else {\n                // Box is outside the viewport... center it\n                const boxMiddleY = (boxStartY + boxEndY) / 2;\n                newScrollTop = Math.max(0, boxMiddleY - viewportHeight / 2);\n            }\n        }\n        else {\n            newScrollTop = this._computeMinimumScrolling(viewportStartY, viewportEndY, boxStartY, boxEndY, verticalType === 3 /* viewEvents.VerticalRevealType.Top */, verticalType === 4 /* viewEvents.VerticalRevealType.Bottom */);\n        }\n        return newScrollTop;\n    }\n    _computeScrollLeftToReveal(horizontalRevealRequest) {\n        const viewport = this._context.viewLayout.getCurrentViewport();\n        const layoutInfo = this._context.configuration.options.get(144 /* EditorOption.layoutInfo */);\n        const viewportStartX = viewport.left;\n        const viewportEndX = viewportStartX + viewport.width - layoutInfo.verticalScrollbarWidth;\n        let boxStartX = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n        let boxEndX = 0;\n        if (horizontalRevealRequest.type === 'range') {\n            const visibleRanges = this._visibleRangesForLineRange(horizontalRevealRequest.lineNumber, horizontalRevealRequest.startColumn, horizontalRevealRequest.endColumn);\n            if (!visibleRanges) {\n                return null;\n            }\n            for (const visibleRange of visibleRanges.ranges) {\n                boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n                boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n            }\n        }\n        else {\n            for (const selection of horizontalRevealRequest.selections) {\n                if (selection.startLineNumber !== selection.endLineNumber) {\n                    return null;\n                }\n                const visibleRanges = this._visibleRangesForLineRange(selection.startLineNumber, selection.startColumn, selection.endColumn);\n                if (!visibleRanges) {\n                    return null;\n                }\n                for (const visibleRange of visibleRanges.ranges) {\n                    boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n                    boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n                }\n            }\n        }\n        if (!horizontalRevealRequest.minimalReveal) {\n            boxStartX = Math.max(0, boxStartX - ViewLines.HORIZONTAL_EXTRA_PX);\n            boxEndX += this._revealHorizontalRightPadding;\n        }\n        if (horizontalRevealRequest.type === 'selections' && boxEndX - boxStartX > viewport.width) {\n            return null;\n        }\n        const newScrollLeft = this._computeMinimumScrolling(viewportStartX, viewportEndX, boxStartX, boxEndX);\n        return {\n            scrollLeft: newScrollLeft,\n            maxHorizontalOffset: boxEndX\n        };\n    }\n    _computeMinimumScrolling(viewportStart, viewportEnd, boxStart, boxEnd, revealAtStart, revealAtEnd) {\n        viewportStart = viewportStart | 0;\n        viewportEnd = viewportEnd | 0;\n        boxStart = boxStart | 0;\n        boxEnd = boxEnd | 0;\n        revealAtStart = !!revealAtStart;\n        revealAtEnd = !!revealAtEnd;\n        const viewportLength = viewportEnd - viewportStart;\n        const boxLength = boxEnd - boxStart;\n        if (boxLength < viewportLength) {\n            // The box would fit in the viewport\n            if (revealAtStart) {\n                return boxStart;\n            }\n            if (revealAtEnd) {\n                return Math.max(0, boxEnd - viewportLength);\n            }\n            if (boxStart < viewportStart) {\n                // The box is above the viewport\n                return boxStart;\n            }\n            else if (boxEnd > viewportEnd) {\n                // The box is below the viewport\n                return Math.max(0, boxEnd - viewportLength);\n            }\n        }\n        else {\n            // The box would not fit in the viewport\n            // Reveal the beginning of the box\n            return boxStart;\n        }\n        return viewportStart;\n    }\n}\n/**\n * Adds this amount of pixels to the right of lines (no-one wants to type near the edge of the viewport)\n */\nViewLines.HORIZONTAL_EXTRA_PX = 30;\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class DomReadingContext {\n    get didDomLayout() {\n        return this._didDomLayout;\n    }\n    readClientRect() {\n        if (!this._clientRectRead) {\n            this._clientRectRead = true;\n            const rect = this._domNode.getBoundingClientRect();\n            this.markDidDomLayout();\n            this._clientRectDeltaLeft = rect.left;\n            this._clientRectScale = rect.width / this._domNode.offsetWidth;\n        }\n    }\n    get clientRectDeltaLeft() {\n        if (!this._clientRectRead) {\n            this.readClientRect();\n        }\n        return this._clientRectDeltaLeft;\n    }\n    get clientRectScale() {\n        if (!this._clientRectRead) {\n            this.readClientRect();\n        }\n        return this._clientRectScale;\n    }\n    constructor(_domNode, endNode) {\n        this._domNode = _domNode;\n        this.endNode = endNode;\n        this._didDomLayout = false;\n        this._clientRectDeltaLeft = 0;\n        this._clientRectScale = 1;\n        this._clientRectRead = false;\n    }\n    markDidDomLayout() {\n        this._didDomLayout = true;\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './linesDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport class LinesDecorationsOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        this._decorationsWidth = layoutInfo.decorationsWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        this._decorationsWidth = layoutInfo.decorationsWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        var _a, _b;\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const linesDecorationsClassName = d.options.linesDecorationsClassName;\n            const zIndex = d.options.zIndex;\n            if (linesDecorationsClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, linesDecorationsClassName, (_a = d.options.linesDecorationsTooltip) !== null && _a !== void 0 ? _a : null, zIndex);\n            }\n            const firstLineDecorationClassName = d.options.firstLineDecorationClassName;\n            if (firstLineDecorationClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.startLineNumber, firstLineDecorationClassName, (_b = d.options.linesDecorationsTooltip) !== null && _b !== void 0 ? _b : null, zIndex);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const left = this._decorationsLeft.toString();\n        const width = this._decorationsWidth.toString();\n        const common = '\" style=\"left:' + left + 'px;width:' + width + 'px;\"></div>';\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const decorations = toRender[lineIndex].getDecorations();\n            let lineOutput = '';\n            for (const decoration of decorations) {\n                let addition = '<div class=\"cldr ' + decoration.className;\n                if (decoration.tooltip !== null) {\n                    addition += '\" title=\"' + decoration.tooltip; // The tooltip is already escaped.\n                }\n                addition += common;\n                lineOutput += addition;\n            }\n            output[lineIndex] = lineOutput;\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        return this._renderResult[lineNumber - startLineNumber];\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './marginDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport class MarginViewLineDecorationsOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const marginClassName = d.options.marginClassName;\n            const zIndex = d.options.zIndex;\n            if (marginClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, marginClassName, null, zIndex);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const decorations = toRender[lineIndex].getDecorations();\n            let lineOutput = '';\n            for (const decoration of decorations) {\n                lineOutput += '<div class=\"cmdr ' + decoration.className + '\" style=\"\"></div>';\n            }\n            output[lineIndex] = lineOutput;\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        return this._renderResult[lineNumber - startLineNumber];\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './minimap.css';\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { GlobalPointerMoveMonitor } from '../../../../base/browser/globalPointerMoveMonitor.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { RenderedLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { MINIMAP_GUTTER_WIDTH, EditorLayoutInfoComputer } from '../../../common/config/editorOptions.js';\nimport { Range } from '../../../common/core/range.js';\nimport { RGBA8 } from '../../../common/core/rgba.js';\nimport { MinimapTokensColorTracker } from '../../../common/viewModel/minimapTokensColorTracker.js';\nimport { ViewModelDecoration } from '../../../common/viewModel.js';\nimport { minimapSelection, minimapBackground, minimapForegroundOpacity } from '../../../../platform/theme/common/colorRegistry.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EventType, Gesture } from '../../../../base/browser/touch.js';\nimport { MinimapCharRendererFactory } from './minimapCharRendererFactory.js';\nimport { MinimapPosition } from '../../../common/model.js';\nimport { createSingleCallFunction } from '../../../../base/common/functional.js';\n/**\n * The orthogonal distance to the slider at which dragging \"resets\". This implements \"snapping\"\n */\nconst POINTER_DRAG_RESET_DISTANCE = 140;\nconst GUTTER_DECORATION_WIDTH = 2;\nclass MinimapOptions {\n    constructor(configuration, theme, tokensColorTracker) {\n        const options = configuration.options;\n        const pixelRatio = options.get(142 /* EditorOption.pixelRatio */);\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        const minimapLayout = layoutInfo.minimap;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const minimapOpts = options.get(73 /* EditorOption.minimap */);\n        this.renderMinimap = minimapLayout.renderMinimap;\n        this.size = minimapOpts.size;\n        this.minimapHeightIsEditorHeight = minimapLayout.minimapHeightIsEditorHeight;\n        this.scrollBeyondLastLine = options.get(105 /* EditorOption.scrollBeyondLastLine */);\n        this.paddingTop = options.get(84 /* EditorOption.padding */).top;\n        this.paddingBottom = options.get(84 /* EditorOption.padding */).bottom;\n        this.showSlider = minimapOpts.showSlider;\n        this.autohide = minimapOpts.autohide;\n        this.pixelRatio = pixelRatio;\n        this.typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this.lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this.minimapLeft = minimapLayout.minimapLeft;\n        this.minimapWidth = minimapLayout.minimapWidth;\n        this.minimapHeight = layoutInfo.height;\n        this.canvasInnerWidth = minimapLayout.minimapCanvasInnerWidth;\n        this.canvasInnerHeight = minimapLayout.minimapCanvasInnerHeight;\n        this.canvasOuterWidth = minimapLayout.minimapCanvasOuterWidth;\n        this.canvasOuterHeight = minimapLayout.minimapCanvasOuterHeight;\n        this.isSampling = minimapLayout.minimapIsSampling;\n        this.editorHeight = layoutInfo.height;\n        this.fontScale = minimapLayout.minimapScale;\n        this.minimapLineHeight = minimapLayout.minimapLineHeight;\n        this.minimapCharWidth = 1 /* Constants.BASE_CHAR_WIDTH */ * this.fontScale;\n        this.charRenderer = createSingleCallFunction(() => MinimapCharRendererFactory.create(this.fontScale, fontInfo.fontFamily));\n        this.defaultBackgroundColor = tokensColorTracker.getColor(2 /* ColorId.DefaultBackground */);\n        this.backgroundColor = MinimapOptions._getMinimapBackground(theme, this.defaultBackgroundColor);\n        this.foregroundAlpha = MinimapOptions._getMinimapForegroundOpacity(theme);\n    }\n    static _getMinimapBackground(theme, defaultBackgroundColor) {\n        const themeColor = theme.getColor(minimapBackground);\n        if (themeColor) {\n            return new RGBA8(themeColor.rgba.r, themeColor.rgba.g, themeColor.rgba.b, Math.round(255 * themeColor.rgba.a));\n        }\n        return defaultBackgroundColor;\n    }\n    static _getMinimapForegroundOpacity(theme) {\n        const themeColor = theme.getColor(minimapForegroundOpacity);\n        if (themeColor) {\n            return RGBA8._clamp(Math.round(255 * themeColor.rgba.a));\n        }\n        return 255;\n    }\n    equals(other) {\n        return (this.renderMinimap === other.renderMinimap\n            && this.size === other.size\n            && this.minimapHeightIsEditorHeight === other.minimapHeightIsEditorHeight\n            && this.scrollBeyondLastLine === other.scrollBeyondLastLine\n            && this.paddingTop === other.paddingTop\n            && this.paddingBottom === other.paddingBottom\n            && this.showSlider === other.showSlider\n            && this.autohide === other.autohide\n            && this.pixelRatio === other.pixelRatio\n            && this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth\n            && this.lineHeight === other.lineHeight\n            && this.minimapLeft === other.minimapLeft\n            && this.minimapWidth === other.minimapWidth\n            && this.minimapHeight === other.minimapHeight\n            && this.canvasInnerWidth === other.canvasInnerWidth\n            && this.canvasInnerHeight === other.canvasInnerHeight\n            && this.canvasOuterWidth === other.canvasOuterWidth\n            && this.canvasOuterHeight === other.canvasOuterHeight\n            && this.isSampling === other.isSampling\n            && this.editorHeight === other.editorHeight\n            && this.fontScale === other.fontScale\n            && this.minimapLineHeight === other.minimapLineHeight\n            && this.minimapCharWidth === other.minimapCharWidth\n            && this.defaultBackgroundColor && this.defaultBackgroundColor.equals(other.defaultBackgroundColor)\n            && this.backgroundColor && this.backgroundColor.equals(other.backgroundColor)\n            && this.foregroundAlpha === other.foregroundAlpha);\n    }\n}\nclass MinimapLayout {\n    constructor(\n    /**\n     * The given editor scrollTop (input).\n     */\n    scrollTop, \n    /**\n     * The given editor scrollHeight (input).\n     */\n    scrollHeight, sliderNeeded, _computedSliderRatio, \n    /**\n     * slider dom node top (in CSS px)\n     */\n    sliderTop, \n    /**\n     * slider dom node height (in CSS px)\n     */\n    sliderHeight, \n    /**\n     * empty lines to reserve at the top of the minimap.\n     */\n    topPaddingLineCount, \n    /**\n     * minimap render start line number.\n     */\n    startLineNumber, \n    /**\n     * minimap render end line number.\n     */\n    endLineNumber) {\n        this.scrollTop = scrollTop;\n        this.scrollHeight = scrollHeight;\n        this.sliderNeeded = sliderNeeded;\n        this._computedSliderRatio = _computedSliderRatio;\n        this.sliderTop = sliderTop;\n        this.sliderHeight = sliderHeight;\n        this.topPaddingLineCount = topPaddingLineCount;\n        this.startLineNumber = startLineNumber;\n        this.endLineNumber = endLineNumber;\n    }\n    /**\n     * Compute a desired `scrollPosition` such that the slider moves by `delta`.\n     */\n    getDesiredScrollTopFromDelta(delta) {\n        return Math.round(this.scrollTop + delta / this._computedSliderRatio);\n    }\n    getDesiredScrollTopFromTouchLocation(pageY) {\n        return Math.round((pageY - this.sliderHeight / 2) / this._computedSliderRatio);\n    }\n    /**\n     * Intersect a line range with `this.startLineNumber` and `this.endLineNumber`.\n     */\n    intersectWithViewport(range) {\n        const startLineNumber = Math.max(this.startLineNumber, range.startLineNumber);\n        const endLineNumber = Math.min(this.endLineNumber, range.endLineNumber);\n        if (startLineNumber > endLineNumber) {\n            // entirely outside minimap's viewport\n            return null;\n        }\n        return [startLineNumber, endLineNumber];\n    }\n    /**\n     * Get the inner minimap y coordinate for a line number.\n     */\n    getYForLineNumber(lineNumber, minimapLineHeight) {\n        return +(lineNumber - this.startLineNumber + this.topPaddingLineCount) * minimapLineHeight;\n    }\n    static create(options, viewportStartLineNumber, viewportEndLineNumber, viewportStartLineNumberVerticalOffset, viewportHeight, viewportContainsWhitespaceGaps, lineCount, realLineCount, scrollTop, scrollHeight, previousLayout) {\n        const pixelRatio = options.pixelRatio;\n        const minimapLineHeight = options.minimapLineHeight;\n        const minimapLinesFitting = Math.floor(options.canvasInnerHeight / minimapLineHeight);\n        const lineHeight = options.lineHeight;\n        if (options.minimapHeightIsEditorHeight) {\n            let logicalScrollHeight = (realLineCount * options.lineHeight\n                + options.paddingTop\n                + options.paddingBottom);\n            if (options.scrollBeyondLastLine) {\n                logicalScrollHeight += Math.max(0, viewportHeight - options.lineHeight - options.paddingBottom);\n            }\n            const sliderHeight = Math.max(1, Math.floor(viewportHeight * viewportHeight / logicalScrollHeight));\n            const maxMinimapSliderTop = Math.max(0, options.minimapHeight - sliderHeight);\n            // The slider can move from 0 to `maxMinimapSliderTop`\n            // in the same way `scrollTop` can move from 0 to `scrollHeight` - `viewportHeight`.\n            const computedSliderRatio = (maxMinimapSliderTop) / (scrollHeight - viewportHeight);\n            const sliderTop = (scrollTop * computedSliderRatio);\n            const sliderNeeded = (maxMinimapSliderTop > 0);\n            const maxLinesFitting = Math.floor(options.canvasInnerHeight / options.minimapLineHeight);\n            const topPaddingLineCount = Math.floor(options.paddingTop / options.lineHeight);\n            return new MinimapLayout(scrollTop, scrollHeight, sliderNeeded, computedSliderRatio, sliderTop, sliderHeight, topPaddingLineCount, 1, Math.min(lineCount, maxLinesFitting));\n        }\n        // The visible line count in a viewport can change due to a number of reasons:\n        //  a) with the same viewport width, different scroll positions can result in partial lines being visible:\n        //    e.g. for a line height of 20, and a viewport height of 600\n        //          * scrollTop = 0  => visible lines are [1, 30]\n        //          * scrollTop = 10 => visible lines are [1, 31] (with lines 1 and 31 partially visible)\n        //          * scrollTop = 20 => visible lines are [2, 31]\n        //  b) whitespace gaps might make their way in the viewport (which results in a decrease in the visible line count)\n        //  c) we could be in the scroll beyond last line case (which also results in a decrease in the visible line count, down to possibly only one line being visible)\n        // We must first establish a desirable slider height.\n        let sliderHeight;\n        if (viewportContainsWhitespaceGaps && viewportEndLineNumber !== lineCount) {\n            // case b) from above: there are whitespace gaps in the viewport.\n            // In this case, the height of the slider directly reflects the visible line count.\n            const viewportLineCount = viewportEndLineNumber - viewportStartLineNumber + 1;\n            sliderHeight = Math.floor(viewportLineCount * minimapLineHeight / pixelRatio);\n        }\n        else {\n            // The slider has a stable height\n            const expectedViewportLineCount = viewportHeight / lineHeight;\n            sliderHeight = Math.floor(expectedViewportLineCount * minimapLineHeight / pixelRatio);\n        }\n        const extraLinesAtTheTop = Math.floor(options.paddingTop / lineHeight);\n        let extraLinesAtTheBottom = Math.floor(options.paddingBottom / lineHeight);\n        if (options.scrollBeyondLastLine) {\n            const expectedViewportLineCount = viewportHeight / lineHeight;\n            extraLinesAtTheBottom = Math.max(extraLinesAtTheBottom, expectedViewportLineCount - 1);\n        }\n        let maxMinimapSliderTop;\n        if (extraLinesAtTheBottom > 0) {\n            const expectedViewportLineCount = viewportHeight / lineHeight;\n            // The minimap slider, when dragged all the way down, will contain the last line at its top\n            maxMinimapSliderTop = (extraLinesAtTheTop + lineCount + extraLinesAtTheBottom - expectedViewportLineCount - 1) * minimapLineHeight / pixelRatio;\n        }\n        else {\n            // The minimap slider, when dragged all the way down, will contain the last line at its bottom\n            maxMinimapSliderTop = Math.max(0, (extraLinesAtTheTop + lineCount) * minimapLineHeight / pixelRatio - sliderHeight);\n        }\n        maxMinimapSliderTop = Math.min(options.minimapHeight - sliderHeight, maxMinimapSliderTop);\n        // The slider can move from 0 to `maxMinimapSliderTop`\n        // in the same way `scrollTop` can move from 0 to `scrollHeight` - `viewportHeight`.\n        const computedSliderRatio = (maxMinimapSliderTop) / (scrollHeight - viewportHeight);\n        const sliderTop = (scrollTop * computedSliderRatio);\n        if (minimapLinesFitting >= extraLinesAtTheTop + lineCount + extraLinesAtTheBottom) {\n            // All lines fit in the minimap\n            const sliderNeeded = (maxMinimapSliderTop > 0);\n            return new MinimapLayout(scrollTop, scrollHeight, sliderNeeded, computedSliderRatio, sliderTop, sliderHeight, extraLinesAtTheTop, 1, lineCount);\n        }\n        else {\n            let consideringStartLineNumber;\n            if (viewportStartLineNumber > 1) {\n                consideringStartLineNumber = viewportStartLineNumber + extraLinesAtTheTop;\n            }\n            else {\n                consideringStartLineNumber = Math.max(1, scrollTop / lineHeight);\n            }\n            let topPaddingLineCount;\n            let startLineNumber = Math.max(1, Math.floor(consideringStartLineNumber - sliderTop * pixelRatio / minimapLineHeight));\n            if (startLineNumber < extraLinesAtTheTop) {\n                topPaddingLineCount = extraLinesAtTheTop - startLineNumber + 1;\n                startLineNumber = 1;\n            }\n            else {\n                topPaddingLineCount = 0;\n                startLineNumber = Math.max(1, startLineNumber - extraLinesAtTheTop);\n            }\n            // Avoid flickering caused by a partial viewport start line\n            // by being consistent w.r.t. the previous layout decision\n            if (previousLayout && previousLayout.scrollHeight === scrollHeight) {\n                if (previousLayout.scrollTop > scrollTop) {\n                    // Scrolling up => never increase `startLineNumber`\n                    startLineNumber = Math.min(startLineNumber, previousLayout.startLineNumber);\n                    topPaddingLineCount = Math.max(topPaddingLineCount, previousLayout.topPaddingLineCount);\n                }\n                if (previousLayout.scrollTop < scrollTop) {\n                    // Scrolling down => never decrease `startLineNumber`\n                    startLineNumber = Math.max(startLineNumber, previousLayout.startLineNumber);\n                    topPaddingLineCount = Math.min(topPaddingLineCount, previousLayout.topPaddingLineCount);\n                }\n            }\n            const endLineNumber = Math.min(lineCount, startLineNumber - topPaddingLineCount + minimapLinesFitting - 1);\n            const partialLine = (scrollTop - viewportStartLineNumberVerticalOffset) / lineHeight;\n            let sliderTopAligned;\n            if (scrollTop >= options.paddingTop) {\n                sliderTopAligned = (viewportStartLineNumber - startLineNumber + topPaddingLineCount + partialLine) * minimapLineHeight / pixelRatio;\n            }\n            else {\n                sliderTopAligned = (scrollTop / options.paddingTop) * (topPaddingLineCount + partialLine) * minimapLineHeight / pixelRatio;\n            }\n            return new MinimapLayout(scrollTop, scrollHeight, true, computedSliderRatio, sliderTopAligned, sliderHeight, topPaddingLineCount, startLineNumber, endLineNumber);\n        }\n    }\n}\nclass MinimapLine {\n    constructor(dy) {\n        this.dy = dy;\n    }\n    onContentChanged() {\n        this.dy = -1;\n    }\n    onTokensChanged() {\n        this.dy = -1;\n    }\n}\nMinimapLine.INVALID = new MinimapLine(-1);\nclass RenderData {\n    constructor(renderedLayout, imageData, lines) {\n        this.renderedLayout = renderedLayout;\n        this._imageData = imageData;\n        this._renderedLines = new RenderedLinesCollection(() => MinimapLine.INVALID);\n        this._renderedLines._set(renderedLayout.startLineNumber, lines);\n    }\n    /**\n     * Check if the current RenderData matches accurately the new desired layout and no painting is needed.\n     */\n    linesEquals(layout) {\n        if (!this.scrollEquals(layout)) {\n            return false;\n        }\n        const tmp = this._renderedLines._get();\n        const lines = tmp.lines;\n        for (let i = 0, len = lines.length; i < len; i++) {\n            if (lines[i].dy === -1) {\n                // This line is invalid\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Check if the current RenderData matches the new layout's scroll position\n     */\n    scrollEquals(layout) {\n        return this.renderedLayout.startLineNumber === layout.startLineNumber\n            && this.renderedLayout.endLineNumber === layout.endLineNumber;\n    }\n    _get() {\n        const tmp = this._renderedLines._get();\n        return {\n            imageData: this._imageData,\n            rendLineNumberStart: tmp.rendLineNumberStart,\n            lines: tmp.lines\n        };\n    }\n    onLinesChanged(changeFromLineNumber, changeCount) {\n        return this._renderedLines.onLinesChanged(changeFromLineNumber, changeCount);\n    }\n    onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\n        this._renderedLines.onLinesDeleted(deleteFromLineNumber, deleteToLineNumber);\n    }\n    onLinesInserted(insertFromLineNumber, insertToLineNumber) {\n        this._renderedLines.onLinesInserted(insertFromLineNumber, insertToLineNumber);\n    }\n    onTokensChanged(ranges) {\n        return this._renderedLines.onTokensChanged(ranges);\n    }\n}\n/**\n * Some sort of double buffering.\n *\n * Keeps two buffers around that will be rotated for painting.\n * Always gives a buffer that is filled with the background color.\n */\nclass MinimapBuffers {\n    constructor(ctx, WIDTH, HEIGHT, background) {\n        this._backgroundFillData = MinimapBuffers._createBackgroundFillData(WIDTH, HEIGHT, background);\n        this._buffers = [\n            ctx.createImageData(WIDTH, HEIGHT),\n            ctx.createImageData(WIDTH, HEIGHT)\n        ];\n        this._lastUsedBuffer = 0;\n    }\n    getBuffer() {\n        // rotate buffers\n        this._lastUsedBuffer = 1 - this._lastUsedBuffer;\n        const result = this._buffers[this._lastUsedBuffer];\n        // fill with background color\n        result.data.set(this._backgroundFillData);\n        return result;\n    }\n    static _createBackgroundFillData(WIDTH, HEIGHT, background) {\n        const backgroundR = background.r;\n        const backgroundG = background.g;\n        const backgroundB = background.b;\n        const backgroundA = background.a;\n        const result = new Uint8ClampedArray(WIDTH * HEIGHT * 4);\n        let offset = 0;\n        for (let i = 0; i < HEIGHT; i++) {\n            for (let j = 0; j < WIDTH; j++) {\n                result[offset] = backgroundR;\n                result[offset + 1] = backgroundG;\n                result[offset + 2] = backgroundB;\n                result[offset + 3] = backgroundA;\n                offset += 4;\n            }\n        }\n        return result;\n    }\n}\nclass MinimapSamplingState {\n    static compute(options, viewLineCount, oldSamplingState) {\n        if (options.renderMinimap === 0 /* RenderMinimap.None */ || !options.isSampling) {\n            return [null, []];\n        }\n        // ratio is intentionally not part of the layout to avoid the layout changing all the time\n        // so we need to recompute it again...\n        const { minimapLineCount } = EditorLayoutInfoComputer.computeContainedMinimapLineCount({\n            viewLineCount: viewLineCount,\n            scrollBeyondLastLine: options.scrollBeyondLastLine,\n            paddingTop: options.paddingTop,\n            paddingBottom: options.paddingBottom,\n            height: options.editorHeight,\n            lineHeight: options.lineHeight,\n            pixelRatio: options.pixelRatio\n        });\n        const ratio = viewLineCount / minimapLineCount;\n        const halfRatio = ratio / 2;\n        if (!oldSamplingState || oldSamplingState.minimapLines.length === 0) {\n            const result = [];\n            result[0] = 1;\n            if (minimapLineCount > 1) {\n                for (let i = 0, lastIndex = minimapLineCount - 1; i < lastIndex; i++) {\n                    result[i] = Math.round(i * ratio + halfRatio);\n                }\n                result[minimapLineCount - 1] = viewLineCount;\n            }\n            return [new MinimapSamplingState(ratio, result), []];\n        }\n        const oldMinimapLines = oldSamplingState.minimapLines;\n        const oldLength = oldMinimapLines.length;\n        const result = [];\n        let oldIndex = 0;\n        let oldDeltaLineCount = 0;\n        let minViewLineNumber = 1;\n        const MAX_EVENT_COUNT = 10; // generate at most 10 events, if there are more than 10 changes, just flush all previous data\n        let events = [];\n        let lastEvent = null;\n        for (let i = 0; i < minimapLineCount; i++) {\n            const fromViewLineNumber = Math.max(minViewLineNumber, Math.round(i * ratio));\n            const toViewLineNumber = Math.max(fromViewLineNumber, Math.round((i + 1) * ratio));\n            while (oldIndex < oldLength && oldMinimapLines[oldIndex] < fromViewLineNumber) {\n                if (events.length < MAX_EVENT_COUNT) {\n                    const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                    if (lastEvent && lastEvent.type === 'deleted' && lastEvent._oldIndex === oldIndex - 1) {\n                        lastEvent.deleteToLineNumber++;\n                    }\n                    else {\n                        lastEvent = { type: 'deleted', _oldIndex: oldIndex, deleteFromLineNumber: oldMinimapLineNumber, deleteToLineNumber: oldMinimapLineNumber };\n                        events.push(lastEvent);\n                    }\n                    oldDeltaLineCount--;\n                }\n                oldIndex++;\n            }\n            let selectedViewLineNumber;\n            if (oldIndex < oldLength && oldMinimapLines[oldIndex] <= toViewLineNumber) {\n                // reuse the old sampled line\n                selectedViewLineNumber = oldMinimapLines[oldIndex];\n                oldIndex++;\n            }\n            else {\n                if (i === 0) {\n                    selectedViewLineNumber = 1;\n                }\n                else if (i + 1 === minimapLineCount) {\n                    selectedViewLineNumber = viewLineCount;\n                }\n                else {\n                    selectedViewLineNumber = Math.round(i * ratio + halfRatio);\n                }\n                if (events.length < MAX_EVENT_COUNT) {\n                    const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                    if (lastEvent && lastEvent.type === 'inserted' && lastEvent._i === i - 1) {\n                        lastEvent.insertToLineNumber++;\n                    }\n                    else {\n                        lastEvent = { type: 'inserted', _i: i, insertFromLineNumber: oldMinimapLineNumber, insertToLineNumber: oldMinimapLineNumber };\n                        events.push(lastEvent);\n                    }\n                    oldDeltaLineCount++;\n                }\n            }\n            result[i] = selectedViewLineNumber;\n            minViewLineNumber = selectedViewLineNumber;\n        }\n        if (events.length < MAX_EVENT_COUNT) {\n            while (oldIndex < oldLength) {\n                const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                if (lastEvent && lastEvent.type === 'deleted' && lastEvent._oldIndex === oldIndex - 1) {\n                    lastEvent.deleteToLineNumber++;\n                }\n                else {\n                    lastEvent = { type: 'deleted', _oldIndex: oldIndex, deleteFromLineNumber: oldMinimapLineNumber, deleteToLineNumber: oldMinimapLineNumber };\n                    events.push(lastEvent);\n                }\n                oldDeltaLineCount--;\n                oldIndex++;\n            }\n        }\n        else {\n            // too many events, just give up\n            events = [{ type: 'flush' }];\n        }\n        return [new MinimapSamplingState(ratio, result), events];\n    }\n    constructor(samplingRatio, minimapLines) {\n        this.samplingRatio = samplingRatio;\n        this.minimapLines = minimapLines;\n    }\n    modelLineToMinimapLine(lineNumber) {\n        return Math.min(this.minimapLines.length, Math.max(1, Math.round(lineNumber / this.samplingRatio)));\n    }\n    /**\n     * Will return null if the model line ranges are not intersecting with a sampled model line.\n     */\n    modelLineRangeToMinimapLineRange(fromLineNumber, toLineNumber) {\n        let fromLineIndex = this.modelLineToMinimapLine(fromLineNumber) - 1;\n        while (fromLineIndex > 0 && this.minimapLines[fromLineIndex - 1] >= fromLineNumber) {\n            fromLineIndex--;\n        }\n        let toLineIndex = this.modelLineToMinimapLine(toLineNumber) - 1;\n        while (toLineIndex + 1 < this.minimapLines.length && this.minimapLines[toLineIndex + 1] <= toLineNumber) {\n            toLineIndex++;\n        }\n        if (fromLineIndex === toLineIndex) {\n            const sampledLineNumber = this.minimapLines[fromLineIndex];\n            if (sampledLineNumber < fromLineNumber || sampledLineNumber > toLineNumber) {\n                // This line is not part of the sampled lines ==> nothing to do\n                return null;\n            }\n        }\n        return [fromLineIndex + 1, toLineIndex + 1];\n    }\n    /**\n     * Will always return a range, even if it is not intersecting with a sampled model line.\n     */\n    decorationLineRangeToMinimapLineRange(startLineNumber, endLineNumber) {\n        let minimapLineStart = this.modelLineToMinimapLine(startLineNumber);\n        let minimapLineEnd = this.modelLineToMinimapLine(endLineNumber);\n        if (startLineNumber !== endLineNumber && minimapLineEnd === minimapLineStart) {\n            if (minimapLineEnd === this.minimapLines.length) {\n                if (minimapLineStart > 1) {\n                    minimapLineStart--;\n                }\n            }\n            else {\n                minimapLineEnd++;\n            }\n        }\n        return [minimapLineStart, minimapLineEnd];\n    }\n    onLinesDeleted(e) {\n        // have the mapping be sticky\n        const deletedLineCount = e.toLineNumber - e.fromLineNumber + 1;\n        let changeStartIndex = this.minimapLines.length;\n        let changeEndIndex = 0;\n        for (let i = this.minimapLines.length - 1; i >= 0; i--) {\n            if (this.minimapLines[i] < e.fromLineNumber) {\n                break;\n            }\n            if (this.minimapLines[i] <= e.toLineNumber) {\n                // this line got deleted => move to previous available\n                this.minimapLines[i] = Math.max(1, e.fromLineNumber - 1);\n                changeStartIndex = Math.min(changeStartIndex, i);\n                changeEndIndex = Math.max(changeEndIndex, i);\n            }\n            else {\n                this.minimapLines[i] -= deletedLineCount;\n            }\n        }\n        return [changeStartIndex, changeEndIndex];\n    }\n    onLinesInserted(e) {\n        // have the mapping be sticky\n        const insertedLineCount = e.toLineNumber - e.fromLineNumber + 1;\n        for (let i = this.minimapLines.length - 1; i >= 0; i--) {\n            if (this.minimapLines[i] < e.fromLineNumber) {\n                break;\n            }\n            this.minimapLines[i] += insertedLineCount;\n        }\n    }\n}\nexport class Minimap extends ViewPart {\n    constructor(context) {\n        super(context);\n        this.tokensColorTracker = MinimapTokensColorTracker.getInstance();\n        this._selections = [];\n        this._minimapSelections = null;\n        this.options = new MinimapOptions(this._context.configuration, this._context.theme, this.tokensColorTracker);\n        const [samplingState,] = MinimapSamplingState.compute(this.options, this._context.viewModel.getLineCount(), null);\n        this._samplingState = samplingState;\n        this._shouldCheckSampling = false;\n        this._actual = new InnerMinimap(context.theme, this);\n    }\n    dispose() {\n        this._actual.dispose();\n        super.dispose();\n    }\n    getDomNode() {\n        return this._actual.getDomNode();\n    }\n    _onOptionsMaybeChanged() {\n        const opts = new MinimapOptions(this._context.configuration, this._context.theme, this.tokensColorTracker);\n        if (this.options.equals(opts)) {\n            return false;\n        }\n        this.options = opts;\n        this._recreateLineSampling();\n        this._actual.onDidChangeOptions();\n        return true;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        return this._onOptionsMaybeChanged();\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        this._minimapSelections = null;\n        return this._actual.onSelectionChanged();\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsMinimap) {\n            return this._actual.onDecorationsChanged();\n        }\n        return false;\n    }\n    onFlushed(e) {\n        if (this._samplingState) {\n            this._shouldCheckSampling = true;\n        }\n        return this._actual.onFlushed();\n    }\n    onLinesChanged(e) {\n        if (this._samplingState) {\n            const minimapLineRange = this._samplingState.modelLineRangeToMinimapLineRange(e.fromLineNumber, e.fromLineNumber + e.count - 1);\n            if (minimapLineRange) {\n                return this._actual.onLinesChanged(minimapLineRange[0], minimapLineRange[1] - minimapLineRange[0] + 1);\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return this._actual.onLinesChanged(e.fromLineNumber, e.count);\n        }\n    }\n    onLinesDeleted(e) {\n        if (this._samplingState) {\n            const [changeStartIndex, changeEndIndex] = this._samplingState.onLinesDeleted(e);\n            if (changeStartIndex <= changeEndIndex) {\n                this._actual.onLinesChanged(changeStartIndex + 1, changeEndIndex - changeStartIndex + 1);\n            }\n            this._shouldCheckSampling = true;\n            return true;\n        }\n        else {\n            return this._actual.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\n        }\n    }\n    onLinesInserted(e) {\n        if (this._samplingState) {\n            this._samplingState.onLinesInserted(e);\n            this._shouldCheckSampling = true;\n            return true;\n        }\n        else {\n            return this._actual.onLinesInserted(e.fromLineNumber, e.toLineNumber);\n        }\n    }\n    onScrollChanged(e) {\n        return this._actual.onScrollChanged();\n    }\n    onThemeChanged(e) {\n        this._actual.onThemeChanged();\n        this._onOptionsMaybeChanged();\n        return true;\n    }\n    onTokensChanged(e) {\n        if (this._samplingState) {\n            const ranges = [];\n            for (const range of e.ranges) {\n                const minimapLineRange = this._samplingState.modelLineRangeToMinimapLineRange(range.fromLineNumber, range.toLineNumber);\n                if (minimapLineRange) {\n                    ranges.push({ fromLineNumber: minimapLineRange[0], toLineNumber: minimapLineRange[1] });\n                }\n            }\n            if (ranges.length) {\n                return this._actual.onTokensChanged(ranges);\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return this._actual.onTokensChanged(e.ranges);\n        }\n    }\n    onTokensColorsChanged(e) {\n        this._onOptionsMaybeChanged();\n        return this._actual.onTokensColorsChanged();\n    }\n    onZonesChanged(e) {\n        return this._actual.onZonesChanged();\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (this._shouldCheckSampling) {\n            this._shouldCheckSampling = false;\n            this._recreateLineSampling();\n        }\n    }\n    render(ctx) {\n        let viewportStartLineNumber = ctx.visibleRange.startLineNumber;\n        let viewportEndLineNumber = ctx.visibleRange.endLineNumber;\n        if (this._samplingState) {\n            viewportStartLineNumber = this._samplingState.modelLineToMinimapLine(viewportStartLineNumber);\n            viewportEndLineNumber = this._samplingState.modelLineToMinimapLine(viewportEndLineNumber);\n        }\n        const minimapCtx = {\n            viewportContainsWhitespaceGaps: (ctx.viewportData.whitespaceViewportData.length > 0),\n            scrollWidth: ctx.scrollWidth,\n            scrollHeight: ctx.scrollHeight,\n            viewportStartLineNumber: viewportStartLineNumber,\n            viewportEndLineNumber: viewportEndLineNumber,\n            viewportStartLineNumberVerticalOffset: ctx.getVerticalOffsetForLineNumber(viewportStartLineNumber),\n            scrollTop: ctx.scrollTop,\n            scrollLeft: ctx.scrollLeft,\n            viewportWidth: ctx.viewportWidth,\n            viewportHeight: ctx.viewportHeight,\n        };\n        this._actual.render(minimapCtx);\n    }\n    //#region IMinimapModel\n    _recreateLineSampling() {\n        this._minimapSelections = null;\n        const wasSampling = Boolean(this._samplingState);\n        const [samplingState, events] = MinimapSamplingState.compute(this.options, this._context.viewModel.getLineCount(), this._samplingState);\n        this._samplingState = samplingState;\n        if (wasSampling && this._samplingState) {\n            // was sampling, is sampling\n            for (const event of events) {\n                switch (event.type) {\n                    case 'deleted':\n                        this._actual.onLinesDeleted(event.deleteFromLineNumber, event.deleteToLineNumber);\n                        break;\n                    case 'inserted':\n                        this._actual.onLinesInserted(event.insertFromLineNumber, event.insertToLineNumber);\n                        break;\n                    case 'flush':\n                        this._actual.onFlushed();\n                        break;\n                }\n            }\n        }\n    }\n    getLineCount() {\n        if (this._samplingState) {\n            return this._samplingState.minimapLines.length;\n        }\n        return this._context.viewModel.getLineCount();\n    }\n    getRealLineCount() {\n        return this._context.viewModel.getLineCount();\n    }\n    getLineContent(lineNumber) {\n        if (this._samplingState) {\n            return this._context.viewModel.getLineContent(this._samplingState.minimapLines[lineNumber - 1]);\n        }\n        return this._context.viewModel.getLineContent(lineNumber);\n    }\n    getLineMaxColumn(lineNumber) {\n        if (this._samplingState) {\n            return this._context.viewModel.getLineMaxColumn(this._samplingState.minimapLines[lineNumber - 1]);\n        }\n        return this._context.viewModel.getLineMaxColumn(lineNumber);\n    }\n    getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed) {\n        if (this._samplingState) {\n            const result = [];\n            for (let lineIndex = 0, lineCount = endLineNumber - startLineNumber + 1; lineIndex < lineCount; lineIndex++) {\n                if (needed[lineIndex]) {\n                    result[lineIndex] = this._context.viewModel.getViewLineData(this._samplingState.minimapLines[startLineNumber + lineIndex - 1]);\n                }\n                else {\n                    result[lineIndex] = null;\n                }\n            }\n            return result;\n        }\n        return this._context.viewModel.getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed).data;\n    }\n    getSelections() {\n        if (this._minimapSelections === null) {\n            if (this._samplingState) {\n                this._minimapSelections = [];\n                for (const selection of this._selections) {\n                    const [minimapLineStart, minimapLineEnd] = this._samplingState.decorationLineRangeToMinimapLineRange(selection.startLineNumber, selection.endLineNumber);\n                    this._minimapSelections.push(new Selection(minimapLineStart, selection.startColumn, minimapLineEnd, selection.endColumn));\n                }\n            }\n            else {\n                this._minimapSelections = this._selections;\n            }\n        }\n        return this._minimapSelections;\n    }\n    getMinimapDecorationsInViewport(startLineNumber, endLineNumber) {\n        let visibleRange;\n        if (this._samplingState) {\n            const modelStartLineNumber = this._samplingState.minimapLines[startLineNumber - 1];\n            const modelEndLineNumber = this._samplingState.minimapLines[endLineNumber - 1];\n            visibleRange = new Range(modelStartLineNumber, 1, modelEndLineNumber, this._context.viewModel.getLineMaxColumn(modelEndLineNumber));\n        }\n        else {\n            visibleRange = new Range(startLineNumber, 1, endLineNumber, this._context.viewModel.getLineMaxColumn(endLineNumber));\n        }\n        const decorations = this._context.viewModel.getMinimapDecorationsInRange(visibleRange);\n        if (this._samplingState) {\n            const result = [];\n            for (const decoration of decorations) {\n                if (!decoration.options.minimap) {\n                    continue;\n                }\n                const range = decoration.range;\n                const minimapStartLineNumber = this._samplingState.modelLineToMinimapLine(range.startLineNumber);\n                const minimapEndLineNumber = this._samplingState.modelLineToMinimapLine(range.endLineNumber);\n                result.push(new ViewModelDecoration(new Range(minimapStartLineNumber, range.startColumn, minimapEndLineNumber, range.endColumn), decoration.options));\n            }\n            return result;\n        }\n        return decorations;\n    }\n    getOptions() {\n        return this._context.viewModel.model.getOptions();\n    }\n    revealLineNumber(lineNumber) {\n        if (this._samplingState) {\n            lineNumber = this._samplingState.minimapLines[lineNumber - 1];\n        }\n        this._context.viewModel.revealRange('mouse', false, new Range(lineNumber, 1, lineNumber, 1), 1 /* viewEvents.VerticalRevealType.Center */, 0 /* ScrollType.Smooth */);\n    }\n    setScrollTop(scrollTop) {\n        this._context.viewModel.viewLayout.setScrollPosition({\n            scrollTop: scrollTop\n        }, 1 /* ScrollType.Immediate */);\n    }\n}\nclass InnerMinimap extends Disposable {\n    constructor(theme, model) {\n        super();\n        this._renderDecorations = false;\n        this._gestureInProgress = false;\n        this._theme = theme;\n        this._model = model;\n        this._lastRenderData = null;\n        this._buffers = null;\n        this._selectionColor = this._theme.getColor(minimapSelection);\n        this._domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._domNode, 9 /* PartFingerprint.Minimap */);\n        this._domNode.setClassName(this._getMinimapDomNodeClassName());\n        this._domNode.setPosition('absolute');\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._shadow = createFastDomNode(document.createElement('div'));\n        this._shadow.setClassName('minimap-shadow-hidden');\n        this._domNode.appendChild(this._shadow);\n        this._canvas = createFastDomNode(document.createElement('canvas'));\n        this._canvas.setPosition('absolute');\n        this._canvas.setLeft(0);\n        this._domNode.appendChild(this._canvas);\n        this._decorationsCanvas = createFastDomNode(document.createElement('canvas'));\n        this._decorationsCanvas.setPosition('absolute');\n        this._decorationsCanvas.setClassName('minimap-decorations-layer');\n        this._decorationsCanvas.setLeft(0);\n        this._domNode.appendChild(this._decorationsCanvas);\n        this._slider = createFastDomNode(document.createElement('div'));\n        this._slider.setPosition('absolute');\n        this._slider.setClassName('minimap-slider');\n        this._slider.setLayerHinting(true);\n        this._slider.setContain('strict');\n        this._domNode.appendChild(this._slider);\n        this._sliderHorizontal = createFastDomNode(document.createElement('div'));\n        this._sliderHorizontal.setPosition('absolute');\n        this._sliderHorizontal.setClassName('minimap-slider-horizontal');\n        this._slider.appendChild(this._sliderHorizontal);\n        this._applyLayout();\n        this._pointerDownListener = dom.addStandardDisposableListener(this._domNode.domNode, dom.EventType.POINTER_DOWN, (e) => {\n            e.preventDefault();\n            const renderMinimap = this._model.options.renderMinimap;\n            if (renderMinimap === 0 /* RenderMinimap.None */) {\n                return;\n            }\n            if (!this._lastRenderData) {\n                return;\n            }\n            if (this._model.options.size !== 'proportional') {\n                if (e.button === 0 && this._lastRenderData) {\n                    // pretend the click occurred in the center of the slider\n                    const position = dom.getDomNodePagePosition(this._slider.domNode);\n                    const initialPosY = position.top + position.height / 2;\n                    this._startSliderDragging(e, initialPosY, this._lastRenderData.renderedLayout);\n                }\n                return;\n            }\n            const minimapLineHeight = this._model.options.minimapLineHeight;\n            const internalOffsetY = (this._model.options.canvasInnerHeight / this._model.options.canvasOuterHeight) * e.offsetY;\n            const lineIndex = Math.floor(internalOffsetY / minimapLineHeight);\n            let lineNumber = lineIndex + this._lastRenderData.renderedLayout.startLineNumber - this._lastRenderData.renderedLayout.topPaddingLineCount;\n            lineNumber = Math.min(lineNumber, this._model.getLineCount());\n            this._model.revealLineNumber(lineNumber);\n        });\n        this._sliderPointerMoveMonitor = new GlobalPointerMoveMonitor();\n        this._sliderPointerDownListener = dom.addStandardDisposableListener(this._slider.domNode, dom.EventType.POINTER_DOWN, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (e.button === 0 && this._lastRenderData) {\n                this._startSliderDragging(e, e.pageY, this._lastRenderData.renderedLayout);\n            }\n        });\n        this._gestureDisposable = Gesture.addTarget(this._domNode.domNode);\n        this._sliderTouchStartListener = dom.addDisposableListener(this._domNode.domNode, EventType.Start, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (this._lastRenderData) {\n                this._slider.toggleClassName('active', true);\n                this._gestureInProgress = true;\n                this.scrollDueToTouchEvent(e);\n            }\n        }, { passive: false });\n        this._sliderTouchMoveListener = dom.addDisposableListener(this._domNode.domNode, EventType.Change, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (this._lastRenderData && this._gestureInProgress) {\n                this.scrollDueToTouchEvent(e);\n            }\n        }, { passive: false });\n        this._sliderTouchEndListener = dom.addStandardDisposableListener(this._domNode.domNode, EventType.End, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            this._gestureInProgress = false;\n            this._slider.toggleClassName('active', false);\n        });\n    }\n    _startSliderDragging(e, initialPosY, initialSliderState) {\n        if (!e.target || !(e.target instanceof Element)) {\n            return;\n        }\n        const initialPosX = e.pageX;\n        this._slider.toggleClassName('active', true);\n        const handlePointerMove = (posy, posx) => {\n            const minimapPosition = dom.getDomNodePagePosition(this._domNode.domNode);\n            const pointerOrthogonalDelta = Math.min(Math.abs(posx - initialPosX), Math.abs(posx - minimapPosition.left), Math.abs(posx - minimapPosition.left - minimapPosition.width));\n            if (platform.isWindows && pointerOrthogonalDelta > POINTER_DRAG_RESET_DISTANCE) {\n                // The pointer has wondered away from the scrollbar => reset dragging\n                this._model.setScrollTop(initialSliderState.scrollTop);\n                return;\n            }\n            const pointerDelta = posy - initialPosY;\n            this._model.setScrollTop(initialSliderState.getDesiredScrollTopFromDelta(pointerDelta));\n        };\n        if (e.pageY !== initialPosY) {\n            handlePointerMove(e.pageY, initialPosX);\n        }\n        this._sliderPointerMoveMonitor.startMonitoring(e.target, e.pointerId, e.buttons, pointerMoveData => handlePointerMove(pointerMoveData.pageY, pointerMoveData.pageX), () => {\n            this._slider.toggleClassName('active', false);\n        });\n    }\n    scrollDueToTouchEvent(touch) {\n        const startY = this._domNode.domNode.getBoundingClientRect().top;\n        const scrollTop = this._lastRenderData.renderedLayout.getDesiredScrollTopFromTouchLocation(touch.pageY - startY);\n        this._model.setScrollTop(scrollTop);\n    }\n    dispose() {\n        this._pointerDownListener.dispose();\n        this._sliderPointerMoveMonitor.dispose();\n        this._sliderPointerDownListener.dispose();\n        this._gestureDisposable.dispose();\n        this._sliderTouchStartListener.dispose();\n        this._sliderTouchMoveListener.dispose();\n        this._sliderTouchEndListener.dispose();\n        super.dispose();\n    }\n    _getMinimapDomNodeClassName() {\n        const class_ = ['minimap'];\n        if (this._model.options.showSlider === 'always') {\n            class_.push('slider-always');\n        }\n        else {\n            class_.push('slider-mouseover');\n        }\n        if (this._model.options.autohide) {\n            class_.push('autohide');\n        }\n        return class_.join(' ');\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    _applyLayout() {\n        this._domNode.setLeft(this._model.options.minimapLeft);\n        this._domNode.setWidth(this._model.options.minimapWidth);\n        this._domNode.setHeight(this._model.options.minimapHeight);\n        this._shadow.setHeight(this._model.options.minimapHeight);\n        this._canvas.setWidth(this._model.options.canvasOuterWidth);\n        this._canvas.setHeight(this._model.options.canvasOuterHeight);\n        this._canvas.domNode.width = this._model.options.canvasInnerWidth;\n        this._canvas.domNode.height = this._model.options.canvasInnerHeight;\n        this._decorationsCanvas.setWidth(this._model.options.canvasOuterWidth);\n        this._decorationsCanvas.setHeight(this._model.options.canvasOuterHeight);\n        this._decorationsCanvas.domNode.width = this._model.options.canvasInnerWidth;\n        this._decorationsCanvas.domNode.height = this._model.options.canvasInnerHeight;\n        this._slider.setWidth(this._model.options.minimapWidth);\n    }\n    _getBuffer() {\n        if (!this._buffers) {\n            if (this._model.options.canvasInnerWidth > 0 && this._model.options.canvasInnerHeight > 0) {\n                this._buffers = new MinimapBuffers(this._canvas.domNode.getContext('2d'), this._model.options.canvasInnerWidth, this._model.options.canvasInnerHeight, this._model.options.backgroundColor);\n            }\n        }\n        return this._buffers ? this._buffers.getBuffer() : null;\n    }\n    // ---- begin view event handlers\n    onDidChangeOptions() {\n        this._lastRenderData = null;\n        this._buffers = null;\n        this._applyLayout();\n        this._domNode.setClassName(this._getMinimapDomNodeClassName());\n    }\n    onSelectionChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onDecorationsChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onFlushed() {\n        this._lastRenderData = null;\n        return true;\n    }\n    onLinesChanged(changeFromLineNumber, changeCount) {\n        if (this._lastRenderData) {\n            return this._lastRenderData.onLinesChanged(changeFromLineNumber, changeCount);\n        }\n        return false;\n    }\n    onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\n        var _a;\n        (_a = this._lastRenderData) === null || _a === void 0 ? void 0 : _a.onLinesDeleted(deleteFromLineNumber, deleteToLineNumber);\n        return true;\n    }\n    onLinesInserted(insertFromLineNumber, insertToLineNumber) {\n        var _a;\n        (_a = this._lastRenderData) === null || _a === void 0 ? void 0 : _a.onLinesInserted(insertFromLineNumber, insertToLineNumber);\n        return true;\n    }\n    onScrollChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onThemeChanged() {\n        this._selectionColor = this._theme.getColor(minimapSelection);\n        this._renderDecorations = true;\n        return true;\n    }\n    onTokensChanged(ranges) {\n        if (this._lastRenderData) {\n            return this._lastRenderData.onTokensChanged(ranges);\n        }\n        return false;\n    }\n    onTokensColorsChanged() {\n        this._lastRenderData = null;\n        this._buffers = null;\n        return true;\n    }\n    onZonesChanged() {\n        this._lastRenderData = null;\n        return true;\n    }\n    // --- end event handlers\n    render(renderingCtx) {\n        const renderMinimap = this._model.options.renderMinimap;\n        if (renderMinimap === 0 /* RenderMinimap.None */) {\n            this._shadow.setClassName('minimap-shadow-hidden');\n            this._sliderHorizontal.setWidth(0);\n            this._sliderHorizontal.setHeight(0);\n            return;\n        }\n        if (renderingCtx.scrollLeft + renderingCtx.viewportWidth >= renderingCtx.scrollWidth) {\n            this._shadow.setClassName('minimap-shadow-hidden');\n        }\n        else {\n            this._shadow.setClassName('minimap-shadow-visible');\n        }\n        const layout = MinimapLayout.create(this._model.options, renderingCtx.viewportStartLineNumber, renderingCtx.viewportEndLineNumber, renderingCtx.viewportStartLineNumberVerticalOffset, renderingCtx.viewportHeight, renderingCtx.viewportContainsWhitespaceGaps, this._model.getLineCount(), this._model.getRealLineCount(), renderingCtx.scrollTop, renderingCtx.scrollHeight, this._lastRenderData ? this._lastRenderData.renderedLayout : null);\n        this._slider.setDisplay(layout.sliderNeeded ? 'block' : 'none');\n        this._slider.setTop(layout.sliderTop);\n        this._slider.setHeight(layout.sliderHeight);\n        // Compute horizontal slider coordinates\n        this._sliderHorizontal.setLeft(0);\n        this._sliderHorizontal.setWidth(this._model.options.minimapWidth);\n        this._sliderHorizontal.setTop(0);\n        this._sliderHorizontal.setHeight(layout.sliderHeight);\n        this.renderDecorations(layout);\n        this._lastRenderData = this.renderLines(layout);\n    }\n    renderDecorations(layout) {\n        if (this._renderDecorations) {\n            this._renderDecorations = false;\n            const selections = this._model.getSelections();\n            selections.sort(Range.compareRangesUsingStarts);\n            const decorations = this._model.getMinimapDecorationsInViewport(layout.startLineNumber, layout.endLineNumber);\n            decorations.sort((a, b) => (a.options.zIndex || 0) - (b.options.zIndex || 0));\n            const { canvasInnerWidth, canvasInnerHeight } = this._model.options;\n            const minimapLineHeight = this._model.options.minimapLineHeight;\n            const minimapCharWidth = this._model.options.minimapCharWidth;\n            const tabSize = this._model.getOptions().tabSize;\n            const canvasContext = this._decorationsCanvas.domNode.getContext('2d');\n            canvasContext.clearRect(0, 0, canvasInnerWidth, canvasInnerHeight);\n            // We first need to render line highlights and then render decorations on top of those.\n            // But we need to pick a single color for each line, and use that as a line highlight.\n            // This needs to be the color of the decoration with the highest `zIndex`, but priority\n            // is given to the selection.\n            const highlightedLines = new ContiguousLineMap(layout.startLineNumber, layout.endLineNumber, false);\n            this._renderSelectionLineHighlights(canvasContext, selections, highlightedLines, layout, minimapLineHeight);\n            this._renderDecorationsLineHighlights(canvasContext, decorations, highlightedLines, layout, minimapLineHeight);\n            const lineOffsetMap = new ContiguousLineMap(layout.startLineNumber, layout.endLineNumber, null);\n            this._renderSelectionsHighlights(canvasContext, selections, lineOffsetMap, layout, minimapLineHeight, tabSize, minimapCharWidth, canvasInnerWidth);\n            this._renderDecorationsHighlights(canvasContext, decorations, lineOffsetMap, layout, minimapLineHeight, tabSize, minimapCharWidth, canvasInnerWidth);\n        }\n    }\n    _renderSelectionLineHighlights(canvasContext, selections, highlightedLines, layout, minimapLineHeight) {\n        if (!this._selectionColor || this._selectionColor.isTransparent()) {\n            return;\n        }\n        canvasContext.fillStyle = this._selectionColor.transparent(0.5).toString();\n        let y1 = 0;\n        let y2 = 0;\n        for (const selection of selections) {\n            const intersection = layout.intersectWithViewport(selection);\n            if (!intersection) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const [startLineNumber, endLineNumber] = intersection;\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                highlightedLines.set(line, true);\n            }\n            const yy1 = layout.getYForLineNumber(startLineNumber, minimapLineHeight);\n            const yy2 = layout.getYForLineNumber(endLineNumber, minimapLineHeight);\n            if (y2 >= yy1) {\n                // merge into previous\n                y2 = yy2;\n            }\n            else {\n                if (y2 > y1) {\n                    // flush\n                    canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y1, canvasContext.canvas.width, y2 - y1);\n                }\n                y1 = yy1;\n                y2 = yy2;\n            }\n        }\n        if (y2 > y1) {\n            // flush\n            canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y1, canvasContext.canvas.width, y2 - y1);\n        }\n    }\n    _renderDecorationsLineHighlights(canvasContext, decorations, highlightedLines, layout, minimapLineHeight) {\n        const highlightColors = new Map();\n        // Loop backwards to hit first decorations with higher `zIndex`\n        for (let i = decorations.length - 1; i >= 0; i--) {\n            const decoration = decorations[i];\n            const minimapOptions = decoration.options.minimap;\n            if (!minimapOptions || minimapOptions.position !== MinimapPosition.Inline) {\n                continue;\n            }\n            const intersection = layout.intersectWithViewport(decoration.range);\n            if (!intersection) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const [startLineNumber, endLineNumber] = intersection;\n            const decorationColor = minimapOptions.getColor(this._theme.value);\n            if (!decorationColor || decorationColor.isTransparent()) {\n                continue;\n            }\n            let highlightColor = highlightColors.get(decorationColor.toString());\n            if (!highlightColor) {\n                highlightColor = decorationColor.transparent(0.5).toString();\n                highlightColors.set(decorationColor.toString(), highlightColor);\n            }\n            canvasContext.fillStyle = highlightColor;\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                if (highlightedLines.has(line)) {\n                    continue;\n                }\n                highlightedLines.set(line, true);\n                const y = layout.getYForLineNumber(startLineNumber, minimapLineHeight);\n                canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y, canvasContext.canvas.width, minimapLineHeight);\n            }\n        }\n    }\n    _renderSelectionsHighlights(canvasContext, selections, lineOffsetMap, layout, lineHeight, tabSize, characterWidth, canvasInnerWidth) {\n        if (!this._selectionColor || this._selectionColor.isTransparent()) {\n            return;\n        }\n        for (const selection of selections) {\n            const intersection = layout.intersectWithViewport(selection);\n            if (!intersection) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const [startLineNumber, endLineNumber] = intersection;\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                this.renderDecorationOnLine(canvasContext, lineOffsetMap, selection, this._selectionColor, layout, line, lineHeight, lineHeight, tabSize, characterWidth, canvasInnerWidth);\n            }\n        }\n    }\n    _renderDecorationsHighlights(canvasContext, decorations, lineOffsetMap, layout, minimapLineHeight, tabSize, characterWidth, canvasInnerWidth) {\n        // Loop forwards to hit first decorations with lower `zIndex`\n        for (const decoration of decorations) {\n            const minimapOptions = decoration.options.minimap;\n            if (!minimapOptions) {\n                continue;\n            }\n            const intersection = layout.intersectWithViewport(decoration.range);\n            if (!intersection) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const [startLineNumber, endLineNumber] = intersection;\n            const decorationColor = minimapOptions.getColor(this._theme.value);\n            if (!decorationColor || decorationColor.isTransparent()) {\n                continue;\n            }\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                switch (minimapOptions.position) {\n                    case MinimapPosition.Inline:\n                        this.renderDecorationOnLine(canvasContext, lineOffsetMap, decoration.range, decorationColor, layout, line, minimapLineHeight, minimapLineHeight, tabSize, characterWidth, canvasInnerWidth);\n                        continue;\n                    case MinimapPosition.Gutter: {\n                        const y = layout.getYForLineNumber(line, minimapLineHeight);\n                        const x = 2;\n                        this.renderDecoration(canvasContext, decorationColor, x, y, GUTTER_DECORATION_WIDTH, minimapLineHeight);\n                        continue;\n                    }\n                }\n            }\n        }\n    }\n    renderDecorationOnLine(canvasContext, lineOffsetMap, decorationRange, decorationColor, layout, lineNumber, height, minimapLineHeight, tabSize, charWidth, canvasInnerWidth) {\n        const y = layout.getYForLineNumber(lineNumber, minimapLineHeight);\n        // Skip rendering the line if it's vertically outside our viewport\n        if (y + height < 0 || y > this._model.options.canvasInnerHeight) {\n            return;\n        }\n        const { startLineNumber, endLineNumber } = decorationRange;\n        const startColumn = (startLineNumber === lineNumber ? decorationRange.startColumn : 1);\n        const endColumn = (endLineNumber === lineNumber ? decorationRange.endColumn : this._model.getLineMaxColumn(lineNumber));\n        const x1 = this.getXOffsetForPosition(lineOffsetMap, lineNumber, startColumn, tabSize, charWidth, canvasInnerWidth);\n        const x2 = this.getXOffsetForPosition(lineOffsetMap, lineNumber, endColumn, tabSize, charWidth, canvasInnerWidth);\n        this.renderDecoration(canvasContext, decorationColor, x1, y, x2 - x1, height);\n    }\n    getXOffsetForPosition(lineOffsetMap, lineNumber, column, tabSize, charWidth, canvasInnerWidth) {\n        if (column === 1) {\n            return MINIMAP_GUTTER_WIDTH;\n        }\n        const minimumXOffset = (column - 1) * charWidth;\n        if (minimumXOffset >= canvasInnerWidth) {\n            // there is no need to look at actual characters,\n            // as this column is certainly after the minimap width\n            return canvasInnerWidth;\n        }\n        // Cache line offset data so that it is only read once per line\n        let lineIndexToXOffset = lineOffsetMap.get(lineNumber);\n        if (!lineIndexToXOffset) {\n            const lineData = this._model.getLineContent(lineNumber);\n            lineIndexToXOffset = [MINIMAP_GUTTER_WIDTH];\n            let prevx = MINIMAP_GUTTER_WIDTH;\n            for (let i = 1; i < lineData.length + 1; i++) {\n                const charCode = lineData.charCodeAt(i - 1);\n                const dx = charCode === 9 /* CharCode.Tab */\n                    ? tabSize * charWidth\n                    : strings.isFullWidthCharacter(charCode)\n                        ? 2 * charWidth\n                        : charWidth;\n                const x = prevx + dx;\n                if (x >= canvasInnerWidth) {\n                    // no need to keep on going, as we've hit the canvas width\n                    lineIndexToXOffset[i] = canvasInnerWidth;\n                    break;\n                }\n                lineIndexToXOffset[i] = x;\n                prevx = x;\n            }\n            lineOffsetMap.set(lineNumber, lineIndexToXOffset);\n        }\n        if (column - 1 < lineIndexToXOffset.length) {\n            return lineIndexToXOffset[column - 1];\n        }\n        // goes over the canvas width\n        return canvasInnerWidth;\n    }\n    renderDecoration(canvasContext, decorationColor, x, y, width, height) {\n        canvasContext.fillStyle = decorationColor && decorationColor.toString() || '';\n        canvasContext.fillRect(x, y, width, height);\n    }\n    renderLines(layout) {\n        const startLineNumber = layout.startLineNumber;\n        const endLineNumber = layout.endLineNumber;\n        const minimapLineHeight = this._model.options.minimapLineHeight;\n        // Check if nothing changed w.r.t. lines from last frame\n        if (this._lastRenderData && this._lastRenderData.linesEquals(layout)) {\n            const _lastData = this._lastRenderData._get();\n            // Nice!! Nothing changed from last frame\n            return new RenderData(layout, _lastData.imageData, _lastData.lines);\n        }\n        // Oh well!! We need to repaint some lines...\n        const imageData = this._getBuffer();\n        if (!imageData) {\n            // 0 width or 0 height canvas, nothing to do\n            return null;\n        }\n        // Render untouched lines by using last rendered data.\n        const [_dirtyY1, _dirtyY2, needed] = InnerMinimap._renderUntouchedLines(imageData, layout.topPaddingLineCount, startLineNumber, endLineNumber, minimapLineHeight, this._lastRenderData);\n        // Fetch rendering info from view model for rest of lines that need rendering.\n        const lineInfo = this._model.getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed);\n        const tabSize = this._model.getOptions().tabSize;\n        const defaultBackground = this._model.options.defaultBackgroundColor;\n        const background = this._model.options.backgroundColor;\n        const foregroundAlpha = this._model.options.foregroundAlpha;\n        const tokensColorTracker = this._model.tokensColorTracker;\n        const useLighterFont = tokensColorTracker.backgroundIsLight();\n        const renderMinimap = this._model.options.renderMinimap;\n        const charRenderer = this._model.options.charRenderer();\n        const fontScale = this._model.options.fontScale;\n        const minimapCharWidth = this._model.options.minimapCharWidth;\n        const baseCharHeight = (renderMinimap === 1 /* RenderMinimap.Text */ ? 2 /* Constants.BASE_CHAR_HEIGHT */ : 2 /* Constants.BASE_CHAR_HEIGHT */ + 1);\n        const renderMinimapLineHeight = baseCharHeight * fontScale;\n        const innerLinePadding = (minimapLineHeight > renderMinimapLineHeight ? Math.floor((minimapLineHeight - renderMinimapLineHeight) / 2) : 0);\n        // Render the rest of lines\n        const backgroundA = background.a / 255;\n        const renderBackground = new RGBA8(Math.round((background.r - defaultBackground.r) * backgroundA + defaultBackground.r), Math.round((background.g - defaultBackground.g) * backgroundA + defaultBackground.g), Math.round((background.b - defaultBackground.b) * backgroundA + defaultBackground.b), 255);\n        let dy = layout.topPaddingLineCount * minimapLineHeight;\n        const renderedLines = [];\n        for (let lineIndex = 0, lineCount = endLineNumber - startLineNumber + 1; lineIndex < lineCount; lineIndex++) {\n            if (needed[lineIndex]) {\n                InnerMinimap._renderLine(imageData, renderBackground, background.a, useLighterFont, renderMinimap, minimapCharWidth, tokensColorTracker, foregroundAlpha, charRenderer, dy, innerLinePadding, tabSize, lineInfo[lineIndex], fontScale, minimapLineHeight);\n            }\n            renderedLines[lineIndex] = new MinimapLine(dy);\n            dy += minimapLineHeight;\n        }\n        const dirtyY1 = (_dirtyY1 === -1 ? 0 : _dirtyY1);\n        const dirtyY2 = (_dirtyY2 === -1 ? imageData.height : _dirtyY2);\n        const dirtyHeight = dirtyY2 - dirtyY1;\n        // Finally, paint to the canvas\n        const ctx = this._canvas.domNode.getContext('2d');\n        ctx.putImageData(imageData, 0, 0, 0, dirtyY1, imageData.width, dirtyHeight);\n        // Save rendered data for reuse on next frame if possible\n        return new RenderData(layout, imageData, renderedLines);\n    }\n    static _renderUntouchedLines(target, topPaddingLineCount, startLineNumber, endLineNumber, minimapLineHeight, lastRenderData) {\n        const needed = [];\n        if (!lastRenderData) {\n            for (let i = 0, len = endLineNumber - startLineNumber + 1; i < len; i++) {\n                needed[i] = true;\n            }\n            return [-1, -1, needed];\n        }\n        const _lastData = lastRenderData._get();\n        const lastTargetData = _lastData.imageData.data;\n        const lastStartLineNumber = _lastData.rendLineNumberStart;\n        const lastLines = _lastData.lines;\n        const lastLinesLength = lastLines.length;\n        const WIDTH = target.width;\n        const targetData = target.data;\n        const maxDestPixel = (endLineNumber - startLineNumber + 1) * minimapLineHeight * WIDTH * 4;\n        let dirtyPixel1 = -1; // the pixel offset up to which all the data is equal to the prev frame\n        let dirtyPixel2 = -1; // the pixel offset after which all the data is equal to the prev frame\n        let copySourceStart = -1;\n        let copySourceEnd = -1;\n        let copyDestStart = -1;\n        let copyDestEnd = -1;\n        let dest_dy = topPaddingLineCount * minimapLineHeight;\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - startLineNumber;\n            const lastLineIndex = lineNumber - lastStartLineNumber;\n            const source_dy = (lastLineIndex >= 0 && lastLineIndex < lastLinesLength ? lastLines[lastLineIndex].dy : -1);\n            if (source_dy === -1) {\n                needed[lineIndex] = true;\n                dest_dy += minimapLineHeight;\n                continue;\n            }\n            const sourceStart = source_dy * WIDTH * 4;\n            const sourceEnd = (source_dy + minimapLineHeight) * WIDTH * 4;\n            const destStart = dest_dy * WIDTH * 4;\n            const destEnd = (dest_dy + minimapLineHeight) * WIDTH * 4;\n            if (copySourceEnd === sourceStart && copyDestEnd === destStart) {\n                // contiguous zone => extend copy request\n                copySourceEnd = sourceEnd;\n                copyDestEnd = destEnd;\n            }\n            else {\n                if (copySourceStart !== -1) {\n                    // flush existing copy request\n                    targetData.set(lastTargetData.subarray(copySourceStart, copySourceEnd), copyDestStart);\n                    if (dirtyPixel1 === -1 && copySourceStart === 0 && copySourceStart === copyDestStart) {\n                        dirtyPixel1 = copySourceEnd;\n                    }\n                    if (dirtyPixel2 === -1 && copySourceEnd === maxDestPixel && copySourceStart === copyDestStart) {\n                        dirtyPixel2 = copySourceStart;\n                    }\n                }\n                copySourceStart = sourceStart;\n                copySourceEnd = sourceEnd;\n                copyDestStart = destStart;\n                copyDestEnd = destEnd;\n            }\n            needed[lineIndex] = false;\n            dest_dy += minimapLineHeight;\n        }\n        if (copySourceStart !== -1) {\n            // flush existing copy request\n            targetData.set(lastTargetData.subarray(copySourceStart, copySourceEnd), copyDestStart);\n            if (dirtyPixel1 === -1 && copySourceStart === 0 && copySourceStart === copyDestStart) {\n                dirtyPixel1 = copySourceEnd;\n            }\n            if (dirtyPixel2 === -1 && copySourceEnd === maxDestPixel && copySourceStart === copyDestStart) {\n                dirtyPixel2 = copySourceStart;\n            }\n        }\n        const dirtyY1 = (dirtyPixel1 === -1 ? -1 : dirtyPixel1 / (WIDTH * 4));\n        const dirtyY2 = (dirtyPixel2 === -1 ? -1 : dirtyPixel2 / (WIDTH * 4));\n        return [dirtyY1, dirtyY2, needed];\n    }\n    static _renderLine(target, backgroundColor, backgroundAlpha, useLighterFont, renderMinimap, charWidth, colorTracker, foregroundAlpha, minimapCharRenderer, dy, innerLinePadding, tabSize, lineData, fontScale, minimapLineHeight) {\n        const content = lineData.content;\n        const tokens = lineData.tokens;\n        const maxDx = target.width - charWidth;\n        const force1pxHeight = (minimapLineHeight === 1);\n        let dx = MINIMAP_GUTTER_WIDTH;\n        let charIndex = 0;\n        let tabsCharDelta = 0;\n        for (let tokenIndex = 0, tokensLen = tokens.getCount(); tokenIndex < tokensLen; tokenIndex++) {\n            const tokenEndIndex = tokens.getEndOffset(tokenIndex);\n            const tokenColorId = tokens.getForeground(tokenIndex);\n            const tokenColor = colorTracker.getColor(tokenColorId);\n            for (; charIndex < tokenEndIndex; charIndex++) {\n                if (dx > maxDx) {\n                    // hit edge of minimap\n                    return;\n                }\n                const charCode = content.charCodeAt(charIndex);\n                if (charCode === 9 /* CharCode.Tab */) {\n                    const insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n                    tabsCharDelta += insertSpacesCount - 1;\n                    // No need to render anything since tab is invisible\n                    dx += insertSpacesCount * charWidth;\n                }\n                else if (charCode === 32 /* CharCode.Space */) {\n                    // No need to render anything since space is invisible\n                    dx += charWidth;\n                }\n                else {\n                    // Render twice for a full width character\n                    const count = strings.isFullWidthCharacter(charCode) ? 2 : 1;\n                    for (let i = 0; i < count; i++) {\n                        if (renderMinimap === 2 /* RenderMinimap.Blocks */) {\n                            minimapCharRenderer.blockRenderChar(target, dx, dy + innerLinePadding, tokenColor, foregroundAlpha, backgroundColor, backgroundAlpha, force1pxHeight);\n                        }\n                        else { // RenderMinimap.Text\n                            minimapCharRenderer.renderChar(target, dx, dy + innerLinePadding, charCode, tokenColor, foregroundAlpha, backgroundColor, backgroundAlpha, fontScale, useLighterFont, force1pxHeight);\n                        }\n                        dx += charWidth;\n                        if (dx > maxDx) {\n                            // hit edge of minimap\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nclass ContiguousLineMap {\n    constructor(startLineNumber, endLineNumber, defaultValue) {\n        this._startLineNumber = startLineNumber;\n        this._endLineNumber = endLineNumber;\n        this._defaultValue = defaultValue;\n        this._values = [];\n        for (let i = 0, count = this._endLineNumber - this._startLineNumber + 1; i < count; i++) {\n            this._values[i] = defaultValue;\n        }\n    }\n    has(lineNumber) {\n        return (this.get(lineNumber) !== this._defaultValue);\n    }\n    set(lineNumber, value) {\n        if (lineNumber < this._startLineNumber || lineNumber > this._endLineNumber) {\n            return;\n        }\n        this._values[lineNumber - this._startLineNumber] = value;\n    }\n    get(lineNumber) {\n        if (lineNumber < this._startLineNumber || lineNumber > this._endLineNumber) {\n            return this._defaultValue;\n        }\n        return this._values[lineNumber - this._startLineNumber];\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * A very VM friendly rgba datastructure.\n * Please don't touch unless you take a look at the IR.\n */\nexport class RGBA8 {\n    constructor(r, g, b, a) {\n        this._rgba8Brand = undefined;\n        this.r = RGBA8._clamp(r);\n        this.g = RGBA8._clamp(g);\n        this.b = RGBA8._clamp(b);\n        this.a = RGBA8._clamp(a);\n    }\n    equals(other) {\n        return (this.r === other.r\n            && this.g === other.g\n            && this.b === other.b\n            && this.a === other.a);\n    }\n    static _clamp(c) {\n        if (c < 0) {\n            return 0;\n        }\n        if (c > 255) {\n            return 255;\n        }\n        return c | 0;\n    }\n}\nRGBA8.Empty = new RGBA8(0, 0, 0, 0);\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, markAsSingleton } from '../../../base/common/lifecycle.js';\nimport { RGBA8 } from '../core/rgba.js';\nimport { TokenizationRegistry } from '../languages.js';\nexport class MinimapTokensColorTracker extends Disposable {\n    static getInstance() {\n        if (!this._INSTANCE) {\n            this._INSTANCE = markAsSingleton(new MinimapTokensColorTracker());\n        }\n        return this._INSTANCE;\n    }\n    constructor() {\n        super();\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._updateColorMap();\n        this._register(TokenizationRegistry.onDidChange(e => {\n            if (e.changedColorMap) {\n                this._updateColorMap();\n            }\n        }));\n    }\n    _updateColorMap() {\n        const colorMap = TokenizationRegistry.getColorMap();\n        if (!colorMap) {\n            this._colors = [RGBA8.Empty];\n            this._backgroundIsLight = true;\n            return;\n        }\n        this._colors = [RGBA8.Empty];\n        for (let colorId = 1; colorId < colorMap.length; colorId++) {\n            const source = colorMap[colorId].rgba;\n            // Use a VM friendly data-type\n            this._colors[colorId] = new RGBA8(source.r, source.g, source.b, Math.round(source.a * 255));\n        }\n        const backgroundLuminosity = colorMap[2 /* ColorId.DefaultBackground */].getRelativeLuminance();\n        this._backgroundIsLight = backgroundLuminosity >= 0.5;\n        this._onDidChange.fire(undefined);\n    }\n    getColor(colorId) {\n        if (colorId < 1 || colorId >= this._colors.length) {\n            // background color (basically invisible)\n            colorId = 2 /* ColorId.DefaultBackground */;\n        }\n        return this._colors[colorId];\n    }\n    backgroundIsLight() {\n        return this._backgroundIsLight;\n    }\n}\nMinimapTokensColorTracker._INSTANCE = null;\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport const allCharCodes = (() => {\n    const v = [];\n    for (let i = 32 /* Constants.START_CH_CODE */; i <= 126 /* Constants.END_CH_CODE */; i++) {\n        v.push(i);\n    }\n    v.push(65533 /* Constants.UNKNOWN_CODE */);\n    return v;\n})();\nexport const getCharIndex = (chCode, fontScale) => {\n    chCode -= 32 /* Constants.START_CH_CODE */;\n    if (chCode < 0 || chCode > 96 /* Constants.CHAR_COUNT */) {\n        if (fontScale <= 2) {\n            // for smaller scales, we can get away with using any ASCII character...\n            return (chCode + 96 /* Constants.CHAR_COUNT */) % 96 /* Constants.CHAR_COUNT */;\n        }\n        return 96 /* Constants.CHAR_COUNT */ - 1; // unknown symbol\n    }\n    return chCode;\n};\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getCharIndex } from './minimapCharSheet.js';\nimport { toUint8 } from '../../../../base/common/uint.js';\nexport class MinimapCharRenderer {\n    constructor(charData, scale) {\n        this.scale = scale;\n        this._minimapCharRendererBrand = undefined;\n        this.charDataNormal = MinimapCharRenderer.soften(charData, 12 / 15);\n        this.charDataLight = MinimapCharRenderer.soften(charData, 50 / 60);\n    }\n    static soften(input, ratio) {\n        const result = new Uint8ClampedArray(input.length);\n        for (let i = 0, len = input.length; i < len; i++) {\n            result[i] = toUint8(input[i] * ratio);\n        }\n        return result;\n    }\n    renderChar(target, dx, dy, chCode, color, foregroundAlpha, backgroundColor, backgroundAlpha, fontScale, useLighterFont, force1pxHeight) {\n        const charWidth = 1 /* Constants.BASE_CHAR_WIDTH */ * this.scale;\n        const charHeight = 2 /* Constants.BASE_CHAR_HEIGHT */ * this.scale;\n        const renderHeight = (force1pxHeight ? 1 : charHeight);\n        if (dx + charWidth > target.width || dy + renderHeight > target.height) {\n            console.warn('bad render request outside image data');\n            return;\n        }\n        const charData = useLighterFont ? this.charDataLight : this.charDataNormal;\n        const charIndex = getCharIndex(chCode, fontScale);\n        const destWidth = target.width * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        const backgroundR = backgroundColor.r;\n        const backgroundG = backgroundColor.g;\n        const backgroundB = backgroundColor.b;\n        const deltaR = color.r - backgroundR;\n        const deltaG = color.g - backgroundG;\n        const deltaB = color.b - backgroundB;\n        const destAlpha = Math.max(foregroundAlpha, backgroundAlpha);\n        const dest = target.data;\n        let sourceOffset = charIndex * charWidth * charHeight;\n        let row = dy * destWidth + dx * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        for (let y = 0; y < renderHeight; y++) {\n            let column = row;\n            for (let x = 0; x < charWidth; x++) {\n                const c = (charData[sourceOffset++] / 255) * (foregroundAlpha / 255);\n                dest[column++] = backgroundR + deltaR * c;\n                dest[column++] = backgroundG + deltaG * c;\n                dest[column++] = backgroundB + deltaB * c;\n                dest[column++] = destAlpha;\n            }\n            row += destWidth;\n        }\n    }\n    blockRenderChar(target, dx, dy, color, foregroundAlpha, backgroundColor, backgroundAlpha, force1pxHeight) {\n        const charWidth = 1 /* Constants.BASE_CHAR_WIDTH */ * this.scale;\n        const charHeight = 2 /* Constants.BASE_CHAR_HEIGHT */ * this.scale;\n        const renderHeight = (force1pxHeight ? 1 : charHeight);\n        if (dx + charWidth > target.width || dy + renderHeight > target.height) {\n            console.warn('bad render request outside image data');\n            return;\n        }\n        const destWidth = target.width * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        const c = 0.5 * (foregroundAlpha / 255);\n        const backgroundR = backgroundColor.r;\n        const backgroundG = backgroundColor.g;\n        const backgroundB = backgroundColor.b;\n        const deltaR = color.r - backgroundR;\n        const deltaG = color.g - backgroundG;\n        const deltaB = color.b - backgroundB;\n        const colorR = backgroundR + deltaR * c;\n        const colorG = backgroundG + deltaG * c;\n        const colorB = backgroundB + deltaB * c;\n        const destAlpha = Math.max(foregroundAlpha, backgroundAlpha);\n        const dest = target.data;\n        let row = dy * destWidth + dx * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        for (let y = 0; y < renderHeight; y++) {\n            let column = row;\n            for (let x = 0; x < charWidth; x++) {\n                dest[column++] = colorR;\n                dest[column++] = colorG;\n                dest[column++] = colorB;\n                dest[column++] = destAlpha;\n            }\n            row += destWidth;\n        }\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createSingleCallFunction } from '../../../../base/common/functional.js';\nconst charTable = {\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    A: 10,\n    B: 11,\n    C: 12,\n    D: 13,\n    E: 14,\n    F: 15\n};\nconst decodeData = (str) => {\n    const output = new Uint8ClampedArray(str.length / 2);\n    for (let i = 0; i < str.length; i += 2) {\n        output[i >> 1] = (charTable[str[i]] << 4) | (charTable[str[i + 1]] & 0xF);\n    }\n    return output;\n};\n/*\nconst encodeData = (data: Uint8ClampedArray, length: string) => {\n    const chars = '0123456789ABCDEF';\n    let output = '';\n    for (let i = 0; i < data.length; i++) {\n        output += chars[data[i] >> 4] + chars[data[i] & 0xf];\n    }\n    return output;\n};\n*/\n/**\n * Map of minimap scales to prebaked sample data at those scales. We don't\n * sample much larger data, because then font family becomes visible, which\n * is use-configurable.\n */\nexport const prebakedMiniMaps = {\n    1: createSingleCallFunction(() => decodeData('0000511D6300CF609C709645A78432005642574171487021003C451900274D35D762755E8B629C5BA856AF57BA649530C167D1512A272A3F6038604460398526BCA2A968DB6F8957C768BE5FBE2FB467CF5D8D5B795DC7625B5DFF50DE64C466DB2FC47CD860A65E9A2EB96CB54CE06DA763AB2EA26860524D3763536601005116008177A8705E53AB738E6A982F88BAA35B5F5B626D9C636B449B737E5B7B678598869A662F6B5B8542706C704C80736A607578685B70594A49715A4522E792')),\n    2: createSingleCallFunction(() => decodeDatan};\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { MinimapCharRenderer } from './minimapCharRenderer.js';\nimport { allCharCodes } from './minimapCharSheet.js';\nimport { prebakedMiniMaps } from './minimapPreBaked.js';\nimport { toUint8 } from '../../../../base/common/uint.js';\n/**\n * Creates character renderers. It takes a 'scale' that determines how large\n * characters should be drawn. Using this, it draws data into a canvas and\n * then downsamples the characters as necessary for the current display.\n * This makes rendering more efficient, rather than drawing a full (tiny)\n * font, or downsampling in real-time.\n */\nexport class MinimapCharRendererFactory {\n    /**\n     * Creates a new character renderer factory with the given scale.\n     */\n    static create(scale, fontFamily) {\n        // renderers are immutable. By default we'll 'create' a new minimap\n        // character renderer whenever we switch editors, no need to do extra work.\n        if (this.lastCreated && scale === this.lastCreated.scale && fontFamily === this.lastFontFamily) {\n            return this.lastCreated;\n        }\n        let factory;\n        if (prebakedMiniMaps[scale]) {\n            factory = new MinimapCharRenderer(prebakedMiniMaps[scale](), scale);\n        }\n        else {\n            factory = MinimapCharRendererFactory.createFromSampleData(MinimapCharRendererFactory.createSampleData(fontFamily).data, scale);\n        }\n        this.lastFontFamily = fontFamily;\n        this.lastCreated = factory;\n        return factory;\n    }\n    /**\n     * Creates the font sample data, writing to a canvas.\n     */\n    static createSampleData(fontFamily) {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        canvas.style.height = `${16 /* Constants.SAMPLED_CHAR_HEIGHT */}px`;\n        canvas.height = 16 /* Constants.SAMPLED_CHAR_HEIGHT */;\n        canvas.width = 96 /* Constants.CHAR_COUNT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n        canvas.style.width = 96 /* Constants.CHAR_COUNT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */ + 'px';\n        ctx.fillStyle = '#ffffff';\n        ctx.font = `bold ${16 /* Constants.SAMPLED_CHAR_HEIGHT */}px ${fontFamily}`;\n        ctx.textBaseline = 'middle';\n        let x = 0;\n        for (const code of allCharCodes) {\n            ctx.fillText(String.fromCharCode(code), x, 16 /* Constants.SAMPLED_CHAR_HEIGHT */ / 2);\n            x += 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n        }\n        return ctx.getImageData(0, 0, 96 /* Constants.CHAR_COUNT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */, 16 /* Constants.SAMPLED_CHAR_HEIGHT */);\n    }\n    /**\n     * Creates a character renderer from the canvas sample data.\n     */\n    static createFromSampleData(source, scale) {\n        const expectedLength = 16 /* Constants.SAMPLED_CHAR_HEIGHT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */ * 4 /* Constants.RGBA_CHANNELS_CNT */ * 96 /* Constants.CHAR_COUNT */;\n        if (source.length !== expectedLength) {\n            throw new Error('Unexpected source in MinimapCharRenderer');\n        }\n        const charData = MinimapCharRendererFactory._downsample(source, scale);\n        return new MinimapCharRenderer(charData, scale);\n    }\n    static _downsampleChar(source, sourceOffset, dest, destOffset, scale) {\n        const width = 1 /* Constants.BASE_CHAR_WIDTH */ * scale;\n        const height = 2 /* Constants.BASE_CHAR_HEIGHT */ * scale;\n        let targetIndex = destOffset;\n        let brightest = 0;\n        // This is essentially an ad-hoc rescaling algorithm. Standard approaches\n        // like bicubic interpolation are awesome for scaling between image sizes,\n        // but don't work so well when scaling to very small pixel values, we end\n        // up with blurry, indistinct forms.\n        //\n        // The approach taken here is simply mapping each source pixel to the target\n        // pixels, and taking the weighted values for all pixels in each, and then\n        // averaging them out. Finally we apply an intensity boost in _downsample,\n        // since when scaling to the smallest pixel sizes there's more black space\n        // which causes characters to be much less distinct.\n        for (let y = 0; y < height; y++) {\n            // 1. For this destination pixel, get the source pixels we're sampling\n            // from (x1, y1) to the next pixel (x2, y2)\n            const sourceY1 = (y / height) * 16 /* Constants.SAMPLED_CHAR_HEIGHT */;\n            const sourceY2 = ((y + 1) / height) * 16 /* Constants.SAMPLED_CHAR_HEIGHT */;\n            for (let x = 0; x < width; x++) {\n                const sourceX1 = (x / width) * 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n                const sourceX2 = ((x + 1) / width) * 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n                // 2. Sample all of them, summing them up and weighting them. Similar\n                // to bilinear interpolation.\n                let value = 0;\n                let samples = 0;\n                for (let sy = sourceY1; sy < sourceY2; sy++) {\n                    const sourceRow = sourceOffset + Math.floor(sy) * 3840 /* Constants.RGBA_SAMPLED_ROW_WIDTH */;\n                    const yBalance = 1 - (sy - Math.floor(sy));\n                    for (let sx = sourceX1; sx < sourceX2; sx++) {\n                        const xBalance = 1 - (sx - Math.floor(sx));\n                        const sourceIndex = sourceRow + Math.floor(sx) * 4 /* Constants.RGBA_CHANNELS_CNT */;\n                        const weight = xBalance * yBalance;\n                        samples += weight;\n                        value += ((source[sourceIndex] * source[sourceIndex + 3]) / 255) * weight;\n                    }\n                }\n                const final = value / samples;\n                brightest = Math.max(brightest, final);\n                dest[targetIndex++] = toUint8(final);\n            }\n        }\n        return brightest;\n    }\n    static _downsample(data, scale) {\n        const pixelsPerCharacter = 2 /* Constants.BASE_CHAR_HEIGHT */ * scale * 1 /* Constants.BASE_CHAR_WIDTH */ * scale;\n        const resultLen = pixelsPerCharacter * 96 /* Constants.CHAR_COUNT */;\n        const result = new Uint8ClampedArray(resultLen);\n        let resultOffset = 0;\n        let sourceOffset = 0;\n        let brightest = 0;\n        for (let charIndex = 0; charIndex < 96 /* Constants.CHAR_COUNT */; charIndex++) {\n            brightest = Math.max(brightest, this._downsampleChar(data, sourceOffset, result, resultOffset, scale));\n            resultOffset += pixelsPerCharacter;\n            sourceOffset += 10 /* Constants.SAMPLED_CHAR_WIDTH */ * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        }\n        if (brightest > 0) {\n            const adjust = 255 / brightest;\n            for (let i = 0; i < resultLen; i++) {\n                result[i] *= adjust;\n            }\n        }\n        return result;\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './overlayWidgets.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport * as dom from '../../../../base/browser/dom.js';\nexport class ViewOverlayWidgets extends ViewPart {\n    constructor(context, viewDomNode) {\n        super(context);\n        this._viewDomNode = viewDomNode;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this._widgets = {};\n        this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n        this._minimapWidth = layoutInfo.minimap.minimapWidth;\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._editorHeight = layoutInfo.height;\n        this._editorWidth = layoutInfo.width;\n        this._viewDomNodeRect = { top: 0, left: 0, width: 0, height: 0 };\n        this._domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._domNode, 4 /* PartFingerprint.OverlayWidgets */);\n        this._domNode.setClassName('overlayWidgets');\n        this.overflowingOverlayWidgetsDomNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this.overflowingOverlayWidgetsDomNode, 5 /* PartFingerprint.OverflowingOverlayWidgets */);\n        this.overflowingOverlayWidgetsDomNode.setClassName('overflowingOverlayWidgets');\n    }\n    dispose() {\n        super.dispose();\n        this._widgets = {};\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n        this._minimapWidth = layoutInfo.minimap.minimapWidth;\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._editorHeight = layoutInfo.height;\n        this._editorWidth = layoutInfo.width;\n        return true;\n    }\n    // ---- end view event handlers\n    addWidget(widget) {\n        const domNode = createFastDomNode(widget.getDomNode());\n        this._widgets[widget.getId()] = {\n            widget: widget,\n            preference: null,\n            domNode: domNode\n        };\n        // This is sync because a widget wants to be in the dom\n        domNode.setPosition('absolute');\n        domNode.setAttribute('widgetId', widget.getId());\n        if (widget.allowEditorOverflow) {\n            this.overflowingOverlayWidgetsDomNode.appendChild(domNode);\n        }\n        else {\n            this._domNode.appendChild(domNode);\n        }\n        this.setShouldRender();\n        this._updateMaxMinWidth();\n    }\n    setWidgetPosition(widget, preference) {\n        const widgetData = this._widgets[widget.getId()];\n        if (widgetData.preference === preference) {\n            this._updateMaxMinWidth();\n            return false;\n        }\n        widgetData.preference = preference;\n        this.setShouldRender();\n        this._updateMaxMinWidth();\n        return true;\n    }\n    removeWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            const widgetData = this._widgets[widgetId];\n            const domNode = widgetData.domNode.domNode;\n            delete this._widgets[widgetId];\n            domNode.remove();\n            this.setShouldRender();\n            this._updateMaxMinWidth();\n        }\n    }\n    _updateMaxMinWidth() {\n        var _a, _b;\n        let maxMinWidth = 0;\n        const keys = Object.keys(this._widgets);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const widgetId = keys[i];\n            const widget = this._widgets[widgetId];\n            const widgetMinWidthInPx = (_b = (_a = widget.widget).getMinContentWidthInPx) === null || _b === void 0 ? void 0 : _b.call(_a);\n            if (typeof widgetMinWidthInPx !== 'undefined') {\n                maxMinWidth = Math.max(maxMinWidth, widgetMinWidthInPx);\n            }\n        }\n        this._context.viewLayout.setOverlayWidgetsMinWidth(maxMinWidth);\n    }\n    _renderWidget(widgetData) {\n        const domNode = widgetData.domNode;\n        if (widgetData.preference === null) {\n            domNode.setTop('');\n            return;\n        }\n        if (widgetData.preference === 0 /* OverlayWidgetPositionPreference.TOP_RIGHT_CORNER */) {\n            domNode.setTop(0);\n            domNode.setRight((2 * this._verticalScrollbarWidth) + this._minimapWidth);\n        }\n        else if (widgetData.preference === 1 /* OverlayWidgetPositionPreference.BOTTOM_RIGHT_CORNER */) {\n            const widgetHeight = domNode.domNode.clientHeight;\n            domNode.setTop((this._editorHeight - widgetHeight - 2 * this._horizontalScrollbarHeight));\n            domNode.setRight((2 * this._verticalScrollbarWidth) + this._minimapWidth);\n        }\n        else if (widgetData.preference === 2 /* OverlayWidgetPositionPreference.TOP_CENTER */) {\n            domNode.setTop(0);\n            domNode.domNode.style.right = '50%';\n        }\n        else {\n            const { top, left } = widgetData.preference;\n            const fixedOverflowWidgets = this._context.configuration.options.get(42 /* EditorOption.fixedOverflowWidgets */);\n            if (fixedOverflowWidgets && widgetData.widget.allowEditorOverflow) {\n                // top, left are computed relative to the editor and we need them relative to the page\n                const editorBoundingBox = this._viewDomNodeRect;\n                domNode.setTop(top + editorBoundingBox.top);\n                domNode.setLeft(left + editorBoundingBox.left);\n                domNode.setPosition('fixed');\n            }\n            else {\n                domNode.setTop(top);\n                domNode.setLeft(left);\n                domNode.setPosition('absolute');\n            }\n        }\n    }\n    prepareRender(ctx) {\n        this._viewDomNodeRect = dom.getDomNodePagePosition(this._viewDomNode.domNode);\n    }\n    render(ctx) {\n        this._domNode.setWidth(this._editorWidth);\n        const keys = Object.keys(this._widgets);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const widgetId = keys[i];\n            this._renderWidget(this._widgets[widgetId]);\n        }\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { editorCursorForeground, editorOverviewRulerBorder, editorOverviewRulerBackground } from '../../../common/core/editorColorRegistry.js';\nimport { OverviewRulerDecorationsGroup } from '../../../common/viewModel.js';\nimport { equals } from '../../../../base/common/arrays.js';\nclass Settings {\n    constructor(config, theme) {\n        const options = config.options;\n        this.lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this.pixelRatio = options.get(142 /* EditorOption.pixelRatio */);\n        this.overviewRulerLanes = options.get(83 /* EditorOption.overviewRulerLanes */);\n        this.renderBorder = options.get(82 /* EditorOption.overviewRulerBorder */);\n        const borderColor = theme.getColor(editorOverviewRulerBorder);\n        this.borderColor = borderColor ? borderColor.toString() : null;\n        this.hideCursor = options.get(59 /* EditorOption.hideCursorInOverviewRuler */);\n        const cursorColor = theme.getColor(editorCursorForeground);\n        this.cursorColor = cursorColor ? cursorColor.transparent(0.7).toString() : null;\n        this.themeType = theme.type;\n        const minimapOpts = options.get(73 /* EditorOption.minimap */);\n        const minimapEnabled = minimapOpts.enabled;\n        const minimapSide = minimapOpts.side;\n        const themeColor = theme.getColor(editorOverviewRulerBackground);\n        const defaultBackground = TokenizationRegistry.getDefaultBackground();\n        if (themeColor) {\n            this.backgroundColor = themeColor;\n        }\n        else if (minimapEnabled && minimapSide === 'right') {\n            this.backgroundColor = defaultBackground;\n        }\n        else {\n            this.backgroundColor = null;\n        }\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        const position = layoutInfo.overviewRuler;\n        this.top = position.top;\n        this.right = position.right;\n        this.domWidth = position.width;\n        this.domHeight = position.height;\n        if (this.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this.canvasWidth = 0;\n            this.canvasHeight = 0;\n        }\n        else {\n            this.canvasWidth = (this.domWidth * this.pixelRatio) | 0;\n            this.canvasHeight = (this.domHeight * this.pixelRatio) | 0;\n        }\n        const [x, w] = this._initLanes(1, this.canvasWidth, this.overviewRulerLanes);\n        this.x = x;\n        this.w = w;\n    }\n    _initLanes(canvasLeftOffset, canvasWidth, laneCount) {\n        const remainingWidth = canvasWidth - canvasLeftOffset;\n        if (laneCount >= 3) {\n            const leftWidth = Math.floor(remainingWidth / 3);\n            const rightWidth = Math.floor(remainingWidth / 3);\n            const centerWidth = remainingWidth - leftWidth - rightWidth;\n            const leftOffset = canvasLeftOffset;\n            const centerOffset = leftOffset + leftWidth;\n            const rightOffset = leftOffset + leftWidth + centerWidth;\n            return [\n                [\n                    0,\n                    leftOffset, // Left\n                    centerOffset, // Center\n                    leftOffset, // Left | Center\n                    rightOffset, // Right\n                    leftOffset, // Left | Right\n                    centerOffset, // Center | Right\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth, // Left\n                    centerWidth, // Center\n                    leftWidth + centerWidth, // Left | Center\n                    rightWidth, // Right\n                    leftWidth + centerWidth + rightWidth, // Left | Right\n                    centerWidth + rightWidth, // Center | Right\n                    leftWidth + centerWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else if (laneCount === 2) {\n            const leftWidth = Math.floor(remainingWidth / 2);\n            const rightWidth = remainingWidth - leftWidth;\n            const leftOffset = canvasLeftOffset;\n            const rightOffset = leftOffset + leftWidth;\n            return [\n                [\n                    0,\n                    leftOffset, // Left\n                    leftOffset, // Center\n                    leftOffset, // Left | Center\n                    rightOffset, // Right\n                    leftOffset, // Left | Right\n                    leftOffset, // Center | Right\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth, // Left\n                    leftWidth, // Center\n                    leftWidth, // Left | Center\n                    rightWidth, // Right\n                    leftWidth + rightWidth, // Left | Right\n                    leftWidth + rightWidth, // Center | Right\n                    leftWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else {\n            const offset = canvasLeftOffset;\n            const width = remainingWidth;\n            return [\n                [\n                    0,\n                    offset, // Left\n                    offset, // Center\n                    offset, // Left | Center\n                    offset, // Right\n                    offset, // Left | Right\n                    offset, // Center | Right\n                    offset, // Left | Center | Right\n                ], [\n                    0,\n                    width, // Left\n                    width, // Center\n                    width, // Left | Center\n                    width, // Right\n                    width, // Left | Right\n                    width, // Center | Right\n                    width, // Left | Center | Right\n                ]\n            ];\n        }\n    }\n    equals(other) {\n        return (this.lineHeight === other.lineHeight\n            && this.pixelRatio === other.pixelRatio\n            && this.overviewRulerLanes === other.overviewRulerLanes\n            && this.renderBorder === other.renderBorder\n            && this.borderColor === other.borderColor\n            && this.hideCursor === other.hideCursor\n            && this.cursorColor === other.cursorColor\n            && this.themeType === other.themeType\n            && Color.equals(this.backgroundColor, other.backgroundColor)\n            && this.top === other.top\n            && this.right === other.right\n            && this.domWidth === other.domWidth\n            && this.domHeight === other.domHeight\n            && this.canvasWidth === other.canvasWidth\n            && this.canvasHeight === other.canvasHeight);\n    }\n}\nexport class DecorationsOverviewRuler extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._actualShouldRender = 0 /* ShouldRenderValue.NotNeeded */;\n        this._renderedDecorations = [];\n        this._renderedCursorPositions = [];\n        this._domNode = createFastDomNode(document.createElement('canvas'));\n        this._domNode.setClassName('decorationsOverviewRuler');\n        this._domNode.setPosition('absolute');\n        this._domNode.setLayerHinting(true);\n        this._domNode.setContain('strict');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._updateSettings(false);\n        this._tokensColorTrackerListener = TokenizationRegistry.onDidChange((e) => {\n            if (e.changedColorMap) {\n                this._updateSettings(true);\n            }\n        });\n        this._cursorPositions = [new Position(1, 1)];\n    }\n    dispose() {\n        super.dispose();\n        this._tokensColorTrackerListener.dispose();\n    }\n    _updateSettings(renderNow) {\n        const newSettings = new Settings(this._context.configuration, this._context.theme);\n        if (this._settings && this._settings.equals(newSettings)) {\n            // nothing to do\n            return false;\n        }\n        this._settings = newSettings;\n        this._domNode.setTop(this._settings.top);\n        this._domNode.setRight(this._settings.right);\n        this._domNode.setWidth(this._settings.domWidth);\n        this._domNode.setHeight(this._settings.domHeight);\n        this._domNode.domNode.width = this._settings.canvasWidth;\n        this._domNode.domNode.height = this._settings.canvasHeight;\n        if (renderNow) {\n            this._render();\n        }\n        return true;\n    }\n    // ---- begin view event handlers\n    _markRenderingIsNeeded() {\n        this._actualShouldRender = 2 /* ShouldRenderValue.Needed */;\n        return true;\n    }\n    _markRenderingIsMaybeNeeded() {\n        this._actualShouldRender = 1 /* ShouldRenderValue.Maybe */;\n        return true;\n    }\n    onConfigurationChanged(e) {\n        return this._updateSettings(false) ? this._markRenderingIsNeeded() : false;\n    }\n    onCursorStateChanged(e) {\n        this._cursorPositions = [];\n        for (let i = 0, len = e.selections.length; i < len; i++) {\n            this._cursorPositions[i] = e.selections[i].getPosition();\n        }\n        this._cursorPositions.sort(Position.compare);\n        return this._markRenderingIsMaybeNeeded();\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsOverviewRuler) {\n            return this._markRenderingIsMaybeNeeded();\n        }\n        return false;\n    }\n    onFlushed(e) {\n        return this._markRenderingIsNeeded();\n    }\n    onScrollChanged(e) {\n        return e.scrollHeightChanged ? this._markRenderingIsNeeded() : false;\n    }\n    onZonesChanged(e) {\n        return this._markRenderingIsNeeded();\n    }\n    onThemeChanged(e) {\n        return this._updateSettings(false) ? this._markRenderingIsNeeded() : false;\n    }\n    // ---- end view event handlers\n    getDomNode() {\n        return this._domNode.domNode;\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(editorCtx) {\n        this._render();\n        this._actualShouldRender = 0 /* ShouldRenderValue.NotNeeded */;\n    }\n    _render() {\n        const backgroundColor = this._settings.backgroundColor;\n        if (this._settings.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this._domNode.setBackgroundColor(backgroundColor ? Color.Format.CSS.formatHexA(backgroundColor) : '');\n            this._domNode.setDisplay('none');\n            return;\n        }\n        const decorations = this._context.viewModel.getAllOverviewRulerDecorations(this._context.theme);\n        decorations.sort(OverviewRulerDecorationsGroup.compareByRenderingProps);\n        if (this._actualShouldRender === 1 /* ShouldRenderValue.Maybe */ && !OverviewRulerDecorationsGroup.equalsArr(this._renderedDecorations, decorations)) {\n            this._actualShouldRender = 2 /* ShouldRenderValue.Needed */;\n        }\n        if (this._actualShouldRender === 1 /* ShouldRenderValue.Maybe */ && !equals(this._renderedCursorPositions, this._cursorPositions, (a, b) => a.lineNumber === b.lineNumber)) {\n            this._actualShouldRender = 2 /* ShouldRenderValue.Needed */;\n        }\n        if (this._actualShouldRender === 1 /* ShouldRenderValue.Maybe */) {\n            // both decorations and cursor positions are unchanged, nothing to do\n            return;\n        }\n        this._renderedDecorations = decorations;\n        this._renderedCursorPositions = this._cursorPositions;\n        this._domNode.setDisplay('block');\n        const canvasWidth = this._settings.canvasWidth;\n        const canvasHeight = this._settings.canvasHeight;\n        const lineHeight = this._settings.lineHeight;\n        const viewLayout = this._context.viewLayout;\n        const outerHeight = this._context.viewLayout.getScrollHeight();\n        const heightRatio = canvasHeight / outerHeight;\n        const minDecorationHeight = (6 /* Constants.MIN_DECORATION_HEIGHT */ * this._settings.pixelRatio) | 0;\n        const halfMinDecorationHeight = (minDecorationHeight / 2) | 0;\n        const canvasCtx = this._domNode.domNode.getContext('2d');\n        if (backgroundColor) {\n            if (backgroundColor.isOpaque()) {\n                // We have a background color which is opaque, we can just paint the entire surface with it\n                canvasCtx.fillStyle = Color.Format.CSS.formatHexA(backgroundColor);\n                canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n            }\n            else {\n                // We have a background color which is transparent, we need to first clear the surface and\n                // then fill it\n                canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n                canvasCtx.fillStyle = Color.Format.CSS.formatHexA(backgroundColor);\n                canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n            }\n        }\n        else {\n            // We don't have a background color\n            canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n        }\n        const x = this._settings.x;\n        const w = this._settings.w;\n        for (const decorationGroup of decorations) {\n            const color = decorationGroup.color;\n            const decorationGroupData = decorationGroup.data;\n            canvasCtx.fillStyle = color;\n            let prevLane = 0;\n            let prevY1 = 0;\n            let prevY2 = 0;\n            for (let i = 0, len = decorationGroupData.length / 3; i < len; i++) {\n                const lane = decorationGroupData[3 * i];\n                const startLineNumber = decorationGroupData[3 * i + 1];\n                const endLineNumber = decorationGroupData[3 * i + 2];\n                let y1 = (viewLayout.getVerticalOffsetForLineNumber(startLineNumber) * heightRatio) | 0;\n                let y2 = ((viewLayout.getVerticalOffsetForLineNumber(endLineNumber) + lineHeight) * heightRatio) | 0;\n                const height = y2 - y1;\n                if (height < minDecorationHeight) {\n                    let yCenter = ((y1 + y2) / 2) | 0;\n                    if (yCenter < halfMinDecorationHeight) {\n                        yCenter = halfMinDecorationHeight;\n                    }\n                    else if (yCenter + halfMinDecorationHeight > canvasHeight) {\n                        yCenter = canvasHeight - halfMinDecorationHeight;\n                    }\n                    y1 = yCenter - halfMinDecorationHeight;\n                    y2 = yCenter + halfMinDecorationHeight;\n                }\n                if (y1 > prevY2 + 1 || lane !== prevLane) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n                    }\n                    prevLane = lane;\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n        }\n        // Draw cursors\n        if (!this._settings.hideCursor && this._settings.cursorColor) {\n            const cursorHeight = (2 * this._settings.pixelRatio) | 0;\n            const halfCursorHeight = (cursorHeight / 2) | 0;\n            const cursorX = this._settings.x[7 /* OverviewRulerLane.Full */];\n            const cursorW = this._settings.w[7 /* OverviewRulerLane.Full */];\n            canvasCtx.fillStyle = this._settings.cursorColor;\n            let prevY1 = -100;\n            let prevY2 = -100;\n            for (let i = 0, len = this._cursorPositions.length; i < len; i++) {\n                const cursor = this._cursorPositions[i];\n                let yCenter = (viewLayout.getVerticalOffsetForLineNumber(cursor.lineNumber) * heightRatio) | 0;\n                if (yCenter < halfCursorHeight) {\n                    yCenter = halfCursorHeight;\n                }\n                else if (yCenter + halfCursorHeight > canvasHeight) {\n                    yCenter = canvasHeight - halfCursorHeight;\n                }\n                const y1 = yCenter - halfCursorHeight;\n                const y2 = y1 + cursorHeight;\n                if (y1 > prevY2 + 1) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n                    }\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n        }\n        if (this._settings.renderBorder && this._settings.borderColor && this._settings.overviewRulerLanes > 0) {\n            canvasCtx.beginPath();\n            canvasCtx.lineWidth = 1;\n            canvasCtx.strokeStyle = this._settings.borderColor;\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(0, canvasHeight);\n            canvasCtx.stroke();\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(canvasWidth, 0);\n            canvasCtx.stroke();\n        }\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class ColorZone {\n    constructor(from, to, colorId) {\n        this._colorZoneBrand = undefined;\n        this.from = from | 0;\n        this.to = to | 0;\n        this.colorId = colorId | 0;\n    }\n    static compare(a, b) {\n        if (a.colorId === b.colorId) {\n            if (a.from === b.from) {\n                return a.to - b.to;\n            }\n            return a.from - b.from;\n        }\n        return a.colorId - b.colorId;\n    }\n}\n/**\n * A zone in the overview ruler\n */\nexport class OverviewRulerZone {\n    constructor(startLineNumber, endLineNumber, heightInLines, color) {\n        this._overviewRulerZoneBrand = undefined;\n        this.startLineNumber = startLineNumber;\n        this.endLineNumber = endLineNumber;\n        this.heightInLines = heightInLines;\n        this.color = color;\n        this._colorZone = null;\n    }\n    static compare(a, b) {\n        if (a.color === b.color) {\n            if (a.startLineNumber === b.startLineNumber) {\n                if (a.heightInLines === b.heightInLines) {\n                    return a.endLineNumber - b.endLineNumber;\n                }\n                return a.heightInLines - b.heightInLines;\n            }\n            return a.startLineNumber - b.startLineNumber;\n        }\n        return a.color < b.color ? -1 : 1;\n    }\n    setColorZone(colorZone) {\n        this._colorZone = colorZone;\n    }\n    getColorZones() {\n        return this._colorZone;\n    }\n}\nexport class OverviewZoneManager {\n    constructor(getVerticalOffsetForLine) {\n        this._getVerticalOffsetForLine = getVerticalOffsetForLine;\n        this._zones = [];\n        this._colorZonesInvalid = false;\n        this._lineHeight = 0;\n        this._domWidth = 0;\n        this._domHeight = 0;\n        this._outerHeight = 0;\n        this._pixelRatio = 1;\n        this._lastAssignedId = 0;\n        this._color2Id = Object.create(null);\n        this._id2Color = [];\n    }\n    getId2Color() {\n        return this._id2Color;\n    }\n    setZones(newZones) {\n        this._zones = newZones;\n        this._zones.sort(OverviewRulerZone.compare);\n    }\n    setLineHeight(lineHeight) {\n        if (this._lineHeight === lineHeight) {\n            return false;\n        }\n        this._lineHeight = lineHeight;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    setPixelRatio(pixelRatio) {\n        this._pixelRatio = pixelRatio;\n        this._colorZonesInvalid = true;\n    }\n    getDOMWidth() {\n        return this._domWidth;\n    }\n    getCanvasWidth() {\n        return this._domWidth * this._pixelRatio;\n    }\n    setDOMWidth(width) {\n        if (this._domWidth === width) {\n            return false;\n        }\n        this._domWidth = width;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    getDOMHeight() {\n        return this._domHeight;\n    }\n    getCanvasHeight() {\n        return this._domHeight * this._pixelRatio;\n    }\n    setDOMHeight(height) {\n        if (this._domHeight === height) {\n            return false;\n        }\n        this._domHeight = height;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    getOuterHeight() {\n        return this._outerHeight;\n    }\n    setOuterHeight(outerHeight) {\n        if (this._outerHeight === outerHeight) {\n            return false;\n        }\n        this._outerHeight = outerHeight;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    resolveColorZones() {\n        const colorZonesInvalid = this._colorZonesInvalid;\n        const lineHeight = Math.floor(this._lineHeight);\n        const totalHeight = Math.floor(this.getCanvasHeight());\n        const outerHeight = Math.floor(this._outerHeight);\n        const heightRatio = totalHeight / outerHeight;\n        const halfMinimumHeight = Math.floor(4 /* Constants.MINIMUM_HEIGHT */ * this._pixelRatio / 2);\n        const allColorZones = [];\n        for (let i = 0, len = this._zones.length; i < len; i++) {\n            const zone = this._zones[i];\n            if (!colorZonesInvalid) {\n                const colorZone = zone.getColorZones();\n                if (colorZone) {\n                    allColorZones.push(colorZone);\n                    continue;\n                }\n            }\n            const offset1 = this._getVerticalOffsetForLine(zone.startLineNumber);\n            const offset2 = (zone.heightInLines === 0\n                ? this._getVerticalOffsetForLine(zone.endLineNumber) + lineHeight\n                : offset1 + zone.heightInLines * lineHeight);\n            const y1 = Math.floor(heightRatio * offset1);\n            const y2 = Math.floor(heightRatio * offset2);\n            let ycenter = Math.floor((y1 + y2) / 2);\n            let halfHeight = (y2 - ycenter);\n            if (halfHeight < halfMinimumHeight) {\n                halfHeight = halfMinimumHeight;\n            }\n            if (ycenter - halfHeight < 0) {\n                ycenter = halfHeight;\n            }\n            if (ycenter + halfHeight > totalHeight) {\n                ycenter = totalHeight - halfHeight;\n            }\n            const color = zone.color;\n            let colorId = this._color2Id[color];\n            if (!colorId) {\n                colorId = (++this._lastAssignedId);\n                this._color2Id[color] = colorId;\n                this._id2Color[colorId] = color;\n            }\n            const colorZone = new ColorZone(ycenter - halfHeight, ycenter + halfHeight, colorId);\n            zone.setColorZone(colorZone);\n            allColorZones.push(colorZone);\n        }\n        this._colorZonesInvalid = false;\n        allColorZones.sort(ColorZone.compare);\n        return allColorZones;\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { OverviewZoneManager } from '../../../common/viewModel/overviewZoneManager.js';\nimport { ViewEventHandler } from '../../../common/viewEventHandler.js';\nexport class OverviewRuler extends ViewEventHandler {\n    constructor(context, cssClassName) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._domNode = createFastDomNode(document.createElement('canvas'));\n        this._domNode.setClassName(cssClassName);\n        this._domNode.setPosition('absolute');\n        this._domNode.setLayerHinting(true);\n        this._domNode.setContain('strict');\n        this._zoneManager = new OverviewZoneManager((lineNumber) => this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber));\n        this._zoneManager.setDOMWidth(0);\n        this._zoneManager.setDOMHeight(0);\n        this._zoneManager.setOuterHeight(this._context.viewLayout.getScrollHeight());\n        this._zoneManager.setLineHeight(options.get(67 /* EditorOption.lineHeight */));\n        this._zoneManager.setPixelRatio(options.get(142 /* EditorOption.pixelRatio */));\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        super.dispose();\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        if (e.hasChanged(67 /* EditorOption.lineHeight */)) {\n            this._zoneManager.setLineHeight(options.get(67 /* EditorOption.lineHeight */));\n            this._render();\n        }\n        if (e.hasChanged(142 /* EditorOption.pixelRatio */)) {\n            this._zoneManager.setPixelRatio(options.get(142 /* EditorOption.pixelRatio */));\n            this._domNode.setWidth(this._zoneManager.getDOMWidth());\n            this._domNode.setHeight(this._zoneManager.getDOMHeight());\n            this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n            this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n            this._render();\n        }\n        return true;\n    }\n    onFlushed(e) {\n        this._render();\n        return true;\n    }\n    onScrollChanged(e) {\n        if (e.scrollHeightChanged) {\n            this._zoneManager.setOuterHeight(e.scrollHeight);\n            this._render();\n        }\n        return true;\n    }\n    onZonesChanged(e) {\n        this._render();\n        return true;\n    }\n    // ---- end view event handlers\n    getDomNode() {\n        return this._domNode.domNode;\n    }\n    setLayout(position) {\n        this._domNode.setTop(position.top);\n        this._domNode.setRight(position.right);\n        let hasChanged = false;\n        hasChanged = this._zoneManager.setDOMWidth(position.width) || hasChanged;\n        hasChanged = this._zoneManager.setDOMHeight(position.height) || hasChanged;\n        if (hasChanged) {\n            this._domNode.setWidth(this._zoneManager.getDOMWidth());\n            this._domNode.setHeight(this._zoneManager.getDOMHeight());\n            this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n            this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n            this._render();\n        }\n    }\n    setZones(zones) {\n        this._zoneManager.setZones(zones);\n        this._render();\n    }\n    _render() {\n        if (this._zoneManager.getOuterHeight() === 0) {\n            return false;\n        }\n        const width = this._zoneManager.getCanvasWidth();\n        const height = this._zoneManager.getCanvasHeight();\n        const colorZones = this._zoneManager.resolveColorZones();\n        const id2Color = this._zoneManager.getId2Color();\n        const ctx = this._domNode.domNode.getContext('2d');\n        ctx.clearRect(0, 0, width, height);\n        if (colorZones.length > 0) {\n            this._renderOneLane(ctx, colorZones, id2Color, width);\n        }\n        return true;\n    }\n    _renderOneLane(ctx, colorZones, id2Color, width) {\n        let currentColorId = 0;\n        let currentFrom = 0;\n        let currentTo = 0;\n        for (const zone of colorZones) {\n            const zoneColorId = zone.colorId;\n            const zoneFrom = zone.from;\n            const zoneTo = zone.to;\n            if (zoneColorId !== currentColorId) {\n                ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n                currentColorId = zoneColorId;\n                ctx.fillStyle = id2Color[currentColorId];\n                currentFrom = zoneFrom;\n                currentTo = zoneTo;\n            }\n            else {\n                if (currentTo >= zoneFrom) {\n                    currentTo = Math.max(currentTo, zoneTo);\n                }\n                else {\n                    ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n                    currentFrom = zoneFrom;\n                    currentTo = zoneTo;\n                }\n            }\n        }\n        ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './rulers.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class Rulers extends ViewPart {\n    constructor(context) {\n        super(context);\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this.domNode.setClassName('view-rulers');\n        this._renderedRulers = [];\n        const options = this._context.configuration.options;\n        this._rulers = options.get(102 /* EditorOption.rulers */);\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n    }\n    dispose() {\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._rulers = options.get(102 /* EditorOption.rulers */);\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollHeightChanged;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    _ensureRulersCount() {\n        const currentCount = this._renderedRulers.length;\n        const desiredCount = this._rulers.length;\n        if (currentCount === desiredCount) {\n            // Nothing to do\n            return;\n        }\n        if (currentCount < desiredCount) {\n            const { tabSize } = this._context.viewModel.model.getOptions();\n            const rulerWidth = tabSize;\n            let addCount = desiredCount - currentCount;\n            while (addCount > 0) {\n                const node = createFastDomNode(document.createElement('div'));\n                node.setClassName('view-ruler');\n                node.setWidth(rulerWidth);\n                this.domNode.appendChild(node);\n                this._renderedRulers.push(node);\n                addCount--;\n            }\n            return;\n        }\n        let removeCount = currentCount - desiredCount;\n        while (removeCount > 0) {\n            const node = this._renderedRulers.pop();\n            this.domNode.removeChild(node);\n            removeCount--;\n        }\n    }\n    render(ctx) {\n        this._ensureRulersCount();\n        for (let i = 0, len = this._rulers.length; i < len; i++) {\n            const node = this._renderedRulers[i];\n            const ruler = this._rulers[i];\n            node.setBoxShadow(ruler.color ? `1px 0 0 0 ${ruler.color} inset` : ``);\n            node.setHeight(Math.min(ctx.scrollHeight, 1000000));\n            node.setLeft(ruler.column * this._typicalHalfwidthCharacterWidth);\n        }\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './scrollDecoration.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class ScrollDecorationViewPart extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._scrollTop = 0;\n        this._width = 0;\n        this._updateWidth();\n        this._shouldShow = false;\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(103 /* EditorOption.scrollbar */);\n        this._useShadows = scrollbar.useShadows;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n    }\n    dispose() {\n        super.dispose();\n    }\n    _updateShouldShow() {\n        const newShouldShow = (this._useShadows && this._scrollTop > 0);\n        if (this._shouldShow !== newShouldShow) {\n            this._shouldShow = newShouldShow;\n            return true;\n        }\n        return false;\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    _updateWidth() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        if (layoutInfo.minimap.renderMinimap === 0 || (layoutInfo.minimap.minimapWidth > 0 && layoutInfo.minimap.minimapLeft === 0)) {\n            this._width = layoutInfo.width;\n        }\n        else {\n            this._width = layoutInfo.width - layoutInfo.verticalScrollbarWidth;\n        }\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(103 /* EditorOption.scrollbar */);\n        this._useShadows = scrollbar.useShadows;\n        this._updateWidth();\n        this._updateShouldShow();\n        return true;\n    }\n    onScrollChanged(e) {\n        this._scrollTop = e.scrollTop;\n        return this._updateShouldShow();\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setWidth(this._width);\n        this._domNode.setClassName(this._shouldShow ? 'scroll-decoration' : '');\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './selections.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorSelectionForeground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nclass HorizontalRangeWithStyle {\n    constructor(other) {\n        this.left = other.left;\n        this.width = other.width;\n        this.startStyle = null;\n        this.endStyle = null;\n    }\n}\nclass LineVisibleRangesWithStyle {\n    constructor(lineNumber, ranges) {\n        this.lineNumber = lineNumber;\n        this.ranges = ranges;\n    }\n}\nfunction toStyledRange(item) {\n    return new HorizontalRangeWithStyle(item);\n}\nfunction toStyled(item) {\n    return new LineVisibleRangesWithStyle(item.lineNumber, item.ranges.map(toStyledRange));\n}\nexport class SelectionsOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._previousFrameVisibleRangesWithStyle = [];\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._roundedSelection = options.get(101 /* EditorOption.roundedSelection */);\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        this._selections = [];\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._roundedSelection = options.get(101 /* EditorOption.roundedSelection */);\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections.slice(0);\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true; //e.inlineDecorationsChanged;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _visibleRangesHaveGaps(linesVisibleRanges) {\n        for (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n            const lineVisibleRanges = linesVisibleRanges[i];\n            if (lineVisibleRanges.ranges.length > 1) {\n                // There are two ranges on the same line\n                return true;\n            }\n        }\n        return false;\n    }\n    _enrichVisibleRangesWithStyle(viewport, linesVisibleRanges, previousFrame) {\n        const epsilon = this._typicalHalfwidthCharacterWidth / 4;\n        let previousFrameTop = null;\n        let previousFrameBottom = null;\n        if (previousFrame && previousFrame.length > 0 && linesVisibleRanges.length > 0) {\n            const topLineNumber = linesVisibleRanges[0].lineNumber;\n            if (topLineNumber === viewport.startLineNumber) {\n                for (let i = 0; !previousFrameTop && i < previousFrame.length; i++) {\n                    if (previousFrame[i].lineNumber === topLineNumber) {\n                        previousFrameTop = previousFrame[i].ranges[0];\n                    }\n                }\n            }\n            const bottomLineNumber = linesVisibleRanges[linesVisibleRanges.length - 1].lineNumber;\n            if (bottomLineNumber === viewport.endLineNumber) {\n                for (let i = previousFrame.length - 1; !previousFrameBottom && i >= 0; i--) {\n                    if (previousFrame[i].lineNumber === bottomLineNumber) {\n                        previousFrameBottom = previousFrame[i].ranges[0];\n                    }\n                }\n            }\n            if (previousFrameTop && !previousFrameTop.startStyle) {\n                previousFrameTop = null;\n            }\n            if (previousFrameBottom && !previousFrameBottom.startStyle) {\n                previousFrameBottom = null;\n            }\n        }\n        for (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n            // We know for a fact that there is precisely one range on each line\n            const curLineRange = linesVisibleRanges[i].ranges[0];\n            const curLeft = curLineRange.left;\n            const curRight = curLineRange.left + curLineRange.width;\n            const startStyle = {\n                top: 0 /* CornerStyle.EXTERN */,\n                bottom: 0 /* CornerStyle.EXTERN */\n            };\n            const endStyle = {\n                top: 0 /* CornerStyle.EXTERN */,\n                bottom: 0 /* CornerStyle.EXTERN */\n            };\n            if (i > 0) {\n                // Look above\n                const prevLeft = linesVisibleRanges[i - 1].ranges[0].left;\n                const prevRight = linesVisibleRanges[i - 1].ranges[0].left + linesVisibleRanges[i - 1].ranges[0].width;\n                if (abs(curLeft - prevLeft) < epsilon) {\n                    startStyle.top = 2 /* CornerStyle.FLAT */;\n                }\n                else if (curLeft > prevLeft) {\n                    startStyle.top = 1 /* CornerStyle.INTERN */;\n                }\n                if (abs(curRight - prevRight) < epsilon) {\n                    endStyle.top = 2 /* CornerStyle.FLAT */;\n                }\n                else if (prevLeft < curRight && curRight < prevRight) {\n                    endStyle.top = 1 /* CornerStyle.INTERN */;\n                }\n            }\n            else if (previousFrameTop) {\n                // Accept some hiccups near the viewport edges to save on repaints\n                startStyle.top = previousFrameTop.startStyle.top;\n                endStyle.top = previousFrameTop.endStyle.top;\n            }\n            if (i + 1 < len) {\n                // Look below\n                const nextLeft = linesVisibleRanges[i + 1].ranges[0].left;\n                const nextRight = linesVisibleRanges[i + 1].ranges[0].left + linesVisibleRanges[i + 1].ranges[0].width;\n                if (abs(curLeft - nextLeft) < epsilon) {\n                    startStyle.bottom = 2 /* CornerStyle.FLAT */;\n                }\n                else if (nextLeft < curLeft && curLeft < nextRight) {\n                    startStyle.bottom = 1 /* CornerStyle.INTERN */;\n                }\n                if (abs(curRight - nextRight) < epsilon) {\n                    endStyle.bottom = 2 /* CornerStyle.FLAT */;\n                }\n                else if (curRight < nextRight) {\n                    endStyle.bottom = 1 /* CornerStyle.INTERN */;\n                }\n            }\n            else if (previousFrameBottom) {\n                // Accept some hiccups near the viewport edges to save on repaints\n                startStyle.bottom = previousFrameBottom.startStyle.bottom;\n                endStyle.bottom = previousFrameBottom.endStyle.bottom;\n            }\n            curLineRange.startStyle = startStyle;\n            curLineRange.endStyle = endStyle;\n        }\n    }\n    _getVisibleRangesWithStyle(selection, ctx, previousFrame) {\n        const _linesVisibleRanges = ctx.linesVisibleRangesForRange(selection, true) || [];\n        const linesVisibleRanges = _linesVisibleRanges.map(toStyled);\n        const visibleRangesHaveGaps = this._visibleRangesHaveGaps(linesVisibleRanges);\n        if (!visibleRangesHaveGaps && this._roundedSelection) {\n            this._enrichVisibleRangesWithStyle(ctx.visibleRange, linesVisibleRanges, previousFrame);\n        }\n        // The visible ranges are sorted TOP-BOTTOM and LEFT-RIGHT\n        return linesVisibleRanges;\n    }\n    _createSelectionPiece(top, height, className, left, width) {\n        return ('<div class=\"cslr '\n            + className\n            + '\" style=\"top:'\n            + top.toString()\n            + 'px;left:'\n            + left.toString()\n            + 'px;width:'\n            + width.toString()\n            + 'px;height:'\n            + height\n            + 'px;\"></div>');\n    }\n    _actualRenderOneSelection(output2, visibleStartLineNumber, hasMultipleSelections, visibleRanges) {\n        if (visibleRanges.length === 0) {\n            return;\n        }\n        const visibleRangesHaveStyle = !!visibleRanges[0].ranges[0].startStyle;\n        const fullLineHeight = (this._lineHeight).toString();\n        const reducedLineHeight = (this._lineHeight - 1).toString();\n        const firstLineNumber = visibleRanges[0].lineNumber;\n        const lastLineNumber = visibleRanges[visibleRanges.length - 1].lineNumber;\n        for (let i = 0, len = visibleRanges.length; i < len; i++) {\n            const lineVisibleRanges = visibleRanges[i];\n            const lineNumber = lineVisibleRanges.lineNumber;\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const lineHeight = hasMultipleSelections ? (lineNumber === lastLineNumber || lineNumber === firstLineNumber ? reducedLineHeight : fullLineHeight) : fullLineHeight;\n            const top = hasMultipleSelections ? (lineNumber === firstLineNumber ? 1 : 0) : 0;\n            let innerCornerOutput = '';\n            let restOfSelectionOutput = '';\n            for (let j = 0, lenJ = lineVisibleRanges.ranges.length; j < lenJ; j++) {\n                const visibleRange = lineVisibleRanges.ranges[j];\n                if (visibleRangesHaveStyle) {\n                    const startStyle = visibleRange.startStyle;\n                    const endStyle = visibleRange.endStyle;\n                    if (startStyle.top === 1 /* CornerStyle.INTERN */ || startStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                        // Reverse rounded corner to the left\n                        // First comes the selection (blue layer)\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                        // Second comes the background (white layer) with inverse border radius\n                        let className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n                        if (startStyle.top === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n                        }\n                        if (startStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n                        }\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, className, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                    }\n                    if (endStyle.top === 1 /* CornerStyle.INTERN */ || endStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                        // Reverse rounded corner to the right\n                        // First comes the selection (blue layer)\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                        // Second comes the background (white layer) with inverse border radius\n                        let className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n                        if (endStyle.top === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n                        }\n                        if (endStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n                        }\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, className, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                    }\n                }\n                let className = SelectionsOverlay.SELECTION_CLASS_NAME;\n                if (visibleRangesHaveStyle) {\n                    const startStyle = visibleRange.startStyle;\n                    const endStyle = visibleRange.endStyle;\n                    if (startStyle.top === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n                    }\n                    if (startStyle.bottom === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n                    }\n                    if (endStyle.top === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n                    }\n                    if (endStyle.bottom === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n                    }\n                }\n                restOfSelectionOutput += this._createSelectionPiece(top, lineHeight, className, visibleRange.left, visibleRange.width);\n            }\n            output2[lineIndex][0] += innerCornerOutput;\n            output2[lineIndex][1] += restOfSelectionOutput;\n        }\n    }\n    prepareRender(ctx) {\n        // Build HTML for inner corners separate from HTML for the rest of selections,\n        // as the inner corner HTML can interfere with that of other selections.\n        // In final render, make sure to place the inner corner HTML before the rest of selection HTML. See issue #77777.\n        const output = [];\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = ['', ''];\n        }\n        const thisFrameVisibleRangesWithStyle = [];\n        for (let i = 0, len = this._selections.length; i < len; i++) {\n            const selection = this._selections[i];\n            if (selection.isEmpty()) {\n                thisFrameVisibleRangesWithStyle[i] = null;\n                continue;\n            }\n            const visibleRangesWithStyle = this._getVisibleRangesWithStyle(selection, ctx, this._previousFrameVisibleRangesWithStyle[i]);\n            thisFrameVisibleRangesWithStyle[i] = visibleRangesWithStyle;\n            this._actualRenderOneSelection(output, visibleStartLineNumber, this._selections.length > 1, visibleRangesWithStyle);\n        }\n        this._previousFrameVisibleRangesWithStyle = thisFrameVisibleRangesWithStyle;\n        this._renderResult = output.map(([internalCorners, restOfSelection]) => internalCorners + restOfSelection);\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nSelectionsOverlay.SELECTION_CLASS_NAME = 'selected-text';\nSelectionsOverlay.SELECTION_TOP_LEFT = 'top-left-radius';\nSelectionsOverlay.SELECTION_BOTTOM_LEFT = 'bottom-left-radius';\nSelectionsOverlay.SELECTION_TOP_RIGHT = 'top-right-radius';\nSelectionsOverlay.SELECTION_BOTTOM_RIGHT = 'bottom-right-radius';\nSelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME = 'monaco-editor-background';\nSelectionsOverlay.ROUNDED_PIECE_WIDTH = 10;\nregisterThemingParticipant((theme, collector) => {\n    const editorSelectionForegroundColor = theme.getColor(editorSelectionForeground);\n    if (editorSelectionForegroundColor && !editorSelectionForegroundColor.isTransparent()) {\n        collector.addRule(`.monaco-editor .view-line span.inline-selected-text { color: ${editorSelectionForegroundColor}; }`);\n    }\n});\nfunction abs(n) {\n    return n < 0 ? -n : n;\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './viewCursors.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { TimeoutTimer } from '../../../../base/common/async.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { ViewCursor } from './viewCursor.js';\nimport { TextEditorCursorStyle } from '../../../common/config/editorOptions.js';\nimport { editorCursorBackground, editorCursorForeground } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nimport { WindowIntervalTimer, getWindow } from '../../../../base/browser/dom.js';\nexport class ViewCursors extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        this._readOnly = options.get(91 /* EditorOption.readOnly */);\n        this._cursorBlinking = options.get(26 /* EditorOption.cursorBlinking */);\n        this._cursorStyle = options.get(28 /* EditorOption.cursorStyle */);\n        this._cursorSmoothCaretAnimation = options.get(27 /* EditorOption.cursorSmoothCaretAnimation */);\n        this._selectionIsEmpty = true;\n        this._isComposingInput = false;\n        this._isVisible = false;\n        this._primaryCursor = new ViewCursor(this._context);\n        this._secondaryCursors = [];\n        this._renderData = [];\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._updateDomClassName();\n        this._domNode.appendChild(this._primaryCursor.getDomNode());\n        this._startCursorBlinkAnimation = new TimeoutTimer();\n        this._cursorFlatBlinkInterval = new WindowIntervalTimer();\n        this._blinkingEnabled = false;\n        this._editorHasFocus = false;\n        this._updateBlinking();\n    }\n    dispose() {\n        super.dispose();\n        this._startCursorBlinkAnimation.dispose();\n        this._cursorFlatBlinkInterval.dispose();\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // --- begin event handlers\n    onCompositionStart(e) {\n        this._isComposingInput = true;\n        this._updateBlinking();\n        return true;\n    }\n    onCompositionEnd(e) {\n        this._isComposingInput = false;\n        this._updateBlinking();\n        return true;\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._readOnly = options.get(91 /* EditorOption.readOnly */);\n        this._cursorBlinking = options.get(26 /* EditorOption.cursorBlinking */);\n        this._cursorStyle = options.get(28 /* EditorOption.cursorStyle */);\n        this._cursorSmoothCaretAnimation = options.get(27 /* EditorOption.cursorSmoothCaretAnimation */);\n        this._updateBlinking();\n        this._updateDomClassName();\n        this._primaryCursor.onConfigurationChanged(e);\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].onConfigurationChanged(e);\n        }\n        return true;\n    }\n    _onCursorPositionChanged(position, secondaryPositions, reason) {\n        const pauseAnimation = (this._secondaryCursors.length !== secondaryPositions.length\n            || (this._cursorSmoothCaretAnimation === 'explicit' && reason !== 3 /* CursorChangeReason.Explicit */));\n        this._primaryCursor.onCursorPositionChanged(position, pauseAnimation);\n        this._updateBlinking();\n        if (this._secondaryCursors.length < secondaryPositions.length) {\n            // Create new cursors\n            const addCnt = secondaryPositions.length - this._secondaryCursors.length;\n            for (let i = 0; i < addCnt; i++) {\n                const newCursor = new ViewCursor(this._context);\n                this._domNode.domNode.insertBefore(newCursor.getDomNode().domNode, this._primaryCursor.getDomNode().domNode.nextSibling);\n                this._secondaryCursors.push(newCursor);\n            }\n        }\n        else if (this._secondaryCursors.length > secondaryPositions.length) {\n            // Remove some cursors\n            const removeCnt = this._secondaryCursors.length - secondaryPositions.length;\n            for (let i = 0; i < removeCnt; i++) {\n                this._domNode.removeChild(this._secondaryCursors[0].getDomNode());\n                this._secondaryCursors.splice(0, 1);\n            }\n        }\n        for (let i = 0; i < secondaryPositions.length; i++) {\n            this._secondaryCursors[i].onCursorPositionChanged(secondaryPositions[i], pauseAnimation);\n        }\n    }\n    onCursorStateChanged(e) {\n        const positions = [];\n        for (let i = 0, len = e.selections.length; i < len; i++) {\n            positions[i] = e.selections[i].getPosition();\n        }\n        this._onCursorPositionChanged(positions[0], positions.slice(1), e.reason);\n        const selectionIsEmpty = e.selections[0].isEmpty();\n        if (this._selectionIsEmpty !== selectionIsEmpty) {\n            this._selectionIsEmpty = selectionIsEmpty;\n            this._updateDomClassName();\n        }\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onFocusChanged(e) {\n        this._editorHasFocus = e.isFocused;\n        this._updateBlinking();\n        return false;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onTokensChanged(e) {\n        const shouldRender = (position) => {\n            for (let i = 0, len = e.ranges.length; i < len; i++) {\n                if (e.ranges[i].fromLineNumber <= position.lineNumber && position.lineNumber <= e.ranges[i].toLineNumber) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        if (shouldRender(this._primaryCursor.getPosition())) {\n            return true;\n        }\n        for (const secondaryCursor of this._secondaryCursors) {\n            if (shouldRender(secondaryCursor.getPosition())) {\n                return true;\n            }\n        }\n        return false;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    // ---- blinking logic\n    _getCursorBlinking() {\n        if (this._isComposingInput) {\n            // avoid double cursors\n            return 0 /* TextEditorCursorBlinkingStyle.Hidden */;\n        }\n        if (!this._editorHasFocus) {\n            return 0 /* TextEditorCursorBlinkingStyle.Hidden */;\n        }\n        if (this._readOnly) {\n            return 5 /* TextEditorCursorBlinkingStyle.Solid */;\n        }\n        return this._cursorBlinking;\n    }\n    _updateBlinking() {\n        this._startCursorBlinkAnimation.cancel();\n        this._cursorFlatBlinkInterval.cancel();\n        const blinkingStyle = this._getCursorBlinking();\n        // hidden and solid are special as they involve no animations\n        const isHidden = (blinkingStyle === 0 /* TextEditorCursorBlinkingStyle.Hidden */);\n        const isSolid = (blinkingStyle === 5 /* TextEditorCursorBlinkingStyle.Solid */);\n        if (isHidden) {\n            this._hide();\n        }\n        else {\n            this._show();\n        }\n        this._blinkingEnabled = false;\n        this._updateDomClassName();\n        if (!isHidden && !isSolid) {\n            if (blinkingStyle === 1 /* TextEditorCursorBlinkingStyle.Blink */) {\n                // flat blinking is handled by JavaScript to save battery life due to Chromium step timing issue https://bugs.chromium.org/p/chromium/issues/detail?id=361587\n                this._cursorFlatBlinkInterval.cancelAndSet(() => {\n                    if (this._isVisible) {\n                        this._hide();\n                    }\n                    else {\n                        this._show();\n                    }\n                }, ViewCursors.BLINK_INTERVAL, getWindow(this._domNode.domNode));\n            }\n            else {\n                this._startCursorBlinkAnimation.setIfNotSet(() => {\n                    this._blinkingEnabled = true;\n                    this._updateDomClassName();\n                }, ViewCursors.BLINK_INTERVAL);\n            }\n        }\n    }\n    // --- end blinking logic\n    _updateDomClassName() {\n        this._domNode.setClassName(this._getClassName());\n    }\n    _getClassName() {\n        let result = 'cursors-layer';\n        if (!this._selectionIsEmpty) {\n            result += ' has-selection';\n        }\n        switch (this._cursorStyle) {\n            case TextEditorCursorStyle.Line:\n                result += ' cursor-line-style';\n                break;\n            case TextEditorCursorStyle.Block:\n                result += ' cursor-block-style';\n                break;\n            case TextEditorCursorStyle.Underline:\n                result += ' cursor-underline-style';\n                break;\n            case TextEditorCursorStyle.LineThin:\n                result += ' cursor-line-thin-style';\n                break;\n            case TextEditorCursorStyle.BlockOutline:\n                result += ' cursor-block-outline-style';\n                break;\n            case TextEditorCursorStyle.UnderlineThin:\n                result += ' cursor-underline-thin-style';\n                break;\n            default:\n                result += ' cursor-line-style';\n        }\n        if (this._blinkingEnabled) {\n            switch (this._getCursorBlinking()) {\n                case 1 /* TextEditorCursorBlinkingStyle.Blink */:\n                    result += ' cursor-blink';\n                    break;\n                case 2 /* TextEditorCursorBlinkingStyle.Smooth */:\n                    result += ' cursor-smooth';\n                    break;\n                case 3 /* TextEditorCursorBlinkingStyle.Phase */:\n                    result += ' cursor-phase';\n                    break;\n                case 4 /* TextEditorCursorBlinkingStyle.Expand */:\n                    result += ' cursor-expand';\n                    break;\n                case 5 /* TextEditorCursorBlinkingStyle.Solid */:\n                    result += ' cursor-solid';\n                    break;\n                default:\n                    result += ' cursor-solid';\n            }\n        }\n        else {\n            result += ' cursor-solid';\n        }\n        if (this._cursorSmoothCaretAnimation === 'on' || this._cursorSmoothCaretAnimation === 'explicit') {\n            result += ' cursor-smooth-caret-animation';\n        }\n        return result;\n    }\n    _show() {\n        this._primaryCursor.show();\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].show();\n        }\n        this._isVisible = true;\n    }\n    _hide() {\n        this._primaryCursor.hide();\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].hide();\n        }\n        this._isVisible = false;\n    }\n    // ---- IViewPart implementation\n    prepareRender(ctx) {\n        this._primaryCursor.prepareRender(ctx);\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].prepareRender(ctx);\n        }\n    }\n    render(ctx) {\n        const renderData = [];\n        let renderDataLen = 0;\n        const primaryRenderData = this._primaryCursor.render(ctx);\n        if (primaryRenderData) {\n            renderData[renderDataLen++] = primaryRenderData;\n        }\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            const secondaryRenderData = this._secondaryCursors[i].render(ctx);\n            if (secondaryRenderData) {\n                renderData[renderDataLen++] = secondaryRenderData;\n            }\n        }\n        this._renderData = renderData;\n    }\n    getLastRenderData() {\n        return this._renderData;\n    }\n}\nViewCursors.BLINK_INTERVAL = 500;\nregisterThemingParticipant((theme, collector) => {\n    const caret = theme.getColor(editorCursorForeground);\n    if (caret) {\n        let caretBackground = theme.getColor(editorCursorBackground);\n        if (!caretBackground) {\n            caretBackground = caret.opposite();\n        }\n        collector.addRule(`.monaco-editor .cursors-layer .cursor { background-color: ${caret}; border-color: ${caret}; color: ${caretBackground}; }`);\n        if (isHighContrast(theme.type)) {\n            collector.addRule(`.monaco-editor .cursors-layer.has-selection .cursor { border-left: 1px solid ${caretBackground}; border-right: 1px solid ${caretBackground}; }`);\n        }\n    }\n});\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { TextEditorCursorStyle } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nclass ViewCursorRenderData {\n    constructor(top, left, paddingLeft, width, height, textContent, textContentClassName) {\n        this.top = top;\n        this.left = left;\n        this.paddingLeft = paddingLeft;\n        this.width = width;\n        this.height = height;\n        this.textContent = textContent;\n        this.textContentClassName = textContentClassName;\n    }\n}\nexport class ViewCursor {\n    constructor(context) {\n        this._context = context;\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        this._cursorStyle = options.get(28 /* EditorOption.cursorStyle */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._lineCursorWidth = Math.min(options.get(31 /* EditorOption.cursorWidth */), this._typicalHalfwidthCharacterWidth);\n        this._isVisible = true;\n        // Create the dom node\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        this._domNode.setHeight(this._lineHeight);\n        this._domNode.setTop(0);\n        this._domNode.setLeft(0);\n        applyFontInfo(this._domNode, fontInfo);\n        this._domNode.setDisplay('none');\n        this._position = new Position(1, 1);\n        this._lastRenderedContent = '';\n        this._renderData = null;\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    getPosition() {\n        return this._position;\n    }\n    show() {\n        if (!this._isVisible) {\n            this._domNode.setVisibility('inherit');\n            this._isVisible = true;\n        }\n    }\n    hide() {\n        if (this._isVisible) {\n            this._domNode.setVisibility('hidden');\n            this._isVisible = false;\n        }\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        this._cursorStyle = options.get(28 /* EditorOption.cursorStyle */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._lineCursorWidth = Math.min(options.get(31 /* EditorOption.cursorWidth */), this._typicalHalfwidthCharacterWidth);\n        applyFontInfo(this._domNode, fontInfo);\n        return true;\n    }\n    onCursorPositionChanged(position, pauseAnimation) {\n        if (pauseAnimation) {\n            this._domNode.domNode.style.transitionProperty = 'none';\n        }\n        else {\n            this._domNode.domNode.style.transitionProperty = '';\n        }\n        this._position = position;\n        return true;\n    }\n    /**\n     * If `this._position` is inside a grapheme, returns the position where the grapheme starts.\n     * Also returns the next grapheme.\n     */\n    _getGraphemeAwarePosition() {\n        const { lineNumber, column } = this._position;\n        const lineContent = this._context.viewModel.getLineContent(lineNumber);\n        const [startOffset, endOffset] = strings.getCharContainingOffset(lineContent, column - 1);\n        return [new Position(lineNumber, startOffset + 1), lineContent.substring(startOffset, endOffset)];\n    }\n    _prepareRender(ctx) {\n        let textContent = '';\n        let textContentClassName = '';\n        const [position, nextGrapheme] = this._getGraphemeAwarePosition();\n        if (this._cursorStyle === TextEditorCursorStyle.Line || this._cursorStyle === TextEditorCursorStyle.LineThin) {\n            const visibleRange = ctx.visibleRangeForPosition(position);\n            if (!visibleRange || visibleRange.outsideRenderedLine) {\n                // Outside viewport\n                return null;\n            }\n            const window = dom.getWindow(this._domNode.domNode);\n            let width;\n            if (this._cursorStyle === TextEditorCursorStyle.Line) {\n                width = dom.computeScreenAwareSize(window, this._lineCursorWidth > 0 ? this._lineCursorWidth : 2);\n                if (width > 2) {\n                    textContent = nextGrapheme;\n                    textContentClassName = this._getTokenClassName(position);\n                }\n            }\n            else {\n                width = dom.computeScreenAwareSize(window, 1);\n            }\n            let left = visibleRange.left;\n            let paddingLeft = 0;\n            if (width >= 2 && left >= 1) {\n                // shift the cursor a bit between the characters\n                paddingLeft = 1;\n                left -= paddingLeft;\n            }\n            const top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.bigNumbersDelta;\n            return new ViewCursorRenderData(top, left, paddingLeft, width, this._lineHeight, textContent, textContentClassName);\n        }\n        const visibleRangeForCharacter = ctx.linesVisibleRangesForRange(new Range(position.lineNumber, position.column, position.lineNumber, position.column + nextGrapheme.length), false);\n        if (!visibleRangeForCharacter || visibleRangeForCharacter.length === 0) {\n            // Outside viewport\n            return null;\n        }\n        const firstVisibleRangeForCharacter = visibleRangeForCharacter[0];\n        if (firstVisibleRangeForCharacter.outsideRenderedLine || firstVisibleRangeForCharacter.ranges.length === 0) {\n            // Outside viewport\n            return null;\n        }\n        const range = firstVisibleRangeForCharacter.ranges[0];\n        const width = (nextGrapheme === '\\t'\n            ? this._typicalHalfwidthCharacterWidth\n            : (range.width < 1\n                ? this._typicalHalfwidthCharacterWidth\n                : range.width));\n        if (this._cursorStyle === TextEditorCursorStyle.Block) {\n            textContent = nextGrapheme;\n            textContentClassName = this._getTokenClassName(position);\n        }\n        let top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.bigNumbersDelta;\n        let height = this._lineHeight;\n        // Underline might interfere with clicking\n        if (this._cursorStyle === TextEditorCursorStyle.Underline || this._cursorStyle === TextEditorCursorStyle.UnderlineThin) {\n            top += this._lineHeight - 2;\n            height = 2;\n        }\n        return new ViewCursorRenderData(top, range.left, 0, width, height, textContent, textContentClassName);\n    }\n    _getTokenClassName(position) {\n        const lineData = this._context.viewModel.getViewLineData(position.lineNumber);\n        const tokenIndex = lineData.tokens.findTokenIndexAtOffset(position.column - 1);\n        return lineData.tokens.getClassName(tokenIndex);\n    }\n    prepareRender(ctx) {\n        this._renderData = this._prepareRender(ctx);\n    }\n    render(ctx) {\n        if (!this._renderData) {\n            this._domNode.setDisplay('none');\n            return null;\n        }\n        if (this._lastRenderedContent !== this._renderData.textContent) {\n            this._lastRenderedContent = this._renderData.textContent;\n            this._domNode.domNode.textContent = this._lastRenderedContent;\n        }\n        this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME} ${this._renderData.textContentClassName}`);\n        this._domNode.setDisplay('block');\n        this._domNode.setTop(this._renderData.top);\n        this._domNode.setLeft(this._renderData.left);\n        this._domNode.setPaddingLeft(this._renderData.paddingLeft);\n        this._domNode.setWidth(this._renderData.width);\n        this._domNode.setLineHeight(this._renderData.height);\n        this._domNode.setHeight(this._renderData.height);\n        return {\n            domNode: this._domNode.domNode,\n            position: this._position,\n            contentLeft: this._renderData.left,\n            height: this._renderData.height,\n            width: 2\n        };\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nconst invalidFunc = () => { throw new Error(`Invalid change accessor`); };\nexport class ViewZones extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName('view-zones');\n        this.domNode.setPosition('absolute');\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this.marginDomNode = createFastDomNode(document.createElement('div'));\n        this.marginDomNode.setClassName('margin-view-zones');\n        this.marginDomNode.setPosition('absolute');\n        this.marginDomNode.setAttribute('role', 'presentation');\n        this.marginDomNode.setAttribute('aria-hidden', 'true');\n        this._zones = {};\n    }\n    dispose() {\n        super.dispose();\n        this._zones = {};\n    }\n    // ---- begin view event handlers\n    _recomputeWhitespacesProps() {\n        const whitespaces = this._context.viewLayout.getWhitespaces();\n        const oldWhitespaces = new Map();\n        for (const whitespace of whitespaces) {\n            oldWhitespaces.set(whitespace.id, whitespace);\n        }\n        let hadAChange = false;\n        this._context.viewModel.changeWhitespace((whitespaceAccessor) => {\n            const keys = Object.keys(this._zones);\n            for (let i = 0, len = keys.length; i < len; i++) {\n                const id = keys[i];\n                const zone = this._zones[id];\n                const props = this._computeWhitespaceProps(zone.delegate);\n                zone.isInHiddenArea = props.isInHiddenArea;\n                const oldWhitespace = oldWhitespaces.get(id);\n                if (oldWhitespace && (oldWhitespace.afterLineNumber !== props.afterViewLineNumber || oldWhitespace.height !== props.heightInPx)) {\n                    whitespaceAccessor.changeOneWhitespace(id, props.afterViewLineNumber, props.heightInPx);\n                    this._safeCallOnComputedHeight(zone.delegate, props.heightInPx);\n                    hadAChange = true;\n                }\n            }\n        });\n        return hadAChange;\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        if (e.hasChanged(67 /* EditorOption.lineHeight */)) {\n            this._recomputeWhitespacesProps();\n        }\n        return true;\n    }\n    onLineMappingChanged(e) {\n        return this._recomputeWhitespacesProps();\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    // ---- end view event handlers\n    _getZoneOrdinal(zone) {\n        var _a, _b;\n        return (_b = (_a = zone.ordinal) !== null && _a !== void 0 ? _a : zone.afterColumn) !== null && _b !== void 0 ? _b : 10000;\n    }\n    _computeWhitespaceProps(zone) {\n        if (zone.afterLineNumber === 0) {\n            return {\n                isInHiddenArea: false,\n                afterViewLineNumber: 0,\n                heightInPx: this._heightInPixels(zone),\n                minWidthInPx: this._minWidthInPixels(zone)\n            };\n        }\n        let zoneAfterModelPosition;\n        if (typeof zone.afterColumn !== 'undefined') {\n            zoneAfterModelPosition = this._context.viewModel.model.validatePosition({\n                lineNumber: zone.afterLineNumber,\n                column: zone.afterColumn\n            });\n        }\n        else {\n            const validAfterLineNumber = this._context.viewModel.model.validatePosition({\n                lineNumber: zone.afterLineNumber,\n                column: 1\n            }).lineNumber;\n            zoneAfterModelPosition = new Position(validAfterLineNumber, this._context.viewModel.model.getLineMaxColumn(validAfterLineNumber));\n        }\n        let zoneBeforeModelPosition;\n        if (zoneAfterModelPosition.column === this._context.viewModel.model.getLineMaxColumn(zoneAfterModelPosition.lineNumber)) {\n            zoneBeforeModelPosition = this._context.viewModel.model.validatePosition({\n                lineNumber: zoneAfterModelPosition.lineNumber + 1,\n                column: 1\n            });\n        }\n        else {\n            zoneBeforeModelPosition = this._context.viewModel.model.validatePosition({\n                lineNumber: zoneAfterModelPosition.lineNumber,\n                column: zoneAfterModelPosition.column + 1\n            });\n        }\n        const viewPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(zoneAfterModelPosition, zone.afterColumnAffinity, true);\n        const isVisible = zone.showInHiddenAreas || this._context.viewModel.coordinatesConverter.modelPositionIsVisible(zoneBeforeModelPosition);\n        return {\n            isInHiddenArea: !isVisible,\n            afterViewLineNumber: viewPosition.lineNumber,\n            heightInPx: (isVisible ? this._heightInPixels(zone) : 0),\n            minWidthInPx: this._minWidthInPixels(zone)\n        };\n    }\n    changeViewZones(callback) {\n        let zonesHaveChanged = false;\n        this._context.viewModel.changeWhitespace((whitespaceAccessor) => {\n            const changeAccessor = {\n                addZone: (zone) => {\n                    zonesHaveChanged = true;\n                    return this._addZone(whitespaceAccessor, zone);\n                },\n                removeZone: (id) => {\n                    if (!id) {\n                        return;\n                    }\n                    zonesHaveChanged = this._removeZone(whitespaceAccessor, id) || zonesHaveChanged;\n                },\n                layoutZone: (id) => {\n                    if (!id) {\n                        return;\n                    }\n                    zonesHaveChanged = this._layoutZone(whitespaceAccessor, id) || zonesHaveChanged;\n                }\n            };\n            safeInvoke1Arg(callback, changeAccessor);\n            // Invalidate changeAccessor\n            changeAccessor.addZone = invalidFunc;\n            changeAccessor.removeZone = invalidFunc;\n            changeAccessor.layoutZone = invalidFunc;\n        });\n        return zonesHaveChanged;\n    }\n    _addZone(whitespaceAccessor, zone) {\n        const props = this._computeWhitespaceProps(zone);\n        const whitespaceId = whitespaceAccessor.insertWhitespace(props.afterViewLineNumber, this._getZoneOrdinal(zone), props.heightInPx, props.minWidthInPx);\n        const myZone = {\n            whitespaceId: whitespaceId,\n            delegate: zone,\n            isInHiddenArea: props.isInHiddenArea,\n            isVisible: false,\n            domNode: createFastDomNode(zone.domNode),\n            marginDomNode: zone.marginDomNode ? createFastDomNode(zone.marginDomNode) : null\n        };\n        this._safeCallOnComputedHeight(myZone.delegate, props.heightInPx);\n        myZone.domNode.setPosition('absolute');\n        myZone.domNode.domNode.style.width = '100%';\n        myZone.domNode.setDisplay('none');\n        myZone.domNode.setAttribute('monaco-view-zone', myZone.whitespaceId);\n        this.domNode.appendChild(myZone.domNode);\n        if (myZone.marginDomNode) {\n            myZone.marginDomNode.setPosition('absolute');\n            myZone.marginDomNode.domNode.style.width = '100%';\n            myZone.marginDomNode.setDisplay('none');\n            myZone.marginDomNode.setAttribute('monaco-view-zone', myZone.whitespaceId);\n            this.marginDomNode.appendChild(myZone.marginDomNode);\n        }\n        this._zones[myZone.whitespaceId] = myZone;\n        this.setShouldRender();\n        return myZone.whitespaceId;\n    }\n    _removeZone(whitespaceAccessor, id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            delete this._zones[id];\n            whitespaceAccessor.removeWhitespace(zone.whitespaceId);\n            zone.domNode.removeAttribute('monaco-visible-view-zone');\n            zone.domNode.removeAttribute('monaco-view-zone');\n            zone.domNode.domNode.parentNode.removeChild(zone.domNode.domNode);\n            if (zone.marginDomNode) {\n                zone.marginDomNode.removeAttribute('monaco-visible-view-zone');\n                zone.marginDomNode.removeAttribute('monaco-view-zone');\n                zone.marginDomNode.domNode.parentNode.removeChild(zone.marginDomNode.domNode);\n            }\n            this.setShouldRender();\n            return true;\n        }\n        return false;\n    }\n    _layoutZone(whitespaceAccessor, id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            const props = this._computeWhitespaceProps(zone.delegate);\n            zone.isInHiddenArea = props.isInHiddenArea;\n            // const newOrdinal = this._getZoneOrdinal(zone.delegate);\n            whitespaceAccessor.changeOneWhitespace(zone.whitespaceId, props.afterViewLineNumber, props.heightInPx);\n            // TODO@Alex: change `newOrdinal` too\n            this._safeCallOnComputedHeight(zone.delegate, props.heightInPx);\n            this.setShouldRender();\n            return true;\n        }\n        return false;\n    }\n    shouldSuppressMouseDownOnViewZone(id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            return Boolean(zone.delegate.suppressMouseDown);\n        }\n        return false;\n    }\n    _heightInPixels(zone) {\n        if (typeof zone.heightInPx === 'number') {\n            return zone.heightInPx;\n        }\n        if (typeof zone.heightInLines === 'number') {\n            return this._lineHeight * zone.heightInLines;\n        }\n        return this._lineHeight;\n    }\n    _minWidthInPixels(zone) {\n        if (typeof zone.minWidthInPx === 'number') {\n            return zone.minWidthInPx;\n        }\n        return 0;\n    }\n    _safeCallOnComputedHeight(zone, height) {\n        if (typeof zone.onComputedHeight === 'function') {\n            try {\n                zone.onComputedHeight(height);\n            }\n            catch (e) {\n                onUnexpectedError(e);\n            }\n        }\n    }\n    _safeCallOnDomNodeTop(zone, top) {\n        if (typeof zone.onDomNodeTop === 'function') {\n            try {\n                zone.onDomNodeTop(top);\n            }\n            catch (e) {\n                onUnexpectedError(e);\n            }\n        }\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        const visibleWhitespaces = ctx.viewportData.whitespaceViewportData;\n        const visibleZones = {};\n        let hasVisibleZone = false;\n        for (const visibleWhitespace of visibleWhitespaces) {\n            if (this._zones[visibleWhitespace.id].isInHiddenArea) {\n                continue;\n            }\n            visibleZones[visibleWhitespace.id] = visibleWhitespace;\n            hasVisibleZone = true;\n        }\n        const keys = Object.keys(this._zones);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const id = keys[i];\n            const zone = this._zones[id];\n            let newTop = 0;\n            let newHeight = 0;\n            let newDisplay = 'none';\n            if (visibleZones.hasOwnProperty(id)) {\n                newTop = visibleZones[id].verticalOffset - ctx.bigNumbersDelta;\n                newHeight = visibleZones[id].height;\n                newDisplay = 'block';\n                // zone is visible\n                if (!zone.isVisible) {\n                    zone.domNode.setAttribute('monaco-visible-view-zone', 'true');\n                    zone.isVisible = true;\n                }\n                this._safeCallOnDomNodeTop(zone.delegate, ctx.getScrolledTopFromAbsoluteTop(visibleZones[id].verticalOffset));\n            }\n            else {\n                if (zone.isVisible) {\n                    zone.domNode.removeAttribute('monaco-visible-view-zone');\n                    zone.isVisible = false;\n                }\n                this._safeCallOnDomNodeTop(zone.delegate, ctx.getScrolledTopFromAbsoluteTop(-1000000));\n            }\n            zone.domNode.setTop(newTop);\n            zone.domNode.setHeight(newHeight);\n            zone.domNode.setDisplay(newDisplay);\n            if (zone.marginDomNode) {\n                zone.marginDomNode.setTop(newTop);\n                zone.marginDomNode.setHeight(newHeight);\n                zone.marginDomNode.setDisplay(newDisplay);\n            }\n        }\n        if (hasVisibleZone) {\n            this.domNode.setWidth(Math.max(ctx.scrollWidth, this._contentWidth));\n            this.marginDomNode.setWidth(this._contentLeft);\n        }\n    }\n}\nfunction safeInvoke1Arg(func, arg1) {\n    try {\n        return func(arg1);\n    }\n    catch (e) {\n        onUnexpectedError(e);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './whitespace.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { LineRange } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { Position } from '../../../common/core/position.js';\nimport { editorWhitespaces } from '../../../common/core/editorColorRegistry.js';\nexport class WhitespaceOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._options = new WhitespaceOptions(this._context.configuration);\n        this._selection = [];\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const newOptions = new WhitespaceOptions(this._context.configuration);\n        if (this._options.equals(newOptions)) {\n            return e.hasChanged(144 /* EditorOption.layoutInfo */);\n        }\n        this._options = newOptions;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selection = e.selections;\n        if (this._options.renderWhitespace === 'selection') {\n            return true;\n        }\n        return false;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (this._options.renderWhitespace === 'none') {\n            this._renderResult = null;\n            return;\n        }\n        const startLineNumber = ctx.visibleRange.startLineNumber;\n        const endLineNumber = ctx.visibleRange.endLineNumber;\n        const lineCount = endLineNumber - startLineNumber + 1;\n        const needed = new Array(lineCount);\n        for (let i = 0; i < lineCount; i++) {\n            needed[i] = true;\n        }\n        const viewportData = this._context.viewModel.getMinimapLinesRenderingData(ctx.viewportData.startLineNumber, ctx.viewportData.endLineNumber, needed);\n        this._renderResult = [];\n        for (let lineNumber = ctx.viewportData.startLineNumber; lineNumber <= ctx.viewportData.endLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - ctx.viewportData.startLineNumber;\n            const lineData = viewportData.data[lineIndex];\n            let selectionsOnLine = null;\n            if (this._options.renderWhitespace === 'selection') {\n                const selections = this._selection;\n                for (const selection of selections) {\n                    if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n                        // Selection does not intersect line\n                        continue;\n                    }\n                    const startColumn = (selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn);\n                    const endColumn = (selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn);\n                    if (startColumn < endColumn) {\n                        if (!selectionsOnLine) {\n                            selectionsOnLine = [];\n                        }\n                        selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\n                    }\n                }\n            }\n            this._renderResult[lineIndex] = this._applyRenderWhitespace(ctx, lineNumber, selectionsOnLine, lineData);\n        }\n    }\n    _applyRenderWhitespace(ctx, lineNumber, selections, lineData) {\n        if (this._options.renderWhitespace === 'selection' && !selections) {\n            return '';\n        }\n        if (this._options.renderWhitespace === 'trailing' && lineData.continuesWithWrappedLine) {\n            return '';\n        }\n        const color = this._context.theme.getColor(editorWhitespaces);\n        const USE_SVG = this._options.renderWithSVG;\n        const lineContent = lineData.content;\n        const len = (this._options.stopRenderingLineAfter === -1 ? lineContent.length : Math.min(this._options.stopRenderingLineAfter, lineContent.length));\n        const continuesWithWrappedLine = lineData.continuesWithWrappedLine;\n        const fauxIndentLength = lineData.minColumn - 1;\n        const onlyBoundary = (this._options.renderWhitespace === 'boundary');\n        const onlyTrailing = (this._options.renderWhitespace === 'trailing');\n        const lineHeight = this._options.lineHeight;\n        const middotWidth = this._options.middotWidth;\n        const wsmiddotWidth = this._options.wsmiddotWidth;\n        const spaceWidth = this._options.spaceWidth;\n        const wsmiddotDiff = Math.abs(wsmiddotWidth - spaceWidth);\n        const middotDiff = Math.abs(middotWidth - spaceWidth);\n        // U+2E31 - WORD SEPARATOR MIDDLE DOT\n        // U+00B7 - MIDDLE DOT\n        const renderSpaceCharCode = (wsmiddotDiff < middotDiff ? 0x2E31 : 0xB7);\n        const canUseHalfwidthRightwardsArrow = this._options.canUseHalfwidthRightwardsArrow;\n        let result = '';\n        let lineIsEmptyOrWhitespace = false;\n        let firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n        let lastNonWhitespaceIndex;\n        if (firstNonWhitespaceIndex === -1) {\n            lineIsEmptyOrWhitespace = true;\n            firstNonWhitespaceIndex = len;\n            lastNonWhitespaceIndex = len;\n        }\n        else {\n            lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n        }\n        let currentSelectionIndex = 0;\n        let currentSelection = selections && selections[currentSelectionIndex];\n        let maxLeft = 0;\n        for (let charIndex = fauxIndentLength; charIndex < len; charIndex++) {\n            const chCode = lineContent.charCodeAt(charIndex);\n            if (currentSelection && charIndex >= currentSelection.endOffset) {\n                currentSelectionIndex++;\n                currentSelection = selections && selections[currentSelectionIndex];\n            }\n            if (chCode !== 9 /* CharCode.Tab */ && chCode !== 32 /* CharCode.Space */) {\n                continue;\n            }\n            if (onlyTrailing && !lineIsEmptyOrWhitespace && charIndex <= lastNonWhitespaceIndex) {\n                // If rendering only trailing whitespace, check that the charIndex points to trailing whitespace.\n                continue;\n            }\n            if (onlyBoundary && charIndex >= firstNonWhitespaceIndex && charIndex <= lastNonWhitespaceIndex && chCode === 32 /* CharCode.Space */) {\n                // rendering only boundary whitespace\n                const prevChCode = (charIndex - 1 >= 0 ? lineContent.charCodeAt(charIndex - 1) : 0 /* CharCode.Null */);\n                const nextChCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */);\n                if (prevChCode !== 32 /* CharCode.Space */ && nextChCode !== 32 /* CharCode.Space */) {\n                    continue;\n                }\n            }\n            if (onlyBoundary && continuesWithWrappedLine && charIndex === len - 1) {\n                const prevCharCode = (charIndex - 1 >= 0 ? lineContent.charCodeAt(charIndex - 1) : 0 /* CharCode.Null */);\n                const isSingleTrailingSpace = (chCode === 32 /* CharCode.Space */ && (prevCharCode !== 32 /* CharCode.Space */ && prevCharCode !== 9 /* CharCode.Tab */));\n                if (isSingleTrailingSpace) {\n                    continue;\n                }\n            }\n            if (selections && (!currentSelection || currentSelection.startOffset > charIndex || currentSelection.endOffset <= charIndex)) {\n                // If rendering whitespace on selection, check that the charIndex falls within a selection\n                continue;\n            }\n            const visibleRange = ctx.visibleRangeForPosition(new Position(lineNumber, charIndex + 1));\n            if (!visibleRange) {\n                continue;\n            }\n            if (USE_SVG) {\n                maxLeft = Math.max(maxLeft, visibleRange.left);\n                if (chCode === 9 /* CharCode.Tab */) {\n                    result += this._renderArrow(lineHeight, spaceWidth, visibleRange.left);\n                }\n                else {\n                    result += `<circle cx=\"${(visibleRange.left + spaceWidth / 2).toFixed(2)}\" cy=\"${(lineHeight / 2).toFixed(2)}\" r=\"${(spaceWidth / 7).toFixed(2)}\" />`;\n                }\n            }\n            else {\n                if (chCode === 9 /* CharCode.Tab */) {\n                    result += `<div class=\"mwh\" style=\"left:${visibleRange.left}px;height:${lineHeight}px;\">${canUseHalfwidthRightwardsArrow ? String.fromCharCode(0xFFEB) : String.fromCharCode(0x2192)}</div>`;\n                }\n                else {\n                    result += `<div class=\"mwh\" style=\"left:${visibleRange.left}px;height:${lineHeight}px;\">${String.fromCharCode(renderSpaceCharCode)}</div>`;\n                }\n            }\n        }\n        if (USE_SVG) {\n            maxLeft = Math.round(maxLeft + spaceWidth);\n            return (`<svg style=\"position:absolute;width:${maxLeft}px;height:${lineHeight}px\" viewBox=\"0 0 ${maxLeft} ${lineHeight}\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"${color}\">`\n                + result\n                + `</svg>`);\n        }\n        return result;\n    }\n    _renderArrow(lineHeight, spaceWidth, left) {\n        const strokeWidth = spaceWidth / 7;\n        const width = spaceWidth;\n        const dy = lineHeight / 2;\n        const dx = left;\n        const p1 = { x: 0, y: strokeWidth / 2 };\n        const p2 = { x: 100 / 125 * width, y: p1.y };\n        const p3 = { x: p2.x - 0.2 * p2.x, y: p2.y + 0.2 * p2.x };\n        const p4 = { x: p3.x + 0.1 * p2.x, y: p3.y + 0.1 * p2.x };\n        const p5 = { x: p4.x + 0.35 * p2.x, y: p4.y - 0.35 * p2.x };\n        const p6 = { x: p5.x, y: -p5.y };\n        const p7 = { x: p4.x, y: -p4.y };\n        const p8 = { x: p3.x, y: -p3.y };\n        const p9 = { x: p2.x, y: -p2.y };\n        const p10 = { x: p1.x, y: -p1.y };\n        const p = [p1, p2, p3, p4, p5, p6, p7, p8, p9, p10];\n        const parts = p.map((p) => `${(dx + p.x).toFixed(2)} ${(dy + p.y).toFixed(2)}`).join(' L ');\n        return `<path d=\"M ${parts}\" />`;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nclass WhitespaceOptions {\n    constructor(config) {\n        const options = config.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const experimentalWhitespaceRendering = options.get(38 /* EditorOption.experimentalWhitespaceRendering */);\n        if (experimentalWhitespaceRendering === 'off') {\n            // whitespace is rendered in the view line\n            this.renderWhitespace = 'none';\n            this.renderWithSVG = false;\n        }\n        else if (experimentalWhitespaceRendering === 'svg') {\n            this.renderWhitespace = options.get(99 /* EditorOption.renderWhitespace */);\n            this.renderWithSVG = true;\n        }\n        else {\n            this.renderWhitespace = options.get(99 /* EditorOption.renderWhitespace */);\n            this.renderWithSVG = false;\n        }\n        this.spaceWidth = fontInfo.spaceWidth;\n        this.middotWidth = fontInfo.middotWidth;\n        this.wsmiddotWidth = fontInfo.wsmiddotWidth;\n        this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\n        this.lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this.stopRenderingLineAfter = options.get(117 /* EditorOption.stopRenderingLineAfter */);\n    }\n    equals(other) {\n        return (this.renderWhitespace === other.renderWhitespace\n            && this.renderWithSVG === other.renderWithSVG\n            && this.spaceWidth === other.spaceWidth\n            && this.middotWidth === other.middotWidth\n            && this.wsmiddotWidth === other.wsmiddotWidth\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineHeight === other.lineHeight\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../core/range.js';\n/**\n * Contains all data needed to render at a specific viewport.\n */\nexport class ViewportData {\n    constructor(selections, partialData, whitespaceViewportData, model) {\n        this.selections = selections;\n        this.startLineNumber = partialData.startLineNumber | 0;\n        this.endLineNumber = partialData.endLineNumber | 0;\n        this.relativeVerticalOffset = partialData.relativeVerticalOffset;\n        this.bigNumbersDelta = partialData.bigNumbersDelta | 0;\n        this.whitespaceViewportData = whitespaceViewportData;\n        this._model = model;\n        this.visibleRange = new Range(partialData.startLineNumber, this._model.getLineMinColumn(partialData.startLineNumber), partialData.endLineNumber, this._model.getLineMaxColumn(partialData.endLineNumber));\n    }\n    getViewLineRenderingData(lineNumber) {\n        return this._model.getViewportViewLineRenderingData(this.visibleRange, lineNumber);\n    }\n    getDecorationsInViewport() {\n        return this._model.getDecorationsInViewport(this.visibleRange);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class EditorTheme {\n    get type() {\n        return this._theme.type;\n    }\n    get value() {\n        return this._theme;\n    }\n    constructor(theme) {\n        this._theme = theme;\n    }\n    update(theme) {\n        this._theme = theme;\n    }\n    getColor(color) {\n        return this._theme.getColor(color);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorTheme } from '../editorTheme.js';\nexport class ViewContext {\n    constructor(configuration, theme, model) {\n        this.configuration = configuration;\n        this.theme = new EditorTheme(theme);\n        this.viewModel = model;\n        this.viewLayout = model.viewLayout;\n    }\n    addEventHandler(eventHandler) {\n        this.viewModel.addViewEventHandler(eventHandler);\n    }\n    removeEventHandler(eventHandler) {\n        this.viewModel.removeViewEventHandler(eventHandler);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createTrustedTypesPolicy } from '../../../base/browser/trustedTypes.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { assertIsDefined } from '../../../base/common/types.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { StringBuilder } from '../../common/core/stringBuilder.js';\nimport { ModelLineProjectionData } from '../../common/modelLineProjectionData.js';\nimport { LineInjectedText } from '../../common/textModelEvents.js';\nconst ttPolicy = createTrustedTypesPolicy('domLineBreaksComputer', { createHTML: value => value });\nexport class DOMLineBreaksComputerFactory {\n    static create(targetWindow) {\n        return new DOMLineBreaksComputerFactory(new WeakRef(targetWindow));\n    }\n    constructor(targetWindow) {\n        this.targetWindow = targetWindow;\n    }\n    createLineBreaksComputer(fontInfo, tabSize, wrappingColumn, wrappingIndent, wordBreak) {\n        const requests = [];\n        const injectedTexts = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                requests.push(lineText);\n                injectedTexts.push(injectedText);\n            },\n            finalize: () => {\n                return createLineBreaks(assertIsDefined(this.targetWindow.deref()), requests, fontInfo, tabSize, wrappingColumn, wrappingIndent, wordBreak, injectedTexts);\n            }\n        };\n    }\n}\nfunction createLineBreaks(targetWindow, requests, fontInfo, tabSize, firstLineBreakColumn, wrappingIndent, wordBreak, injectedTextsPerLine) {\n    var _a;\n    function createEmptyLineBreakWithPossiblyInjectedText(requestIdx) {\n        const injectedTexts = injectedTextsPerLine[requestIdx];\n        if (injectedTexts) {\n            const lineText = LineInjectedText.applyInjectedText(requests[requestIdx], injectedTexts);\n            const injectionOptions = injectedTexts.map(t => t.options);\n            const injectionOffsets = injectedTexts.map(text => text.column - 1);\n            // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n            // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n            return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n        }\n        else {\n            return null;\n        }\n    }\n    if (firstLineBreakColumn === -1) {\n        const result = [];\n        for (let i = 0, len = requests.length; i < len; i++) {\n            result[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n        }\n        return result;\n    }\n    const overallWidth = Math.round(firstLineBreakColumn * fontInfo.typicalHalfwidthCharacterWidth);\n    const additionalIndent = (wrappingIndent === 3 /* WrappingIndent.DeepIndent */ ? 2 : wrappingIndent === 2 /* WrappingIndent.Indent */ ? 1 : 0);\n    const additionalIndentSize = Math.round(tabSize * additionalIndent);\n    const additionalIndentLength = Math.ceil(fontInfo.spaceWidth * additionalIndentSize);\n    const containerDomNode = document.createElement('div');\n    applyFontInfo(containerDomNode, fontInfo);\n    const sb = new StringBuilder(10000);\n    const firstNonWhitespaceIndices = [];\n    const wrappedTextIndentLengths = [];\n    const renderLineContents = [];\n    const allCharOffsets = [];\n    const allVisibleColumns = [];\n    for (let i = 0; i < requests.length; i++) {\n        const lineContent = LineInjectedText.applyInjectedText(requests[i], injectedTextsPerLine[i]);\n        let firstNonWhitespaceIndex = 0;\n        let wrappedTextIndentLength = 0;\n        let width = overallWidth;\n        if (wrappingIndent !== 0 /* WrappingIndent.None */) {\n            firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n            if (firstNonWhitespaceIndex === -1) {\n                // all whitespace line\n                firstNonWhitespaceIndex = 0;\n            }\n            else {\n                // Track existing indent\n                for (let i = 0; i < firstNonWhitespaceIndex; i++) {\n                    const charWidth = (lineContent.charCodeAt(i) === 9 /* CharCode.Tab */\n                        ? (tabSize - (wrappedTextIndentLength % tabSize))\n                        : 1);\n                    wrappedTextIndentLength += charWidth;\n                }\n                const indentWidth = Math.ceil(fontInfo.spaceWidth * wrappedTextIndentLength);\n                // Force sticking to beginning of line if no character would fit except for the indentation\n                if (indentWidth + fontInfo.typicalFullwidthCharacterWidth > overallWidth) {\n                    firstNonWhitespaceIndex = 0;\n                    wrappedTextIndentLength = 0;\n                }\n                else {\n                    width = overallWidth - indentWidth;\n                }\n            }\n        }\n        const renderLineContent = lineContent.substr(firstNonWhitespaceIndex);\n        const tmp = renderLine(renderLineContent, wrappedTextIndentLength, tabSize, width, sb, additionalIndentLength);\n        firstNonWhitespaceIndices[i] = firstNonWhitespaceIndex;\n        wrappedTextIndentLengths[i] = wrappedTextIndentLength;\n        renderLineContents[i] = renderLineContent;\n        allCharOffsets[i] = tmp[0];\n        allVisibleColumns[i] = tmp[1];\n    }\n    const html = sb.build();\n    const trustedhtml = (_a = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(html)) !== null && _a !== void 0 ? _a : html;\n    containerDomNode.innerHTML = trustedhtml;\n    containerDomNode.style.position = 'absolute';\n    containerDomNode.style.top = '10000';\n    if (wordBreak === 'keepAll') {\n        // word-break: keep-all; overflow-wrap: anywhere\n        containerDomNode.style.wordBreak = 'keep-all';\n        containerDomNode.style.overflowWrap = 'anywhere';\n    }\n    else {\n        // overflow-wrap: break-word\n        containerDomNode.style.wordBreak = 'inherit';\n        containerDomNode.style.overflowWrap = 'break-word';\n    }\n    targetWindow.document.body.appendChild(containerDomNode);\n    const range = document.createRange();\n    const lineDomNodes = Array.prototype.slice.call(containerDomNode.children, 0);\n    const result = [];\n    for (let i = 0; i < requests.length; i++) {\n        const lineDomNode = lineDomNodes[i];\n        const breakOffsets = readLineBreaks(range, lineDomNode, renderLineContents[i], allCharOffsets[i]);\n        if (breakOffsets === null) {\n            result[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n            continue;\n        }\n        const firstNonWhitespaceIndex = firstNonWhitespaceIndices[i];\n        const wrappedTextIndentLength = wrappedTextIndentLengths[i] + additionalIndentSize;\n        const visibleColumns = allVisibleColumns[i];\n        const breakOffsetsVisibleColumn = [];\n        for (let j = 0, len = breakOffsets.length; j < len; j++) {\n            breakOffsetsVisibleColumn[j] = visibleColumns[breakOffsets[j]];\n        }\n        if (firstNonWhitespaceIndex !== 0) {\n            // All break offsets are relative to the renderLineContent, make them absolute again\n            for (let j = 0, len = breakOffsets.length; j < len; j++) {\n                breakOffsets[j] += firstNonWhitespaceIndex;\n            }\n        }\n        let injectionOptions;\n        let injectionOffsets;\n        const curInjectedTexts = injectedTextsPerLine[i];\n        if (curInjectedTexts) {\n            injectionOptions = curInjectedTexts.map(t => t.options);\n            injectionOffsets = curInjectedTexts.map(text => text.column - 1);\n        }\n        else {\n            injectionOptions = null;\n            injectionOffsets = null;\n        }\n        result[i] = new ModelLineProjectionData(injectionOffsets, injectionOptions, breakOffsets, breakOffsetsVisibleColumn, wrappedTextIndentLength);\n    }\n    targetWindow.document.body.removeChild(containerDomNode);\n    return result;\n}\nfunction renderLine(lineContent, initialVisibleColumn, tabSize, width, sb, wrappingIndentLength) {\n    if (wrappingIndentLength !== 0) {\n        const hangingOffset = String(wrappingIndentLength);\n        sb.appendString('<div style=\"text-indent: -');\n        sb.appendString(hangingOffset);\n        sb.appendString('px; padding-left: ');\n        sb.appendString(hangingOffset);\n        sb.appendString('px; box-sizing: border-box; width:');\n    }\n    else {\n        sb.appendString('<div style=\"width:');\n    }\n    sb.appendString(String(width));\n    sb.appendString('px;\">');\n    // if (containsRTL) {\n    // \tsb.appendASCIIString('\" dir=\"ltr');\n    // }\n    const len = lineContent.length;\n    let visibleColumn = initialVisibleColumn;\n    let charOffset = 0;\n    const charOffsets = [];\n    const visibleColumns = [];\n    let nextCharCode = (0 < len ? lineContent.charCodeAt(0) : 0 /* CharCode.Null */);\n    sb.appendString('<span>');\n    for (let charIndex = 0; charIndex < len; charIndex++) {\n        if (charIndex !== 0 && charIndex % 16384 /* Constants.SPAN_MODULO_LIMIT */ === 0) {\n            sb.appendString('</span><span>');\n        }\n        charOffsets[charIndex] = charOffset;\n        visibleColumns[charIndex] = visibleColumn;\n        const charCode = nextCharCode;\n        nextCharCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */);\n        let producedCharacters = 1;\n        let charWidth = 1;\n        switch (charCode) {\n            case 9 /* CharCode.Tab */:\n                producedCharacters = (tabSize - (visibleColumn % tabSize));\n                charWidth = producedCharacters;\n                for (let space = 1; space <= producedCharacters; space++) {\n                    if (space < producedCharacters) {\n                        sb.appendCharCode(0xA0); // &nbsp;\n                    }\n                    else {\n                        sb.appendASCIICharCode(32 /* CharCode.Space */);\n                    }\n                }\n                break;\n            case 32 /* CharCode.Space */:\n                if (nextCharCode === 32 /* CharCode.Space */) {\n                    sb.appendCharCode(0xA0); // &nbsp;\n                }\n                else {\n                    sb.appendASCIICharCode(32 /* CharCode.Space */);\n                }\n                break;\n            case 60 /* CharCode.LessThan */:\n                sb.appendString('&lt;');\n                break;\n            case 62 /* CharCode.GreaterThan */:\n                sb.appendString('&gt;');\n                break;\n            case 38 /* CharCode.Ampersand */:\n                sb.appendString('&amp;');\n                break;\n            case 0 /* CharCode.Null */:\n                sb.appendString('&#00;');\n                break;\n            case 65279 /* CharCode.UTF8_BOM */:\n            case 8232 /* CharCode.LINE_SEPARATOR */:\n            case 8233 /* CharCode.PARAGRAPH_SEPARATOR */:\n            case 133 /* CharCode.NEXT_LINE */:\n                sb.appendCharCode(0xFFFD);\n                break;\n            default:\n                if (strings.isFullWidthCharacter(charCode)) {\n                    charWidth++;\n                }\n                if (charCode < 32) {\n                    sb.appendCharCode(9216 + charCode);\n                }\n                else {\n                    sb.appendCharCode(charCode);\n                }\n        }\n        charOffset += producedCharacters;\n        visibleColumn += charWidth;\n    }\n    sb.appendString('</span>');\n    charOffsets[lineContent.length] = charOffset;\n    visibleColumns[lineContent.length] = visibleColumn;\n    sb.appendString('</div>');\n    return [charOffsets, visibleColumns];\n}\nfunction readLineBreaks(range, lineDomNode, lineContent, charOffsets) {\n    if (lineContent.length <= 1) {\n        return null;\n    }\n    const spans = Array.prototype.slice.call(lineDomNode.children, 0);\n    const breakOffsets = [];\n    try {\n        discoverBreaks(range, spans, charOffsets, 0, null, lineContent.length - 1, null, breakOffsets);\n    }\n    catch (err) {\n        console.log(err);\n        return null;\n    }\n    if (breakOffsets.length === 0) {\n        return null;\n    }\n    breakOffsets.push(lineContent.length);\n    return breakOffsets;\n}\nfunction discoverBreaks(range, spans, charOffsets, low, lowRects, high, highRects, result) {\n    if (low === high) {\n        return;\n    }\n    lowRects = lowRects || readClientRect(range, spans, charOffsets[low], charOffsets[low + 1]);\n    highRects = highRects || readClientRect(range, spans, charOffsets[high], charOffsets[high + 1]);\n    if (Math.abs(lowRects[0].top - highRects[0].top) <= 0.1) {\n        // same line\n        return;\n    }\n    // there is at least one line break between these two offsets\n    if (low + 1 === high) {\n        // the two characters are adjacent, so the line break must be exactly between them\n        result.push(high);\n        return;\n    }\n    const mid = low + ((high - low) / 2) | 0;\n    const midRects = readClientRect(range, spans, charOffsets[mid], charOffsets[mid + 1]);\n    discoverBreaks(range, spans, charOffsets, low, lowRects, mid, midRects, result);\n    discoverBreaks(range, spans, charOffsets, mid, midRects, high, highRects, result);\n}\nfunction readClientRect(range, spans, startOffset, endOffset) {\n    range.setStart(spans[(startOffset / 16384 /* Constants.SPAN_MODULO_LIMIT */) | 0].firstChild, startOffset % 16384 /* Constants.SPAN_MODULO_LIMIT */);\n    range.setEnd(spans[(endOffset / 16384 /* Constants.SPAN_MODULO_LIMIT */) | 0].firstChild, endOffset % 16384 /* Constants.SPAN_MODULO_LIMIT */);\n    return range.getClientRects();\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { assertNever } from '../../base/common/assert.js';\nimport { Position } from './core/position.js';\nimport { InjectedTextCursorStops } from './model.js';\n/**\n * *input*:\n * ```\n * xxxxxxxxxxxxxxxxxxxxxxxxxxx\n * ```\n *\n * -> Applying injections `[i...i]`, *inputWithInjections*:\n * ```\n * xxxxxx[iiiiiiiiii]xxxxxxxxxxxxxxxxx[ii]xxxx\n * ```\n *\n * -> breaking at offsets `|` in `xxxxxx[iiiiiii|iii]xxxxxxxxxxx|xxxxxx[ii]xxxx|`:\n * ```\n * xxxxxx[iiiiiii\n * iii]xxxxxxxxxxx\n * xxxxxx[ii]xxxx\n * ```\n *\n * -> applying wrappedTextIndentLength, *output*:\n * ```\n * xxxxxx[iiiiiii\n *    iii]xxxxxxxxxxx\n *    xxxxxx[ii]xxxx\n * ```\n */\nexport class ModelLineProjectionData {\n    constructor(injectionOffsets, \n    /**\n     * `injectionOptions.length` must equal `injectionOffsets.length`\n     */\n    injectionOptions, \n    /**\n     * Refers to offsets after applying injections to the source.\n     * The last break offset indicates the length of the source after applying injections.\n     */\n    breakOffsets, \n    /**\n     * Refers to offsets after applying injections\n     */\n    breakOffsetsVisibleColumn, wrappedTextIndentLength) {\n        this.injectionOffsets = injectionOffsets;\n        this.injectionOptions = injectionOptions;\n        this.breakOffsets = breakOffsets;\n        this.breakOffsetsVisibleColumn = breakOffsetsVisibleColumn;\n        this.wrappedTextIndentLength = wrappedTextIndentLength;\n    }\n    getOutputLineCount() {\n        return this.breakOffsets.length;\n    }\n    getMinOutputOffset(outputLineIndex) {\n        if (outputLineIndex > 0) {\n            return this.wrappedTextIndentLength;\n        }\n        return 0;\n    }\n    getLineLength(outputLineIndex) {\n        // These offsets refer to model text with injected text.\n        const startOffset = outputLineIndex > 0 ? this.breakOffsets[outputLineIndex - 1] : 0;\n        const endOffset = this.breakOffsets[outputLineIndex];\n        let lineLength = endOffset - startOffset;\n        if (outputLineIndex > 0) {\n            lineLength += this.wrappedTextIndentLength;\n        }\n        return lineLength;\n    }\n    getMaxOutputOffset(outputLineIndex) {\n        return this.getLineLength(outputLineIndex);\n    }\n    translateToInputOffset(outputLineIndex, outputOffset) {\n        if (outputLineIndex > 0) {\n            outputOffset = Math.max(0, outputOffset - this.wrappedTextIndentLength);\n        }\n        const offsetInInputWithInjection = outputLineIndex === 0 ? outputOffset : this.breakOffsets[outputLineIndex - 1] + outputOffset;\n        let offsetInInput = offsetInInputWithInjection;\n        if (this.injectionOffsets !== null) {\n            for (let i = 0; i < this.injectionOffsets.length; i++) {\n                if (offsetInInput > this.injectionOffsets[i]) {\n                    if (offsetInInput < this.injectionOffsets[i] + this.injectionOptions[i].content.length) {\n                        // `inputOffset` is within injected text\n                        offsetInInput = this.injectionOffsets[i];\n                    }\n                    else {\n                        offsetInInput -= this.injectionOptions[i].content.length;\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n        }\n        return offsetInInput;\n    }\n    translateToOutputPosition(inputOffset, affinity = 2 /* PositionAffinity.None */) {\n        let inputOffsetInInputWithInjection = inputOffset;\n        if (this.injectionOffsets !== null) {\n            for (let i = 0; i < this.injectionOffsets.length; i++) {\n                if (inputOffset < this.injectionOffsets[i]) {\n                    break;\n                }\n                if (affinity !== 1 /* PositionAffinity.Right */ && inputOffset === this.injectionOffsets[i]) {\n                    break;\n                }\n                inputOffsetInInputWithInjection += this.injectionOptions[i].content.length;\n            }\n        }\n        return this.offsetInInputWithInjectionsToOutputPosition(inputOffsetInInputWithInjection, affinity);\n    }\n    offsetInInputWithInjectionsToOutputPosition(offsetInInputWithInjections, affinity = 2 /* PositionAffinity.None */) {\n        let low = 0;\n        let high = this.breakOffsets.length - 1;\n        let mid = 0;\n        let midStart = 0;\n        while (low <= high) {\n            mid = low + ((high - low) / 2) | 0;\n            const midStop = this.breakOffsets[mid];\n            midStart = mid > 0 ? this.breakOffsets[mid - 1] : 0;\n            if (affinity === 0 /* PositionAffinity.Left */) {\n                if (offsetInInputWithInjections <= midStart) {\n                    high = mid - 1;\n                }\n                else if (offsetInInputWithInjections > midStop) {\n                    low = mid + 1;\n                }\n                else {\n                    break;\n                }\n            }\n            else {\n                if (offsetInInputWithInjections < midStart) {\n                    high = mid - 1;\n                }\n                else if (offsetInInputWithInjections >= midStop) {\n                    low = mid + 1;\n                }\n                else {\n                    break;\n                }\n            }\n        }\n        let outputOffset = offsetInInputWithInjections - midStart;\n        if (mid > 0) {\n            outputOffset += this.wrappedTextIndentLength;\n        }\n        return new OutputPosition(mid, outputOffset);\n    }\n    normalizeOutputPosition(outputLineIndex, outputOffset, affinity) {\n        if (this.injectionOffsets !== null) {\n            const offsetInInputWithInjections = this.outputPositionToOffsetInInputWithInjections(outputLineIndex, outputOffset);\n            const normalizedOffsetInUnwrappedLine = this.normalizeOffsetInInputWithInjectionsAroundInjections(offsetInInputWithInjections, affinity);\n            if (normalizedOffsetInUnwrappedLine !== offsetInInputWithInjections) {\n                // injected text caused a change\n                return this.offsetInInputWithInjectionsToOutputPosition(normalizedOffsetInUnwrappedLine, affinity);\n            }\n        }\n        if (affinity === 0 /* PositionAffinity.Left */) {\n            if (outputLineIndex > 0 && outputOffset === this.getMinOutputOffset(outputLineIndex)) {\n                return new OutputPosition(outputLineIndex - 1, this.getMaxOutputOffset(outputLineIndex - 1));\n            }\n        }\n        else if (affinity === 1 /* PositionAffinity.Right */) {\n            const maxOutputLineIndex = this.getOutputLineCount() - 1;\n            if (outputLineIndex < maxOutputLineIndex && outputOffset === this.getMaxOutputOffset(outputLineIndex)) {\n                return new OutputPosition(outputLineIndex + 1, this.getMinOutputOffset(outputLineIndex + 1));\n            }\n        }\n        return new OutputPosition(outputLineIndex, outputOffset);\n    }\n    outputPositionToOffsetInInputWithInjections(outputLineIndex, outputOffset) {\n        if (outputLineIndex > 0) {\n            outputOffset = Math.max(0, outputOffset - this.wrappedTextIndentLength);\n        }\n        const result = (outputLineIndex > 0 ? this.breakOffsets[outputLineIndex - 1] : 0) + outputOffset;\n        return result;\n    }\n    normalizeOffsetInInputWithInjectionsAroundInjections(offsetInInputWithInjections, affinity) {\n        const injectedText = this.getInjectedTextAtOffset(offsetInInputWithInjections);\n        if (!injectedText) {\n            return offsetInInputWithInjections;\n        }\n        if (affinity === 2 /* PositionAffinity.None */) {\n            if (offsetInInputWithInjections === injectedText.offsetInInputWithInjections + injectedText.length\n                && hasRightCursorStop(this.injectionOptions[injectedText.injectedTextIndex].cursorStops)) {\n                return injectedText.offsetInInputWithInjections + injectedText.length;\n            }\n            else {\n                let result = injectedText.offsetInInputWithInjections;\n                if (hasLeftCursorStop(this.injectionOptions[injectedText.injectedTextIndex].cursorStops)) {\n                    return result;\n                }\n                let index = injectedText.injectedTextIndex - 1;\n                while (index >= 0 && this.injectionOffsets[index] === this.injectionOffsets[injectedText.injectedTextIndex]) {\n                    if (hasRightCursorStop(this.injectionOptions[index].cursorStops)) {\n                        break;\n                    }\n                    result -= this.injectionOptions[index].content.length;\n                    if (hasLeftCursorStop(this.injectionOptions[index].cursorStops)) {\n                        break;\n                    }\n                    index--;\n                }\n                return result;\n            }\n        }\n        else if (affinity === 1 /* PositionAffinity.Right */ || affinity === 4 /* PositionAffinity.RightOfInjectedText */) {\n            let result = injectedText.offsetInInputWithInjections + injectedText.length;\n            let index = injectedText.injectedTextIndex;\n            // traverse all injected text that touch each other\n            while (index + 1 < this.injectionOffsets.length && this.injectionOffsets[index + 1] === this.injectionOffsets[index]) {\n                result += this.injectionOptions[index + 1].content.length;\n                index++;\n            }\n            return result;\n        }\n        else if (affinity === 0 /* PositionAffinity.Left */ || affinity === 3 /* PositionAffinity.LeftOfInjectedText */) {\n            // affinity is left\n            let result = injectedText.offsetInInputWithInjections;\n            let index = injectedText.injectedTextIndex;\n            // traverse all injected text that touch each other\n            while (index - 1 >= 0 && this.injectionOffsets[index - 1] === this.injectionOffsets[index]) {\n                result -= this.injectionOptions[index - 1].content.length;\n                index--;\n            }\n            return result;\n        }\n        assertNever(affinity);\n    }\n    getInjectedText(outputLineIndex, outputOffset) {\n        const offset = this.outputPositionToOffsetInInputWithInjections(outputLineIndex, outputOffset);\n        const injectedText = this.getInjectedTextAtOffset(offset);\n        if (!injectedText) {\n            return null;\n        }\n        return {\n            options: this.injectionOptions[injectedText.injectedTextIndex]\n        };\n    }\n    getInjectedTextAtOffset(offsetInInputWithInjections) {\n        const injectionOffsets = this.injectionOffsets;\n        const injectionOptions = this.injectionOptions;\n        if (injectionOffsets !== null) {\n            let totalInjectedTextLengthBefore = 0;\n            for (let i = 0; i < injectionOffsets.length; i++) {\n                const length = injectionOptions[i].content.length;\n                const injectedTextStartOffsetInInputWithInjections = injectionOffsets[i] + totalInjectedTextLengthBefore;\n                const injectedTextEndOffsetInInputWithInjections = injectionOffsets[i] + totalInjectedTextLengthBefore + length;\n                if (injectedTextStartOffsetInInputWithInjections > offsetInInputWithInjections) {\n                    // Injected text starts later.\n                    break; // All later injected texts have an even larger offset.\n                }\n                if (offsetInInputWithInjections <= injectedTextEndOffsetInInputWithInjections) {\n                    // Injected text ends after or with the given position (but also starts with or before it).\n                    return {\n                        injectedTextIndex: i,\n                        offsetInInputWithInjections: injectedTextStartOffsetInInputWithInjections,\n                        length\n                    };\n                }\n                totalInjectedTextLengthBefore += length;\n            }\n        }\n        return undefined;\n    }\n}\nfunction hasRightCursorStop(cursorStop) {\n    if (cursorStop === null || cursorStop === undefined) {\n        return true;\n    }\n    return cursorStop === InjectedTextCursorStops.Right || cursorStop === InjectedTextCursorStops.Both;\n}\nfunction hasLeftCursorStop(cursorStop) {\n    if (cursorStop === null || cursorStop === undefined) {\n        return true;\n    }\n    return cursorStop === InjectedTextCursorStops.Left || cursorStop === InjectedTextCursorStops.Both;\n}\nexport class InjectedText {\n    constructor(options) {\n        this.options = options;\n    }\n}\nexport class OutputPosition {\n    constructor(outputLineIndex, outputOffset) {\n        this.outputLineIndex = outputLineIndex;\n        this.outputOffset = outputOffset;\n    }\n    toString() {\n        return `${this.outputLineIndex}:${this.outputOffset}`;\n    }\n    toPosition(baseLineNumber) {\n        return new Position(baseLineNumber + this.outputLineIndex, this.outputOffset + 1);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getWindow, runWhenWindowIdle } from '../../../base/browser/dom.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Disposable, DisposableMap } from '../../../base/common/lifecycle.js';\nexport class CodeEditorContributions extends Disposable {\n    constructor() {\n        super();\n        this._editor = null;\n        this._instantiationService = null;\n        /**\n         * Contains all instantiated contributions.\n         */\n        this._instances = this._register(new DisposableMap());\n        /**\n         * Contains contributions which are not yet instantiated.\n         */\n        this._pending = new Map();\n        /**\n         * Tracks which instantiation kinds are still left in `_pending`.\n         */\n        this._finishedInstantiation = [];\n        this._finishedInstantiation[0 /* EditorContributionInstantiation.Eager */] = false;\n        this._finishedInstantiation[1 /* EditorContributionInstantiation.AfterFirstRender */] = false;\n        this._finishedInstantiation[2 /* EditorContributionInstantiation.BeforeFirstInteraction */] = false;\n        this._finishedInstantiation[3 /* EditorContributionInstantiation.Eventually */] = false;\n    }\n    initialize(editor, contributions, instantiationService) {\n        this._editor = editor;\n        this._instantiationService = instantiationService;\n        for (const desc of contributions) {\n            if (this._pending.has(desc.id)) {\n                onUnexpectedError(new Error(`Cannot have two contributions with the same id ${desc.id}`));\n                continue;\n            }\n            this._pending.set(desc.id, desc);\n        }\n        this._instantiateSome(0 /* EditorContributionInstantiation.Eager */);\n        // AfterFirstRender\n        // - these extensions will be instantiated at the latest 50ms after the first render.\n        // - but if there is idle time, we will instantiate them sooner.\n        this._register(runWhenWindowIdle(getWindow(this._editor.getDomNode()), () => {\n            this._instantiateSome(1 /* EditorContributionInstantiation.AfterFirstRender */);\n        }));\n        // BeforeFirstInteraction\n        // - these extensions will be instantiated at the latest before a mouse or a keyboard event.\n        // - but if there is idle time, we will instantiate them sooner.\n        this._register(runWhenWindowIdle(getWindow(this._editor.getDomNode()), () => {\n            this._instantiateSome(2 /* EditorContributionInstantiation.BeforeFirstInteraction */);\n        }));\n        // Eventually\n        // - these extensions will only be instantiated when there is idle time.\n        // - since there is no guarantee that there will ever be idle time, we set a timeout of 5s here.\n        this._register(runWhenWindowIdle(getWindow(this._editor.getDomNode()), () => {\n            this._instantiateSome(3 /* EditorContributionInstantiation.Eventually */);\n        }, 5000));\n    }\n    saveViewState() {\n        const contributionsState = {};\n        for (const [id, contribution] of this._instances) {\n            if (typeof contribution.saveViewState === 'function') {\n                contributionsState[id] = contribution.saveViewState();\n            }\n        }\n        return contributionsState;\n    }\n    restoreViewState(contributionsState) {\n        for (const [id, contribution] of this._instances) {\n            if (typeof contribution.restoreViewState === 'function') {\n                contribution.restoreViewState(contributionsState[id]);\n            }\n        }\n    }\n    get(id) {\n        this._instantiateById(id);\n        return this._instances.get(id) || null;\n    }\n    onBeforeInteractionEvent() {\n        // this method is called very often by the editor!\n        this._instantiateSome(2 /* EditorContributionInstantiation.BeforeFirstInteraction */);\n    }\n    onAfterModelAttached() {\n        var _a;\n        return runWhenWindowIdle(getWindow((_a = this._editor) === null || _a === void 0 ? void 0 : _a.getDomNode()), () => {\n            this._instantiateSome(1 /* EditorContributionInstantiation.AfterFirstRender */);\n        }, 50);\n    }\n    _instantiateSome(instantiation) {\n        if (this._finishedInstantiation[instantiation]) {\n            // already done with this instantiation!\n            return;\n        }\n        this._finishedInstantiation[instantiation] = true;\n        const contribs = this._findPendingContributionsByInstantiation(instantiation);\n        for (const contrib of contribs) {\n            this._instantiateById(contrib.id);\n        }\n    }\n    _findPendingContributionsByInstantiation(instantiation) {\n        const result = [];\n        for (const [, desc] of this._pending) {\n            if (desc.instantiation === instantiation) {\n                result.push(desc);\n            }\n        }\n        return result;\n    }\n    _instantiateById(id) {\n        const desc = this._pending.get(id);\n        if (!desc) {\n            return;\n        }\n        this._pending.delete(id);\n        if (!this._instantiationService || !this._editor) {\n            throw new Error(`Cannot instantiate contributions before being initialized!`);\n        }\n        try {\n            const instance = this._instantiationService.createInstance(desc.ctor, this._editor);\n            this._instances.set(desc.id, instance);\n            if (typeof instance.restoreViewState === 'function' && desc.instantiation !== 0 /* EditorContributionInstantiation.Eager */) {\n                console.warn(`Editor contribution '${desc.id}' should be eager instantiated because it uses saveViewState / restoreViewState.`);\n            }\n        }\n        catch (err) {\n            onUnexpectedError(err);\n        }\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class InternalEditorAction {\n    constructor(id, label, alias, metadata, _precondition, _run, _contextKeyService) {\n        this.id = id;\n        this.label = label;\n        this.alias = alias;\n        this.metadata = metadata;\n        this._precondition = _precondition;\n        this._run = _run;\n        this._contextKeyService = _contextKeyService;\n    }\n    isSupported() {\n        return this._contextKeyService.contextMatchesRules(this._precondition);\n    }\n    run(args) {\n        if (!this.isSupported()) {\n            return Promise.resolve(undefined);\n        }\n        return this._run(args);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport { ModelLineProjectionData } from '../modelLineProjectionData.js';\nexport class MonospaceLineBreaksComputerFactory {\n    static create(options) {\n        return new MonospaceLineBreaksComputerFactory(options.get(133 /* EditorOption.wordWrapBreakBeforeCharacters */), options.get(132 /* EditorOption.wordWrapBreakAfterCharacters */));\n    }\n    constructor(breakBeforeChars, breakAfterChars) {\n        this.classifier = new WrappingCharacterClassifier(breakBeforeChars, breakAfterChars);\n    }\n    createLineBreaksComputer(fontInfo, tabSize, wrappingColumn, wrappingIndent, wordBreak) {\n        const requests = [];\n        const injectedTexts = [];\n        const previousBreakingData = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                requests.push(lineText);\n                injectedTexts.push(injectedText);\n                previousBreakingData.push(previousLineBreakData);\n            },\n            finalize: () => {\n                const columnsForFullWidthChar = fontInfo.typicalFullwidthCharacterWidth / fontInfo.typicalHalfwidthCharacterWidth;\n                const result = [];\n                for (let i = 0, len = requests.length; i < len; i++) {\n                    const injectedText = injectedTexts[i];\n                    const previousLineBreakData = previousBreakingData[i];\n                    if (previousLineBreakData && !previousLineBreakData.injectionOptions && !injectedText) {\n                        result[i] = createLineBreaksFromPreviousLineBreaks(this.classifier, previousLineBreakData, requests[i], tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent, wordBreak);\n                    }\n                    else {\n                        result[i] = createLineBreaks(this.classifier, requests[i], injectedText, tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent, wordBreak);\n                    }\n                }\n                arrPool1.length = 0;\n                arrPool2.length = 0;\n                return result;\n            }\n        };\n    }\n}\nclass WrappingCharacterClassifier extends CharacterClassifier {\n    constructor(BREAK_BEFORE, BREAK_AFTER) {\n        super(0 /* CharacterClass.NONE */);\n        for (let i = 0; i < BREAK_BEFORE.length; i++) {\n            this.set(BREAK_BEFORE.charCodeAt(i), 1 /* CharacterClass.BREAK_BEFORE */);\n        }\n        for (let i = 0; i < BREAK_AFTER.length; i++) {\n            this.set(BREAK_AFTER.charCodeAt(i), 2 /* CharacterClass.BREAK_AFTER */);\n        }\n    }\n    get(charCode) {\n        if (charCode >= 0 && charCode < 256) {\n            return this._asciiMap[charCode];\n        }\n        else {\n            // Initialize CharacterClass.BREAK_IDEOGRAPHIC for these Unicode ranges:\n            // 1. CJK Unified Ideographs (0x4E00 -- 0x9FFF)\n            // 2. CJK Unified Ideographs Extension A (0x3400 -- 0x4DBF)\n            // 3. Hiragana and Katakana (0x3040 -- 0x30FF)\n            if ((charCode >= 0x3040 && charCode <= 0x30FF)\n                || (charCode >= 0x3400 && charCode <= 0x4DBF)\n                || (charCode >= 0x4E00 && charCode <= 0x9FFF)) {\n                return 3 /* CharacterClass.BREAK_IDEOGRAPHIC */;\n            }\n            return (this._map.get(charCode) || this._defaultValue);\n        }\n    }\n}\nlet arrPool1 = [];\nlet arrPool2 = [];\nfunction createLineBreaksFromPreviousLineBreaks(classifier, previousBreakingData, lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent, wordBreak) {\n    if (firstLineBreakColumn === -1) {\n        return null;\n    }\n    const len = lineText.length;\n    if (len <= 1) {\n        return null;\n    }\n    const isKeepAll = (wordBreak === 'keepAll');\n    const prevBreakingOffsets = previousBreakingData.breakOffsets;\n    const prevBreakingOffsetsVisibleColumn = previousBreakingData.breakOffsetsVisibleColumn;\n    const wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n    const wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n    const breakingOffsets = arrPool1;\n    const breakingOffsetsVisibleColumn = arrPool2;\n    let breakingOffsetsCount = 0;\n    let lastBreakingOffset = 0;\n    let lastBreakingOffsetVisibleColumn = 0;\n    let breakingColumn = firstLineBreakColumn;\n    const prevLen = prevBreakingOffsets.length;\n    let prevIndex = 0;\n    if (prevIndex >= 0) {\n        let bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n        while (prevIndex + 1 < prevLen) {\n            const distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n            if (distance >= bestDistance) {\n                break;\n            }\n            bestDistance = distance;\n            prevIndex++;\n        }\n    }\n    while (prevIndex < prevLen) {\n        // Allow for prevIndex to be -1 (for the case where we hit a tab when walking backwards from the first break)\n        let prevBreakOffset = prevIndex < 0 ? 0 : prevBreakingOffsets[prevIndex];\n        let prevBreakOffsetVisibleColumn = prevIndex < 0 ? 0 : prevBreakingOffsetsVisibleColumn[prevIndex];\n        if (lastBreakingOffset > prevBreakOffset) {\n            prevBreakOffset = lastBreakingOffset;\n            prevBreakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn;\n        }\n        let breakOffset = 0;\n        let breakOffsetVisibleColumn = 0;\n        let forcedBreakOffset = 0;\n        let forcedBreakOffsetVisibleColumn = 0;\n        // initially, we search as much as possible to the right (if it fits)\n        if (prevBreakOffsetVisibleColumn <= breakingColumn) {\n            let visibleColumn = prevBreakOffsetVisibleColumn;\n            let prevCharCode = prevBreakOffset === 0 ? 0 /* CharCode.Null */ : lineText.charCodeAt(prevBreakOffset - 1);\n            let prevCharCodeClass = prevBreakOffset === 0 ? 0 /* CharacterClass.NONE */ : classifier.get(prevCharCode);\n            let entireLineFits = true;\n            for (let i = prevBreakOffset; i < len; i++) {\n                const charStartOffset = i;\n                const charCode = lineText.charCodeAt(i);\n                let charCodeClass;\n                let charWidth;\n                if (strings.isHighSurrogate(charCode)) {\n                    // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                    i++;\n                    charCodeClass = 0 /* CharacterClass.NONE */;\n                    charWidth = 2;\n                }\n                else {\n                    charCodeClass = classifier.get(charCode);\n                    charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n                }\n                if (charStartOffset > lastBreakingOffset && canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n                    breakOffset = charStartOffset;\n                    breakOffsetVisibleColumn = visibleColumn;\n                }\n                visibleColumn += charWidth;\n                // check if adding character at `i` will go over the breaking column\n                if (visibleColumn > breakingColumn) {\n                    // We need to break at least before character at `i`:\n                    if (charStartOffset > lastBreakingOffset) {\n                        forcedBreakOffset = charStartOffset;\n                        forcedBreakOffsetVisibleColumn = visibleColumn - charWidth;\n                    }\n                    else {\n                        // we need to advance at least by one character\n                        forcedBreakOffset = i + 1;\n                        forcedBreakOffsetVisibleColumn = visibleColumn;\n                    }\n                    if (visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n                        // Cannot break at `breakOffset` => reset it if it was set\n                        breakOffset = 0;\n                    }\n                    entireLineFits = false;\n                    break;\n                }\n                prevCharCode = charCode;\n                prevCharCodeClass = charCodeClass;\n            }\n            if (entireLineFits) {\n                // there is no more need to break => stop the outer loop!\n                if (breakingOffsetsCount > 0) {\n                    // Add last segment, no need to assign to `lastBreakingOffset` and `lastBreakingOffsetVisibleColumn`\n                    breakingOffsets[breakingOffsetsCount] = prevBreakingOffsets[prevBreakingOffsets.length - 1];\n                    breakingOffsetsVisibleColumn[breakingOffsetsCount] = prevBreakingOffsetsVisibleColumn[prevBreakingOffsets.length - 1];\n                    breakingOffsetsCount++;\n                }\n                break;\n            }\n        }\n        if (breakOffset === 0) {\n            // must search left\n            let visibleColumn = prevBreakOffsetVisibleColumn;\n            let charCode = lineText.charCodeAt(prevBreakOffset);\n            let charCodeClass = classifier.get(charCode);\n            let hitATabCharacter = false;\n            for (let i = prevBreakOffset - 1; i >= lastBreakingOffset; i--) {\n                const charStartOffset = i + 1;\n                const prevCharCode = lineText.charCodeAt(i);\n                if (prevCharCode === 9 /* CharCode.Tab */) {\n                    // cannot determine the width of a tab when going backwards, so we must go forwards\n                    hitATabCharacter = true;\n                    break;\n                }\n                let prevCharCodeClass;\n                let prevCharWidth;\n                if (strings.isLowSurrogate(prevCharCode)) {\n                    // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                    i--;\n                    prevCharCodeClass = 0 /* CharacterClass.NONE */;\n                    prevCharWidth = 2;\n                }\n                else {\n                    prevCharCodeClass = classifier.get(prevCharCode);\n                    prevCharWidth = (strings.isFullWidthCharacter(prevCharCode) ? columnsForFullWidthChar : 1);\n                }\n                if (visibleColumn <= breakingColumn) {\n                    if (forcedBreakOffset === 0) {\n                        forcedBreakOffset = charStartOffset;\n                        forcedBreakOffsetVisibleColumn = visibleColumn;\n                    }\n                    if (visibleColumn <= breakingColumn - wrappedLineBreakColumn) {\n                        // went too far!\n                        break;\n                    }\n                    if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n                        breakOffset = charStartOffset;\n                        breakOffsetVisibleColumn = visibleColumn;\n                        break;\n                    }\n                }\n                visibleColumn -= prevCharWidth;\n                charCode = prevCharCode;\n                charCodeClass = prevCharCodeClass;\n            }\n            if (breakOffset !== 0) {\n                const remainingWidthOfNextLine = wrappedLineBreakColumn - (forcedBreakOffsetVisibleColumn - breakOffsetVisibleColumn);\n                if (remainingWidthOfNextLine <= tabSize) {\n                    const charCodeAtForcedBreakOffset = lineText.charCodeAt(forcedBreakOffset);\n                    let charWidth;\n                    if (strings.isHighSurrogate(charCodeAtForcedBreakOffset)) {\n                        // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                        charWidth = 2;\n                    }\n                    else {\n                        charWidth = computeCharWidth(charCodeAtForcedBreakOffset, forcedBreakOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n                    }\n                    if (remainingWidthOfNextLine - charWidth < 0) {\n                        // it is not worth it to break at breakOffset, it just introduces an extra needless line!\n                        breakOffset = 0;\n                    }\n                }\n            }\n            if (hitATabCharacter) {\n                // cannot determine the width of a tab when going backwards, so we must go forwards from the previous break\n                prevIndex--;\n                continue;\n            }\n        }\n        if (breakOffset === 0) {\n            // Could not find a good breaking point\n            breakOffset = forcedBreakOffset;\n            breakOffsetVisibleColumn = forcedBreakOffsetVisibleColumn;\n        }\n        if (breakOffset <= lastBreakingOffset) {\n            // Make sure that we are advancing (at least one character)\n            const charCode = lineText.charCodeAt(lastBreakingOffset);\n            if (strings.isHighSurrogate(charCode)) {\n                // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                breakOffset = lastBreakingOffset + 2;\n                breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + 2;\n            }\n            else {\n                breakOffset = lastBreakingOffset + 1;\n                breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + computeCharWidth(charCode, lastBreakingOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n            }\n        }\n        lastBreakingOffset = breakOffset;\n        breakingOffsets[breakingOffsetsCount] = breakOffset;\n        lastBreakingOffsetVisibleColumn = breakOffsetVisibleColumn;\n        breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n        breakingOffsetsCount++;\n        breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n        while (prevIndex < 0 || (prevIndex < prevLen && prevBreakingOffsetsVisibleColumn[prevIndex] < breakOffsetVisibleColumn)) {\n            prevIndex++;\n        }\n        let bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n        while (prevIndex + 1 < prevLen) {\n            const distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n            if (distance >= bestDistance) {\n                break;\n            }\n            bestDistance = distance;\n            prevIndex++;\n        }\n    }\n    if (breakingOffsetsCount === 0) {\n        return null;\n    }\n    // Doing here some object reuse which ends up helping a huge deal with GC pauses!\n    breakingOffsets.length = breakingOffsetsCount;\n    breakingOffsetsVisibleColumn.length = breakingOffsetsCount;\n    arrPool1 = previousBreakingData.breakOffsets;\n    arrPool2 = previousBreakingData.breakOffsetsVisibleColumn;\n    previousBreakingData.breakOffsets = breakingOffsets;\n    previousBreakingData.breakOffsetsVisibleColumn = breakingOffsetsVisibleColumn;\n    previousBreakingData.wrappedTextIndentLength = wrappedTextIndentLength;\n    return previousBreakingData;\n}\nfunction createLineBreaks(classifier, _lineText, injectedTexts, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent, wordBreak) {\n    const lineText = LineInjectedText.applyInjectedText(_lineText, injectedTexts);\n    let injectionOptions;\n    let injectionOffsets;\n    if (injectedTexts && injectedTexts.length > 0) {\n        injectionOptions = injectedTexts.map(t => t.options);\n        injectionOffsets = injectedTexts.map(text => text.column - 1);\n    }\n    else {\n        injectionOptions = null;\n        injectionOffsets = null;\n    }\n    if (firstLineBreakColumn === -1) {\n        if (!injectionOptions) {\n            return null;\n        }\n        // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n        // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n        return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n    }\n    const len = lineText.length;\n    if (len <= 1) {\n        if (!injectionOptions) {\n            return null;\n        }\n        // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n        // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n        return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n    }\n    const isKeepAll = (wordBreak === 'keepAll');\n    const wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n    const wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n    const breakingOffsets = [];\n    const breakingOffsetsVisibleColumn = [];\n    let breakingOffsetsCount = 0;\n    let breakOffset = 0;\n    let breakOffsetVisibleColumn = 0;\n    let breakingColumn = firstLineBreakColumn;\n    let prevCharCode = lineText.charCodeAt(0);\n    let prevCharCodeClass = classifier.get(prevCharCode);\n    let visibleColumn = computeCharWidth(prevCharCode, 0, tabSize, columnsForFullWidthChar);\n    let startOffset = 1;\n    if (strings.isHighSurrogate(prevCharCode)) {\n        // A surrogate pair must always be considered as a single unit, so it is never to be broken\n        visibleColumn += 1;\n        prevCharCode = lineText.charCodeAt(1);\n        prevCharCodeClass = classifier.get(prevCharCode);\n        startOffset++;\n    }\n    for (let i = startOffset; i < len; i++) {\n        const charStartOffset = i;\n        const charCode = lineText.charCodeAt(i);\n        let charCodeClass;\n        let charWidth;\n        if (strings.isHighSurrogate(charCode)) {\n            // A surrogate pair must always be considered as a single unit, so it is never to be broken\n            i++;\n            charCodeClass = 0 /* CharacterClass.NONE */;\n            charWidth = 2;\n        }\n        else {\n            charCodeClass = classifier.get(charCode);\n            charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n        }\n        if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n            breakOffset = charStartOffset;\n            breakOffsetVisibleColumn = visibleColumn;\n        }\n        visibleColumn += charWidth;\n        // check if adding character at `i` will go over the breaking column\n        if (visibleColumn > breakingColumn) {\n            // We need to break at least before character at `i`:\n            if (breakOffset === 0 || visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n                // Cannot break at `breakOffset`, must break at `i`\n                breakOffset = charStartOffset;\n                breakOffsetVisibleColumn = visibleColumn - charWidth;\n            }\n            breakingOffsets[breakingOffsetsCount] = breakOffset;\n            breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n            breakingOffsetsCount++;\n            breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n            breakOffset = 0;\n        }\n        prevCharCode = charCode;\n        prevCharCodeClass = charCodeClass;\n    }\n    if (breakingOffsetsCount === 0 && (!injectedTexts || injectedTexts.length === 0)) {\n        return null;\n    }\n    // Add last segment\n    breakingOffsets[breakingOffsetsCount] = len;\n    breakingOffsetsVisibleColumn[breakingOffsetsCount] = visibleColumn;\n    return new ModelLineProjectionData(injectionOffsets, injectionOptions, breakingOffsets, breakingOffsetsVisibleColumn, wrappedTextIndentLength);\n}\nfunction computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar) {\n    if (charCode === 9 /* CharCode.Tab */) {\n        return (tabSize - (visibleColumn % tabSize));\n    }\n    if (strings.isFullWidthCharacter(charCode)) {\n        return columnsForFullWidthChar;\n    }\n    if (charCode < 32) {\n        // when using `editor.renderControlCharacters`, the substitutions are often wide\n        return columnsForFullWidthChar;\n    }\n    return 1;\n}\nfunction tabCharacterWidth(visibleColumn, tabSize) {\n    return (tabSize - (visibleColumn % tabSize));\n}\n/**\n * Kinsoku Shori : Don't break after a leading character, like an open bracket\n * Kinsoku Shori : Don't break before a trailing character, like a period\n */\nfunction canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll) {\n    return (charCode !== 32 /* CharCode.Space */\n        && ((prevCharCodeClass === 2 /* CharacterClass.BREAK_AFTER */ && charCodeClass !== 2 /* CharacterClass.BREAK_AFTER */) // break at the end of multiple BREAK_AFTER\n            || (prevCharCodeClass !== 1 /* CharacterClass.BREAK_BEFORE */ && charCodeClass === 1 /* CharacterClass.BREAK_BEFORE */) // break at the start of multiple BREAK_BEFORE\n            || (!isKeepAll && prevCharCodeClass === 3 /* CharacterClass.BREAK_IDEOGRAPHIC */ && charCodeClass !== 2 /* CharacterClass.BREAK_AFTER */)\n            || (!isKeepAll && charCodeClass === 3 /* CharacterClass.BREAK_IDEOGRAPHIC */ && prevCharCodeClass !== 1 /* CharacterClass.BREAK_BEFORE */)));\n}\nfunction computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\n    let wrappedTextIndentLength = 0;\n    if (wrappingIndent !== 0 /* WrappingIndent.None */) {\n        const firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineText);\n        if (firstNonWhitespaceIndex !== -1) {\n            // Track existing indent\n            for (let i = 0; i < firstNonWhitespaceIndex; i++) {\n                const charWidth = (lineText.charCodeAt(i) === 9 /* CharCode.Tab */ ? tabCharacterWidth(wrappedTextIndentLength, tabSize) : 1);\n                wrappedTextIndentLength += charWidth;\n            }\n            // Increase indent of continuation lines, if desired\n            const numberOfAdditionalTabs = (wrappingIndent === 3 /* WrappingIndent.DeepIndent */ ? 2 : wrappingIndent === 2 /* WrappingIndent.Indent */ ? 1 : 0);\n            for (let i = 0; i < numberOfAdditionalTabs; i++) {\n                const charWidth = tabCharacterWidth(wrappedTextIndentLength, tabSize);\n                wrappedTextIndentLength += charWidth;\n            }\n            // Force sticking to beginning of line if no character would fit except for the indentation\n            if (wrappedTextIndentLength + columnsForFullWidthChar > firstLineBreakColumn) {\n                wrappedTextIndentLength = 0;\n            }\n        }\n    }\n    return wrappedTextIndentLength;\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ArrayQueue } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { EDITOR_FONT_DEFAULTS, filterValidationDecorations } from '../config/editorOptions.js';\nimport { CursorsController } from '../cursor/cursor.js';\nimport { CursorConfiguration } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport * as textModelEvents from '../textModelEvents.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { tokenizeLineToHTML } from '../languages/textToHtmlTokenizer.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { ViewLayout } from '../viewLayout/viewLayout.js';\nimport { MinimapTokensColorTracker } from './minimapTokensColorTracker.js';\nimport { MinimapLinesRenderingData, OverviewRulerDecorationsGroup, ViewLineRenderingData } from '../viewModel.js';\nimport { ViewModelDecorations } from './viewModelDecorations.js';\nimport { FocusChangedEvent, HiddenAreasChangedEvent, ModelContentChangedEvent, ModelDecorationsChangedEvent, ModelLanguageChangedEvent, ModelLanguageConfigurationChangedEvent, ModelOptionsChangedEvent, ModelTokensChangedEvent, ReadOnlyEditAttemptEvent, ScrollChangedEvent, ViewModelEventDispatcher, ViewZonesChangedEvent } from '../viewModelEventDispatcher.js';\nimport { ViewModelLinesFromModelAsIs, ViewModelLinesFromProjectedModel } from './viewModelLines.js';\nimport { GlyphMarginLanesModel } from './glyphLanesModel.js';\nconst USE_IDENTITY_LINES_COLLECTION = true;\nexport class ViewModel extends Disposable {\n    constructor(editorId, configuration, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, scheduleAtNextAnimationFrame, languageConfigurationService, _themeService, _attachedView) {\n        super();\n        this.languageConfigurationService = languageConfigurationService;\n        this._themeService = _themeService;\n        this._attachedView = _attachedView;\n        this.hiddenAreasModel = new HiddenAreasModel();\n        this.previousHiddenAreas = [];\n        this._editorId = editorId;\n        this._configuration = configuration;\n        this.model = model;\n        this._eventDispatcher = new ViewModelEventDispatcher();\n        this.onEvent = this._eventDispatcher.onEvent;\n        this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n        this._updateConfigurationViewLineCount = this._register(new RunOnceScheduler(() => this._updateConfigurationViewLineCountNow(), 0));\n        this._hasFocus = false;\n        this._viewportStart = ViewportStart.create(this.model);\n        this.glyphLanes = new GlyphMarginLanesModel(0);\n        if (USE_IDENTITY_LINES_COLLECTION && this.model.isTooLargeForTokenization()) {\n            this._lines = new ViewModelLinesFromModelAsIs(this.model);\n        }\n        else {\n            const options = this._configuration.options;\n            const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n            const wrappingStrategy = options.get(138 /* EditorOption.wrappingStrategy */);\n            const wrappingInfo = options.get(145 /* EditorOption.wrappingInfo */);\n            const wrappingIndent = options.get(137 /* EditorOption.wrappingIndent */);\n            const wordBreak = options.get(129 /* EditorOption.wordBreak */);\n            this._lines = new ViewModelLinesFromProjectedModel(this._editorId, this.model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, this.model.getOptions().tabSize, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak);\n        }\n        this.coordinatesConverter = this._lines.createCoordinatesConverter();\n        this._cursor = this._register(new CursorsController(model, this, this.coordinatesConverter, this.cursorConfig));\n        this.viewLayout = this._register(new ViewLayout(this._configuration, this.getLineCount(), scheduleAtNextAnimationFrame));\n        this._register(this.viewLayout.onDidScroll((e) => {\n            if (e.scrollTopChanged) {\n                this._handleVisibleLinesChanged();\n            }\n            if (e.scrollTopChanged) {\n                this._viewportStart.invalidate();\n            }\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewScrollChangedEvent(e));\n            this._eventDispatcher.emitOutgoingEvent(new ScrollChangedEvent(e.oldScrollWidth, e.oldScrollLeft, e.oldScrollHeight, e.oldScrollTop, e.scrollWidth, e.scrollLeft, e.scrollHeight, e.scrollTop));\n        }));\n        this._register(this.viewLayout.onDidContentSizeChange((e) => {\n            this._eventDispatcher.emitOutgoingEvent(e);\n        }));\n        this._decorations = new ViewModelDecorations(this._editorId, this.model, this._configuration, this._lines, this.coordinatesConverter);\n        this._registerModelEvents();\n        this._register(this._configuration.onDidChangeFast((e) => {\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                this._onConfigurationChanged(eventsCollector, e);\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n        }));\n        this._register(MinimapTokensColorTracker.getInstance().onDidChange(() => {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensColorsChangedEvent());\n        }));\n        this._register(this._themeService.onDidColorThemeChange((theme) => {\n            this._invalidateDecorationsColorCache();\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewThemeChangedEvent(theme));\n        }));\n        this._updateConfigurationViewLineCountNow();\n    }\n    dispose() {\n        // First remove listeners, as disposing the lines might end up sending\n        // model decoration changed events ... and we no longer care about them ...\n        super.dispose();\n        this._decorations.dispose();\n        this._lines.dispose();\n        this._viewportStart.dispose();\n        this._eventDispatcher.dispose();\n    }\n    createLineBreaksComputer() {\n        return this._lines.createLineBreaksComputer();\n    }\n    addViewEventHandler(eventHandler) {\n        this._eventDispatcher.addViewEventHandler(eventHandler);\n    }\n    removeViewEventHandler(eventHandler) {\n        this._eventDispatcher.removeViewEventHandler(eventHandler);\n    }\n    _updateConfigurationViewLineCountNow() {\n        this._configuration.setViewLineCount(this._lines.getViewLineCount());\n    }\n    getModelVisibleRanges() {\n        const linesViewportData = this.viewLayout.getLinesViewportData();\n        const viewVisibleRange = new Range(linesViewportData.startLineNumber, this.getLineMinColumn(linesViewportData.startLineNumber), linesViewportData.endLineNumber, this.getLineMaxColumn(linesViewportData.endLineNumber));\n        const modelVisibleRanges = this._toModelVisibleRanges(viewVisibleRange);\n        return modelVisibleRanges;\n    }\n    visibleLinesStabilized() {\n        const modelVisibleRanges = this.getModelVisibleRanges();\n        this._attachedView.setVisibleLines(modelVisibleRanges, true);\n    }\n    _handleVisibleLinesChanged() {\n        const modelVisibleRanges = this.getModelVisibleRanges();\n        this._attachedView.setVisibleLines(modelVisibleRanges, false);\n    }\n    setHasFocus(hasFocus) {\n        this._hasFocus = hasFocus;\n        this._cursor.setHasFocus(hasFocus);\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewFocusChangedEvent(hasFocus));\n        this._eventDispatcher.emitOutgoingEvent(new FocusChangedEvent(!hasFocus, hasFocus));\n    }\n    onCompositionStart() {\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionStartEvent());\n    }\n    onCompositionEnd() {\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionEndEvent());\n    }\n    _captureStableViewport() {\n        // We might need to restore the current start view range, so save it (if available)\n        // But only if the scroll position is not at the top of the file\n        if (this._viewportStart.isValid && this.viewLayout.getCurrentScrollTop() > 0) {\n            const previousViewportStartViewPosition = new Position(this._viewportStart.viewLineNumber, this.getLineMinColumn(this._viewportStart.viewLineNumber));\n            const previousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\n            return new StableViewport(previousViewportStartModelPosition, this._viewportStart.startLineDelta);\n        }\n        return new StableViewport(null, 0);\n    }\n    _onConfigurationChanged(eventsCollector, e) {\n        const stableViewport = this._captureStableViewport();\n        const options = this._configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const wrappingStrategy = options.get(138 /* EditorOption.wrappingStrategy */);\n        const wrappingInfo = options.get(145 /* EditorOption.wrappingInfo */);\n        const wrappingIndent = options.get(137 /* EditorOption.wrappingIndent */);\n        const wordBreak = options.get(129 /* EditorOption.wordBreak */);\n        if (this._lines.setWrappingSettings(fontInfo, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak)) {\n            eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n            this._cursor.onLineMappingChanged(eventsCollector);\n            this._decorations.onLineMappingChanged();\n            this.viewLayout.onFlushed(this.getLineCount());\n            this._updateConfigurationViewLineCount.schedule();\n        }\n        if (e.hasChanged(91 /* EditorOption.readOnly */)) {\n            // Must read again all decorations due to readOnly filtering\n            this._decorations.reset();\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n        }\n        if (e.hasChanged(98 /* EditorOption.renderValidationDecorations */)) {\n            this._decorations.reset();\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n        }\n        eventsCollector.emitViewEvent(new viewEvents.ViewConfigurationChangedEvent(e));\n        this.viewLayout.onConfigurationChanged(e);\n        stableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n        if (CursorConfiguration.shouldRecreate(e)) {\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n        }\n    }\n    _registerModelEvents() {\n        this._register(this.model.onDidChangeContentOrInjectedText((e) => {\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                let hadOtherModelChange = false;\n                let hadModelLineChangeThatChangedLineMapping = false;\n                const changes = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.changes : e.changes);\n                const versionId = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.versionId : null);\n                // Do a first pass to compute line mappings, and a second pass to actually interpret them\n                const lineBreaksComputer = this._lines.createLineBreaksComputer();\n                for (const change of changes) {\n                    switch (change.changeType) {\n                        case 4 /* textModelEvents.RawContentChangedType.LinesInserted */: {\n                            for (let lineIdx = 0; lineIdx < change.detail.length; lineIdx++) {\n                                const line = change.detail[lineIdx];\n                                let injectedText = change.injectedTexts[lineIdx];\n                                if (injectedText) {\n                                    injectedText = injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n                                }\n                                lineBreaksComputer.addRequest(line, injectedText, null);\n                            }\n                            break;\n                        }\n                        case 2 /* textModelEvents.RawContentChangedType.LineChanged */: {\n                            let injectedText = null;\n                            if (change.injectedText) {\n                                injectedText = change.injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n                            }\n                            lineBreaksComputer.addRequest(change.detail, injectedText, null);\n                            break;\n                        }\n                    }\n                }\n                const lineBreaks = lineBreaksComputer.finalize();\n                const lineBreakQueue = new ArrayQueue(lineBreaks);\n                for (const change of changes) {\n                    switch (change.changeType) {\n                        case 1 /* textModelEvents.RawContentChangedType.Flush */: {\n                            this._lines.onModelFlushed();\n                            eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                            this._decorations.reset();\n                            this.viewLayout.onFlushed(this.getLineCount());\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 3 /* textModelEvents.RawContentChangedType.LinesDeleted */: {\n                            const linesDeletedEvent = this._lines.onModelLinesDeleted(versionId, change.fromLineNumber, change.toLineNumber);\n                            if (linesDeletedEvent !== null) {\n                                eventsCollector.emitViewEvent(linesDeletedEvent);\n                                this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                            }\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 4 /* textModelEvents.RawContentChangedType.LinesInserted */: {\n                            const insertedLineBreaks = lineBreakQueue.takeCount(change.detail.length);\n                            const linesInsertedEvent = this._lines.onModelLinesInserted(versionId, change.fromLineNumber, change.toLineNumber, insertedLineBreaks);\n                            if (linesInsertedEvent !== null) {\n                                eventsCollector.emitViewEvent(linesInsertedEvent);\n                                this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                            }\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 2 /* textModelEvents.RawContentChangedType.LineChanged */: {\n                            const changedLineBreakData = lineBreakQueue.dequeue();\n                            const [lineMappingChanged, linesChangedEvent, linesInsertedEvent, linesDeletedEvent] = this._lines.onModelLineChanged(versionId, change.lineNumber, changedLineBreakData);\n                            hadModelLineChangeThatChangedLineMapping = lineMappingChanged;\n                            if (linesChangedEvent) {\n                                eventsCollector.emitViewEvent(linesChangedEvent);\n                            }\n                            if (linesInsertedEvent) {\n                                eventsCollector.emitViewEvent(linesInsertedEvent);\n                                this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                            }\n                            if (linesDeletedEvent) {\n                                eventsCollector.emitViewEvent(linesDeletedEvent);\n                                this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                            }\n                            break;\n                        }\n                        case 5 /* textModelEvents.RawContentChangedType.EOLChanged */: {\n                            // Nothing to do. The new version will be accepted below\n                            break;\n                        }\n                    }\n                }\n                if (versionId !== null) {\n                    this._lines.acceptVersionId(versionId);\n                }\n                this.viewLayout.onHeightMaybeChanged();\n                if (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\n                    eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                    this._cursor.onLineMappingChanged(eventsCollector);\n                    this._decorations.onLineMappingChanged();\n                }\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n            // Update the configuration and reset the centered view line\n            const viewportStartWasValid = this._viewportStart.isValid;\n            this._viewportStart.invalidate();\n            this._configuration.setModelLineCount(this.model.getLineCount());\n            this._updateConfigurationViewLineCountNow();\n            // Recover viewport\n            if (!this._hasFocus && this.model.getAttachedEditorCount() >= 2 && viewportStartWasValid) {\n                const modelRange = this.model._getTrackedRange(this._viewportStart.modelTrackedRange);\n                if (modelRange) {\n                    const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\n                    const viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n                    this.viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this._viewportStart.startLineDelta }, 1 /* ScrollType.Immediate */);\n                }\n            }\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                if (e instanceof textModelEvents.InternalModelContentChangeEvent) {\n                    eventsCollector.emitOutgoingEvent(new ModelContentChangedEvent(e.contentChangedEvent));\n                }\n                this._cursor.onModelContentChanged(eventsCollector, e);\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n            this._handleVisibleLinesChanged();\n        }));\n        this._register(this.model.onDidChangeTokens((e) => {\n            const viewRanges = [];\n            for (let j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\n                const modelRange = e.ranges[j];\n                const viewStartLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber, 1)).lineNumber;\n                const viewEndLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber, this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\n                viewRanges[j] = {\n                    fromLineNumber: viewStartLineNumber,\n                    toLineNumber: viewEndLineNumber\n                };\n            }\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensChangedEvent(viewRanges));\n            this._eventDispatcher.emitOutgoingEvent(new ModelTokensChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeLanguageConfiguration((e) => {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewLanguageConfigurationEvent());\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelLanguageConfigurationChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeLanguage((e) => {\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelLanguageChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeOptions((e) => {\n            // A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\n            if (this._lines.setTabSize(this.model.getOptions().tabSize)) {\n                try {\n                    const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                    eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                    this._cursor.onLineMappingChanged(eventsCollector);\n                    this._decorations.onLineMappingChanged();\n                    this.viewLayout.onFlushed(this.getLineCount());\n                }\n                finally {\n                    this._eventDispatcher.endEmitViewEvents();\n                }\n                this._updateConfigurationViewLineCount.schedule();\n            }\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelOptionsChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeDecorations((e) => {\n            this._decorations.onModelDecorationsChanged();\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewDecorationsChangedEvent(e));\n            this._eventDispatcher.emitOutgoingEvent(new ModelDecorationsChangedEvent(e));\n        }));\n    }\n    setHiddenAreas(ranges, source) {\n        var _a;\n        this.hiddenAreasModel.setHiddenAreas(source, ranges);\n        const mergedRanges = this.hiddenAreasModel.getMergedRanges();\n        if (mergedRanges === this.previousHiddenAreas) {\n            return;\n        }\n        this.previousHiddenAreas = mergedRanges;\n        const stableViewport = this._captureStableViewport();\n        let lineMappingChanged = false;\n        try {\n            const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n            lineMappingChanged = this._lines.setHiddenAreas(mergedRanges);\n            if (lineMappingChanged) {\n                eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                this._cursor.onLineMappingChanged(eventsCollector);\n                this._decorations.onLineMappingChanged();\n                this.viewLayout.onFlushed(this.getLineCount());\n                this.viewLayout.onHeightMaybeChanged();\n            }\n            const firstModelLineInViewPort = (_a = stableViewport.viewportStartModelPosition) === null || _a === void 0 ? void 0 : _a.lineNumber;\n            const firstModelLineIsHidden = firstModelLineInViewPort && mergedRanges.some(range => range.startLineNumber <= firstModelLineInViewPort && firstModelLineInViewPort <= range.endLineNumber);\n            if (!firstModelLineIsHidden) {\n                stableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n            }\n        }\n        finally {\n            this._eventDispatcher.endEmitViewEvents();\n        }\n        this._updateConfigurationViewLineCount.schedule();\n        if (lineMappingChanged) {\n            this._eventDispatcher.emitOutgoingEvent(new HiddenAreasChangedEvent());\n        }\n    }\n    getVisibleRangesPlusViewportAboveBelow() {\n        const layoutInfo = this._configuration.options.get(144 /* EditorOption.layoutInfo */);\n        const lineHeight = this._configuration.options.get(67 /* EditorOption.lineHeight */);\n        const linesAround = Math.max(20, Math.round(layoutInfo.height / lineHeight));\n        const partialData = this.viewLayout.getLinesViewportData();\n        const startViewLineNumber = Math.max(1, partialData.completelyVisibleStartLineNumber - linesAround);\n        const endViewLineNumber = Math.min(this.getLineCount(), partialData.completelyVisibleEndLineNumber + linesAround);\n        return this._toModelVisibleRanges(new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber)));\n    }\n    getVisibleRanges() {\n        const visibleViewRange = this.getCompletelyVisibleViewRange();\n        return this._toModelVisibleRanges(visibleViewRange);\n    }\n    getHiddenAreas() {\n        return this._lines.getHiddenAreas();\n    }\n    _toModelVisibleRanges(visibleViewRange) {\n        const visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n        const hiddenAreas = this._lines.getHiddenAreas();\n        if (hiddenAreas.length === 0) {\n            return [visibleRange];\n        }\n        const result = [];\n        let resultLen = 0;\n        let startLineNumber = visibleRange.startLineNumber;\n        let startColumn = visibleRange.startColumn;\n        const endLineNumber = visibleRange.endLineNumber;\n        const endColumn = visibleRange.endColumn;\n        for (let i = 0, len = hiddenAreas.length; i < len; i++) {\n            const hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\n            const hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\n            if (hiddenEndLineNumber < startLineNumber) {\n                continue;\n            }\n            if (hiddenStartLineNumber > endLineNumber) {\n                continue;\n            }\n            if (startLineNumber < hiddenStartLineNumber) {\n                result[resultLen++] = new Range(startLineNumber, startColumn, hiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1));\n            }\n            startLineNumber = hiddenEndLineNumber + 1;\n            startColumn = 1;\n        }\n        if (startLineNumber < endLineNumber || (startLineNumber === endLineNumber && startColumn < endColumn)) {\n            result[resultLen++] = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n        }\n        return result;\n    }\n    getCompletelyVisibleViewRange() {\n        const partialData = this.viewLayout.getLinesViewportData();\n        const startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n        const endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    }\n    getCompletelyVisibleViewRangeAtScrollTop(scrollTop) {\n        const partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\n        const startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n        const endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    }\n    saveState() {\n        const compatViewState = this.viewLayout.saveState();\n        const scrollTop = compatViewState.scrollTop;\n        const firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\n        const firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\n        const firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\n        return {\n            scrollLeft: compatViewState.scrollLeft,\n            firstPosition: firstPosition,\n            firstPositionDeltaTop: firstPositionDeltaTop\n        };\n    }\n    reduceRestoreState(state) {\n        if (typeof state.firstPosition === 'undefined') {\n            // This is a view state serialized by an older version\n            return this._reduceRestoreStateCompatibility(state);\n        }\n        const modelPosition = this.model.validatePosition(state.firstPosition);\n        const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n        const scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\n        return {\n            scrollLeft: state.scrollLeft,\n            scrollTop: scrollTop\n        };\n    }\n    _reduceRestoreStateCompatibility(state) {\n        return {\n            scrollLeft: state.scrollLeft,\n            scrollTop: state.scrollTopWithoutViewZones\n        };\n    }\n    getTabSize() {\n        return this.model.getOptions().tabSize;\n    }\n    getLineCount() {\n        return this._lines.getViewLineCount();\n    }\n    /**\n     * Gives a hint that a lot of requests are about to come in for these line numbers.\n     */\n    setViewport(startLineNumber, endLineNumber, centeredLineNumber) {\n        this._viewportStart.update(this, startLineNumber);\n    }\n    getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber) {\n        return this._lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\n    }\n    getLinesIndentGuides(startLineNumber, endLineNumber) {\n        return this._lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\n    }\n    getBracketGuidesInRangeByLine(startLineNumber, endLineNumber, activePosition, options) {\n        return this._lines.getViewLinesBracketGuides(startLineNumber, endLineNumber, activePosition, options);\n    }\n    getLineContent(lineNumber) {\n        return this._lines.getViewLineContent(lineNumber);\n    }\n    getLineLength(lineNumber) {\n        return this._lines.getViewLineLength(lineNumber);\n    }\n    getLineMinColumn(lineNumber) {\n        return this._lines.getViewLineMinColumn(lineNumber);\n    }\n    getLineMaxColumn(lineNumber) {\n        return this._lines.getViewLineMaxColumn(lineNumber);\n    }\n    getLineFirstNonWhitespaceColumn(lineNumber) {\n        const result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 1;\n    }\n    getLineLastNonWhitespaceColumn(lineNumber) {\n        const result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 2;\n    }\n    getMinimapDecorationsInRange(range) {\n        return this._decorations.getMinimapDecorationsInRange(range);\n    }\n    getDecorationsInViewport(visibleRange) {\n        return this._decorations.getDecorationsViewportData(visibleRange).decorations;\n    }\n    getInjectedTextAt(viewPosition) {\n        return this._lines.getInjectedTextAt(viewPosition);\n    }\n    getViewportViewLineRenderingData(visibleRange, lineNumber) {\n        const allInlineDecorations = this._decorations.getDecorationsViewportData(visibleRange).inlineDecorations;\n        const inlineDecorations = allInlineDecorations[lineNumber - visibleRange.startLineNumber];\n        return this._getViewLineRenderingData(lineNumber, inlineDecorations);\n    }\n    getViewLineRenderingData(lineNumber) {\n        const inlineDecorations = this._decorations.getInlineDecorationsOnLine(lineNumber);\n        return this._getViewLineRenderingData(lineNumber, inlineDecorations);\n    }\n    _getViewLineRenderingData(lineNumber, inlineDecorations) {\n        const mightContainRTL = this.model.mightContainRTL();\n        const mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\n        const tabSize = this.getTabSize();\n        const lineData = this._lines.getViewLineData(lineNumber);\n        if (lineData.inlineDecorations) {\n            inlineDecorations = [\n                ...inlineDecorations,\n                ...lineData.inlineDecorations.map(d => d.toInlineDecoration(lineNumber))\n            ];\n        }\n        return new ViewLineRenderingData(lineData.minColumn, lineData.maxColumn, lineData.content, lineData.continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, lineData.tokens, inlineDecorations, tabSize, lineData.startVisibleColumn);\n    }\n    getViewLineData(lineNumber) {\n        return this._lines.getViewLineData(lineNumber);\n    }\n    getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed) {\n        const result = this._lines.getViewLinesData(startLineNumber, endLineNumber, needed);\n        return new MinimapLinesRenderingData(this.getTabSize(), result);\n    }\n    getAllOverviewRulerDecorations(theme) {\n        const decorations = this.model.getOverviewRulerDecorations(this._editorId, filterValidationDecorations(this._configuration.options));\n        const result = new OverviewRulerDecorations();\n        for (const decoration of decorations) {\n            const decorationOptions = decoration.options;\n            const opts = decorationOptions.overviewRuler;\n            if (!opts) {\n                continue;\n            }\n            const lane = opts.position;\n            if (lane === 0) {\n                continue;\n            }\n            const color = opts.getColor(theme.value);\n            const viewStartLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.startLineNumber, decoration.range.startColumn);\n            const viewEndLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.endLineNumber, decoration.range.endColumn);\n            result.accept(color, decorationOptions.zIndex, viewStartLineNumber, viewEndLineNumber, lane);\n        }\n        return result.asArray;\n    }\n    _invalidateDecorationsColorCache() {\n        const decorations = this.model.getOverviewRulerDecorations();\n        for (const decoration of decorations) {\n            const opts1 = decoration.options.overviewRuler;\n            opts1 === null || opts1 === void 0 ? void 0 : opts1.invalidateCachedColor();\n            const opts2 = decoration.options.minimap;\n            opts2 === null || opts2 === void 0 ? void 0 : opts2.invalidateCachedColor();\n        }\n    }\n    getValueInRange(range, eol) {\n        const modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n        return this.model.getValueInRange(modelRange, eol);\n    }\n    getValueLengthInRange(range, eol) {\n        const modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n        return this.model.getValueLengthInRange(modelRange, eol);\n    }\n    modifyPosition(position, offset) {\n        const modelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(position);\n        const resultModelPosition = this.model.modifyPosition(modelPosition, offset);\n        return this.coordinatesConverter.convertModelPositionToViewPosition(resultModelPosition);\n    }\n    deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt) {\n        const modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\n        if (this.model.getEOL().length === 2) {\n            // This model uses CRLF, so the delta must take that into account\n            if (deltaOffset < 0) {\n                deltaOffset -= lineFeedCnt;\n            }\n            else {\n                deltaOffset += lineFeedCnt;\n            }\n        }\n        const modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\n        const resultOffset = modelAnchorOffset + deltaOffset;\n        return this.model.getPositionAt(resultOffset);\n    }\n    getPlainTextToCopy(modelRanges, emptySelectionClipboard, forceCRLF) {\n        const newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\n        modelRanges = modelRanges.slice(0);\n        modelRanges.sort(Range.compareRangesUsingStarts);\n        let hasEmptyRange = false;\n        let hasNonEmptyRange = false;\n        for (const range of modelRanges) {\n            if (range.isEmpty()) {\n                hasEmptyRange = true;\n            }\n            else {\n                hasNonEmptyRange = true;\n            }\n        }\n        if (!hasNonEmptyRange) {\n            // all ranges are empty\n            if (!emptySelectionClipboard) {\n                return '';\n            }\n            const modelLineNumbers = modelRanges.map((r) => r.startLineNumber);\n            let result = '';\n            for (let i = 0; i < modelLineNumbers.length; i++) {\n                if (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\n                    continue;\n                }\n                result += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\n            }\n            return result;\n        }\n        if (hasEmptyRange && emptySelectionClipboard) {\n            // mixed empty selections and non-empty selections\n            const result = [];\n            let prevModelLineNumber = 0;\n            for (const modelRange of modelRanges) {\n                const modelLineNumber = modelRange.startLineNumber;\n                if (modelRange.isEmpty()) {\n                    if (modelLineNumber !== prevModelLineNumber) {\n                        result.push(this.model.getLineContent(modelLineNumber));\n                    }\n                }\n                else {\n                    result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* EndOfLinePreference.CRLF */ : 0 /* EndOfLinePreference.TextDefined */));\n                }\n                prevModelLineNumber = modelLineNumber;\n            }\n            return result.length === 1 ? result[0] : result;\n        }\n        const result = [];\n        for (const modelRange of modelRanges) {\n            if (!modelRange.isEmpty()) {\n                result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* EndOfLinePreference.CRLF */ : 0 /* EndOfLinePreference.TextDefined */));\n            }\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n    getRichTextToCopy(modelRanges, emptySelectionClipboard) {\n        const languageId = this.model.getLanguageId();\n        if (languageId === PLAINTEXT_LANGUAGE_ID) {\n            return null;\n        }\n        if (modelRanges.length !== 1) {\n            // no multiple selection support at this time\n            return null;\n        }\n        let range = modelRanges[0];\n        if (range.isEmpty()) {\n            if (!emptySelectionClipboard) {\n                // nothing to copy\n                return null;\n            }\n            const lineNumber = range.startLineNumber;\n            range = new Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\n        }\n        const fontInfo = this._configuration.options.get(50 /* EditorOption.fontInfo */);\n        const colorMap = this._getColorMap();\n        const hasBadChars = (/[:;\\\\\\/<>]/.test(fontInfo.fontFamily));\n        const useDefaultFontFamily = (hasBadChars || fontInfo.fontFamily === EDITOR_FONT_DEFAULTS.fontFamily);\n        let fontFamily;\n        if (useDefaultFontFamily) {\n            fontFamily = EDITOR_FONT_DEFAULTS.fontFamily;\n        }\n        else {\n            fontFamily = fontInfo.fontFamily;\n            fontFamily = fontFamily.replace(/\"/g, '\\'');\n            const hasQuotesOrIsList = /[,']/.test(fontFamily);\n            if (!hasQuotesOrIsList) {\n                const needsQuotes = /[+ ]/.test(fontFamily);\n                if (needsQuotes) {\n                    fontFamily = `'${fontFamily}'`;\n                }\n            }\n            fontFamily = `${fontFamily}, ${EDITOR_FONT_DEFAULTS.fontFamily}`;\n        }\n        return {\n            mode: languageId,\n            html: (`<div style=\"`\n                + `color: ${colorMap[1 /* ColorId.DefaultForeground */]};`\n                + `background-color: ${colorMap[2 /* ColorId.DefaultBackground */]};`\n                + `font-family: ${fontFamily};`\n                + `font-weight: ${fontInfo.fontWeight};`\n                + `font-size: ${fontInfo.fontSize}px;`\n                + `line-height: ${fontInfo.lineHeight}px;`\n                + `white-space: pre;`\n                + `\">`\n                + this._getHTMLToCopy(range, colorMap)\n                + '</div>')\n        };\n    }\n    _getHTMLToCopy(modelRange, colorMap) {\n        const startLineNumber = modelRange.startLineNumber;\n        const startColumn = modelRange.startColumn;\n        const endLineNumber = modelRange.endLineNumber;\n        const endColumn = modelRange.endColumn;\n        const tabSize = this.getTabSize();\n        let result = '';\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const lineTokens = this.model.tokenization.getLineTokens(lineNumber);\n            const lineContent = lineTokens.getLineContent();\n            const startOffset = (lineNumber === startLineNumber ? startColumn - 1 : 0);\n            const endOffset = (lineNumber === endLineNumber ? endColumn - 1 : lineContent.length);\n            if (lineContent === '') {\n                result += '<br>';\n            }\n            else {\n                result += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\n            }\n        }\n        return result;\n    }\n    _getColorMap() {\n        const colorMap = TokenizationRegistry.getColorMap();\n        const result = ['#000000'];\n        if (colorMap) {\n            for (let i = 1, len = colorMap.length; i < len; i++) {\n                result[i] = Color.Format.CSS.formatHex(colorMap[i]);\n            }\n        }\n        return result;\n    }\n    //#region cursor operations\n    getPrimaryCursorState() {\n        return this._cursor.getPrimaryCursorState();\n    }\n    getLastAddedCursorIndex() {\n        return this._cursor.getLastAddedCursorIndex();\n    }\n    getCursorStates() {\n        return this._cursor.getCursorStates();\n    }\n    setCursorStates(source, reason, states) {\n        return this._withViewEventsCollector(eventsCollector => this._cursor.setStates(eventsCollector, source, reason, states));\n    }\n    getCursorColumnSelectData() {\n        return this._cursor.getCursorColumnSelectData();\n    }\n    getCursorAutoClosedCharacters() {\n        return this._cursor.getAutoClosedCharacters();\n    }\n    setCursorColumnSelectData(columnSelectData) {\n        this._cursor.setCursorColumnSelectData(columnSelectData);\n    }\n    getPrevEditOperationType() {\n        return this._cursor.getPrevEditOperationType();\n    }\n    setPrevEditOperationType(type) {\n        this._cursor.setPrevEditOperationType(type);\n    }\n    getSelection() {\n        return this._cursor.getSelection();\n    }\n    getSelections() {\n        return this._cursor.getSelections();\n    }\n    getPosition() {\n        return this._cursor.getPrimaryCursorState().modelState.position;\n    }\n    setSelections(source, selections, reason = 0 /* CursorChangeReason.NotSet */) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.setSelections(eventsCollector, source, selections, reason));\n    }\n    saveCursorState() {\n        return this._cursor.saveState();\n    }\n    restoreCursorState(states) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.restoreState(eventsCollector, states));\n    }\n    _executeCursorEdit(callback) {\n        if (this._cursor.context.cursorConfig.readOnly) {\n            // we cannot edit when read only...\n            this._eventDispatcher.emitOutgoingEvent(new ReadOnlyEditAttemptEvent());\n            return;\n        }\n        this._withViewEventsCollector(callback);\n    }\n    executeEdits(source, edits, cursorStateComputer) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeEdits(eventsCollector, source, edits, cursorStateComputer));\n    }\n    startComposition() {\n        this._executeCursorEdit(eventsCollector => this._cursor.startComposition(eventsCollector));\n    }\n    endComposition(source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.endComposition(eventsCollector, source));\n    }\n    type(text, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.type(eventsCollector, text, source));\n    }\n    compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.compositionType(eventsCollector, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source));\n    }\n    paste(text, pasteOnNewLine, multicursorText, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.paste(eventsCollector, text, pasteOnNewLine, multicursorText, source));\n    }\n    cut(source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.cut(eventsCollector, source));\n    }\n    executeCommand(command, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeCommand(eventsCollector, command, source));\n    }\n    executeCommands(commands, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeCommands(eventsCollector, commands, source));\n    }\n    revealPrimaryCursor(source, revealHorizontal, minimalReveal = false) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.revealPrimary(eventsCollector, source, minimalReveal, 0 /* viewEvents.VerticalRevealType.Simple */, revealHorizontal, 0 /* ScrollType.Smooth */));\n    }\n    revealTopMostCursor(source) {\n        const viewPosition = this._cursor.getTopMostViewPosition();\n        const viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, 0 /* viewEvents.VerticalRevealType.Simple */, true, 0 /* ScrollType.Smooth */)));\n    }\n    revealBottomMostCursor(source) {\n        const viewPosition = this._cursor.getBottomMostViewPosition();\n        const viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, 0 /* viewEvents.VerticalRevealType.Simple */, true, 0 /* ScrollType.Smooth */)));\n    }\n    revealRange(source, revealHorizontal, viewRange, verticalType, scrollType) {\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, verticalType, revealHorizontal, scrollType)));\n    }\n    //#endregion\n    //#region viewLayout\n    changeWhitespace(callback) {\n        const hadAChange = this.viewLayout.changeWhitespace(callback);\n        if (hadAChange) {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewZonesChangedEvent());\n            this._eventDispatcher.emitOutgoingEvent(new ViewZonesChangedEvent());\n        }\n    }\n    //#endregion\n    _withViewEventsCollector(callback) {\n        try {\n            const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n            return callback(eventsCollector);\n        }\n        finally {\n            this._eventDispatcher.endEmitViewEvents();\n        }\n    }\n    normalizePosition(position, affinity) {\n        return this._lines.normalizePosition(position, affinity);\n    }\n    /**\n     * Gets the column at which indentation stops at a given line.\n     * @internal\n    */\n    getLineIndentColumn(lineNumber) {\n        return this._lines.getLineIndentColumn(lineNumber);\n    }\n}\nclass ViewportStart {\n    static create(model) {\n        const viewportStartLineTrackedRange = model._setTrackedRange(null, new Range(1, 1, 1, 1), 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n        return new ViewportStart(model, 1, false, viewportStartLineTrackedRange, 0);\n    }\n    get viewLineNumber() {\n        return this._viewLineNumber;\n    }\n    get isValid() {\n        return this._isValid;\n    }\n    get modelTrackedRange() {\n        return this._modelTrackedRange;\n    }\n    get startLineDelta() {\n        return this._startLineDelta;\n    }\n    constructor(_model, _viewLineNumber, _isValid, _modelTrackedRange, _startLineDelta) {\n        this._model = _model;\n        this._viewLineNumber = _viewLineNumber;\n        this._isValid = _isValid;\n        this._modelTrackedRange = _modelTrackedRange;\n        this._startLineDelta = _startLineDelta;\n    }\n    dispose() {\n        this._model._setTrackedRange(this._modelTrackedRange, null, 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n    }\n    update(viewModel, startLineNumber) {\n        const position = viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber, viewModel.getLineMinColumn(startLineNumber)));\n        const viewportStartLineTrackedRange = viewModel.model._setTrackedRange(this._modelTrackedRange, new Range(position.lineNumber, position.column, position.lineNumber, position.column), 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n        const viewportStartLineTop = viewModel.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\n        const scrollTop = viewModel.viewLayout.getCurrentScrollTop();\n        this._viewLineNumber = startLineNumber;\n        this._isValid = true;\n        this._modelTrackedRange = viewportStartLineTrackedRange;\n        this._startLineDelta = scrollTop - viewportStartLineTop;\n    }\n    invalidate() {\n        this._isValid = false;\n    }\n}\nclass OverviewRulerDecorations {\n    constructor() {\n        this._asMap = Object.create(null);\n        this.asArray = [];\n    }\n    accept(color, zIndex, startLineNumber, endLineNumber, lane) {\n        const prevGroup = this._asMap[color];\n        if (prevGroup) {\n            const prevData = prevGroup.data;\n            const prevLane = prevData[prevData.length - 3];\n            const prevEndLineNumber = prevData[prevData.length - 1];\n            if (prevLane === lane && prevEndLineNumber + 1 >= startLineNumber) {\n                // merge into prev\n                if (endLineNumber > prevEndLineNumber) {\n                    prevData[prevData.length - 1] = endLineNumber;\n                }\n                return;\n            }\n            // push\n            prevData.push(lane, startLineNumber, endLineNumber);\n        }\n        else {\n            const group = new OverviewRulerDecorationsGroup(color, zIndex, [lane, startLineNumber, endLineNumber]);\n            this._asMap[color] = group;\n            this.asArray.push(group);\n        }\n    }\n}\nclass HiddenAreasModel {\n    constructor() {\n        this.hiddenAreas = new Map();\n        this.shouldRecompute = false;\n        this.ranges = [];\n    }\n    setHiddenAreas(source, ranges) {\n        const existing = this.hiddenAreas.get(source);\n        if (existing && rangeArraysEqual(existing, ranges)) {\n            return;\n        }\n        this.hiddenAreas.set(source, ranges);\n        this.shouldRecompute = true;\n    }\n    /**\n     * The returned array is immutable.\n    */\n    getMergedRanges() {\n        if (!this.shouldRecompute) {\n            return this.ranges;\n        }\n        this.shouldRecompute = false;\n        const newRanges = Array.from(this.hiddenAreas.values()).reduce((r, hiddenAreas) => mergeLineRangeArray(r, hiddenAreas), []);\n        if (rangeArraysEqual(this.ranges, newRanges)) {\n            return this.ranges;\n        }\n        this.ranges = newRanges;\n        return this.ranges;\n    }\n}\nfunction mergeLineRangeArray(arr1, arr2) {\n    const result = [];\n    let i = 0;\n    let j = 0;\n    while (i < arr1.length && j < arr2.length) {\n        const item1 = arr1[i];\n        const item2 = arr2[j];\n        if (item1.endLineNumber < item2.startLineNumber - 1) {\n            result.push(arr1[i++]);\n        }\n        else if (item2.endLineNumber < item1.startLineNumber - 1) {\n            result.push(arr2[j++]);\n        }\n        else {\n            const startLineNumber = Math.min(item1.startLineNumber, item2.startLineNumber);\n            const endLineNumber = Math.max(item1.endLineNumber, item2.endLineNumber);\n            result.push(new Range(startLineNumber, 1, endLineNumber, 1));\n            i++;\n            j++;\n        }\n    }\n    while (i < arr1.length) {\n        result.push(arr1[i++]);\n    }\n    while (j < arr2.length) {\n        result.push(arr2[j++]);\n    }\n    return result;\n}\nfunction rangeArraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (!arr1[i].equalsRange(arr2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Maintain a stable viewport by trying to keep the first line in the viewport constant.\n */\nclass StableViewport {\n    constructor(viewportStartModelPosition, startLineDelta) {\n        this.viewportStartModelPosition = viewportStartModelPosition;\n        this.startLineDelta = startLineDelta;\n    }\n    recoverViewportStart(coordinatesConverter, viewLayout) {\n        if (!this.viewportStartModelPosition) {\n            return;\n        }\n        const viewPosition = coordinatesConverter.convertModelPositionToViewPosition(this.viewportStartModelPosition);\n        const viewPositionTop = viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n        viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this.startLineDelta }, 1 /* ScrollType.Immediate */);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { CursorCollection } from './cursorCollection.js';\nimport { CursorState, EditOperationResult } from '../cursorCommon.js';\nimport { CursorContext } from './cursorContext.js';\nimport { DeleteOperations } from './cursorDeleteOperations.js';\nimport { CompositionOutcome, TypeOperations, TypeWithAutoClosingCommand } from './cursorTypeOperations.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { ModelInjectedTextChangedEvent } from '../textModelEvents.js';\nimport { ViewCursorStateChangedEvent, ViewRevealRangeRequestEvent } from '../viewEvents.js';\nimport { dispose, Disposable } from '../../../base/common/lifecycle.js';\nimport { CursorStateChangedEvent } from '../viewModelEventDispatcher.js';\nexport class CursorsController extends Disposable {\n    constructor(model, viewModel, coordinatesConverter, cursorConfig) {\n        super();\n        this._model = model;\n        this._knownModelVersionId = this._model.getVersionId();\n        this._viewModel = viewModel;\n        this._coordinatesConverter = coordinatesConverter;\n        this.context = new CursorContext(this._model, this._viewModel, this._coordinatesConverter, cursorConfig);\n        this._cursors = new CursorCollection(this.context);\n        this._hasFocus = false;\n        this._isHandling = false;\n        this._compositionState = null;\n        this._columnSelectData = null;\n        this._autoClosedActions = [];\n        this._prevEditOperationType = 0 /* EditOperationType.Other */;\n    }\n    dispose() {\n        this._cursors.dispose();\n        this._autoClosedActions = dispose(this._autoClosedActions);\n        super.dispose();\n    }\n    updateConfiguration(cursorConfig) {\n        this.context = new CursorContext(this._model, this._viewModel, this._coordinatesConverter, cursorConfig);\n        this._cursors.updateContext(this.context);\n    }\n    onLineMappingChanged(eventsCollector) {\n        if (this._knownModelVersionId !== this._model.getVersionId()) {\n            // There are model change events that I didn't yet receive.\n            //\n            // This can happen when editing the model, and the view model receives the change events first,\n            // and the view model emits line mapping changed events, all before the cursor gets a chance to\n            // recover from markers.\n            //\n            // The model change listener above will be called soon and we'll ensure a valid cursor state there.\n            return;\n        }\n        // Ensure valid state\n        this.setStates(eventsCollector, 'viewModel', 0 /* CursorChangeReason.NotSet */, this.getCursorStates());\n    }\n    setHasFocus(hasFocus) {\n        this._hasFocus = hasFocus;\n    }\n    _validateAutoClosedActions() {\n        if (this._autoClosedActions.length > 0) {\n            const selections = this._cursors.getSelections();\n            for (let i = 0; i < this._autoClosedActions.length; i++) {\n                const autoClosedAction = this._autoClosedActions[i];\n                if (!autoClosedAction.isValid(selections)) {\n                    autoClosedAction.dispose();\n                    this._autoClosedActions.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n    }\n    // ------ some getters/setters\n    getPrimaryCursorState() {\n        return this._cursors.getPrimaryCursor();\n    }\n    getLastAddedCursorIndex() {\n        return this._cursors.getLastAddedCursorIndex();\n    }\n    getCursorStates() {\n        return this._cursors.getAll();\n    }\n    setStates(eventsCollector, source, reason, states) {\n        let reachedMaxCursorCount = false;\n        const multiCursorLimit = this.context.cursorConfig.multiCursorLimit;\n        if (states !== null && states.length > multiCursorLimit) {\n            states = states.slice(0, multiCursorLimit);\n            reachedMaxCursorCount = true;\n        }\n        const oldState = CursorModelState.from(this._model, this);\n        this._cursors.setStates(states);\n        this._cursors.normalize();\n        this._columnSelectData = null;\n        this._validateAutoClosedActions();\n        return this._emitStateChangedIfNecessary(eventsCollector, source, reason, oldState, reachedMaxCursorCount);\n    }\n    setCursorColumnSelectData(columnSelectData) {\n        this._columnSelectData = columnSelectData;\n    }\n    revealPrimary(eventsCollector, source, minimalReveal, verticalType, revealHorizontal, scrollType) {\n        const viewPositions = this._cursors.getViewPositions();\n        let revealViewRange = null;\n        let revealViewSelections = null;\n        if (viewPositions.length > 1) {\n            revealViewSelections = this._cursors.getViewSelections();\n        }\n        else {\n            revealViewRange = Range.fromPositions(viewPositions[0], viewPositions[0]);\n        }\n        eventsCollector.emitViewEvent(new ViewRevealRangeRequestEvent(source, minimalReveal, revealViewRange, revealViewSelections, verticalType, revealHorizontal, scrollType));\n    }\n    saveState() {\n        const result = [];\n        const selections = this._cursors.getSelections();\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            result.push({\n                inSelectionMode: !selection.isEmpty(),\n                selectionStart: {\n                    lineNumber: selection.selectionStartLineNumber,\n                    column: selection.selectionStartColumn,\n                },\n                position: {\n                    lineNumber: selection.positionLineNumber,\n                    column: selection.positionColumn,\n                }\n            });\n        }\n        return result;\n    }\n    restoreState(eventsCollector, states) {\n        const desiredSelections = [];\n        for (let i = 0, len = states.length; i < len; i++) {\n            const state = states[i];\n            let positionLineNumber = 1;\n            let positionColumn = 1;\n            // Avoid missing properties on the literal\n            if (state.position && state.position.lineNumber) {\n                positionLineNumber = state.position.lineNumber;\n            }\n            if (state.position && state.position.column) {\n                positionColumn = state.position.column;\n            }\n            let selectionStartLineNumber = positionLineNumber;\n            let selectionStartColumn = positionColumn;\n            // Avoid missing properties on the literal\n            if (state.selectionStart && state.selectionStart.lineNumber) {\n                selectionStartLineNumber = state.selectionStart.lineNumber;\n            }\n            if (state.selectionStart && state.selectionStart.column) {\n                selectionStartColumn = state.selectionStart.column;\n            }\n            desiredSelections.push({\n                selectionStartLineNumber: selectionStartLineNumber,\n                selectionStartColumn: selectionStartColumn,\n                positionLineNumber: positionLineNumber,\n                positionColumn: positionColumn\n            });\n        }\n        this.setStates(eventsCollector, 'restoreState', 0 /* CursorChangeReason.NotSet */, CursorState.fromModelSelections(desiredSelections));\n        this.revealPrimary(eventsCollector, 'restoreState', false, 0 /* VerticalRevealType.Simple */, true, 1 /* editorCommon.ScrollType.Immediate */);\n    }\n    onModelContentChanged(eventsCollector, event) {\n        if (event instanceof ModelInjectedTextChangedEvent) {\n            // If injected texts change, the view positions of all cursors need to be updated.\n            if (this._isHandling) {\n                // The view positions will be updated when handling finishes\n                return;\n            }\n            // setStates might remove markers, which could trigger a decoration change.\n            // If there are injected text decorations for that line, `onModelContentChanged` is emitted again\n            // and an endless recursion happens.\n            // _isHandling prevents that.\n            this._isHandling = true;\n            try {\n                this.setStates(eventsCollector, 'modelChange', 0 /* CursorChangeReason.NotSet */, this.getCursorStates());\n            }\n            finally {\n                this._isHandling = false;\n            }\n        }\n        else {\n            const e = event.rawContentChangedEvent;\n            this._knownModelVersionId = e.versionId;\n            if (this._isHandling) {\n                return;\n            }\n            const hadFlushEvent = e.containsEvent(1 /* RawContentChangedType.Flush */);\n            this._prevEditOperationType = 0 /* EditOperationType.Other */;\n            if (hadFlushEvent) {\n                // a model.setValue() was called\n                this._cursors.dispose();\n                this._cursors = new CursorCollection(this.context);\n                this._validateAutoClosedActions();\n                this._emitStateChangedIfNecessary(eventsCollector, 'model', 1 /* CursorChangeReason.ContentFlush */, null, false);\n            }\n            else {\n                if (this._hasFocus && e.resultingSelection && e.resultingSelection.length > 0) {\n                    const cursorState = CursorState.fromModelSelections(e.resultingSelection);\n                    if (this.setStates(eventsCollector, 'modelChange', e.isUndoing ? 5 /* CursorChangeReason.Undo */ : e.isRedoing ? 6 /* CursorChangeReason.Redo */ : 2 /* CursorChangeReason.RecoverFromMarkers */, cursorState)) {\n                        this.revealPrimary(eventsCollector, 'modelChange', false, 0 /* VerticalRevealType.Simple */, true, 0 /* editorCommon.ScrollType.Smooth */);\n                    }\n                }\n                else {\n                    const selectionsFromMarkers = this._cursors.readSelectionFromMarkers();\n                    this.setStates(eventsCollector, 'modelChange', 2 /* CursorChangeReason.RecoverFromMarkers */, CursorState.fromModelSelections(selectionsFromMarkers));\n                }\n            }\n        }\n    }\n    getSelection() {\n        return this._cursors.getPrimaryCursor().modelState.selection;\n    }\n    getTopMostViewPosition() {\n        return this._cursors.getTopMostViewPosition();\n    }\n    getBottomMostViewPosition() {\n        return this._cursors.getBottomMostViewPosition();\n    }\n    getCursorColumnSelectData() {\n        if (this._columnSelectData) {\n            return this._columnSelectData;\n        }\n        const primaryCursor = this._cursors.getPrimaryCursor();\n        const viewSelectionStart = primaryCursor.viewState.selectionStart.getStartPosition();\n        const viewPosition = primaryCursor.viewState.position;\n        return {\n            isReal: false,\n            fromViewLineNumber: viewSelectionStart.lineNumber,\n            fromViewVisualColumn: this.context.cursorConfig.visibleColumnFromColumn(this._viewModel, viewSelectionStart),\n            toViewLineNumber: viewPosition.lineNumber,\n            toViewVisualColumn: this.context.cursorConfig.visibleColumnFromColumn(this._viewModel, viewPosition),\n        };\n    }\n    getSelections() {\n        return this._cursors.getSelections();\n    }\n    setSelections(eventsCollector, source, selections, reason) {\n        this.setStates(eventsCollector, source, reason, CursorState.fromModelSelections(selections));\n    }\n    getPrevEditOperationType() {\n        return this._prevEditOperationType;\n    }\n    setPrevEditOperationType(type) {\n        this._prevEditOperationType = type;\n    }\n    // ------ auxiliary handling logic\n    _pushAutoClosedAction(autoClosedCharactersRanges, autoClosedEnclosingRanges) {\n        const autoClosedCharactersDeltaDecorations = [];\n        const autoClosedEnclosingDeltaDecorations = [];\n        for (let i = 0, len = autoClosedCharactersRanges.length; i < len; i++) {\n            autoClosedCharactersDeltaDecorations.push({\n                range: autoClosedCharactersRanges[i],\n                options: {\n                    description: 'auto-closed-character',\n                    inlineClassName: 'auto-closed-character',\n                    stickiness: 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */\n                }\n            });\n            autoClosedEnclosingDeltaDecorations.push({\n                range: autoClosedEnclosingRanges[i],\n                options: {\n                    description: 'auto-closed-enclosing',\n                    stickiness: 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */\n                }\n            });\n        }\n        const autoClosedCharactersDecorations = this._model.deltaDecorations([], autoClosedCharactersDeltaDecorations);\n        const autoClosedEnclosingDecorations = this._model.deltaDecorations([], autoClosedEnclosingDeltaDecorations);\n        this._autoClosedActions.push(new AutoClosedAction(this._model, autoClosedCharactersDecorations, autoClosedEnclosingDecorations));\n    }\n    _executeEditOperation(opResult) {\n        if (!opResult) {\n            // Nothing to execute\n            return;\n        }\n        if (opResult.shouldPushStackElementBefore) {\n            this._model.pushStackElement();\n        }\n        const result = CommandExecutor.executeCommands(this._model, this._cursors.getSelections(), opResult.commands);\n        if (result) {\n            // The commands were applied correctly\n            this._interpretCommandResult(result);\n            // Check for auto-closing closed characters\n            const autoClosedCharactersRanges = [];\n            const autoClosedEnclosingRanges = [];\n            for (let i = 0; i < opResult.commands.length; i++) {\n                const command = opResult.commands[i];\n                if (command instanceof TypeWithAutoClosingCommand && command.enclosingRange && command.closeCharacterRange) {\n                    autoClosedCharactersRanges.push(command.closeCharacterRange);\n                    autoClosedEnclosingRanges.push(command.enclosingRange);\n                }\n            }\n            if (autoClosedCharactersRanges.length > 0) {\n                this._pushAutoClosedAction(autoClosedCharactersRanges, autoClosedEnclosingRanges);\n            }\n            this._prevEditOperationType = opResult.type;\n        }\n        if (opResult.shouldPushStackElementAfter) {\n            this._model.pushStackElement();\n        }\n    }\n    _interpretCommandResult(cursorState) {\n        if (!cursorState || cursorState.length === 0) {\n            cursorState = this._cursors.readSelectionFromMarkers();\n        }\n        this._columnSelectData = null;\n        this._cursors.setSelections(cursorState);\n        this._cursors.normalize();\n    }\n    // -----------------------------------------------------------------------------------------------------------\n    // ----- emitting events\n    _emitStateChangedIfNecessary(eventsCollector, source, reason, oldState, reachedMaxCursorCount) {\n        const newState = CursorModelState.from(this._model, this);\n        if (newState.equals(oldState)) {\n            return false;\n        }\n        const selections = this._cursors.getSelections();\n        const viewSelections = this._cursors.getViewSelections();\n        // Let the view get the event first.\n        eventsCollector.emitViewEvent(new ViewCursorStateChangedEvent(viewSelections, selections, reason));\n        // Only after the view has been notified, let the rest of the world know...\n        if (!oldState\n            || oldState.cursorState.length !== newState.cursorState.length\n            || newState.cursorState.some((newCursorState, i) => !newCursorState.modelState.equals(oldState.cursorState[i].modelState))) {\n            const oldSelections = oldState ? oldState.cursorState.map(s => s.modelState.selection) : null;\n            const oldModelVersionId = oldState ? oldState.modelVersionId : 0;\n            eventsCollector.emitOutgoingEvent(new CursorStateChangedEvent(oldSelections, selections, oldModelVersionId, newState.modelVersionId, source || 'keyboard', reason, reachedMaxCursorCount));\n        }\n        return true;\n    }\n    // -----------------------------------------------------------------------------------------------------------\n    // ----- handlers beyond this point\n    _findAutoClosingPairs(edits) {\n        if (!edits.length) {\n            return null;\n        }\n        const indices = [];\n        for (let i = 0, len = edits.length; i < len; i++) {\n            const edit = edits[i];\n            if (!edit.text || edit.text.indexOf('\\n') >= 0) {\n                return null;\n            }\n            const m = edit.text.match(/([)\\]}>'\"`])([^)\\]}>'\"`]*)$/);\n            if (!m) {\n                return null;\n            }\n            const closeChar = m[1];\n            const autoClosingPairsCandidates = this.context.cursorConfig.autoClosingPairs.autoClosingPairsCloseSingleChar.get(closeChar);\n            if (!autoClosingPairsCandidates || autoClosingPairsCandidates.length !== 1) {\n                return null;\n            }\n            const openChar = autoClosingPairsCandidates[0].open;\n            const closeCharIndex = edit.text.length - m[2].length - 1;\n            const openCharIndex = edit.text.lastIndexOf(openChar, closeCharIndex - 1);\n            if (openCharIndex === -1) {\n                return null;\n            }\n            indices.push([openCharIndex, closeCharIndex]);\n        }\n        return indices;\n    }\n    executeEdits(eventsCollector, source, edits, cursorStateComputer) {\n        let autoClosingIndices = null;\n        if (source === 'snippet') {\n            autoClosingIndices = this._findAutoClosingPairs(edits);\n        }\n        if (autoClosingIndices) {\n            edits[0]._isTracked = true;\n        }\n        const autoClosedCharactersRanges = [];\n        const autoClosedEnclosingRanges = [];\n        const selections = this._model.pushEditOperations(this.getSelections(), edits, (undoEdits) => {\n            if (autoClosingIndices) {\n                for (let i = 0, len = autoClosingIndices.length; i < len; i++) {\n                    const [openCharInnerIndex, closeCharInnerIndex] = autoClosingIndices[i];\n                    const undoEdit = undoEdits[i];\n                    const lineNumber = undoEdit.range.startLineNumber;\n                    const openCharIndex = undoEdit.range.startColumn - 1 + openCharInnerIndex;\n                    const closeCharIndex = undoEdit.range.startColumn - 1 + closeCharInnerIndex;\n                    autoClosedCharactersRanges.push(new Range(lineNumber, closeCharIndex + 1, lineNumber, closeCharIndex + 2));\n                    autoClosedEnclosingRanges.push(new Range(lineNumber, openCharIndex + 1, lineNumber, closeCharIndex + 2));\n                }\n            }\n            const selections = cursorStateComputer(undoEdits);\n            if (selections) {\n                // Don't recover the selection from markers because\n                // we know what it should be.\n                this._isHandling = true;\n            }\n            return selections;\n        });\n        if (selections) {\n            this._isHandling = false;\n            this.setSelections(eventsCollector, source, selections, 0 /* CursorChangeReason.NotSet */);\n        }\n        if (autoClosedCharactersRanges.length > 0) {\n            this._pushAutoClosedAction(autoClosedCharactersRanges, autoClosedEnclosingRanges);\n        }\n    }\n    _executeEdit(callback, eventsCollector, source, cursorChangeReason = 0 /* CursorChangeReason.NotSet */) {\n        if (this.context.cursorConfig.readOnly) {\n            // we cannot edit when read only...\n            return;\n        }\n        const oldState = CursorModelState.from(this._model, this);\n        this._cursors.stopTrackingSelections();\n        this._isHandling = true;\n        try {\n            this._cursors.ensureValidState();\n            callback();\n        }\n        catch (err) {\n            onUnexpectedError(err);\n        }\n        this._isHandling = false;\n        this._cursors.startTrackingSelections();\n        this._validateAutoClosedActions();\n        if (this._emitStateChangedIfNecessary(eventsCollector, source, cursorChangeReason, oldState, false)) {\n            this.revealPrimary(eventsCollector, source, false, 0 /* VerticalRevealType.Simple */, true, 0 /* editorCommon.ScrollType.Smooth */);\n        }\n    }\n    getAutoClosedCharacters() {\n        return AutoClosedAction.getAllAutoClosedCharacters(this._autoClosedActions);\n    }\n    startComposition(eventsCollector) {\n        this._compositionState = new CompositionState(this._model, this.getSelections());\n    }\n    endComposition(eventsCollector, source) {\n        const compositionOutcome = this._compositionState ? this._compositionState.deduceOutcome(this._model, this.getSelections()) : null;\n        this._compositionState = null;\n        this._executeEdit(() => {\n            if (source === 'keyboard') {\n                // composition finishes, let's check if we need to auto complete if necessary.\n                this._executeEditOperation(TypeOperations.compositionEndWithInterceptors(this._prevEditOperationType, this.context.cursorConfig, this._model, compositionOutcome, this.getSelections(), this.getAutoClosedCharacters()));\n            }\n        }, eventsCollector, source);\n    }\n    type(eventsCollector, text, source) {\n        this._executeEdit(() => {\n            if (source === 'keyboard') {\n                // If this event is coming straight from the keyboard, look for electric characters and enter\n                const len = text.length;\n                let offset = 0;\n                while (offset < len) {\n                    const charLength = strings.nextCharLength(text, offset);\n                    const chr = text.substr(offset, charLength);\n                    // Here we must interpret each typed character individually\n                    this._executeEditOperation(TypeOperations.typeWithInterceptors(!!this._compositionState, this._prevEditOperationType, this.context.cursorConfig, this._model, this.getSelections(), this.getAutoClosedCharacters(), chr));\n                    offset += charLength;\n                }\n            }\n            else {\n                this._executeEditOperation(TypeOperations.typeWithoutInterceptors(this._prevEditOperationType, this.context.cursorConfig, this._model, this.getSelections(), text));\n            }\n        }, eventsCollector, source);\n    }\n    compositionType(eventsCollector, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source) {\n        if (text.length === 0 && replacePrevCharCnt === 0 && replaceNextCharCnt === 0) {\n            // this edit is a no-op\n            if (positionDelta !== 0) {\n                // but it still wants to move the cursor\n                const newSelections = this.getSelections().map(selection => {\n                    const position = selection.getPosition();\n                    return new Selection(position.lineNumber, position.column + positionDelta, position.lineNumber, position.column + positionDelta);\n                });\n                this.setSelections(eventsCollector, source, newSelections, 0 /* CursorChangeReason.NotSet */);\n            }\n            return;\n        }\n        this._executeEdit(() => {\n            this._executeEditOperation(TypeOperations.compositionType(this._prevEditOperationType, this.context.cursorConfig, this._model, this.getSelections(), text, replacePrevCharCnt, replaceNextCharCnt, positionDelta));\n        }, eventsCollector, source);\n    }\n    paste(eventsCollector, text, pasteOnNewLine, multicursorText, source) {\n        this._executeEdit(() => {\n            this._executeEditOperation(TypeOperations.paste(this.context.cursorConfig, this._model, this.getSelections(), text, pasteOnNewLine, multicursorText || []));\n        }, eventsCollector, source, 4 /* CursorChangeReason.Paste */);\n    }\n    cut(eventsCollector, source) {\n        this._executeEdit(() => {\n            this._executeEditOperation(DeleteOperations.cut(this.context.cursorConfig, this._model, this.getSelections()));\n        }, eventsCollector, source);\n    }\n    executeCommand(eventsCollector, command, source) {\n        this._executeEdit(() => {\n            this._cursors.killSecondaryCursors();\n            this._executeEditOperation(new EditOperationResult(0 /* EditOperationType.Other */, [command], {\n                shouldPushStackElementBefore: false,\n                shouldPushStackElementAfter: false\n            }));\n        }, eventsCollector, source);\n    }\n    executeCommands(eventsCollector, commands, source) {\n        this._executeEdit(() => {\n            this._executeEditOperation(new EditOperationResult(0 /* EditOperationType.Other */, commands, {\n                shouldPushStackElementBefore: false,\n                shouldPushStackElementAfter: false\n            }));\n        }, eventsCollector, source);\n    }\n}\n/**\n * A snapshot of the cursor and the model state\n */\nclass CursorModelState {\n    static from(model, cursor) {\n        return new CursorModelState(model.getVersionId(), cursor.getCursorStates());\n    }\n    constructor(modelVersionId, cursorState) {\n        this.modelVersionId = modelVersionId;\n        this.cursorState = cursorState;\n    }\n    equals(other) {\n        if (!other) {\n            return false;\n        }\n        if (this.modelVersionId !== other.modelVersionId) {\n            return false;\n        }\n        if (this.cursorState.length !== other.cursorState.length) {\n            return false;\n        }\n        for (let i = 0, len = this.cursorState.length; i < len; i++) {\n            if (!this.cursorState[i].equals(other.cursorState[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nclass AutoClosedAction {\n    static getAllAutoClosedCharacters(autoClosedActions) {\n        let autoClosedCharacters = [];\n        for (const autoClosedAction of autoClosedActions) {\n            autoClosedCharacters = autoClosedCharacters.concat(autoClosedAction.getAutoClosedCharactersRanges());\n        }\n        return autoClosedCharacters;\n    }\n    constructor(model, autoClosedCharactersDecorations, autoClosedEnclosingDecorations) {\n        this._model = model;\n        this._autoClosedCharactersDecorations = autoClosedCharactersDecorations;\n        this._autoClosedEnclosingDecorations = autoClosedEnclosingDecorations;\n    }\n    dispose() {\n        this._autoClosedCharactersDecorations = this._model.deltaDecorations(this._autoClosedCharactersDecorations, []);\n        this._autoClosedEnclosingDecorations = this._model.deltaDecorations(this._autoClosedEnclosingDecorations, []);\n    }\n    getAutoClosedCharactersRanges() {\n        const result = [];\n        for (let i = 0; i < this._autoClosedCharactersDecorations.length; i++) {\n            const decorationRange = this._model.getDecorationRange(this._autoClosedCharactersDecorations[i]);\n            if (decorationRange) {\n                result.push(decorationRange);\n            }\n        }\n        return result;\n    }\n    isValid(selections) {\n        const enclosingRanges = [];\n        for (let i = 0; i < this._autoClosedEnclosingDecorations.length; i++) {\n            const decorationRange = this._model.getDecorationRange(this._autoClosedEnclosingDecorations[i]);\n            if (decorationRange) {\n                enclosingRanges.push(decorationRange);\n                if (decorationRange.startLineNumber !== decorationRange.endLineNumber) {\n                    // Stop tracking if the range becomes multiline...\n                    return false;\n                }\n            }\n        }\n        enclosingRanges.sort(Range.compareRangesUsingStarts);\n        selections.sort(Range.compareRangesUsingStarts);\n        for (let i = 0; i < selections.length; i++) {\n            if (i >= enclosingRanges.length) {\n                return false;\n            }\n            if (!enclosingRanges[i].strictContainsRange(selections[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nclass CommandExecutor {\n    static executeCommands(model, selectionsBefore, commands) {\n        const ctx = {\n            model: model,\n            selectionsBefore: selectionsBefore,\n            trackedRanges: [],\n            trackedRangesDirection: []\n        };\n        const result = this._innerExecuteCommands(ctx, commands);\n        for (let i = 0, len = ctx.trackedRanges.length; i < len; i++) {\n            ctx.model._setTrackedRange(ctx.trackedRanges[i], null, 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */);\n        }\n        return result;\n    }\n    static _innerExecuteCommands(ctx, commands) {\n        if (this._arrayIsEmpty(commands)) {\n            return null;\n        }\n        const commandsData = this._getEditOperations(ctx, commands);\n        if (commandsData.operations.length === 0) {\n            return null;\n        }\n        const rawOperations = commandsData.operations;\n        const loserCursorsMap = this._getLoserCursorMap(rawOperations);\n        if (loserCursorsMap.hasOwnProperty('0')) {\n            // These commands are very messed up\n            console.warn('Ignoring commands');\n            return null;\n        }\n        // Remove operations belonging to losing cursors\n        const filteredOperations = [];\n        for (let i = 0, len = rawOperations.length; i < len; i++) {\n            if (!loserCursorsMap.hasOwnProperty(rawOperations[i].identifier.major.toString())) {\n                filteredOperations.push(rawOperations[i]);\n            }\n        }\n        // TODO@Alex: find a better way to do this.\n        // give the hint that edit operations are tracked to the model\n        if (commandsData.hadTrackedEditOperation && filteredOperations.length > 0) {\n            filteredOperations[0]._isTracked = true;\n        }\n        let selectionsAfter = ctx.model.pushEditOperations(ctx.selectionsBefore, filteredOperations, (inverseEditOperations) => {\n            const groupedInverseEditOperations = [];\n            for (let i = 0; i < ctx.selectionsBefore.length; i++) {\n                groupedInverseEditOperations[i] = [];\n            }\n            for (const op of inverseEditOperations) {\n                if (!op.identifier) {\n                    // perhaps auto whitespace trim edits\n                    continue;\n                }\n                groupedInverseEditOperations[op.identifier.major].push(op);\n            }\n            const minorBasedSorter = (a, b) => {\n                return a.identifier.minor - b.identifier.minor;\n            };\n            const cursorSelections = [];\n            for (let i = 0; i < ctx.selectionsBefore.length; i++) {\n                if (groupedInverseEditOperations[i].length > 0) {\n                    groupedInverseEditOperations[i].sort(minorBasedSorter);\n                    cursorSelections[i] = commands[i].computeCursorState(ctx.model, {\n                        getInverseEditOperations: () => {\n                            return groupedInverseEditOperations[i];\n                        },\n                        getTrackedSelection: (id) => {\n                            const idx = parseInt(id, 10);\n                            const range = ctx.model._getTrackedRange(ctx.trackedRanges[idx]);\n                            if (ctx.trackedRangesDirection[idx] === 0 /* SelectionDirection.LTR */) {\n                                return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n                            }\n                            return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\n                        }\n                    });\n                }\n                else {\n                    cursorSelections[i] = ctx.selectionsBefore[i];\n                }\n            }\n            return cursorSelections;\n        });\n        if (!selectionsAfter) {\n            selectionsAfter = ctx.selectionsBefore;\n        }\n        // Extract losing cursors\n        const losingCursors = [];\n        for (const losingCursorIndex in loserCursorsMap) {\n            if (loserCursorsMap.hasOwnProperty(losingCursorIndex)) {\n                losingCursors.push(parseInt(losingCursorIndex, 10));\n            }\n        }\n        // Sort losing cursors descending\n        losingCursors.sort((a, b) => {\n            return b - a;\n        });\n        // Remove losing cursors\n        for (const losingCursor of losingCursors) {\n            selectionsAfter.splice(losingCursor, 1);\n        }\n        return selectionsAfter;\n    }\n    static _arrayIsEmpty(commands) {\n        for (let i = 0, len = commands.length; i < len; i++) {\n            if (commands[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static _getEditOperations(ctx, commands) {\n        let operations = [];\n        let hadTrackedEditOperation = false;\n        for (let i = 0, len = commands.length; i < len; i++) {\n            const command = commands[i];\n            if (command) {\n                const r = this._getEditOperationsFromCommand(ctx, i, command);\n                operations = operations.concat(r.operations);\n                hadTrackedEditOperation = hadTrackedEditOperation || r.hadTrackedEditOperation;\n            }\n        }\n        return {\n            operations: operations,\n            hadTrackedEditOperation: hadTrackedEditOperation\n        };\n    }\n    static _getEditOperationsFromCommand(ctx, majorIdentifier, command) {\n        // This method acts as a transaction, if the command fails\n        // everything it has done is ignored\n        const operations = [];\n        let operationMinor = 0;\n        const addEditOperation = (range, text, forceMoveMarkers = false) => {\n            if (Range.isEmpty(range) && text === '') {\n                // This command wants to add a no-op => no thank you\n                return;\n            }\n            operations.push({\n                identifier: {\n                    major: majorIdentifier,\n                    minor: operationMinor++\n                },\n                range: range,\n                text: text,\n                forceMoveMarkers: forceMoveMarkers,\n                isAutoWhitespaceEdit: command.insertsAutoWhitespace\n            });\n        };\n        let hadTrackedEditOperation = false;\n        const addTrackedEditOperation = (selection, text, forceMoveMarkers) => {\n            hadTrackedEditOperation = true;\n            addEditOperation(selection, text, forceMoveMarkers);\n        };\n        const trackSelection = (_selection, trackPreviousOnEmpty) => {\n            const selection = Selection.liftSelection(_selection);\n            let stickiness;\n            if (selection.isEmpty()) {\n                if (typeof trackPreviousOnEmpty === 'boolean') {\n                    if (trackPreviousOnEmpty) {\n                        stickiness = 2 /* TrackedRangeStickiness.GrowsOnlyWhenTypingBefore */;\n                    }\n                    else {\n                        stickiness = 3 /* TrackedRangeStickiness.GrowsOnlyWhenTypingAfter */;\n                    }\n                }\n                else {\n                    // Try to lock it with surrounding text\n                    const maxLineColumn = ctx.model.getLineMaxColumn(selection.startLineNumber);\n                    if (selection.startColumn === maxLineColumn) {\n                        stickiness = 2 /* TrackedRangeStickiness.GrowsOnlyWhenTypingBefore */;\n                    }\n                    else {\n                        stickiness = 3 /* TrackedRangeStickiness.GrowsOnlyWhenTypingAfter */;\n                    }\n                }\n            }\n            else {\n                stickiness = 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */;\n            }\n            const l = ctx.trackedRanges.length;\n            const id = ctx.model._setTrackedRange(null, selection, stickiness);\n            ctx.trackedRanges[l] = id;\n            ctx.trackedRangesDirection[l] = selection.getDirection();\n            return l.toString();\n        };\n        const editOperationBuilder = {\n            addEditOperation: addEditOperation,\n            addTrackedEditOperation: addTrackedEditOperation,\n            trackSelection: trackSelection\n        };\n        try {\n            command.getEditOperations(ctx.model, editOperationBuilder);\n        }\n        catch (e) {\n            // TODO@Alex use notification service if this should be user facing\n            // e.friendlyMessage = nls.localize('corrupt.commands', \"Unexpected exception while executing command.\");\n            onUnexpectedError(e);\n            return {\n                operations: [],\n                hadTrackedEditOperation: false\n            };\n        }\n        return {\n            operations: operations,\n            hadTrackedEditOperation: hadTrackedEditOperation\n        };\n    }\n    static _getLoserCursorMap(operations) {\n        // This is destructive on the array\n        operations = operations.slice(0);\n        // Sort operations with last one first\n        operations.sort((a, b) => {\n            // Note the minus!\n            return -(Range.compareRangesUsingEnds(a.range, b.range));\n        });\n        // Operations can not overlap!\n        const loserCursorsMap = {};\n        for (let i = 1; i < operations.length; i++) {\n            const previousOp = operations[i - 1];\n            const currentOp = operations[i];\n            if (Range.getStartPosition(previousOp.range).isBefore(Range.getEndPosition(currentOp.range))) {\n                let loserMajor;\n                if (previousOp.identifier.major > currentOp.identifier.major) {\n                    // previousOp loses the battle\n                    loserMajor = previousOp.identifier.major;\n                }\n                else {\n                    loserMajor = currentOp.identifier.major;\n                }\n                loserCursorsMap[loserMajor.toString()] = true;\n                for (let j = 0; j < operations.length; j++) {\n                    if (operations[j].identifier.major === loserMajor) {\n                        operations.splice(j, 1);\n                        if (j < i) {\n                            i--;\n                        }\n                        j--;\n                    }\n                }\n                if (i > 0) {\n                    i--;\n                }\n            }\n        }\n        return loserCursorsMap;\n    }\n}\nclass CompositionLineState {\n    constructor(text, startSelection, endSelection) {\n        this.text = text;\n        this.startSelection = startSelection;\n        this.endSelection = endSelection;\n    }\n}\nclass CompositionState {\n    static _capture(textModel, selections) {\n        const result = [];\n        for (const selection of selections) {\n            if (selection.startLineNumber !== selection.endLineNumber) {\n                return null;\n            }\n            result.push(new CompositionLineState(textModel.getLineContent(selection.startLineNumber), selection.startColumn - 1, selection.endColumn - 1));\n        }\n        return result;\n    }\n    constructor(textModel, selections) {\n        this._original = CompositionState._capture(textModel, selections);\n    }\n    /**\n     * Returns the inserted text during this composition.\n     * If the composition resulted in existing text being changed (i.e. not a pure insertion) it returns null.\n     */\n    deduceOutcome(textModel, selections) {\n        if (!this._original) {\n            return null;\n        }\n        const current = CompositionState._capture(textModel, selections);\n        if (!current) {\n            return null;\n        }\n        if (this._original.length !== current.length) {\n            return null;\n        }\n        const result = [];\n        for (let i = 0, len = this._original.length; i < len; i++) {\n            result.push(CompositionState._deduceOutcome(this._original[i], current[i]));\n        }\n        return result;\n    }\n    static _deduceOutcome(original, current) {\n        const commonPrefix = Math.min(original.startSelection, current.startSelection, strings.commonPrefixLength(original.text, current.text));\n        const commonSuffix = Math.min(original.text.length - original.endSelection, current.text.length - current.endSelection, strings.commonSuffixLength(original.text, current.text));\n        const deletedText = original.text.substring(commonPrefix, original.text.length - commonSuffix);\n        const insertedText = current.text.substring(commonPrefix, current.text.length - commonSuffix);\n        return new CompositionOutcome(deletedText, original.startSelection - commonPrefix, original.endSelection - commonPrefix, insertedText, current.startSelection - commonPrefix, current.endSelection - commonPrefix);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { compareBy } from '../../../base/common/arrays.js';\nimport { findLastMaxBy, findFirstMinBy } from '../../../base/common/arraysFind.js';\nimport { CursorState } from '../cursorCommon.js';\nimport { Cursor } from './oneCursor.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nexport class CursorCollection {\n    constructor(context) {\n        this.context = context;\n        this.cursors = [new Cursor(context)];\n        this.lastAddedCursorIndex = 0;\n    }\n    dispose() {\n        for (const cursor of this.cursors) {\n            cursor.dispose(this.context);\n        }\n    }\n    startTrackingSelections() {\n        for (const cursor of this.cursors) {\n            cursor.startTrackingSelection(this.context);\n        }\n    }\n    stopTrackingSelections() {\n        for (const cursor of this.cursors) {\n            cursor.stopTrackingSelection(this.context);\n        }\n    }\n    updateContext(context) {\n        this.context = context;\n    }\n    ensureValidState() {\n        for (const cursor of this.cursors) {\n            cursor.ensureValidState(this.context);\n        }\n    }\n    readSelectionFromMarkers() {\n        return this.cursors.map(c => c.readSelectionFromMarkers(this.context));\n    }\n    getAll() {\n        return this.cursors.map(c => c.asCursorState());\n    }\n    getViewPositions() {\n        return this.cursors.map(c => c.viewState.position);\n    }\n    getTopMostViewPosition() {\n        return findFirstMinBy(this.cursors, compareBy(c => c.viewState.position, Position.compare)).viewState.position;\n    }\n    getBottomMostViewPosition() {\n        return findLastMaxBy(this.cursors, compareBy(c => c.viewState.position, Position.compare)).viewState.position;\n    }\n    getSelections() {\n        return this.cursors.map(c => c.modelState.selection);\n    }\n    getViewSelections() {\n        return this.cursors.map(c => c.viewState.selection);\n    }\n    setSelections(selections) {\n        this.setStates(CursorState.fromModelSelections(selections));\n    }\n    getPrimaryCursor() {\n        return this.cursors[0].asCursorState();\n    }\n    setStates(states) {\n        if (states === null) {\n            return;\n        }\n        this.cursors[0].setState(this.context, states[0].modelState, states[0].viewState);\n        this._setSecondaryStates(states.slice(1));\n    }\n    /**\n     * Creates or disposes secondary cursors as necessary to match the number of `secondarySelections`.\n     */\n    _setSecondaryStates(secondaryStates) {\n        const secondaryCursorsLength = this.cursors.length - 1;\n        const secondaryStatesLength = secondaryStates.length;\n        if (secondaryCursorsLength < secondaryStatesLength) {\n            const createCnt = secondaryStatesLength - secondaryCursorsLength;\n            for (let i = 0; i < createCnt; i++) {\n                this._addSecondaryCursor();\n            }\n        }\n        else if (secondaryCursorsLength > secondaryStatesLength) {\n            const removeCnt = secondaryCursorsLength - secondaryStatesLength;\n            for (let i = 0; i < removeCnt; i++) {\n                this._removeSecondaryCursor(this.cursors.length - 2);\n            }\n        }\n        for (let i = 0; i < secondaryStatesLength; i++) {\n            this.cursors[i + 1].setState(this.context, secondaryStates[i].modelState, secondaryStates[i].viewState);\n        }\n    }\n    killSecondaryCursors() {\n        this._setSecondaryStates([]);\n    }\n    _addSecondaryCursor() {\n        this.cursors.push(new Cursor(this.context));\n        this.lastAddedCursorIndex = this.cursors.length - 1;\n    }\n    getLastAddedCursorIndex() {\n        if (this.cursors.length === 1 || this.lastAddedCursorIndex === 0) {\n            return 0;\n        }\n        return this.lastAddedCursorIndex;\n    }\n    _removeSecondaryCursor(removeIndex) {\n        if (this.lastAddedCursorIndex >= removeIndex + 1) {\n            this.lastAddedCursorIndex--;\n        }\n        this.cursors[removeIndex + 1].dispose(this.context);\n        this.cursors.splice(removeIndex + 1, 1);\n    }\n    normalize() {\n        if (this.cursors.length === 1) {\n            return;\n        }\n        const cursors = this.cursors.slice(0);\n        const sortedCursors = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            sortedCursors.push({\n                index: i,\n                selection: cursors[i].modelState.selection,\n            });\n        }\n        sortedCursors.sort(compareBy(s => s.selection, Range.compareRangesUsingStarts));\n        for (let sortedCursorIndex = 0; sortedCursorIndex < sortedCursors.length - 1; sortedCursorIndex++) {\n            const current = sortedCursors[sortedCursorIndex];\n            const next = sortedCursors[sortedCursorIndex + 1];\n            const currentSelection = current.selection;\n            const nextSelection = next.selection;\n            if (!this.context.cursorConfig.multiCursorMergeOverlapping) {\n                continue;\n            }\n            let shouldMergeCursors;\n            if (nextSelection.isEmpty() || currentSelection.isEmpty()) {\n                // Merge touching cursors if one of them is collapsed\n                shouldMergeCursors = nextSelection.getStartPosition().isBeforeOrEqual(currentSelection.getEndPosition());\n            }\n            else {\n                // Merge only overlapping cursors (i.e. allow touching ranges)\n                shouldMergeCursors = nextSelection.getStartPosition().isBefore(currentSelection.getEndPosition());\n            }\n            if (shouldMergeCursors) {\n                const winnerSortedCursorIndex = current.index < next.index ? sortedCursorIndex : sortedCursorIndex + 1;\n                const looserSortedCursorIndex = current.index < next.index ? sortedCursorIndex + 1 : sortedCursorIndex;\n                const looserIndex = sortedCursors[looserSortedCursorIndex].index;\n                const winnerIndex = sortedCursors[winnerSortedCursorIndex].index;\n                const looserSelection = sortedCursors[looserSortedCursorIndex].selection;\n                const winnerSelection = sortedCursors[winnerSortedCursorIndex].selection;\n                if (!looserSelection.equalsSelection(winnerSelection)) {\n                    const resultingRange = looserSelection.plusRange(winnerSelection);\n                    const looserSelectionIsLTR = (looserSelection.selectionStartLineNumber === looserSelection.startLineNumber && looserSelection.selectionStartColumn === looserSelection.startColumn);\n                    const winnerSelectionIsLTR = (winnerSelection.selectionStartLineNumber === winnerSelection.startLineNumber && winnerSelection.selectionStartColumn === winnerSelection.startColumn);\n                    // Give more importance to the last added cursor (think Ctrl-dragging + hitting another cursor)\n                    let resultingSelectionIsLTR;\n                    if (looserIndex === this.lastAddedCursorIndex) {\n                        resultingSelectionIsLTR = looserSelectionIsLTR;\n                        this.lastAddedCursorIndex = winnerIndex;\n                    }\n                    else {\n                        // Winner takes it all\n                        resultingSelectionIsLTR = winnerSelectionIsLTR;\n                    }\n                    let resultingSelection;\n                    if (resultingSelectionIsLTR) {\n                        resultingSelection = new Selection(resultingRange.startLineNumber, resultingRange.startColumn, resultingRange.endLineNumber, resultingRange.endColumn);\n                    }\n                    else {\n                        resultingSelection = new Selection(resultingRange.endLineNumber, resultingRange.endColumn, resultingRange.startLineNumber, resultingRange.startColumn);\n                    }\n                    sortedCursors[winnerSortedCursorIndex].selection = resultingSelection;\n                    const resultingState = CursorState.fromModelSelection(resultingSelection);\n                    cursors[winnerIndex].setState(this.context, resultingState.modelState, resultingState.viewState);\n                }\n                for (const sortedCursor of sortedCursors) {\n                    if (sortedCursor.index > looserIndex) {\n                        sortedCursor.index--;\n                    }\n                }\n                cursors.splice(looserIndex, 1);\n                sortedCursors.splice(looserSortedCursorIndex, 1);\n                this._removeSecondaryCursor(looserIndex - 1);\n                sortedCursorIndex--;\n            }\n        }\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CursorState, SingleCursorState } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\n/**\n * Represents a single cursor.\n*/\nexport class Cursor {\n    constructor(context) {\n        this._selTrackedRange = null;\n        this._trackSelection = true;\n        this._setState(context, new SingleCursorState(new Range(1, 1, 1, 1), 0 /* SelectionStartKind.Simple */, 0, new Position(1, 1), 0), new SingleCursorState(new Range(1, 1, 1, 1), 0 /* SelectionStartKind.Simple */, 0, new Position(1, 1), 0));\n    }\n    dispose(context) {\n        this._removeTrackedRange(context);\n    }\n    startTrackingSelection(context) {\n        this._trackSelection = true;\n        this._updateTrackedRange(context);\n    }\n    stopTrackingSelection(context) {\n        this._trackSelection = false;\n        this._removeTrackedRange(context);\n    }\n    _updateTrackedRange(context) {\n        if (!this._trackSelection) {\n            // don't track the selection\n            return;\n        }\n        this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, this.modelState.selection, 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */);\n    }\n    _removeTrackedRange(context) {\n        this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, null, 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */);\n    }\n    asCursorState() {\n        return new CursorState(this.modelState, this.viewState);\n    }\n    readSelectionFromMarkers(context) {\n        const range = context.model._getTrackedRange(this._selTrackedRange);\n        if (this.modelState.selection.isEmpty() && !range.isEmpty()) {\n            // Avoid selecting text when recovering from markers\n            return Selection.fromRange(range.collapseToEnd(), this.modelState.selection.getDirection());\n        }\n        return Selection.fromRange(range, this.modelState.selection.getDirection());\n    }\n    ensureValidState(context) {\n        this._setState(context, this.modelState, this.viewState);\n    }\n    setState(context, modelState, viewState) {\n        this._setState(context, modelState, viewState);\n    }\n    static _validatePositionWithCache(viewModel, position, cacheInput, cacheOutput) {\n        if (position.equals(cacheInput)) {\n            return cacheOutput;\n        }\n        return viewModel.normalizePosition(position, 2 /* PositionAffinity.None */);\n    }\n    static _validateViewState(viewModel, viewState) {\n        const position = viewState.position;\n        const sStartPosition = viewState.selectionStart.getStartPosition();\n        const sEndPosition = viewState.selectionStart.getEndPosition();\n        const validPosition = viewModel.normalizePosition(position, 2 /* PositionAffinity.None */);\n        const validSStartPosition = this._validatePositionWithCache(viewModel, sStartPosition, position, validPosition);\n        const validSEndPosition = this._validatePositionWithCache(viewModel, sEndPosition, sStartPosition, validSStartPosition);\n        if (position.equals(validPosition) && sStartPosition.equals(validSStartPosition) && sEndPosition.equals(validSEndPosition)) {\n            // fast path: the state is valid\n            return viewState;\n        }\n        return new SingleCursorState(Range.fromPositions(validSStartPosition, validSEndPosition), viewState.selectionStartKind, viewState.selectionStartLeftoverVisibleColumns + sStartPosition.column - validSStartPosition.column, validPosition, viewState.leftoverVisibleColumns + position.column - validPosition.column);\n    }\n    _setState(context, modelState, viewState) {\n        if (viewState) {\n            viewState = Cursor._validateViewState(context.viewModel, viewState);\n        }\n        if (!modelState) {\n            if (!viewState) {\n                return;\n            }\n            // We only have the view state => compute the model state\n            const selectionStart = context.model.validateRange(context.coordinatesConverter.convertViewRangeToModelRange(viewState.selectionStart));\n            const position = context.model.validatePosition(context.coordinatesConverter.convertViewPositionToModelPosition(viewState.position));\n            modelState = new SingleCursorState(selectionStart, viewState.selectionStartKind, viewState.selectionStartLeftoverVisibleColumns, position, viewState.leftoverVisibleColumns);\n        }\n        else {\n            // Validate new model state\n            const selectionStart = context.model.validateRange(modelState.selectionStart);\n            const selectionStartLeftoverVisibleColumns = modelState.selectionStart.equalsRange(selectionStart) ? modelState.selectionStartLeftoverVisibleColumns : 0;\n            const position = context.model.validatePosition(modelState.position);\n            const leftoverVisibleColumns = modelState.position.equals(position) ? modelState.leftoverVisibleColumns : 0;\n            modelState = new SingleCursorState(selectionStart, modelState.selectionStartKind, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns);\n        }\n        if (!viewState) {\n            // We only have the model state => compute the view state\n            const viewSelectionStart1 = context.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelState.selectionStart.startLineNumber, modelState.selectionStart.startColumn));\n            const viewSelectionStart2 = context.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelState.selectionStart.endLineNumber, modelState.selectionStart.endColumn));\n            const viewSelectionStart = new Range(viewSelectionStart1.lineNumber, viewSelectionStart1.column, viewSelectionStart2.lineNumber, viewSelectionStart2.column);\n            const viewPosition = context.coordinatesConverter.convertModelPositionToViewPosition(modelState.position);\n            viewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartKind, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\n        }\n        else {\n            // Validate new view state\n            const viewSelectionStart = context.coordinatesConverter.validateViewRange(viewState.selectionStart, modelState.selectionStart);\n            const viewPosition = context.coordinatesConverter.validateViewPosition(viewState.position, modelState.position);\n            viewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartKind, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\n        }\n        this.modelState = modelState;\n        this.viewState = viewState;\n        this._updateTrackedRange(context);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class CursorContext {\n    constructor(model, viewModel, coordinatesConverter, cursorConfig) {\n        this._cursorContextBrand = undefined;\n        this.model = model;\n        this.viewModel = viewModel;\n        this.coordinatesConverter = coordinatesConverter;\n        this.cursorConfig = cursorConfig;\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class ViewCompositionStartEvent {\n    constructor() {\n        this.type = 0 /* ViewEventType.ViewCompositionStart */;\n    }\n}\nexport class ViewCompositionEndEvent {\n    constructor() {\n        this.type = 1 /* ViewEventType.ViewCompositionEnd */;\n    }\n}\nexport class ViewConfigurationChangedEvent {\n    constructor(source) {\n        this.type = 2 /* ViewEventType.ViewConfigurationChanged */;\n        this._source = source;\n    }\n    hasChanged(id) {\n        return this._source.hasChanged(id);\n    }\n}\nexport class ViewCursorStateChangedEvent {\n    constructor(selections, modelSelections, reason) {\n        this.selections = selections;\n        this.modelSelections = modelSelections;\n        this.reason = reason;\n        this.type = 3 /* ViewEventType.ViewCursorStateChanged */;\n    }\n}\nexport class ViewDecorationsChangedEvent {\n    constructor(source) {\n        this.type = 4 /* ViewEventType.ViewDecorationsChanged */;\n        if (source) {\n            this.affectsMinimap = source.affectsMinimap;\n            this.affectsOverviewRuler = source.affectsOverviewRuler;\n            this.affectsGlyphMargin = source.affectsGlyphMargin;\n            this.affectsLineNumber = source.affectsLineNumber;\n        }\n        else {\n            this.affectsMinimap = true;\n            this.affectsOverviewRuler = true;\n            this.affectsGlyphMargin = true;\n            this.affectsLineNumber = true;\n        }\n    }\n}\nexport class ViewFlushedEvent {\n    constructor() {\n        this.type = 5 /* ViewEventType.ViewFlushed */;\n        // Nothing to do\n    }\n}\nexport class ViewFocusChangedEvent {\n    constructor(isFocused) {\n        this.type = 6 /* ViewEventType.ViewFocusChanged */;\n        this.isFocused = isFocused;\n    }\n}\nexport class ViewLanguageConfigurationEvent {\n    constructor() {\n        this.type = 7 /* ViewEventType.ViewLanguageConfigurationChanged */;\n    }\n}\nexport class ViewLineMappingChangedEvent {\n    constructor() {\n        this.type = 8 /* ViewEventType.ViewLineMappingChanged */;\n        // Nothing to do\n    }\n}\nexport class ViewLinesChangedEvent {\n    constructor(\n    /**\n     * The first line that has changed.\n     */\n    fromLineNumber, \n    /**\n     * The number of lines that have changed.\n     */\n    count) {\n        this.fromLineNumber = fromLineNumber;\n        this.count = count;\n        this.type = 9 /* ViewEventType.ViewLinesChanged */;\n    }\n}\nexport class ViewLinesDeletedEvent {\n    constructor(fromLineNumber, toLineNumber) {\n        this.type = 10 /* ViewEventType.ViewLinesDeleted */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\nexport class ViewLinesInsertedEvent {\n    constructor(fromLineNumber, toLineNumber) {\n        this.type = 11 /* ViewEventType.ViewLinesInserted */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\nexport class ViewRevealRangeRequestEvent {\n    constructor(\n    /**\n     * Source of the call that caused the event.\n     */\n    source, \n    /**\n     * Reduce the revealing to a minimum (e.g. avoid scrolling if the bounding box is visible and near the viewport edge).\n     */\n    minimalReveal, \n    /**\n     * Range to be reavealed.\n     */\n    range, \n    /**\n     * Selections to be revealed.\n     */\n    selections, \n    /**\n     * The vertical reveal strategy.\n     */\n    verticalType, \n    /**\n     * If true: there should be a horizontal & vertical revealing.\n     * If false: there should be just a vertical revealing.\n     */\n    revealHorizontal, \n    /**\n     * The scroll type.\n     */\n    scrollType) {\n        this.source = source;\n        this.minimalReveal = minimalReveal;\n        this.range = range;\n        this.selections = selections;\n        this.verticalType = verticalType;\n        this.revealHorizontal = revealHorizontal;\n        this.scrollType = scrollType;\n        this.type = 12 /* ViewEventType.ViewRevealRangeRequest */;\n    }\n}\nexport class ViewScrollChangedEvent {\n    constructor(source) {\n        this.type = 13 /* ViewEventType.ViewScrollChanged */;\n        this.scrollWidth = source.scrollWidth;\n        this.scrollLeft = source.scrollLeft;\n        this.scrollHeight = source.scrollHeight;\n        this.scrollTop = source.scrollTop;\n        this.scrollWidthChanged = source.scrollWidthChanged;\n        this.scrollLeftChanged = source.scrollLeftChanged;\n        this.scrollHeightChanged = source.scrollHeightChanged;\n        this.scrollTopChanged = source.scrollTopChanged;\n    }\n}\nexport class ViewThemeChangedEvent {\n    constructor(theme) {\n        this.theme = theme;\n        this.type = 14 /* ViewEventType.ViewThemeChanged */;\n    }\n}\nexport class ViewTokensChangedEvent {\n    constructor(ranges) {\n        this.type = 15 /* ViewEventType.ViewTokensChanged */;\n        this.ranges = ranges;\n    }\n}\nexport class ViewTokensColorsChangedEvent {\n    constructor() {\n        this.type = 16 /* ViewEventType.ViewTokensColorsChanged */;\n        // Nothing to do\n    }\n}\nexport class ViewZonesChangedEvent {\n    constructor() {\n        this.type = 17 /* ViewEventType.ViewZonesChanged */;\n        // Nothing to do\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../base/common/event.js';\nimport { Disposable } from '../../base/common/lifecycle.js';\nexport class ViewModelEventDispatcher extends Disposable {\n    constructor() {\n        super();\n        this._onEvent = this._register(new Emitter());\n        this.onEvent = this._onEvent.event;\n        this._eventHandlers = [];\n        this._viewEventQueue = null;\n        this._isConsumingViewEventQueue = false;\n        this._collector = null;\n        this._collectorCnt = 0;\n        this._outgoingEvents = [];\n    }\n    emitOutgoingEvent(e) {\n        this._addOutgoingEvent(e);\n        this._emitOutgoingEvents();\n    }\n    _addOutgoingEvent(e) {\n        for (let i = 0, len = this._outgoingEvents.length; i < len; i++) {\n            const mergeResult = (this._outgoingEvents[i].kind === e.kind ? this._outgoingEvents[i].attemptToMerge(e) : null);\n            if (mergeResult) {\n                this._outgoingEvents[i] = mergeResult;\n                return;\n            }\n        }\n        // not merged\n        this._outgoingEvents.push(e);\n    }\n    _emitOutgoingEvents() {\n        while (this._outgoingEvents.length > 0) {\n            if (this._collector || this._isConsumingViewEventQueue) {\n                // right now collecting or emitting view events, so let's postpone emitting\n                return;\n            }\n            const event = this._outgoingEvents.shift();\n            if (event.isNoOp()) {\n                continue;\n            }\n            this._onEvent.fire(event);\n        }\n    }\n    addViewEventHandler(eventHandler) {\n        for (let i = 0, len = this._eventHandlers.length; i < len; i++) {\n            if (this._eventHandlers[i] === eventHandler) {\n                console.warn('Detected duplicate listener in ViewEventDispatcher', eventHandler);\n            }\n        }\n        this._eventHandlers.push(eventHandler);\n    }\n    removeViewEventHandler(eventHandler) {\n        for (let i = 0; i < this._eventHandlers.length; i++) {\n            if (this._eventHandlers[i] === eventHandler) {\n                this._eventHandlers.splice(i, 1);\n                break;\n            }\n        }\n    }\n    beginEmitViewEvents() {\n        this._collectorCnt++;\n        if (this._collectorCnt === 1) {\n            this._collector = new ViewModelEventsCollector();\n        }\n        return this._collector;\n    }\n    endEmitViewEvents() {\n        this._collectorCnt--;\n        if (this._collectorCnt === 0) {\n            const outgoingEvents = this._collector.outgoingEvents;\n            const viewEvents = this._collector.viewEvents;\n            this._collector = null;\n            for (const outgoingEvent of outgoingEvents) {\n                this._addOutgoingEvent(outgoingEvent);\n            }\n            if (viewEvents.length > 0) {\n                this._emitMany(viewEvents);\n            }\n        }\n        this._emitOutgoingEvents();\n    }\n    emitSingleViewEvent(event) {\n        try {\n            const eventsCollector = this.beginEmitViewEvents();\n            eventsCollector.emitViewEvent(event);\n        }\n        finally {\n            this.endEmitViewEvents();\n        }\n    }\n    _emitMany(events) {\n        if (this._viewEventQueue) {\n            this._viewEventQueue = this._viewEventQueue.concat(events);\n        }\n        else {\n            this._viewEventQueue = events;\n        }\n        if (!this._isConsumingViewEventQueue) {\n            this._consumeViewEventQueue();\n        }\n    }\n    _consumeViewEventQueue() {\n        try {\n            this._isConsumingViewEventQueue = true;\n            this._doConsumeQueue();\n        }\n        finally {\n            this._isConsumingViewEventQueue = false;\n        }\n    }\n    _doConsumeQueue() {\n        while (this._viewEventQueue) {\n            // Empty event queue, as events might come in while sending these off\n            const events = this._viewEventQueue;\n            this._viewEventQueue = null;\n            // Use a clone of the event handlers list, as they might remove themselves\n            const eventHandlers = this._eventHandlers.slice(0);\n            for (const eventHandler of eventHandlers) {\n                eventHandler.handleEvents(events);\n            }\n        }\n    }\n}\nexport class ViewModelEventsCollector {\n    constructor() {\n        this.viewEvents = [];\n        this.outgoingEvents = [];\n    }\n    emitViewEvent(event) {\n        this.viewEvents.push(event);\n    }\n    emitOutgoingEvent(e) {\n        this.outgoingEvents.push(e);\n    }\n}\nexport class ContentSizeChangedEvent {\n    constructor(oldContentWidth, oldContentHeight, contentWidth, contentHeight) {\n        this.kind = 0 /* OutgoingViewModelEventKind.ContentSizeChanged */;\n        this._oldContentWidth = oldContentWidth;\n        this._oldContentHeight = oldContentHeight;\n        this.contentWidth = contentWidth;\n        this.contentHeight = contentHeight;\n        this.contentWidthChanged = (this._oldContentWidth !== this.contentWidth);\n        this.contentHeightChanged = (this._oldContentHeight !== this.contentHeight);\n    }\n    isNoOp() {\n        return (!this.contentWidthChanged && !this.contentHeightChanged);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new ContentSizeChangedEvent(this._oldContentWidth, this._oldContentHeight, other.contentWidth, other.contentHeight);\n    }\n}\nexport class FocusChangedEvent {\n    constructor(oldHasFocus, hasFocus) {\n        this.kind = 1 /* OutgoingViewModelEventKind.FocusChanged */;\n        this.oldHasFocus = oldHasFocus;\n        this.hasFocus = hasFocus;\n    }\n    isNoOp() {\n        return (this.oldHasFocus === this.hasFocus);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new FocusChangedEvent(this.oldHasFocus, other.hasFocus);\n    }\n}\nexport class ScrollChangedEvent {\n    constructor(oldScrollWidth, oldScrollLeft, oldScrollHeight, oldScrollTop, scrollWidth, scrollLeft, scrollHeight, scrollTop) {\n        this.kind = 2 /* OutgoingViewModelEventKind.ScrollChanged */;\n        this._oldScrollWidth = oldScrollWidth;\n        this._oldScrollLeft = oldScrollLeft;\n        this._oldScrollHeight = oldScrollHeight;\n        this._oldScrollTop = oldScrollTop;\n        this.scrollWidth = scrollWidth;\n        this.scrollLeft = scrollLeft;\n        this.scrollHeight = scrollHeight;\n        this.scrollTop = scrollTop;\n        this.scrollWidthChanged = (this._oldScrollWidth !== this.scrollWidth);\n        this.scrollLeftChanged = (this._oldScrollLeft !== this.scrollLeft);\n        this.scrollHeightChanged = (this._oldScrollHeight !== this.scrollHeight);\n        this.scrollTopChanged = (this._oldScrollTop !== this.scrollTop);\n    }\n    isNoOp() {\n        return (!this.scrollWidthChanged && !this.scrollLeftChanged && !this.scrollHeightChanged && !this.scrollTopChanged);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new ScrollChangedEvent(this._oldScrollWidth, this._oldScrollLeft, this._oldScrollHeight, this._oldScrollTop, other.scrollWidth, other.scrollLeft, other.scrollHeight, other.scrollTop);\n    }\n}\nexport class ViewZonesChangedEvent {\n    constructor() {\n        this.kind = 3 /* OutgoingViewModelEventKind.ViewZonesChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return this;\n    }\n}\nexport class HiddenAreasChangedEvent {\n    constructor() {\n        this.kind = 4 /* OutgoingViewModelEventKind.HiddenAreasChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return this;\n    }\n}\nexport class CursorStateChangedEvent {\n    constructor(oldSelections, selections, oldModelVersionId, modelVersionId, source, reason, reachedMaxCursorCount) {\n        this.kind = 6 /* OutgoingViewModelEventKind.CursorStateChanged */;\n        this.oldSelections = oldSelections;\n        this.selections = selections;\n        this.oldModelVersionId = oldModelVersionId;\n        this.modelVersionId = modelVersionId;\n        this.source = source;\n        this.reason = reason;\n        this.reachedMaxCursorCount = reachedMaxCursorCount;\n    }\n    static _selectionsAreEqual(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        const aLen = a.length;\n        const bLen = b.length;\n        if (aLen !== bLen) {\n            return false;\n        }\n        for (let i = 0; i < aLen; i++) {\n            if (!a[i].equalsSelection(b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    isNoOp() {\n        return (CursorStateChangedEvent._selectionsAreEqual(this.oldSelections, this.selections)\n            && this.oldModelVersionId === this.modelVersionId);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new CursorStateChangedEvent(this.oldSelections, other.selections, this.oldModelVersionId, other.modelVersionId, other.source, other.reason, this.reachedMaxCursorCount || other.reachedMaxCursorCount);\n    }\n}\nexport class ReadOnlyEditAttemptEvent {\n    constructor() {\n        this.kind = 5 /* OutgoingViewModelEventKind.ReadOnlyEditAttempt */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return this;\n    }\n}\nexport class ModelDecorationsChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 7 /* OutgoingViewModelEventKind.ModelDecorationsChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelLanguageChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 8 /* OutgoingViewModelEventKind.ModelLanguageChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelLanguageConfigurationChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 9 /* OutgoingViewModelEventKind.ModelLanguageConfigurationChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelContentChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 10 /* OutgoingViewModelEventKind.ModelContentChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelOptionsChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 11 /* OutgoingViewModelEventKind.ModelOptionsChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelTokensChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 12 /* OutgoingViewModelEventKind.ModelTokensChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Scrollable } from '../../../base/common/scrollable.js';\nimport { LinesLayout } from './linesLayout.js';\nimport { Viewport } from '../viewModel.js';\nimport { ContentSizeChangedEvent } from '../viewModelEventDispatcher.js';\nconst SMOOTH_SCROLLING_TIME = 125;\nclass EditorScrollDimensions {\n    constructor(width, contentWidth, height, contentHeight) {\n        width = width | 0;\n        contentWidth = contentWidth | 0;\n        height = height | 0;\n        contentHeight = contentHeight | 0;\n        if (width < 0) {\n            width = 0;\n        }\n        if (contentWidth < 0) {\n            contentWidth = 0;\n        }\n        if (height < 0) {\n            height = 0;\n        }\n        if (contentHeight < 0) {\n            contentHeight = 0;\n        }\n        this.width = width;\n        this.contentWidth = contentWidth;\n        this.scrollWidth = Math.max(width, contentWidth);\n        this.height = height;\n        this.contentHeight = contentHeight;\n        this.scrollHeight = Math.max(height, contentHeight);\n    }\n    equals(other) {\n        return (this.width === other.width\n            && this.contentWidth === other.contentWidth\n            && this.height === other.height\n            && this.contentHeight === other.contentHeight);\n    }\n}\nclass EditorScrollable extends Disposable {\n    constructor(smoothScrollDuration, scheduleAtNextAnimationFrame) {\n        super();\n        this._onDidContentSizeChange = this._register(new Emitter());\n        this.onDidContentSizeChange = this._onDidContentSizeChange.event;\n        this._dimensions = new EditorScrollDimensions(0, 0, 0, 0);\n        this._scrollable = this._register(new Scrollable({\n            forceIntegerValues: true,\n            smoothScrollDuration,\n            scheduleAtNextAnimationFrame\n        }));\n        this.onDidScroll = this._scrollable.onScroll;\n    }\n    getScrollable() {\n        return this._scrollable;\n    }\n    setSmoothScrollDuration(smoothScrollDuration) {\n        this._scrollable.setSmoothScrollDuration(smoothScrollDuration);\n    }\n    validateScrollPosition(scrollPosition) {\n        return this._scrollable.validateScrollPosition(scrollPosition);\n    }\n    getScrollDimensions() {\n        return this._dimensions;\n    }\n    setScrollDimensions(dimensions) {\n        if (this._dimensions.equals(dimensions)) {\n            return;\n        }\n        const oldDimensions = this._dimensions;\n        this._dimensions = dimensions;\n        this._scrollable.setScrollDimensions({\n            width: dimensions.width,\n            scrollWidth: dimensions.scrollWidth,\n            height: dimensions.height,\n            scrollHeight: dimensions.scrollHeight\n        }, true);\n        const contentWidthChanged = (oldDimensions.contentWidth !== dimensions.contentWidth);\n        const contentHeightChanged = (oldDimensions.contentHeight !== dimensions.contentHeight);\n        if (contentWidthChanged || contentHeightChanged) {\n            this._onDidContentSizeChange.fire(new ContentSizeChangedEvent(oldDimensions.contentWidth, oldDimensions.contentHeight, dimensions.contentWidth, dimensions.contentHeight));\n        }\n    }\n    getFutureScrollPosition() {\n        return this._scrollable.getFutureScrollPosition();\n    }\n    getCurrentScrollPosition() {\n        return this._scrollable.getCurrentScrollPosition();\n    }\n    setScrollPositionNow(update) {\n        this._scrollable.setScrollPositionNow(update);\n    }\n    setScrollPositionSmooth(update) {\n        this._scrollable.setScrollPositionSmooth(update);\n    }\n    hasPendingScrollAnimation() {\n        return this._scrollable.hasPendingScrollAnimation();\n    }\n}\nexport class ViewLayout extends Disposable {\n    constructor(configuration, lineCount, scheduleAtNextAnimationFrame) {\n        super();\n        this._configuration = configuration;\n        const options = this._configuration.options;\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        const padding = options.get(84 /* EditorOption.padding */);\n        this._linesLayout = new LinesLayout(lineCount, options.get(67 /* EditorOption.lineHeight */), padding.top, padding.bottom);\n        this._maxLineWidth = 0;\n        this._overlayWidgetsMinWidth = 0;\n        this._scrollable = this._register(new EditorScrollable(0, scheduleAtNextAnimationFrame));\n        this._configureSmoothScrollDuration();\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(layoutInfo.contentWidth, 0, layoutInfo.height, 0));\n        this.onDidScroll = this._scrollable.onDidScroll;\n        this.onDidContentSizeChange = this._scrollable.onDidContentSizeChange;\n        this._updateHeight();\n    }\n    dispose() {\n        super.dispose();\n    }\n    getScrollable() {\n        return this._scrollable.getScrollable();\n    }\n    onHeightMaybeChanged() {\n        this._updateHeight();\n    }\n    _configureSmoothScrollDuration() {\n        this._scrollable.setSmoothScrollDuration(this._configuration.options.get(114 /* EditorOption.smoothScrolling */) ? SMOOTH_SCROLLING_TIME : 0);\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._configuration.options;\n        if (e.hasChanged(67 /* EditorOption.lineHeight */)) {\n            this._linesLayout.setLineHeight(options.get(67 /* EditorOption.lineHeight */));\n        }\n        if (e.hasChanged(84 /* EditorOption.padding */)) {\n            const padding = options.get(84 /* EditorOption.padding */);\n            this._linesLayout.setPadding(padding.top, padding.bottom);\n        }\n        if (e.hasChanged(144 /* EditorOption.layoutInfo */)) {\n            const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n            const width = layoutInfo.contentWidth;\n            const height = layoutInfo.height;\n            const scrollDimensions = this._scrollable.getScrollDimensions();\n            const contentWidth = scrollDimensions.contentWidth;\n            this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n        }\n        else {\n            this._updateHeight();\n        }\n        if (e.hasChanged(114 /* EditorOption.smoothScrolling */)) {\n            this._configureSmoothScrollDuration();\n        }\n    }\n    onFlushed(lineCount) {\n        this._linesLayout.onFlushed(lineCount);\n    }\n    onLinesDeleted(fromLineNumber, toLineNumber) {\n        this._linesLayout.onLinesDeleted(fromLineNumber, toLineNumber);\n    }\n    onLinesInserted(fromLineNumber, toLineNumber) {\n        this._linesLayout.onLinesInserted(fromLineNumber, toLineNumber);\n    }\n    // ---- end view event handlers\n    _getHorizontalScrollbarHeight(width, scrollWidth) {\n        const options = this._configuration.options;\n        const scrollbar = options.get(103 /* EditorOption.scrollbar */);\n        if (scrollbar.horizontal === 2 /* ScrollbarVisibility.Hidden */) {\n            // horizontal scrollbar not visible\n            return 0;\n        }\n        if (width >= scrollWidth) {\n            // horizontal scrollbar not visible\n            return 0;\n        }\n        return scrollbar.horizontalScrollbarSize;\n    }\n    _getContentHeight(width, height, contentWidth) {\n        const options = this._configuration.options;\n        let result = this._linesLayout.getLinesTotalHeight();\n        if (options.get(105 /* EditorOption.scrollBeyondLastLine */)) {\n            result += Math.max(0, height - options.get(67 /* EditorOption.lineHeight */) - options.get(84 /* EditorOption.padding */).bottom);\n        }\n        else if (!options.get(103 /* EditorOption.scrollbar */).ignoreHorizontalScrollbarInContentHeight) {\n            result += this._getHorizontalScrollbarHeight(width, contentWidth);\n        }\n        return result;\n    }\n    _updateHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const width = scrollDimensions.width;\n        const height = scrollDimensions.height;\n        const contentWidth = scrollDimensions.contentWidth;\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n    }\n    // ---- Layouting logic\n    getCurrentViewport() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    }\n    getFutureViewport() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n        return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    }\n    _computeContentWidth() {\n        const options = this._configuration.options;\n        const maxLineWidth = this._maxLineWidth;\n        const wrappingInfo = options.get(145 /* EditorOption.wrappingInfo */);\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const layoutInfo = options.get(144 /* EditorOption.layoutInfo */);\n        if (wrappingInfo.isViewportWrapping) {\n            const minimap = options.get(73 /* EditorOption.minimap */);\n            if (maxLineWidth > layoutInfo.contentWidth + fontInfo.typicalHalfwidthCharacterWidth) {\n                // This is a case where viewport wrapping is on, but the line extends above the viewport\n                if (minimap.enabled && minimap.side === 'right') {\n                    // We need to accomodate the scrollbar width\n                    return maxLineWidth + layoutInfo.verticalScrollbarWidth;\n                }\n            }\n            return maxLineWidth;\n        }\n        else {\n            const extraHorizontalSpace = options.get(104 /* EditorOption.scrollBeyondLastColumn */) * fontInfo.typicalHalfwidthCharacterWidth;\n            const whitespaceMinWidth = this._linesLayout.getWhitespaceMinWidth();\n            return Math.max(maxLineWidth + extraHorizontalSpace + layoutInfo.verticalScrollbarWidth, whitespaceMinWidth, this._overlayWidgetsMinWidth);\n        }\n    }\n    setMaxLineWidth(maxLineWidth) {\n        this._maxLineWidth = maxLineWidth;\n        this._updateContentWidth();\n    }\n    setOverlayWidgetsMinWidth(maxMinWidth) {\n        this._overlayWidgetsMinWidth = maxMinWidth;\n        this._updateContentWidth();\n    }\n    _updateContentWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(scrollDimensions.width, this._computeContentWidth(), scrollDimensions.height, scrollDimensions.contentHeight));\n        // The height might depend on the fact that there is a horizontal scrollbar or not\n        this._updateHeight();\n    }\n    // ---- view state\n    saveState() {\n        const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n        const scrollTop = currentScrollPosition.scrollTop;\n        const firstLineNumberInViewport = this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);\n        const whitespaceAboveFirstLine = this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport);\n        return {\n            scrollTop: scrollTop,\n            scrollTopWithoutViewZones: scrollTop - whitespaceAboveFirstLine,\n            scrollLeft: currentScrollPosition.scrollLeft\n        };\n    }\n    // ----\n    changeWhitespace(callback) {\n        const hadAChange = this._linesLayout.changeWhitespace(callback);\n        if (hadAChange) {\n            this.onHeightMaybeChanged();\n        }\n        return hadAChange;\n    }\n    getVerticalOffsetForLineNumber(lineNumber, includeViewZones = false) {\n        return this._linesLayout.getVerticalOffsetForLineNumber(lineNumber, includeViewZones);\n    }\n    getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones = false) {\n        return this._linesLayout.getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones);\n    }\n    isAfterLines(verticalOffset) {\n        return this._linesLayout.isAfterLines(verticalOffset);\n    }\n    isInTopPadding(verticalOffset) {\n        return this._linesLayout.isInTopPadding(verticalOffset);\n    }\n    isInBottomPadding(verticalOffset) {\n        return this._linesLayout.isInBottomPadding(verticalOffset);\n    }\n    getLineNumberAtVerticalOffset(verticalOffset) {\n        return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset);\n    }\n    getWhitespaceAtVerticalOffset(verticalOffset) {\n        return this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset);\n    }\n    getLinesViewportData() {\n        const visibleBox = this.getCurrentViewport();\n        return this._linesLayout.getLinesViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    }\n    getLinesViewportDataAtScrollTop(scrollTop) {\n        // do some minimal validations on scrollTop\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        if (scrollTop + scrollDimensions.height > scrollDimensions.scrollHeight) {\n            scrollTop = scrollDimensions.scrollHeight - scrollDimensions.height;\n        }\n        if (scrollTop < 0) {\n            scrollTop = 0;\n        }\n        return this._linesLayout.getLinesViewportData(scrollTop, scrollTop + scrollDimensions.height);\n    }\n    getWhitespaceViewportData() {\n        const visibleBox = this.getCurrentViewport();\n        return this._linesLayout.getWhitespaceViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    }\n    getWhitespaces() {\n        return this._linesLayout.getWhitespaces();\n    }\n    // ----\n    getContentWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.contentWidth;\n    }\n    getScrollWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.scrollWidth;\n    }\n    getContentHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.contentHeight;\n    }\n    getScrollHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.scrollHeight;\n    }\n    getCurrentScrollLeft() {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return currentScrollPosition.scrollLeft;\n    }\n    getCurrentScrollTop() {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return currentScrollPosition.scrollTop;\n    }\n    validateScrollPosition(scrollPosition) {\n        return this._scrollable.validateScrollPosition(scrollPosition);\n    }\n    setScrollPosition(position, type) {\n        if (type === 1 /* ScrollType.Immediate */) {\n            this._scrollable.setScrollPositionNow(position);\n        }\n        else {\n            this._scrollable.setScrollPositionSmooth(position);\n        }\n    }\n    hasPendingScrollAnimation() {\n        return this._scrollable.hasPendingScrollAnimation();\n    }\n    deltaScrollNow(deltaScrollLeft, deltaScrollTop) {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        this._scrollable.setScrollPositionNow({\n            scrollLeft: currentScrollPosition.scrollLeft + deltaScrollLeft,\n            scrollTop: currentScrollPosition.scrollTop + deltaScrollTop\n        });\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nclass PendingChanges {\n    constructor() {\n        this._hasPending = false;\n        this._inserts = [];\n        this._changes = [];\n        this._removes = [];\n    }\n    insert(x) {\n        this._hasPending = true;\n        this._inserts.push(x);\n    }\n    change(x) {\n        this._hasPending = true;\n        this._changes.push(x);\n    }\n    remove(x) {\n        this._hasPending = true;\n        this._removes.push(x);\n    }\n    mustCommit() {\n        return this._hasPending;\n    }\n    commit(linesLayout) {\n        if (!this._hasPending) {\n            return;\n        }\n        const inserts = this._inserts;\n        const changes = this._changes;\n        const removes = this._removes;\n        this._hasPending = false;\n        this._inserts = [];\n        this._changes = [];\n        this._removes = [];\n        linesLayout._commitPendingChanges(inserts, changes, removes);\n    }\n}\nexport class EditorWhitespace {\n    constructor(id, afterLineNumber, ordinal, height, minWidth) {\n        this.id = id;\n        this.afterLineNumber = afterLineNumber;\n        this.ordinal = ordinal;\n        this.height = height;\n        this.minWidth = minWidth;\n        this.prefixSum = 0;\n    }\n}\n/**\n * Layouting of objects that take vertical space (by having a height) and push down other objects.\n *\n * These objects are basically either text (lines) or spaces between those lines (whitespaces).\n * This provides commodity operations for working with lines that contain whitespace that pushes lines lower (vertically).\n */\nexport class LinesLayout {\n    constructor(lineCount, lineHeight, paddingTop, paddingBottom) {\n        this._instanceId = strings.singleLetterHash(++LinesLayout.INSTANCE_COUNT);\n        this._pendingChanges = new PendingChanges();\n        this._lastWhitespaceId = 0;\n        this._arr = [];\n        this._prefixSumValidIndex = -1;\n        this._minWidth = -1; /* marker for not being computed */\n        this._lineCount = lineCount;\n        this._lineHeight = lineHeight;\n        this._paddingTop = paddingTop;\n        this._paddingBottom = paddingBottom;\n    }\n    /**\n     * Find the insertion index for a new value inside a sorted array of values.\n     * If the value is already present in the sorted array, the insertion index will be after the already existing value.\n     */\n    static findInsertionIndex(arr, afterLineNumber, ordinal) {\n        let low = 0;\n        let high = arr.length;\n        while (low < high) {\n            const mid = ((low + high) >>> 1);\n            if (afterLineNumber === arr[mid].afterLineNumber) {\n                if (ordinal < arr[mid].ordinal) {\n                    high = mid;\n                }\n                else {\n                    low = mid + 1;\n                }\n            }\n            else if (afterLineNumber < arr[mid].afterLineNumber) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    /**\n     * Change the height of a line in pixels.\n     */\n    setLineHeight(lineHeight) {\n        this._checkPendingChanges();\n        this._lineHeight = lineHeight;\n    }\n    /**\n     * Changes the padding used to calculate vertical offsets.\n     */\n    setPadding(paddingTop, paddingBottom) {\n        this._paddingTop = paddingTop;\n        this._paddingBottom = paddingBottom;\n    }\n    /**\n     * Set the number of lines.\n     *\n     * @param lineCount New number of lines.\n     */\n    onFlushed(lineCount) {\n        this._checkPendingChanges();\n        this._lineCount = lineCount;\n    }\n    changeWhitespace(callback) {\n        let hadAChange = false;\n        try {\n            const accessor = {\n                insertWhitespace: (afterLineNumber, ordinal, heightInPx, minWidth) => {\n                    hadAChange = true;\n                    afterLineNumber = afterLineNumber | 0;\n                    ordinal = ordinal | 0;\n                    heightInPx = heightInPx | 0;\n                    minWidth = minWidth | 0;\n                    const id = this._instanceId + (++this._lastWhitespaceId);\n                    this._pendingChanges.insert(new EditorWhitespace(id, afterLineNumber, ordinal, heightInPx, minWidth));\n                    return id;\n                },\n                changeOneWhitespace: (id, newAfterLineNumber, newHeight) => {\n                    hadAChange = true;\n                    newAfterLineNumber = newAfterLineNumber | 0;\n                    newHeight = newHeight | 0;\n                    this._pendingChanges.change({ id, newAfterLineNumber, newHeight });\n                },\n                removeWhitespace: (id) => {\n                    hadAChange = true;\n                    this._pendingChanges.remove({ id });\n                }\n            };\n            callback(accessor);\n        }\n        finally {\n            this._pendingChanges.commit(this);\n        }\n        return hadAChange;\n    }\n    _commitPendingChanges(inserts, changes, removes) {\n        if (inserts.length > 0 || removes.length > 0) {\n            this._minWidth = -1; /* marker for not being computed */\n        }\n        if (inserts.length + changes.length + removes.length <= 1) {\n            // when only one thing happened, handle it \"delicately\"\n            for (const insert of inserts) {\n                this._insertWhitespace(insert);\n            }\n            for (const change of changes) {\n                this._changeOneWhitespace(change.id, change.newAfterLineNumber, change.newHeight);\n            }\n            for (const remove of removes) {\n                const index = this._findWhitespaceIndex(remove.id);\n                if (index === -1) {\n                    continue;\n                }\n                this._removeWhitespace(index);\n            }\n            return;\n        }\n        // simply rebuild the entire datastructure\n        const toRemove = new Set();\n        for (const remove of removes) {\n            toRemove.add(remove.id);\n        }\n        const toChange = new Map();\n        for (const change of changes) {\n            toChange.set(change.id, change);\n        }\n        const applyRemoveAndChange = (whitespaces) => {\n            const result = [];\n            for (const whitespace of whitespaces) {\n                if (toRemove.has(whitespace.id)) {\n                    continue;\n                }\n                if (toChange.has(whitespace.id)) {\n                    const change = toChange.get(whitespace.id);\n                    whitespace.afterLineNumber = change.newAfterLineNumber;\n                    whitespace.height = change.newHeight;\n                }\n                result.push(whitespace);\n            }\n            return result;\n        };\n        const result = applyRemoveAndChange(this._arr).concat(applyRemoveAndChange(inserts));\n        result.sort((a, b) => {\n            if (a.afterLineNumber === b.afterLineNumber) {\n                return a.ordinal - b.ordinal;\n            }\n            return a.afterLineNumber - b.afterLineNumber;\n        });\n        this._arr = result;\n        this._prefixSumValidIndex = -1;\n    }\n    _checkPendingChanges() {\n        if (this._pendingChanges.mustCommit()) {\n            this._pendingChanges.commit(this);\n        }\n    }\n    _insertWhitespace(whitespace) {\n        const insertIndex = LinesLayout.findInsertionIndex(this._arr, whitespace.afterLineNumber, whitespace.ordinal);\n        this._arr.splice(insertIndex, 0, whitespace);\n        this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, insertIndex - 1);\n    }\n    _findWhitespaceIndex(id) {\n        const arr = this._arr;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            if (arr[i].id === id) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    _changeOneWhitespace(id, newAfterLineNumber, newHeight) {\n        const index = this._findWhitespaceIndex(id);\n        if (index === -1) {\n            return;\n        }\n        if (this._arr[index].height !== newHeight) {\n            this._arr[index].height = newHeight;\n            this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, index - 1);\n        }\n        if (this._arr[index].afterLineNumber !== newAfterLineNumber) {\n            // `afterLineNumber` changed for this whitespace\n            // Record old whitespace\n            const whitespace = this._arr[index];\n            // Since changing `afterLineNumber` can trigger a reordering, we're gonna remove this whitespace\n            this._removeWhitespace(index);\n            whitespace.afterLineNumber = newAfterLineNumber;\n            // And add it again\n            this._insertWhitespace(whitespace);\n        }\n    }\n    _removeWhitespace(removeIndex) {\n        this._arr.splice(removeIndex, 1);\n        this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, removeIndex - 1);\n    }\n    /**\n     * Notify the layouter that lines have been deleted (a continuous zone of lines).\n     *\n     * @param fromLineNumber The line number at which the deletion started, inclusive\n     * @param toLineNumber The line number at which the deletion ended, inclusive\n     */\n    onLinesDeleted(fromLineNumber, toLineNumber) {\n        this._checkPendingChanges();\n        fromLineNumber = fromLineNumber | 0;\n        toLineNumber = toLineNumber | 0;\n        this._lineCount -= (toLineNumber - fromLineNumber + 1);\n        for (let i = 0, len = this._arr.length; i < len; i++) {\n            const afterLineNumber = this._arr[i].afterLineNumber;\n            if (fromLineNumber <= afterLineNumber && afterLineNumber <= toLineNumber) {\n                // The line this whitespace was after has been deleted\n                //  => move whitespace to before first deleted line\n                this._arr[i].afterLineNumber = fromLineNumber - 1;\n            }\n            else if (afterLineNumber > toLineNumber) {\n                // The line this whitespace was after has been moved up\n                //  => move whitespace up\n                this._arr[i].afterLineNumber -= (toLineNumber - fromLineNumber + 1);\n            }\n        }\n    }\n    /**\n     * Notify the layouter that lines have been inserted (a continuous zone of lines).\n     *\n     * @param fromLineNumber The line number at which the insertion started, inclusive\n     * @param toLineNumber The line number at which the insertion ended, inclusive.\n     */\n    onLinesInserted(fromLineNumber, toLineNumber) {\n        this._checkPendingChanges();\n        fromLineNumber = fromLineNumber | 0;\n        toLineNumber = toLineNumber | 0;\n        this._lineCount += (toLineNumber - fromLineNumber + 1);\n        for (let i = 0, len = this._arr.length; i < len; i++) {\n            const afterLineNumber = this._arr[i].afterLineNumber;\n            if (fromLineNumber <= afterLineNumber) {\n                this._arr[i].afterLineNumber += (toLineNumber - fromLineNumber + 1);\n            }\n        }\n    }\n    /**\n     * Get the sum of all the whitespaces.\n     */\n    getWhitespacesTotalHeight() {\n        this._checkPendingChanges();\n        if (this._arr.length === 0) {\n            return 0;\n        }\n        return this.getWhitespacesAccumulatedHeight(this._arr.length - 1);\n    }\n    /**\n     * Return the sum of the heights of the whitespaces at [0..index].\n     * This includes the whitespace at `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return The sum of the heights of all whitespaces before the one at `index`, including the one at `index`.\n     */\n    getWhitespacesAccumulatedHeight(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        let startIndex = Math.max(0, this._prefixSumValidIndex + 1);\n        if (startIndex === 0) {\n            this._arr[0].prefixSum = this._arr[0].height;\n            startIndex++;\n        }\n        for (let i = startIndex; i <= index; i++) {\n            this._arr[i].prefixSum = this._arr[i - 1].prefixSum + this._arr[i].height;\n        }\n        this._prefixSumValidIndex = Math.max(this._prefixSumValidIndex, index);\n        return this._arr[index].prefixSum;\n    }\n    /**\n     * Get the sum of heights for all objects.\n     *\n     * @return The sum of heights for all objects.\n     */\n    getLinesTotalHeight() {\n        this._checkPendingChanges();\n        const linesHeight = this._lineHeight * this._lineCount;\n        const whitespacesHeight = this.getWhitespacesTotalHeight();\n        return linesHeight + whitespacesHeight + this._paddingTop + this._paddingBottom;\n    }\n    /**\n     * Returns the accumulated height of whitespaces before the given line number.\n     *\n     * @param lineNumber The line number\n     */\n    getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        const lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\n        if (lastWhitespaceBeforeLineNumber === -1) {\n            return 0;\n        }\n        return this.getWhitespacesAccumulatedHeight(lastWhitespaceBeforeLineNumber);\n    }\n    _findLastWhitespaceBeforeLineNumber(lineNumber) {\n        lineNumber = lineNumber | 0;\n        // Find the whitespace before line number\n        const arr = this._arr;\n        let low = 0;\n        let high = arr.length - 1;\n        while (low <= high) {\n            const delta = (high - low) | 0;\n            const halfDelta = (delta / 2) | 0;\n            const mid = (low + halfDelta) | 0;\n            if (arr[mid].afterLineNumber < lineNumber) {\n                if (mid + 1 >= arr.length || arr[mid + 1].afterLineNumber >= lineNumber) {\n                    return mid;\n                }\n                else {\n                    low = (mid + 1) | 0;\n                }\n            }\n            else {\n                high = (mid - 1) | 0;\n            }\n        }\n        return -1;\n    }\n    _findFirstWhitespaceAfterLineNumber(lineNumber) {\n        lineNumber = lineNumber | 0;\n        const lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\n        const firstWhitespaceAfterLineNumber = lastWhitespaceBeforeLineNumber + 1;\n        if (firstWhitespaceAfterLineNumber < this._arr.length) {\n            return firstWhitespaceAfterLineNumber;\n        }\n        return -1;\n    }\n    /**\n     * Find the index of the first whitespace which has `afterLineNumber` >= `lineNumber`.\n     * @return The index of the first whitespace with `afterLineNumber` >= `lineNumber` or -1 if no whitespace is found.\n     */\n    getFirstWhitespaceIndexAfterLineNumber(lineNumber) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        return this._findFirstWhitespaceAfterLineNumber(lineNumber);\n    }\n    /**\n     * Get the vertical offset (the sum of heights for all objects above) a certain line number.\n     *\n     * @param lineNumber The line number\n     * @return The sum of heights for all objects above `lineNumber`.\n     */\n    getVerticalOffsetForLineNumber(lineNumber, includeViewZones = false) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        let previousLinesHeight;\n        if (lineNumber > 1) {\n            previousLinesHeight = this._lineHeight * (lineNumber - 1);\n        }\n        else {\n            previousLinesHeight = 0;\n        }\n        const previousWhitespacesHeight = this.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber - (includeViewZones ? 1 : 0));\n        return previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n    }\n    /**\n     * Get the vertical offset (the sum of heights for all objects above) a certain line number.\n     *\n     * @param lineNumber The line number\n     * @return The sum of heights for all objects above `lineNumber`.\n     */\n    getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones = false) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        const previousLinesHeight = this._lineHeight * lineNumber;\n        const previousWhitespacesHeight = this.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber + (includeViewZones ? 1 : 0));\n        return previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n    }\n    /**\n     * The maximum min width for all whitespaces.\n     */\n    getWhitespaceMinWidth() {\n        this._checkPendingChanges();\n        if (this._minWidth === -1) {\n            let minWidth = 0;\n            for (let i = 0, len = this._arr.length; i < len; i++) {\n                minWidth = Math.max(minWidth, this._arr[i].minWidth);\n            }\n            this._minWidth = minWidth;\n        }\n        return this._minWidth;\n    }\n    /**\n     * Check if `verticalOffset` is below all lines.\n     */\n    isAfterLines(verticalOffset) {\n        this._checkPendingChanges();\n        const totalHeight = this.getLinesTotalHeight();\n        return verticalOffset > totalHeight;\n    }\n    isInTopPadding(verticalOffset) {\n        if (this._paddingTop === 0) {\n            return false;\n        }\n        this._checkPendingChanges();\n        return (verticalOffset < this._paddingTop);\n    }\n    isInBottomPadding(verticalOffset) {\n        if (this._paddingBottom === 0) {\n            return false;\n        }\n        this._checkPendingChanges();\n        const totalHeight = this.getLinesTotalHeight();\n        return (verticalOffset >= totalHeight - this._paddingBottom);\n    }\n    /**\n     * Find the first line number that is at or after vertical offset `verticalOffset`.\n     * i.e. if getVerticalOffsetForLine(line) is x and getVerticalOffsetForLine(line + 1) is y, then\n     * getLineNumberAtOrAfterVerticalOffset(i) = line, x <= i < y.\n     *\n     * @param verticalOffset The vertical offset to search at.\n     * @return The line number at or after vertical offset `verticalOffset`.\n     */\n    getLineNumberAtOrAfterVerticalOffset(verticalOffset) {\n        this._checkPendingChanges();\n        verticalOffset = verticalOffset | 0;\n        if (verticalOffset < 0) {\n            return 1;\n        }\n        const linesCount = this._lineCount | 0;\n        const lineHeight = this._lineHeight;\n        let minLineNumber = 1;\n        let maxLineNumber = linesCount;\n        while (minLineNumber < maxLineNumber) {\n            const midLineNumber = ((minLineNumber + maxLineNumber) / 2) | 0;\n            const midLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(midLineNumber) | 0;\n            if (verticalOffset >= midLineNumberVerticalOffset + lineHeight) {\n                // vertical offset is after mid line number\n                minLineNumber = midLineNumber + 1;\n            }\n            else if (verticalOffset >= midLineNumberVerticalOffset) {\n                // Hit\n                return midLineNumber;\n            }\n            else {\n                // vertical offset is before mid line number, but mid line number could still be what we're searching for\n                maxLineNumber = midLineNumber;\n            }\n        }\n        if (minLineNumber > linesCount) {\n            return linesCount;\n        }\n        return minLineNumber;\n    }\n    /**\n     * Get all the lines and their relative vertical offsets that are positioned between `verticalOffset1` and `verticalOffset2`.\n     *\n     * @param verticalOffset1 The beginning of the viewport.\n     * @param verticalOffset2 The end of the viewport.\n     * @return A structure describing the lines positioned between `verticalOffset1` and `verticalOffset2`.\n     */\n    getLinesViewportData(verticalOffset1, verticalOffset2) {\n        this._checkPendingChanges();\n        verticalOffset1 = verticalOffset1 | 0;\n        verticalOffset2 = verticalOffset2 | 0;\n        const lineHeight = this._lineHeight;\n        // Find first line number\n        // We don't live in a perfect world, so the line number might start before or after verticalOffset1\n        const startLineNumber = this.getLineNumberAtOrAfterVerticalOffset(verticalOffset1) | 0;\n        const startLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(startLineNumber) | 0;\n        let endLineNumber = this._lineCount | 0;\n        // Also keep track of what whitespace we've got\n        let whitespaceIndex = this.getFirstWhitespaceIndexAfterLineNumber(startLineNumber) | 0;\n        const whitespaceCount = this.getWhitespacesCount() | 0;\n        let currentWhitespaceHeight;\n        let currentWhitespaceAfterLineNumber;\n        if (whitespaceIndex === -1) {\n            whitespaceIndex = whitespaceCount;\n            currentWhitespaceAfterLineNumber = endLineNumber + 1;\n            currentWhitespaceHeight = 0;\n        }\n        else {\n            currentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n            currentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n        }\n        let currentVerticalOffset = startLineNumberVerticalOffset;\n        let currentLineRelativeOffset = currentVerticalOffset;\n        // IE (all versions) cannot handle units above about 1,533,908 px, so every 500k pixels bring numbers down\n        const STEP_SIZE = 500000;\n        let bigNumbersDelta = 0;\n        if (startLineNumberVerticalOffset >= STEP_SIZE) {\n            // Compute a delta that guarantees that lines are positioned at `lineHeight` increments\n            bigNumbersDelta = Math.floor(startLineNumberVerticalOffset / STEP_SIZE) * STEP_SIZE;\n            bigNumbersDelta = Math.floor(bigNumbersDelta / lineHeight) * lineHeight;\n            currentLineRelativeOffset -= bigNumbersDelta;\n        }\n        const linesOffsets = [];\n        const verticalCenter = verticalOffset1 + (verticalOffset2 - verticalOffset1) / 2;\n        let centeredLineNumber = -1;\n        // Figure out how far the lines go\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            if (centeredLineNumber === -1) {\n                const currentLineTop = currentVerticalOffset;\n                const currentLineBottom = currentVerticalOffset + lineHeight;\n                if ((currentLineTop <= verticalCenter && verticalCenter < currentLineBottom) || currentLineTop > verticalCenter) {\n                    centeredLineNumber = lineNumber;\n                }\n            }\n            // Count current line height in the vertical offsets\n            currentVerticalOffset += lineHeight;\n            linesOffsets[lineNumber - startLineNumber] = currentLineRelativeOffset;\n            // Next line starts immediately after this one\n            currentLineRelativeOffset += lineHeight;\n            while (currentWhitespaceAfterLineNumber === lineNumber) {\n                // Push down next line with the height of the current whitespace\n                currentLineRelativeOffset += currentWhitespaceHeight;\n                // Count current whitespace in the vertical offsets\n                currentVerticalOffset += currentWhitespaceHeight;\n                whitespaceIndex++;\n                if (whitespaceIndex >= whitespaceCount) {\n                    currentWhitespaceAfterLineNumber = endLineNumber + 1;\n                }\n                else {\n                    currentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n                    currentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n                }\n            }\n            if (currentVerticalOffset >= verticalOffset2) {\n                // We have covered the entire viewport area, time to stop\n                endLineNumber = lineNumber;\n                break;\n            }\n        }\n        if (centeredLineNumber === -1) {\n            centeredLineNumber = endLineNumber;\n        }\n        const endLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(endLineNumber) | 0;\n        let completelyVisibleStartLineNumber = startLineNumber;\n        let completelyVisibleEndLineNumber = endLineNumber;\n        if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n            if (startLineNumberVerticalOffset < verticalOffset1) {\n                completelyVisibleStartLineNumber++;\n            }\n        }\n        if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n            if (endLineNumberVerticalOffset + lineHeight > verticalOffset2) {\n                completelyVisibleEndLineNumber--;\n            }\n        }\n        return {\n            bigNumbersDelta: bigNumbersDelta,\n            startLineNumber: startLineNumber,\n            endLineNumber: endLineNumber,\n            relativeVerticalOffset: linesOffsets,\n            centeredLineNumber: centeredLineNumber,\n            completelyVisibleStartLineNumber: completelyVisibleStartLineNumber,\n            completelyVisibleEndLineNumber: completelyVisibleEndLineNumber\n        };\n    }\n    getVerticalOffsetForWhitespaceIndex(whitespaceIndex) {\n        this._checkPendingChanges();\n        whitespaceIndex = whitespaceIndex | 0;\n        const afterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex);\n        let previousLinesHeight;\n        if (afterLineNumber >= 1) {\n            previousLinesHeight = this._lineHeight * afterLineNumber;\n        }\n        else {\n            previousLinesHeight = 0;\n        }\n        let previousWhitespacesHeight;\n        if (whitespaceIndex > 0) {\n            previousWhitespacesHeight = this.getWhitespacesAccumulatedHeight(whitespaceIndex - 1);\n        }\n        else {\n            previousWhitespacesHeight = 0;\n        }\n        return previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n    }\n    getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset) {\n        this._checkPendingChanges();\n        verticalOffset = verticalOffset | 0;\n        let minWhitespaceIndex = 0;\n        let maxWhitespaceIndex = this.getWhitespacesCount() - 1;\n        if (maxWhitespaceIndex < 0) {\n            return -1;\n        }\n        // Special case: nothing to be found\n        const maxWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(maxWhitespaceIndex);\n        const maxWhitespaceHeight = this.getHeightForWhitespaceIndex(maxWhitespaceIndex);\n        if (verticalOffset >= maxWhitespaceVerticalOffset + maxWhitespaceHeight) {\n            return -1;\n        }\n        while (minWhitespaceIndex < maxWhitespaceIndex) {\n            const midWhitespaceIndex = Math.floor((minWhitespaceIndex + maxWhitespaceIndex) / 2);\n            const midWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(midWhitespaceIndex);\n            const midWhitespaceHeight = this.getHeightForWhitespaceIndex(midWhitespaceIndex);\n            if (verticalOffset >= midWhitespaceVerticalOffset + midWhitespaceHeight) {\n                // vertical offset is after whitespace\n                minWhitespaceIndex = midWhitespaceIndex + 1;\n            }\n            else if (verticalOffset >= midWhitespaceVerticalOffset) {\n                // Hit\n                return midWhitespaceIndex;\n            }\n            else {\n                // vertical offset is before whitespace, but midWhitespaceIndex might still be what we're searching for\n                maxWhitespaceIndex = midWhitespaceIndex;\n            }\n        }\n        return minWhitespaceIndex;\n    }\n    /**\n     * Get exactly the whitespace that is layouted at `verticalOffset`.\n     *\n     * @param verticalOffset The vertical offset.\n     * @return Precisely the whitespace that is layouted at `verticaloffset` or null.\n     */\n    getWhitespaceAtVerticalOffset(verticalOffset) {\n        this._checkPendingChanges();\n        verticalOffset = verticalOffset | 0;\n        const candidateIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset);\n        if (candidateIndex < 0) {\n            return null;\n        }\n        if (candidateIndex >= this.getWhitespacesCount()) {\n            return null;\n        }\n        const candidateTop = this.getVerticalOffsetForWhitespaceIndex(candidateIndex);\n        if (candidateTop > verticalOffset) {\n            return null;\n        }\n        const candidateHeight = this.getHeightForWhitespaceIndex(candidateIndex);\n        const candidateId = this.getIdForWhitespaceIndex(candidateIndex);\n        const candidateAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(candidateIndex);\n        return {\n            id: candidateId,\n            afterLineNumber: candidateAfterLineNumber,\n            verticalOffset: candidateTop,\n            height: candidateHeight\n        };\n    }\n    /**\n     * Get a list of whitespaces that are positioned between `verticalOffset1` and `verticalOffset2`.\n     *\n     * @param verticalOffset1 The beginning of the viewport.\n     * @param verticalOffset2 The end of the viewport.\n     * @return An array with all the whitespaces in the viewport. If no whitespace is in viewport, the array is empty.\n     */\n    getWhitespaceViewportData(verticalOffset1, verticalOffset2) {\n        this._checkPendingChanges();\n        verticalOffset1 = verticalOffset1 | 0;\n        verticalOffset2 = verticalOffset2 | 0;\n        const startIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset1);\n        const endIndex = this.getWhitespacesCount() - 1;\n        if (startIndex < 0) {\n            return [];\n        }\n        const result = [];\n        for (let i = startIndex; i <= endIndex; i++) {\n            const top = this.getVerticalOffsetForWhitespaceIndex(i);\n            const height = this.getHeightForWhitespaceIndex(i);\n            if (top >= verticalOffset2) {\n                break;\n            }\n            result.push({\n                id: this.getIdForWhitespaceIndex(i),\n                afterLineNumber: this.getAfterLineNumberForWhitespaceIndex(i),\n                verticalOffset: top,\n                height: height\n            });\n        }\n        return result;\n    }\n    /**\n     * Get all whitespaces.\n     */\n    getWhitespaces() {\n        this._checkPendingChanges();\n        return this._arr.slice(0);\n    }\n    /**\n     * The number of whitespaces.\n     */\n    getWhitespacesCount() {\n        this._checkPendingChanges();\n        return this._arr.length;\n    }\n    /**\n     * Get the `id` for whitespace at index `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return `id` of whitespace at `index`.\n     */\n    getIdForWhitespaceIndex(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        return this._arr[index].id;\n    }\n    /**\n     * Get the `afterLineNumber` for whitespace at index `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return `afterLineNumber` of whitespace at `index`.\n     */\n    getAfterLineNumberForWhitespaceIndex(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        return this._arr[index].afterLineNumber;\n    }\n    /**\n     * Get the `height` for whitespace at index `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return `height` of whitespace at `index`.\n     */\n    getHeightForWhitespaceIndex(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        return this._arr[index].height;\n    }\n}\nLinesLayout.INSTANCE_COUNT = 0;\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { InlineDecoration, ViewModelDecoration } from '../viewModel.js';\nimport { filterValidationDecorations } from '../config/editorOptions.js';\nexport class ViewModelDecorations {\n    constructor(editorId, model, configuration, linesCollection, coordinatesConverter) {\n        this.editorId = editorId;\n        this.model = model;\n        this.configuration = configuration;\n        this._linesCollection = linesCollection;\n        this._coordinatesConverter = coordinatesConverter;\n        this._decorationsCache = Object.create(null);\n        this._cachedModelDecorationsResolver = null;\n        this._cachedModelDecorationsResolverViewRange = null;\n    }\n    _clearCachedModelDecorationsResolver() {\n        this._cachedModelDecorationsResolver = null;\n        this._cachedModelDecorationsResolverViewRange = null;\n    }\n    dispose() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    reset() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    onModelDecorationsChanged() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    onLineMappingChanged() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    _getOrCreateViewModelDecoration(modelDecoration) {\n        const id = modelDecoration.id;\n        let r = this._decorationsCache[id];\n        if (!r) {\n            const modelRange = modelDecoration.range;\n            const options = modelDecoration.options;\n            let viewRange;\n            if (options.isWholeLine) {\n                const start = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.startLineNumber, 1), 0 /* PositionAffinity.Left */, false, true);\n                const end = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.endLineNumber, this.model.getLineMaxColumn(modelRange.endLineNumber)), 1 /* PositionAffinity.Right */);\n                viewRange = new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n            }\n            else {\n                // For backwards compatibility reasons, we want injected text before any decoration.\n                // Thus, move decorations to the right.\n                viewRange = this._coordinatesConverter.convertModelRangeToViewRange(modelRange, 1 /* PositionAffinity.Right */);\n            }\n            r = new ViewModelDecoration(viewRange, options);\n            this._decorationsCache[id] = r;\n        }\n        return r;\n    }\n    getMinimapDecorationsInRange(range) {\n        return this._getDecorationsInRange(range, true, false).decorations;\n    }\n    getDecorationsViewportData(viewRange) {\n        let cacheIsValid = (this._cachedModelDecorationsResolver !== null);\n        cacheIsValid = cacheIsValid && (viewRange.equalsRange(this._cachedModelDecorationsResolverViewRange));\n        if (!cacheIsValid) {\n            this._cachedModelDecorationsResolver = this._getDecorationsInRange(viewRange, false, false);\n            this._cachedModelDecorationsResolverViewRange = viewRange;\n        }\n        return this._cachedModelDecorationsResolver;\n    }\n    getInlineDecorationsOnLine(lineNumber, onlyMinimapDecorations = false, onlyMarginDecorations = false) {\n        const range = new Range(lineNumber, this._linesCollection.getViewLineMinColumn(lineNumber), lineNumber, this._linesCollection.getViewLineMaxColumn(lineNumber));\n        return this._getDecorationsInRange(range, onlyMinimapDecorations, onlyMarginDecorations).inlineDecorations[0];\n    }\n    _getDecorationsInRange(viewRange, onlyMinimapDecorations, onlyMarginDecorations) {\n        const modelDecorations = this._linesCollection.getDecorationsInRange(viewRange, this.editorId, filterValidationDecorations(this.configuration.options), onlyMinimapDecorations, onlyMarginDecorations);\n        const startLineNumber = viewRange.startLineNumber;\n        const endLineNumber = viewRange.endLineNumber;\n        const decorationsInViewport = [];\n        let decorationsInViewportLen = 0;\n        const inlineDecorations = [];\n        for (let j = startLineNumber; j <= endLineNumber; j++) {\n            inlineDecorations[j - startLineNumber] = [];\n        }\n        for (let i = 0, len = modelDecorations.length; i < len; i++) {\n            const modelDecoration = modelDecorations[i];\n            const decorationOptions = modelDecoration.options;\n            if (!isModelDecorationVisible(this.model, modelDecoration)) {\n                continue;\n            }\n            const viewModelDecoration = this._getOrCreateViewModelDecoration(modelDecoration);\n            const viewRange = viewModelDecoration.range;\n            decorationsInViewport[decorationsInViewportLen++] = viewModelDecoration;\n            if (decorationOptions.inlineClassName) {\n                const inlineDecoration = new InlineDecoration(viewRange, decorationOptions.inlineClassName, decorationOptions.inlineClassNameAffectsLetterSpacing ? 3 /* InlineDecorationType.RegularAffectingLetterSpacing */ : 0 /* InlineDecorationType.Regular */);\n                const intersectedStartLineNumber = Math.max(startLineNumber, viewRange.startLineNumber);\n                const intersectedEndLineNumber = Math.min(endLineNumber, viewRange.endLineNumber);\n                for (let j = intersectedStartLineNumber; j <= intersectedEndLineNumber; j++) {\n                    inlineDecorations[j - startLineNumber].push(inlineDecoration);\n                }\n            }\n            if (decorationOptions.beforeContentClassName) {\n                if (startLineNumber <= viewRange.startLineNumber && viewRange.startLineNumber <= endLineNumber) {\n                    const inlineDecoration = new InlineDecoration(new Range(viewRange.startLineNumber, viewRange.startColumn, viewRange.startLineNumber, viewRange.startColumn), decorationOptions.beforeContentClassName, 1 /* InlineDecorationType.Before */);\n                    inlineDecorations[viewRange.startLineNumber - startLineNumber].push(inlineDecoration);\n                }\n            }\n            if (decorationOptions.afterContentClassName) {\n                if (startLineNumber <= viewRange.endLineNumber && viewRange.endLineNumber <= endLineNumber) {\n                    const inlineDecoration = new InlineDecoration(new Range(viewRange.endLineNumber, viewRange.endColumn, viewRange.endLineNumber, viewRange.endColumn), decorationOptions.afterContentClassName, 2 /* InlineDecorationType.After */);\n                    inlineDecorations[viewRange.endLineNumber - startLineNumber].push(inlineDecoration);\n                }\n            }\n        }\n        return {\n            decorations: decorationsInViewport,\n            inlineDecorations: inlineDecorations\n        };\n    }\n}\nexport function isModelDecorationVisible(model, decoration) {\n    if (decoration.options.hideInCommentTokens && isModelDecorationInComment(model, decoration)) {\n        return false;\n    }\n    if (decoration.options.hideInStringTokens && isModelDecorationInString(model, decoration)) {\n        return false;\n    }\n    return true;\n}\nexport function isModelDecorationInComment(model, decoration) {\n    return testTokensInRange(model, decoration.range, (tokenType) => tokenType === 1 /* StandardTokenType.Comment */);\n}\nexport function isModelDecorationInString(model, decoration) {\n    return testTokensInRange(model, decoration.range, (tokenType) => tokenType === 2 /* StandardTokenType.String */);\n}\n/**\n * Calls the callback for every token that intersects the range.\n * If the callback returns `false`, iteration stops and `false` is returned.\n * Otherwise, `true` is returned.\n */\nfunction testTokensInRange(model, range, callback) {\n    for (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n        const lineTokens = model.tokenization.getLineTokens(lineNumber);\n        const isFirstLine = lineNumber === range.startLineNumber;\n        const isEndLine = lineNumber === range.endLineNumber;\n        let tokenIdx = isFirstLine ? lineTokens.findTokenIndexAtOffset(range.startColumn - 1) : 0;\n        while (tokenIdx < lineTokens.getCount()) {\n            if (isEndLine) {\n                const startOffset = lineTokens.getStartOffset(tokenIdx);\n                if (startOffset > range.endColumn - 1) {\n                    break;\n                }\n            }\n            const callbackResult = callback(lineTokens.getStandardTokenType(tokenIdx));\n            if (!callbackResult) {\n                return false;\n            }\n            tokenIdx++;\n        }\n    }\n    return true;\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { IndentGuide, IndentGuideHorizontalLine } from '../textModelGuides.js';\nimport { ModelDecorationOptions } from '../model/textModel.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { createModelLineProjection } from './modelLineProjection.js';\nimport { ConstantTimePrefixSumComputer } from '../model/prefixSumComputer.js';\nimport { ViewLineData } from '../viewModel.js';\nexport class ViewModelLinesFromProjectedModel {\n    constructor(editorId, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, tabSize, wrappingStrategy, wrappingColumn, wrappingIndent, wordBreak) {\n        this._editorId = editorId;\n        this.model = model;\n        this._validModelVersionId = -1;\n        this._domLineBreaksComputerFactory = domLineBreaksComputerFactory;\n        this._monospaceLineBreaksComputerFactory = monospaceLineBreaksComputerFactory;\n        this.fontInfo = fontInfo;\n        this.tabSize = tabSize;\n        this.wrappingStrategy = wrappingStrategy;\n        this.wrappingColumn = wrappingColumn;\n        this.wrappingIndent = wrappingIndent;\n        this.wordBreak = wordBreak;\n        this._constructLines(/*resetHiddenAreas*/ true, null);\n    }\n    dispose() {\n        this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, []);\n    }\n    createCoordinatesConverter() {\n        return new CoordinatesConverter(this);\n    }\n    _constructLines(resetHiddenAreas, previousLineBreaks) {\n        this.modelLineProjections = [];\n        if (resetHiddenAreas) {\n            this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, []);\n        }\n        const linesContent = this.model.getLinesContent();\n        const injectedTextDecorations = this.model.getInjectedTextDecorations(this._editorId);\n        const lineCount = linesContent.length;\n        const lineBreaksComputer = this.createLineBreaksComputer();\n        const injectedTextQueue = new arrays.ArrayQueue(LineInjectedText.fromDecorations(injectedTextDecorations));\n        for (let i = 0; i < lineCount; i++) {\n            const lineInjectedText = injectedTextQueue.takeWhile(t => t.lineNumber === i + 1);\n            lineBreaksComputer.addRequest(linesContent[i], lineInjectedText, previousLineBreaks ? previousLineBreaks[i] : null);\n        }\n        const linesBreaks = lineBreaksComputer.finalize();\n        const values = [];\n        const hiddenAreas = this.hiddenAreasDecorationIds.map((areaId) => this.model.getDecorationRange(areaId)).sort(Range.compareRangesUsingStarts);\n        let hiddenAreaStart = 1, hiddenAreaEnd = 0;\n        let hiddenAreaIdx = -1;\n        let nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\n        for (let i = 0; i < lineCount; i++) {\n            const lineNumber = i + 1;\n            if (lineNumber === nextLineNumberToUpdateHiddenArea) {\n                hiddenAreaIdx++;\n                hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\n                hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\n                nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\n            }\n            const isInHiddenArea = (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd);\n            const line = createModelLineProjection(linesBreaks[i], !isInHiddenArea);\n            values[i] = line.getViewLineCount();\n            this.modelLineProjections[i] = line;\n        }\n        this._validModelVersionId = this.model.getVersionId();\n        this.projectedModelLineLineCounts = new ConstantTimePrefixSumComputer(values);\n    }\n    getHiddenAreas() {\n        return this.hiddenAreasDecorationIds.map((decId) => this.model.getDecorationRange(decId));\n    }\n    setHiddenAreas(_ranges) {\n        const validatedRanges = _ranges.map(r => this.model.validateRange(r));\n        const newRanges = normalizeLineRanges(validatedRanges);\n        // TODO@Martin: Please stop calling this method on each model change!\n        // This checks if there really was a change\n        const oldRanges = this.hiddenAreasDecorationIds.map((areaId) => this.model.getDecorationRange(areaId)).sort(Range.compareRangesUsingStarts);\n        if (newRanges.length === oldRanges.length) {\n            let hasDifference = false;\n            for (let i = 0; i < newRanges.length; i++) {\n                if (!newRanges[i].equalsRange(oldRanges[i])) {\n                    hasDifference = true;\n                    break;\n                }\n            }\n            if (!hasDifference) {\n                return false;\n            }\n        }\n        const newDecorations = newRanges.map((r) => ({\n            range: r,\n            options: ModelDecorationOptions.EMPTY,\n        }));\n        this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, newDecorations);\n        const hiddenAreas = newRanges;\n        let hiddenAreaStart = 1, hiddenAreaEnd = 0;\n        let hiddenAreaIdx = -1;\n        let nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.modelLineProjections.length + 2;\n        let hasVisibleLine = false;\n        for (let i = 0; i < this.modelLineProjections.length; i++) {\n            const lineNumber = i + 1;\n            if (lineNumber === nextLineNumberToUpdateHiddenArea) {\n                hiddenAreaIdx++;\n                hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\n                hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\n                nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.modelLineProjections.length + 2;\n            }\n            let lineChanged = false;\n            if (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd) {\n                // Line should be hidden\n                if (this.modelLineProjections[i].isVisible()) {\n                    this.modelLineProjections[i] = this.modelLineProjections[i].setVisible(false);\n                    lineChanged = true;\n                }\n            }\n            else {\n                hasVisibleLine = true;\n                // Line should be visible\n                if (!this.modelLineProjections[i].isVisible()) {\n                    this.modelLineProjections[i] = this.modelLineProjections[i].setVisible(true);\n                    lineChanged = true;\n                }\n            }\n            if (lineChanged) {\n                const newOutputLineCount = this.modelLineProjections[i].getViewLineCount();\n                this.projectedModelLineLineCounts.setValue(i, newOutputLineCount);\n            }\n        }\n        if (!hasVisibleLine) {\n            // Cannot have everything be hidden => reveal everything!\n            this.setHiddenAreas([]);\n        }\n        return true;\n    }\n    modelPositionIsVisible(modelLineNumber, _modelColumn) {\n        if (modelLineNumber < 1 || modelLineNumber > this.modelLineProjections.length) {\n            // invalid arguments\n            return false;\n        }\n        return this.modelLineProjections[modelLineNumber - 1].isVisible();\n    }\n    getModelLineViewLineCount(modelLineNumber) {\n        if (modelLineNumber < 1 || modelLineNumber > this.modelLineProjections.length) {\n            // invalid arguments\n            return 1;\n        }\n        return this.modelLineProjections[modelLineNumber - 1].getViewLineCount();\n    }\n    setTabSize(newTabSize) {\n        if (this.tabSize === newTabSize) {\n            return false;\n        }\n        this.tabSize = newTabSize;\n        this._constructLines(/*resetHiddenAreas*/ false, null);\n        return true;\n    }\n    setWrappingSettings(fontInfo, wrappingStrategy, wrappingColumn, wrappingIndent, wordBreak) {\n        const equalFontInfo = this.fontInfo.equals(fontInfo);\n        const equalWrappingStrategy = (this.wrappingStrategy === wrappingStrategy);\n        const equalWrappingColumn = (this.wrappingColumn === wrappingColumn);\n        const equalWrappingIndent = (this.wrappingIndent === wrappingIndent);\n        const equalWordBreak = (this.wordBreak === wordBreak);\n        if (equalFontInfo && equalWrappingStrategy && equalWrappingColumn && equalWrappingIndent && equalWordBreak) {\n            return false;\n        }\n        const onlyWrappingColumnChanged = (equalFontInfo && equalWrappingStrategy && !equalWrappingColumn && equalWrappingIndent && equalWordBreak);\n        this.fontInfo = fontInfo;\n        this.wrappingStrategy = wrappingStrategy;\n        this.wrappingColumn = wrappingColumn;\n        this.wrappingIndent = wrappingIndent;\n        this.wordBreak = wordBreak;\n        let previousLineBreaks = null;\n        if (onlyWrappingColumnChanged) {\n            previousLineBreaks = [];\n            for (let i = 0, len = this.modelLineProjections.length; i < len; i++) {\n                previousLineBreaks[i] = this.modelLineProjections[i].getProjectionData();\n            }\n        }\n        this._constructLines(/*resetHiddenAreas*/ false, previousLineBreaks);\n        return true;\n    }\n    createLineBreaksComputer() {\n        const lineBreaksComputerFactory = (this.wrappingStrategy === 'advanced'\n            ? this._domLineBreaksComputerFactory\n            : this._monospaceLineBreaksComputerFactory);\n        return lineBreaksComputerFactory.createLineBreaksComputer(this.fontInfo, this.tabSize, this.wrappingColumn, this.wrappingIndent, this.wordBreak);\n    }\n    onModelFlushed() {\n        this._constructLines(/*resetHiddenAreas*/ true, null);\n    }\n    onModelLinesDeleted(versionId, fromLineNumber, toLineNumber) {\n        if (!versionId || versionId <= this._validModelVersionId) {\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\n            // We don't want to apply stale change events on top of a newer read model state.\n            return null;\n        }\n        const outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.projectedModelLineLineCounts.getPrefixSum(fromLineNumber - 1) + 1);\n        const outputToLineNumber = this.projectedModelLineLineCounts.getPrefixSum(toLineNumber);\n        this.modelLineProjections.splice(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n        this.projectedModelLineLineCounts.removeValues(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n        return new viewEvents.ViewLinesDeletedEvent(outputFromLineNumber, outputToLineNumber);\n    }\n    onModelLinesInserted(versionId, fromLineNumber, _toLineNumber, lineBreaks) {\n        if (!versionId || versionId <= this._validModelVersionId) {\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\n            // We don't want to apply stale change events on top of a newer read model state.\n            return null;\n        }\n        // cannot use this.getHiddenAreas() because those decorations have already seen the effect of this model change\n        const isInHiddenArea = (fromLineNumber > 2 && !this.modelLineProjections[fromLineNumber - 2].isVisible());\n        const outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.projectedModelLineLineCounts.getPrefixSum(fromLineNumber - 1) + 1);\n        let totalOutputLineCount = 0;\n        const insertLines = [];\n        const insertPrefixSumValues = [];\n        for (let i = 0, len = lineBreaks.length; i < len; i++) {\n            const line = createModelLineProjection(lineBreaks[i], !isInHiddenArea);\n            insertLines.push(line);\n            const outputLineCount = line.getViewLineCount();\n            totalOutputLineCount += outputLineCount;\n            insertPrefixSumValues[i] = outputLineCount;\n        }\n        // TODO@Alex: use arrays.arrayInsert\n        this.modelLineProjections =\n            this.modelLineProjections.slice(0, fromLineNumber - 1)\n                .concat(insertLines)\n                .concat(this.modelLineProjections.slice(fromLineNumber - 1));\n        this.projectedModelLineLineCounts.insertValues(fromLineNumber - 1, insertPrefixSumValues);\n        return new viewEvents.ViewLinesInsertedEvent(outputFromLineNumber, outputFromLineNumber + totalOutputLineCount - 1);\n    }\n    onModelLineChanged(versionId, lineNumber, lineBreakData) {\n        if (versionId !== null && versionId <= this._validModelVersionId) {\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\n            // We don't want to apply stale change events on top of a newer read model state.\n            return [false, null, null, null];\n        }\n        const lineIndex = lineNumber - 1;\n        const oldOutputLineCount = this.modelLineProjections[lineIndex].getViewLineCount();\n        const isVisible = this.modelLineProjections[lineIndex].isVisible();\n        const line = createModelLineProjection(lineBreakData, isVisible);\n        this.modelLineProjections[lineIndex] = line;\n        const newOutputLineCount = this.modelLineProjections[lineIndex].getViewLineCount();\n        let lineMappingChanged = false;\n        let changeFrom = 0;\n        let changeTo = -1;\n        let insertFrom = 0;\n        let insertTo = -1;\n        let deleteFrom = 0;\n        let deleteTo = -1;\n        if (oldOutputLineCount > newOutputLineCount) {\n            changeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n            changeTo = changeFrom + newOutputLineCount - 1;\n            deleteFrom = changeTo + 1;\n            deleteTo = deleteFrom + (oldOutputLineCount - newOutputLineCount) - 1;\n            lineMappingChanged = true;\n        }\n        else if (oldOutputLineCount < newOutputLineCount) {\n            changeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n            changeTo = changeFrom + oldOutputLineCount - 1;\n            insertFrom = changeTo + 1;\n            insertTo = insertFrom + (newOutputLineCount - oldOutputLineCount) - 1;\n            lineMappingChanged = true;\n        }\n        else {\n            changeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n            changeTo = changeFrom + newOutputLineCount - 1;\n        }\n        this.projectedModelLineLineCounts.setValue(lineIndex, newOutputLineCount);\n        const viewLinesChangedEvent = (changeFrom <= changeTo ? new viewEvents.ViewLinesChangedEvent(changeFrom, changeTo - changeFrom + 1) : null);\n        const viewLinesInsertedEvent = (insertFrom <= insertTo ? new viewEvents.ViewLinesInsertedEvent(insertFrom, insertTo) : null);\n        const viewLinesDeletedEvent = (deleteFrom <= deleteTo ? new viewEvents.ViewLinesDeletedEvent(deleteFrom, deleteTo) : null);\n        return [lineMappingChanged, viewLinesChangedEvent, viewLinesInsertedEvent, viewLinesDeletedEvent];\n    }\n    acceptVersionId(versionId) {\n        this._validModelVersionId = versionId;\n        if (this.modelLineProjections.length === 1 && !this.modelLineProjections[0].isVisible()) {\n            // At least one line must be visible => reset hidden areas\n            this.setHiddenAreas([]);\n        }\n    }\n    getViewLineCount() {\n        return this.projectedModelLineLineCounts.getTotalSum();\n    }\n    _toValidViewLineNumber(viewLineNumber) {\n        if (viewLineNumber < 1) {\n            return 1;\n        }\n        const viewLineCount = this.getViewLineCount();\n        if (viewLineNumber > viewLineCount) {\n            return viewLineCount;\n        }\n        return viewLineNumber | 0;\n    }\n    getActiveIndentGuide(viewLineNumber, minLineNumber, maxLineNumber) {\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n        minLineNumber = this._toValidViewLineNumber(minLineNumber);\n        maxLineNumber = this._toValidViewLineNumber(maxLineNumber);\n        const modelPosition = this.convertViewPositionToModelPosition(viewLineNumber, this.getViewLineMinColumn(viewLineNumber));\n        const modelMinPosition = this.convertViewPositionToModelPosition(minLineNumber, this.getViewLineMinColumn(minLineNumber));\n        const modelMaxPosition = this.convertViewPositionToModelPosition(maxLineNumber, this.getViewLineMinColumn(maxLineNumber));\n        const result = this.model.guides.getActiveIndentGuide(modelPosition.lineNumber, modelMinPosition.lineNumber, modelMaxPosition.lineNumber);\n        const viewStartPosition = this.convertModelPositionToViewPosition(result.startLineNumber, 1);\n        const viewEndPosition = this.convertModelPositionToViewPosition(result.endLineNumber, this.model.getLineMaxColumn(result.endLineNumber));\n        return {\n            startLineNumber: viewStartPosition.lineNumber,\n            endLineNumber: viewEndPosition.lineNumber,\n            indent: result.indent\n        };\n    }\n    // #region ViewLineInfo\n    getViewLineInfo(viewLineNumber) {\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n        const r = this.projectedModelLineLineCounts.getIndexOf(viewLineNumber - 1);\n        const lineIndex = r.index;\n        const remainder = r.remainder;\n        return new ViewLineInfo(lineIndex + 1, remainder);\n    }\n    getMinColumnOfViewLine(viewLineInfo) {\n        return this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewLineMinColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n    }\n    getMaxColumnOfViewLine(viewLineInfo) {\n        return this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewLineMaxColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n    }\n    getModelStartPositionOfViewLine(viewLineInfo) {\n        const line = this.modelLineProjections[viewLineInfo.modelLineNumber - 1];\n        const minViewColumn = line.getViewLineMinColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n        const column = line.getModelColumnOfViewPosition(viewLineInfo.modelLineWrappedLineIdx, minViewColumn);\n        return new Position(viewLineInfo.modelLineNumber, column);\n    }\n    getModelEndPositionOfViewLine(viewLineInfo) {\n        const line = this.modelLineProjections[viewLineInfo.modelLineNumber - 1];\n        const maxViewColumn = line.getViewLineMaxColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n        const column = line.getModelColumnOfViewPosition(viewLineInfo.modelLineWrappedLineIdx, maxViewColumn);\n        return new Position(viewLineInfo.modelLineNumber, column);\n    }\n    getViewLineInfosGroupedByModelRanges(viewStartLineNumber, viewEndLineNumber) {\n        const startViewLine = this.getViewLineInfo(viewStartLineNumber);\n        const endViewLine = this.getViewLineInfo(viewEndLineNumber);\n        const result = new Array();\n        let lastVisibleModelPos = this.getModelStartPositionOfViewLine(startViewLine);\n        let viewLines = new Array();\n        for (let curModelLine = startViewLine.modelLineNumber; curModelLine <= endViewLine.modelLineNumber; curModelLine++) {\n            const line = this.modelLineProjections[curModelLine - 1];\n            if (line.isVisible()) {\n                const startOffset = curModelLine === startViewLine.modelLineNumber\n                    ? startViewLine.modelLineWrappedLineIdx\n                    : 0;\n                const endOffset = curModelLine === endViewLine.modelLineNumber\n                    ? endViewLine.modelLineWrappedLineIdx + 1\n                    : line.getViewLineCount();\n                for (let i = startOffset; i < endOffset; i++) {\n                    viewLines.push(new ViewLineInfo(curModelLine, i));\n                }\n            }\n            if (!line.isVisible() && lastVisibleModelPos) {\n                const lastVisibleModelPos2 = new Position(curModelLine - 1, this.model.getLineMaxColumn(curModelLine - 1) + 1);\n                const modelRange = Range.fromPositions(lastVisibleModelPos, lastVisibleModelPos2);\n                result.push(new ViewLineInfoGroupedByModelRange(modelRange, viewLines));\n                viewLines = [];\n                lastVisibleModelPos = null;\n            }\n            else if (line.isVisible() && !lastVisibleModelPos) {\n                lastVisibleModelPos = new Position(curModelLine, 1);\n            }\n        }\n        if (lastVisibleModelPos) {\n            const modelRange = Range.fromPositions(lastVisibleModelPos, this.getModelEndPositionOfViewLine(endViewLine));\n            result.push(new ViewLineInfoGroupedByModelRange(modelRange, viewLines));\n        }\n        return result;\n    }\n    // #endregion\n    getViewLinesBracketGuides(viewStartLineNumber, viewEndLineNumber, activeViewPosition, options) {\n        const modelActivePosition = activeViewPosition ? this.convertViewPositionToModelPosition(activeViewPosition.lineNumber, activeViewPosition.column) : null;\n        const resultPerViewLine = [];\n        for (const group of this.getViewLineInfosGroupedByModelRanges(viewStartLineNumber, viewEndLineNumber)) {\n            const modelRangeStartLineNumber = group.modelRange.startLineNumber;\n            const bracketGuidesPerModelLine = this.model.guides.getLinesBracketGuides(modelRangeStartLineNumber, group.modelRange.endLineNumber, modelActivePosition, options);\n            for (const viewLineInfo of group.viewLines) {\n                const bracketGuides = bracketGuidesPerModelLine[viewLineInfo.modelLineNumber - modelRangeStartLineNumber];\n                // visibleColumns stay as they are (this is a bug and needs to be fixed, but it is not a regression)\n                // model-columns must be converted to view-model columns.\n                const result = bracketGuides.map(g => {\n                    if (g.forWrappedLinesAfterColumn !== -1) {\n                        const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.forWrappedLinesAfterColumn);\n                        if (p.lineNumber >= viewLineInfo.modelLineWrappedLineIdx) {\n                            return undefined;\n                        }\n                    }\n                    if (g.forWrappedLinesBeforeOrAtColumn !== -1) {\n                        const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.forWrappedLinesBeforeOrAtColumn);\n                        if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n                            return undefined;\n                        }\n                    }\n                    if (!g.horizontalLine) {\n                        return g;\n                    }\n                    let column = -1;\n                    if (g.column !== -1) {\n                        const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.column);\n                        if (p.lineNumber === viewLineInfo.modelLineWrappedLineIdx) {\n                            column = p.column;\n                        }\n                        else if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n                            column = this.getMinColumnOfViewLine(viewLineInfo);\n                        }\n                        else if (p.lineNumber > viewLineInfo.modelLineWrappedLineIdx) {\n                            return undefined;\n                        }\n                    }\n                    const viewPosition = this.convertModelPositionToViewPosition(viewLineInfo.modelLineNumber, g.horizontalLine.endColumn);\n                    const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.horizontalLine.endColumn);\n                    if (p.lineNumber === viewLineInfo.modelLineWrappedLineIdx) {\n                        return new IndentGuide(g.visibleColumn, column, g.className, new IndentGuideHorizontalLine(g.horizontalLine.top, viewPosition.column), -1, -1);\n                    }\n                    else if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n                        return undefined;\n                    }\n                    else {\n                        if (g.visibleColumn !== -1) {\n                            // Don't repeat horizontal lines that use visibleColumn for unrelated lines.\n                            return undefined;\n                        }\n                        return new IndentGuide(g.visibleColumn, column, g.className, new IndentGuideHorizontalLine(g.horizontalLine.top, this.getMaxColumnOfViewLine(viewLineInfo)), -1, -1);\n                    }\n                });\n                resultPerViewLine.push(result.filter((r) => !!r));\n            }\n        }\n        return resultPerViewLine;\n    }\n    getViewLinesIndentGuides(viewStartLineNumber, viewEndLineNumber) {\n        // TODO: Use the same code as in `getViewLinesBracketGuides`.\n        // Future TODO: Merge with `getViewLinesBracketGuides`.\n        // However, this requires more refactoring of indent guides.\n        viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n        viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n        const modelStart = this.convertViewPositionToModelPosition(viewStartLineNumber, this.getViewLineMinColumn(viewStartLineNumber));\n        const modelEnd = this.convertViewPositionToModelPosition(viewEndLineNumber, this.getViewLineMaxColumn(viewEndLineNumber));\n        let result = [];\n        const resultRepeatCount = [];\n        const resultRepeatOption = [];\n        const modelStartLineIndex = modelStart.lineNumber - 1;\n        const modelEndLineIndex = modelEnd.lineNumber - 1;\n        let reqStart = null;\n        for (let modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n            const line = this.modelLineProjections[modelLineIndex];\n            if (line.isVisible()) {\n                const viewLineStartIndex = line.getViewLineNumberOfModelPosition(0, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n                const viewLineEndIndex = line.getViewLineNumberOfModelPosition(0, this.model.getLineMaxColumn(modelLineIndex + 1));\n                const count = viewLineEndIndex - viewLineStartIndex + 1;\n                let option = 0 /* IndentGuideRepeatOption.BlockNone */;\n                if (count > 1 && line.getViewLineMinColumn(this.model, modelLineIndex + 1, viewLineEndIndex) === 1) {\n                    // wrapped lines should block indent guides\n                    option = (viewLineStartIndex === 0 ? 1 /* IndentGuideRepeatOption.BlockSubsequent */ : 2 /* IndentGuideRepeatOption.BlockAll */);\n                }\n                resultRepeatCount.push(count);\n                resultRepeatOption.push(option);\n                // merge into previous request\n                if (reqStart === null) {\n                    reqStart = new Position(modelLineIndex + 1, 0);\n                }\n            }\n            else {\n                // hit invisible line => flush request\n                if (reqStart !== null) {\n                    result = result.concat(this.model.guides.getLinesIndentGuides(reqStart.lineNumber, modelLineIndex));\n                    reqStart = null;\n                }\n            }\n        }\n        if (reqStart !== null) {\n            result = result.concat(this.model.guides.getLinesIndentGuides(reqStart.lineNumber, modelEnd.lineNumber));\n            reqStart = null;\n        }\n        const viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n        const viewIndents = new Array(viewLineCount);\n        let currIndex = 0;\n        for (let i = 0, len = result.length; i < len; i++) {\n            let value = result[i];\n            const count = Math.min(viewLineCount - currIndex, resultRepeatCount[i]);\n            const option = resultRepeatOption[i];\n            let blockAtIndex;\n            if (option === 2 /* IndentGuideRepeatOption.BlockAll */) {\n                blockAtIndex = 0;\n            }\n            else if (option === 1 /* IndentGuideRepeatOption.BlockSubsequent */) {\n                blockAtIndex = 1;\n            }\n            else {\n                blockAtIndex = count;\n            }\n            for (let j = 0; j < count; j++) {\n                if (j === blockAtIndex) {\n                    value = 0;\n                }\n                viewIndents[currIndex++] = value;\n            }\n        }\n        return viewIndents;\n    }\n    getViewLineContent(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineContent(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineLength(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineLength(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineMinColumn(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineMinColumn(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineMaxColumn(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineMaxColumn(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineData(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineData(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLinesData(viewStartLineNumber, viewEndLineNumber, needed) {\n        viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n        viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n        const start = this.projectedModelLineLineCounts.getIndexOf(viewStartLineNumber - 1);\n        let viewLineNumber = viewStartLineNumber;\n        const startModelLineIndex = start.index;\n        const startRemainder = start.remainder;\n        const result = [];\n        for (let modelLineIndex = startModelLineIndex, len = this.model.getLineCount(); modelLineIndex < len; modelLineIndex++) {\n            const line = this.modelLineProjections[modelLineIndex];\n            if (!line.isVisible()) {\n                continue;\n            }\n            const fromViewLineIndex = (modelLineIndex === startModelLineIndex ? startRemainder : 0);\n            let remainingViewLineCount = line.getViewLineCount() - fromViewLineIndex;\n            let lastLine = false;\n            if (viewLineNumber + remainingViewLineCount > viewEndLineNumber) {\n                lastLine = true;\n                remainingViewLineCount = viewEndLineNumber - viewLineNumber + 1;\n            }\n            line.getViewLinesData(this.model, modelLineIndex + 1, fromViewLineIndex, remainingViewLineCount, viewLineNumber - viewStartLineNumber, needed, result);\n            viewLineNumber += remainingViewLineCount;\n            if (lastLine) {\n                break;\n            }\n        }\n        return result;\n    }\n    validateViewPosition(viewLineNumber, viewColumn, expectedModelPosition) {\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n        const r = this.projectedModelLineLineCounts.getIndexOf(viewLineNumber - 1);\n        const lineIndex = r.index;\n        const remainder = r.remainder;\n        const line = this.modelLineProjections[lineIndex];\n        const minColumn = line.getViewLineMinColumn(this.model, lineIndex + 1, remainder);\n        const maxColumn = line.getViewLineMaxColumn(this.model, lineIndex + 1, remainder);\n        if (viewColumn < minColumn) {\n            viewColumn = minColumn;\n        }\n        if (viewColumn > maxColumn) {\n            viewColumn = maxColumn;\n        }\n        const computedModelColumn = line.getModelColumnOfViewPosition(remainder, viewColumn);\n        const computedModelPosition = this.model.validatePosition(new Position(lineIndex + 1, computedModelColumn));\n        if (computedModelPosition.equals(expectedModelPosition)) {\n            return new Position(viewLineNumber, viewColumn);\n        }\n        return this.convertModelPositionToViewPosition(expectedModelPosition.lineNumber, expectedModelPosition.column);\n    }\n    validateViewRange(viewRange, expectedModelRange) {\n        const validViewStart = this.validateViewPosition(viewRange.startLineNumber, viewRange.startColumn, expectedModelRange.getStartPosition());\n        const validViewEnd = this.validateViewPosition(viewRange.endLineNumber, viewRange.endColumn, expectedModelRange.getEndPosition());\n        return new Range(validViewStart.lineNumber, validViewStart.column, validViewEnd.lineNumber, validViewEnd.column);\n    }\n    convertViewPositionToModelPosition(viewLineNumber, viewColumn) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        const inputColumn = this.modelLineProjections[info.modelLineNumber - 1].getModelColumnOfViewPosition(info.modelLineWrappedLineIdx, viewColumn);\n        // console.log('out -> in ' + viewLineNumber + ',' + viewColumn + ' ===> ' + (lineIndex+1) + ',' + inputColumn);\n        return this.model.validatePosition(new Position(info.modelLineNumber, inputColumn));\n    }\n    convertViewRangeToModelRange(viewRange) {\n        const start = this.convertViewPositionToModelPosition(viewRange.startLineNumber, viewRange.startColumn);\n        const end = this.convertViewPositionToModelPosition(viewRange.endLineNumber, viewRange.endColumn);\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n    }\n    convertModelPositionToViewPosition(_modelLineNumber, _modelColumn, affinity = 2 /* PositionAffinity.None */, allowZeroLineNumber = false, belowHiddenRanges = false) {\n        const validPosition = this.model.validatePosition(new Position(_modelLineNumber, _modelColumn));\n        const inputLineNumber = validPosition.lineNumber;\n        const inputColumn = validPosition.column;\n        let lineIndex = inputLineNumber - 1, lineIndexChanged = false;\n        if (belowHiddenRanges) {\n            while (lineIndex < this.modelLineProjections.length && !this.modelLineProjections[lineIndex].isVisible()) {\n                lineIndex++;\n                lineIndexChanged = true;\n            }\n        }\n        else {\n            while (lineIndex > 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n                lineIndex--;\n                lineIndexChanged = true;\n            }\n        }\n        if (lineIndex === 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            // Could not reach a real line\n            // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + 1 + ',' + 1);\n            // TODO@alexdima@hediet this isn't soo pretty\n            return new Position(allowZeroLineNumber ? 0 : 1, 1);\n        }\n        const deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n        let r;\n        if (lineIndexChanged) {\n            if (belowHiddenRanges) {\n                r = this.modelLineProjections[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, 1, affinity);\n            }\n            else {\n                r = this.modelLineProjections[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1), affinity);\n            }\n        }\n        else {\n            r = this.modelLineProjections[inputLineNumber - 1].getViewPositionOfModelPosition(deltaLineNumber, inputColumn, affinity);\n        }\n        // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + r.lineNumber + ',' + r);\n        return r;\n    }\n    /**\n     * @param affinity The affinity in case of an empty range. Has no effect for non-empty ranges.\n    */\n    convertModelRangeToViewRange(modelRange, affinity = 0 /* PositionAffinity.Left */) {\n        if (modelRange.isEmpty()) {\n            const start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn, affinity);\n            return Range.fromPositions(start);\n        }\n        else {\n            const start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn, 1 /* PositionAffinity.Right */);\n            const end = this.convertModelPositionToViewPosition(modelRange.endLineNumber, modelRange.endColumn, 0 /* PositionAffinity.Left */);\n            return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n        }\n    }\n    getViewLineNumberOfModelPosition(modelLineNumber, modelColumn) {\n        let lineIndex = modelLineNumber - 1;\n        if (this.modelLineProjections[lineIndex].isVisible()) {\n            // this model line is visible\n            const deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n            return this.modelLineProjections[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, modelColumn);\n        }\n        // this model line is not visible\n        while (lineIndex > 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            lineIndex--;\n        }\n        if (lineIndex === 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            // Could not reach a real line\n            return 1;\n        }\n        const deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n        return this.modelLineProjections[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1));\n    }\n    getDecorationsInRange(range, ownerId, filterOutValidation, onlyMinimapDecorations, onlyMarginDecorations) {\n        const modelStart = this.convertViewPositionToModelPosition(range.startLineNumber, range.startColumn);\n        const modelEnd = this.convertViewPositionToModelPosition(range.endLineNumber, range.endColumn);\n        if (modelEnd.lineNumber - modelStart.lineNumber <= range.endLineNumber - range.startLineNumber) {\n            // most likely there are no hidden lines => fast path\n            // fetch decorations from column 1 to cover the case of wrapped lines that have whole line decorations at column 1\n            return this.model.getDecorationsInRange(new Range(modelStart.lineNumber, 1, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation, onlyMinimapDecorations, onlyMarginDecorations);\n        }\n        let result = [];\n        const modelStartLineIndex = modelStart.lineNumber - 1;\n        const modelEndLineIndex = modelEnd.lineNumber - 1;\n        let reqStart = null;\n        for (let modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n            const line = this.modelLineProjections[modelLineIndex];\n            if (line.isVisible()) {\n                // merge into previous request\n                if (reqStart === null) {\n                    reqStart = new Position(modelLineIndex + 1, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n                }\n            }\n            else {\n                // hit invisible line => flush request\n                if (reqStart !== null) {\n                    const maxLineColumn = this.model.getLineMaxColumn(modelLineIndex);\n                    result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelLineIndex, maxLineColumn), ownerId, filterOutValidation, onlyMinimapDecorations));\n                    reqStart = null;\n                }\n            }\n        }\n        if (reqStart !== null) {\n            result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation, onlyMinimapDecorations));\n            reqStart = null;\n        }\n        result.sort((a, b) => {\n            const res = Range.compareRangesUsingStarts(a.range, b.range);\n            if (res === 0) {\n                if (a.id < b.id) {\n                    return -1;\n                }\n                if (a.id > b.id) {\n                    return 1;\n                }\n                return 0;\n            }\n            return res;\n        });\n        // Eliminate duplicate decorations that might have intersected our visible ranges multiple times\n        const finalResult = [];\n        let finalResultLen = 0;\n        let prevDecId = null;\n        for (const dec of result) {\n            const decId = dec.id;\n            if (prevDecId === decId) {\n                // skip\n                continue;\n            }\n            prevDecId = decId;\n            finalResult[finalResultLen++] = dec;\n        }\n        return finalResult;\n    }\n    getInjectedTextAt(position) {\n        const info = this.getViewLineInfo(position.lineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getInjectedTextAt(info.modelLineWrappedLineIdx, position.column);\n    }\n    normalizePosition(position, affinity) {\n        const info = this.getViewLineInfo(position.lineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].normalizePosition(info.modelLineWrappedLineIdx, position, affinity);\n    }\n    getLineIndentColumn(lineNumber) {\n        const info = this.getViewLineInfo(lineNumber);\n        if (info.modelLineWrappedLineIdx === 0) {\n            return this.model.getLineIndentColumn(info.modelLineNumber);\n        }\n        // wrapped lines have no indentation.\n        // We deliberately don't handle the case that indentation is wrapped\n        // to avoid two view lines reporting indentation for the very same model line.\n        return 0;\n    }\n}\n/**\n * Overlapping unsorted ranges:\n * [   )      [ )       [  )\n *    [    )      [       )\n * ->\n * Non overlapping sorted ranges:\n * [       )  [ ) [        )\n *\n * Note: This function only considers line information! Columns are ignored.\n*/\nfunction normalizeLineRanges(ranges) {\n    if (ranges.length === 0) {\n        return [];\n    }\n    const sortedRanges = ranges.slice();\n    sortedRanges.sort(Range.compareRangesUsingStarts);\n    const result = [];\n    let currentRangeStart = sortedRanges[0].startLineNumber;\n    let currentRangeEnd = sortedRanges[0].endLineNumber;\n    for (let i = 1, len = sortedRanges.length; i < len; i++) {\n        const range = sortedRanges[i];\n        if (range.startLineNumber > currentRangeEnd + 1) {\n            result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n            currentRangeStart = range.startLineNumber;\n            currentRangeEnd = range.endLineNumber;\n        }\n        else if (range.endLineNumber > currentRangeEnd) {\n            currentRangeEnd = range.endLineNumber;\n        }\n    }\n    result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n    return result;\n}\n/**\n * Represents a view line. Can be used to efficiently query more information about it.\n */\nclass ViewLineInfo {\n    constructor(modelLineNumber, modelLineWrappedLineIdx) {\n        this.modelLineNumber = modelLineNumber;\n        this.modelLineWrappedLineIdx = modelLineWrappedLineIdx;\n    }\n}\n/**\n * A list of view lines that have a contiguous span in the model.\n*/\nclass ViewLineInfoGroupedByModelRange {\n    constructor(modelRange, viewLines) {\n        this.modelRange = modelRange;\n        this.viewLines = viewLines;\n    }\n}\nclass CoordinatesConverter {\n    constructor(lines) {\n        this._lines = lines;\n    }\n    // View -> Model conversion and related methods\n    convertViewPositionToModelPosition(viewPosition) {\n        return this._lines.convertViewPositionToModelPosition(viewPosition.lineNumber, viewPosition.column);\n    }\n    convertViewRangeToModelRange(viewRange) {\n        return this._lines.convertViewRangeToModelRange(viewRange);\n    }\n    validateViewPosition(viewPosition, expectedModelPosition) {\n        return this._lines.validateViewPosition(viewPosition.lineNumber, viewPosition.column, expectedModelPosition);\n    }\n    validateViewRange(viewRange, expectedModelRange) {\n        return this._lines.validateViewRange(viewRange, expectedModelRange);\n    }\n    // Model -> View conversion and related methods\n    convertModelPositionToViewPosition(modelPosition, affinity, allowZero, belowHiddenRanges) {\n        return this._lines.convertModelPositionToViewPosition(modelPosition.lineNumber, modelPosition.column, affinity, allowZero, belowHiddenRanges);\n    }\n    convertModelRangeToViewRange(modelRange, affinity) {\n        return this._lines.convertModelRangeToViewRange(modelRange, affinity);\n    }\n    modelPositionIsVisible(modelPosition) {\n        return this._lines.modelPositionIsVisible(modelPosition.lineNumber, modelPosition.column);\n    }\n    getModelLineViewLineCount(modelLineNumber) {\n        return this._lines.getModelLineViewLineCount(modelLineNumber);\n    }\n    getViewLineNumberOfModelPosition(modelLineNumber, modelColumn) {\n        return this._lines.getViewLineNumberOfModelPosition(modelLineNumber, modelColumn);\n    }\n}\nexport class ViewModelLinesFromModelAsIs {\n    constructor(model) {\n        this.model = model;\n    }\n    dispose() {\n    }\n    createCoordinatesConverter() {\n        return new IdentityCoordinatesConverter(this);\n    }\n    getHiddenAreas() {\n        return [];\n    }\n    setHiddenAreas(_ranges) {\n        return false;\n    }\n    setTabSize(_newTabSize) {\n        return false;\n    }\n    setWrappingSettings(_fontInfo, _wrappingStrategy, _wrappingColumn, _wrappingIndent) {\n        return false;\n    }\n    createLineBreaksComputer() {\n        const result = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                result.push(null);\n            },\n            finalize: () => {\n                return result;\n            }\n        };\n    }\n    onModelFlushed() {\n    }\n    onModelLinesDeleted(_versionId, fromLineNumber, toLineNumber) {\n        return new viewEvents.ViewLinesDeletedEvent(fromLineNumber, toLineNumber);\n    }\n    onModelLinesInserted(_versionId, fromLineNumber, toLineNumber, lineBreaks) {\n        return new viewEvents.ViewLinesInsertedEvent(fromLineNumber, toLineNumber);\n    }\n    onModelLineChanged(_versionId, lineNumber, lineBreakData) {\n        return [false, new viewEvents.ViewLinesChangedEvent(lineNumber, 1), null, null];\n    }\n    acceptVersionId(_versionId) {\n    }\n    getViewLineCount() {\n        return this.model.getLineCount();\n    }\n    getActiveIndentGuide(viewLineNumber, _minLineNumber, _maxLineNumber) {\n        return {\n            startLineNumber: viewLineNumber,\n            endLineNumber: viewLineNumber,\n            indent: 0\n        };\n    }\n    getViewLinesBracketGuides(startLineNumber, endLineNumber, activePosition) {\n        return new Array(endLineNumber - startLineNumber + 1).fill([]);\n    }\n    getViewLinesIndentGuides(viewStartLineNumber, viewEndLineNumber) {\n        const viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n        const result = new Array(viewLineCount);\n        for (let i = 0; i < viewLineCount; i++) {\n            result[i] = 0;\n        }\n        return result;\n    }\n    getViewLineContent(viewLineNumber) {\n        return this.model.getLineContent(viewLineNumber);\n    }\n    getViewLineLength(viewLineNumber) {\n        return this.model.getLineLength(viewLineNumber);\n    }\n    getViewLineMinColumn(viewLineNumber) {\n        return this.model.getLineMinColumn(viewLineNumber);\n    }\n    getViewLineMaxColumn(viewLineNumber) {\n        return this.model.getLineMaxColumn(viewLineNumber);\n    }\n    getViewLineData(viewLineNumber) {\n        const lineTokens = this.model.tokenization.getLineTokens(viewLineNumber);\n        const lineContent = lineTokens.getLineContent();\n        return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate(), null);\n    }\n    getViewLinesData(viewStartLineNumber, viewEndLineNumber, needed) {\n        const lineCount = this.model.getLineCount();\n        viewStartLineNumber = Math.min(Math.max(1, viewStartLineNumber), lineCount);\n        viewEndLineNumber = Math.min(Math.max(1, viewEndLineNumber), lineCount);\n        const result = [];\n        for (let lineNumber = viewStartLineNumber; lineNumber <= viewEndLineNumber; lineNumber++) {\n            const idx = lineNumber - viewStartLineNumber;\n            result[idx] = needed[idx] ? this.getViewLineData(lineNumber) : null;\n        }\n        return result;\n    }\n    getDecorationsInRange(range, ownerId, filterOutValidation, onlyMinimapDecorations, onlyMarginDecorations) {\n        return this.model.getDecorationsInRange(range, ownerId, filterOutValidation, onlyMinimapDecorations, onlyMarginDecorations);\n    }\n    normalizePosition(position, affinity) {\n        return this.model.normalizePosition(position, affinity);\n    }\n    getLineIndentColumn(lineNumber) {\n        return this.model.getLineIndentColumn(lineNumber);\n    }\n    getInjectedTextAt(position) {\n        // Identity lines collection does not support injected text.\n        return null;\n    }\n}\nclass IdentityCoordinatesConverter {\n    constructor(lines) {\n        this._lines = lines;\n    }\n    _validPosition(pos) {\n        return this._lines.model.validatePosition(pos);\n    }\n    _validRange(range) {\n        return this._lines.model.validateRange(range);\n    }\n    // View -> Model conversion and related methods\n    convertViewPositionToModelPosition(viewPosition) {\n        return this._validPosition(viewPosition);\n    }\n    convertViewRangeToModelRange(viewRange) {\n        return this._validRange(viewRange);\n    }\n    validateViewPosition(_viewPosition, expectedModelPosition) {\n        return this._validPosition(expectedModelPosition);\n    }\n    validateViewRange(_viewRange, expectedModelRange) {\n        return this._validRange(expectedModelRange);\n    }\n    // Model -> View conversion and related methods\n    convertModelPositionToViewPosition(modelPosition) {\n        return this._validPosition(modelPosition);\n    }\n    convertModelRangeToViewRange(modelRange) {\n        return this._validRange(modelRange);\n    }\n    modelPositionIsVisible(modelPosition) {\n        const lineCount = this._lines.model.getLineCount();\n        if (modelPosition.lineNumber < 1 || modelPosition.lineNumber > lineCount) {\n            // invalid arguments\n            return false;\n        }\n        return true;\n    }\n    getModelLineViewLineCount(modelLineNumber) {\n        return 1;\n    }\n    getViewLineNumberOfModelPosition(modelLineNumber, modelColumn) {\n        return modelLineNumber;\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LineTokens } from '../tokens/lineTokens.js';\nimport { Position } from '../core/position.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport { SingleLineInlineDecoration, ViewLineData } from '../viewModel.js';\nexport function createModelLineProjection(lineBreakData, isVisible) {\n    if (lineBreakData === null) {\n        // No mapping needed\n        if (isVisible) {\n            return IdentityModelLineProjection.INSTANCE;\n        }\n        return HiddenModelLineProjection.INSTANCE;\n    }\n    else {\n        return new ModelLineProjection(lineBreakData, isVisible);\n    }\n}\n/**\n * This projection is used to\n * * wrap model lines\n * * inject text\n */\nclass ModelLineProjection {\n    constructor(lineBreakData, isVisible) {\n        this._projectionData = lineBreakData;\n        this._isVisible = isVisible;\n    }\n    isVisible() {\n        return this._isVisible;\n    }\n    setVisible(isVisible) {\n        this._isVisible = isVisible;\n        return this;\n    }\n    getProjectionData() {\n        return this._projectionData;\n    }\n    getViewLineCount() {\n        if (!this._isVisible) {\n            return 0;\n        }\n        return this._projectionData.getOutputLineCount();\n    }\n    getViewLineContent(model, modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        const startOffsetInInputWithInjections = outputLineIndex > 0 ? this._projectionData.breakOffsets[outputLineIndex - 1] : 0;\n        const endOffsetInInputWithInjections = this._projectionData.breakOffsets[outputLineIndex];\n        let r;\n        if (this._projectionData.injectionOffsets !== null) {\n            const injectedTexts = this._projectionData.injectionOffsets.map((offset, idx) => new LineInjectedText(0, 0, offset + 1, this._projectionData.injectionOptions[idx], 0));\n            const lineWithInjections = LineInjectedText.applyInjectedText(model.getLineContent(modelLineNumber), injectedTexts);\n            r = lineWithInjections.substring(startOffsetInInputWithInjections, endOffsetInInputWithInjections);\n        }\n        else {\n            r = model.getValueInRange({\n                startLineNumber: modelLineNumber,\n                startColumn: startOffsetInInputWithInjections + 1,\n                endLineNumber: modelLineNumber,\n                endColumn: endOffsetInInputWithInjections + 1\n            });\n        }\n        if (outputLineIndex > 0) {\n            r = spaces(this._projectionData.wrappedTextIndentLength) + r;\n        }\n        return r;\n    }\n    getViewLineLength(model, modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        return this._projectionData.getLineLength(outputLineIndex);\n    }\n    getViewLineMinColumn(_model, _modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        return this._projectionData.getMinOutputOffset(outputLineIndex) + 1;\n    }\n    getViewLineMaxColumn(model, modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        return this._projectionData.getMaxOutputOffset(outputLineIndex) + 1;\n    }\n    /**\n     * Try using {@link getViewLinesData} instead.\n    */\n    getViewLineData(model, modelLineNumber, outputLineIndex) {\n        const arr = new Array();\n        this.getViewLinesData(model, modelLineNumber, outputLineIndex, 1, 0, [true], arr);\n        return arr[0];\n    }\n    getViewLinesData(model, modelLineNumber, outputLineIdx, lineCount, globalStartIndex, needed, result) {\n        this._assertVisible();\n        const lineBreakData = this._projectionData;\n        const injectionOffsets = lineBreakData.injectionOffsets;\n        const injectionOptions = lineBreakData.injectionOptions;\n        let inlineDecorationsPerOutputLine = null;\n        if (injectionOffsets) {\n            inlineDecorationsPerOutputLine = [];\n            let totalInjectedTextLengthBefore = 0;\n            let currentInjectedOffset = 0;\n            for (let outputLineIndex = 0; outputLineIndex < lineBreakData.getOutputLineCount(); outputLineIndex++) {\n                const inlineDecorations = new Array();\n                inlineDecorationsPerOutputLine[outputLineIndex] = inlineDecorations;\n                const lineStartOffsetInInputWithInjections = outputLineIndex > 0 ? lineBreakData.breakOffsets[outputLineIndex - 1] : 0;\n                const lineEndOffsetInInputWithInjections = lineBreakData.breakOffsets[outputLineIndex];\n                while (currentInjectedOffset < injectionOffsets.length) {\n                    const length = injectionOptions[currentInjectedOffset].content.length;\n                    const injectedTextStartOffsetInInputWithInjections = injectionOffsets[currentInjectedOffset] + totalInjectedTextLengthBefore;\n                    const injectedTextEndOffsetInInputWithInjections = injectedTextStartOffsetInInputWithInjections + length;\n                    if (injectedTextStartOffsetInInputWithInjections > lineEndOffsetInInputWithInjections) {\n                        // Injected text only starts in later wrapped lines.\n                        break;\n                    }\n                    if (lineStartOffsetInInputWithInjections < injectedTextEndOffsetInInputWithInjections) {\n                        // Injected text ends after or in this line (but also starts in or before this line).\n                        const options = injectionOptions[currentInjectedOffset];\n                        if (options.inlineClassName) {\n                            const offset = (outputLineIndex > 0 ? lineBreakData.wrappedTextIndentLength : 0);\n                            const start = offset + Math.max(injectedTextStartOffsetInInputWithInjections - lineStartOffsetInInputWithInjections, 0);\n                            const end = offset + Math.min(injectedTextEndOffsetInInputWithInjections - lineStartOffsetInInputWithInjections, lineEndOffsetInInputWithInjections - lineStartOffsetInInputWithInjections);\n                            if (start !== end) {\n                                inlineDecorations.push(new SingleLineInlineDecoration(start, end, options.inlineClassName, options.inlineClassNameAffectsLetterSpacing));\n                            }\n                        }\n                    }\n                    if (injectedTextEndOffsetInInputWithInjections <= lineEndOffsetInInputWithInjections) {\n                        totalInjectedTextLengthBefore += length;\n                        currentInjectedOffset++;\n                    }\n                    else {\n                        // injected text breaks into next line, process it again\n                        break;\n                    }\n                }\n            }\n        }\n        let lineWithInjections;\n        if (injectionOffsets) {\n            lineWithInjections = model.tokenization.getLineTokens(modelLineNumber).withInserted(injectionOffsets.map((offset, idx) => ({\n                offset,\n                text: injectionOptions[idx].content,\n                tokenMetadata: LineTokens.defaultTokenMetadata\n            })));\n        }\n        else {\n            lineWithInjections = model.tokenization.getLineTokens(modelLineNumber);\n        }\n        for (let outputLineIndex = outputLineIdx; outputLineIndex < outputLineIdx + lineCount; outputLineIndex++) {\n            const globalIndex = globalStartIndex + outputLineIndex - outputLineIdx;\n            if (!needed[globalIndex]) {\n                result[globalIndex] = null;\n                continue;\n            }\n            result[globalIndex] = this._getViewLineData(lineWithInjections, inlineDecorationsPerOutputLine ? inlineDecorationsPerOutputLine[outputLineIndex] : null, outputLineIndex);\n        }\n    }\n    _getViewLineData(lineWithInjections, inlineDecorations, outputLineIndex) {\n        this._assertVisible();\n        const lineBreakData = this._projectionData;\n        const deltaStartIndex = (outputLineIndex > 0 ? lineBreakData.wrappedTextIndentLength : 0);\n        const lineStartOffsetInInputWithInjections = outputLineIndex > 0 ? lineBreakData.breakOffsets[outputLineIndex - 1] : 0;\n        const lineEndOffsetInInputWithInjections = lineBreakData.breakOffsets[outputLineIndex];\n        const tokens = lineWithInjections.sliceAndInflate(lineStartOffsetInInputWithInjections, lineEndOffsetInInputWithInjections, deltaStartIndex);\n        let lineContent = tokens.getLineContent();\n        if (outputLineIndex > 0) {\n            lineContent = spaces(lineBreakData.wrappedTextIndentLength) + lineContent;\n        }\n        const minColumn = this._projectionData.getMinOutputOffset(outputLineIndex) + 1;\n        const maxColumn = lineContent.length + 1;\n        const continuesWithWrappedLine = (outputLineIndex + 1 < this.getViewLineCount());\n        const startVisibleColumn = (outputLineIndex === 0 ? 0 : lineBreakData.breakOffsetsVisibleColumn[outputLineIndex - 1]);\n        return new ViewLineData(lineContent, continuesWithWrappedLine, minColumn, maxColumn, startVisibleColumn, tokens, inlineDecorations);\n    }\n    getModelColumnOfViewPosition(outputLineIndex, outputColumn) {\n        this._assertVisible();\n        return this._projectionData.translateToInputOffset(outputLineIndex, outputColumn - 1) + 1;\n    }\n    getViewPositionOfModelPosition(deltaLineNumber, inputColumn, affinity = 2 /* PositionAffinity.None */) {\n        this._assertVisible();\n        const r = this._projectionData.translateToOutputPosition(inputColumn - 1, affinity);\n        return r.toPosition(deltaLineNumber);\n    }\n    getViewLineNumberOfModelPosition(deltaLineNumber, inputColumn) {\n        this._assertVisible();\n        const r = this._projectionData.translateToOutputPosition(inputColumn - 1);\n        return deltaLineNumber + r.outputLineIndex;\n    }\n    normalizePosition(outputLineIndex, outputPosition, affinity) {\n        const baseViewLineNumber = outputPosition.lineNumber - outputLineIndex;\n        const normalizedOutputPosition = this._projectionData.normalizeOutputPosition(outputLineIndex, outputPosition.column - 1, affinity);\n        const result = normalizedOutputPosition.toPosition(baseViewLineNumber);\n        return result;\n    }\n    getInjectedTextAt(outputLineIndex, outputColumn) {\n        return this._projectionData.getInjectedText(outputLineIndex, outputColumn - 1);\n    }\n    _assertVisible() {\n        if (!this._isVisible) {\n            throw new Error('Not supported');\n        }\n    }\n}\n/**\n * This projection does not change the model line.\n*/\nclass IdentityModelLineProjection {\n    constructor() { }\n    isVisible() {\n        return true;\n    }\n    setVisible(isVisible) {\n        if (isVisible) {\n            return this;\n        }\n        return HiddenModelLineProjection.INSTANCE;\n    }\n    getProjectionData() {\n        return null;\n    }\n    getViewLineCount() {\n        return 1;\n    }\n    getViewLineContent(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineContent(modelLineNumber);\n    }\n    getViewLineLength(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineLength(modelLineNumber);\n    }\n    getViewLineMinColumn(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineMinColumn(modelLineNumber);\n    }\n    getViewLineMaxColumn(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineMaxColumn(modelLineNumber);\n    }\n    getViewLineData(model, modelLineNumber, _outputLineIndex) {\n        const lineTokens = model.tokenization.getLineTokens(modelLineNumber);\n        const lineContent = lineTokens.getLineContent();\n        return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate(), null);\n    }\n    getViewLinesData(model, modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, globalStartIndex, needed, result) {\n        if (!needed[globalStartIndex]) {\n            result[globalStartIndex] = null;\n            return;\n        }\n        result[globalStartIndex] = this.getViewLineData(model, modelLineNumber, 0);\n    }\n    getModelColumnOfViewPosition(_outputLineIndex, outputColumn) {\n        return outputColumn;\n    }\n    getViewPositionOfModelPosition(deltaLineNumber, inputColumn) {\n        return new Position(deltaLineNumber, inputColumn);\n    }\n    getViewLineNumberOfModelPosition(deltaLineNumber, _inputColumn) {\n        return deltaLineNumber;\n    }\n    normalizePosition(outputLineIndex, outputPosition, affinity) {\n        return outputPosition;\n    }\n    getInjectedTextAt(_outputLineIndex, _outputColumn) {\n        return null;\n    }\n}\nIdentityModelLineProjection.INSTANCE = new IdentityModelLineProjection();\n/**\n * This projection hides the model line.\n */\nclass HiddenModelLineProjection {\n    constructor() { }\n    isVisible() {\n        return false;\n    }\n    setVisible(isVisible) {\n        if (!isVisible) {\n            return this;\n        }\n        return IdentityModelLineProjection.INSTANCE;\n    }\n    getProjectionData() {\n        return null;\n    }\n    getViewLineCount() {\n        return 0;\n    }\n    getViewLineContent(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineLength(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineMinColumn(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineMaxColumn(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineData(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLinesData(_model, _modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, _globalStartIndex, _needed, _result) {\n        throw new Error('Not supported');\n    }\n    getModelColumnOfViewPosition(_outputLineIndex, _outputColumn) {\n        throw new Error('Not supported');\n    }\n    getViewPositionOfModelPosition(_deltaLineNumber, _inputColumn) {\n        throw new Error('Not supported');\n    }\n    getViewLineNumberOfModelPosition(_deltaLineNumber, _inputColumn) {\n        throw new Error('Not supported');\n    }\n    normalizePosition(outputLineIndex, outputPosition, affinity) {\n        throw new Error('Not supported');\n    }\n    getInjectedTextAt(_outputLineIndex, _outputColumn) {\n        throw new Error('Not supported');\n    }\n}\nHiddenModelLineProjection.INSTANCE = new HiddenModelLineProjection();\nconst _spaces = [''];\nfunction spaces(count) {\n    if (count >= _spaces.length) {\n        for (let i = 1; i <= count; i++) {\n            _spaces[i] = _makeSpaces(i);\n        }\n    }\n    return _spaces[count];\n}\nfunction _makeSpaces(count) {\n    return new Array(count + 1).join(' ');\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { GlyphMarginLane } from '../model.js';\nconst MAX_LANE = GlyphMarginLane.Right;\nexport class GlyphMarginLanesModel {\n    constructor(maxLine) {\n        this.persist = 0;\n        this._requiredLanes = 1; // always render at least one lane\n        this.lanes = new Uint8Array(Math.ceil(((maxLine + 1) * MAX_LANE) / 8));\n    }\n    reset(maxLine) {\n        const bytes = Math.ceil(((maxLine + 1) * MAX_LANE) / 8);\n        if (this.lanes.length < bytes) {\n            this.lanes = new Uint8Array(bytes);\n        }\n        else {\n            this.lanes.fill(0);\n        }\n        this._requiredLanes = 1;\n    }\n    get requiredLanes() {\n        return this._requiredLanes;\n    }\n    push(lane, range, persist) {\n        if (persist) {\n            this.persist |= (1 << (lane - 1));\n        }\n        for (let i = range.startLineNumber; i <= range.endLineNumber; i++) {\n            const bit = (MAX_LANE * i) + (lane - 1);\n            this.lanes[bit >>> 3] |= (1 << (bit % 8));\n            this._requiredLanes = Math.max(this._requiredLanes, this.countAtLine(i));\n        }\n    }\n    getLanesAtLine(lineNumber) {\n        const lanes = [];\n        let bit = MAX_LANE * lineNumber;\n        for (let i = 0; i < MAX_LANE; i++) {\n            if (this.persist & (1 << i) || this.lanes[bit >>> 3] & (1 << (bit % 8))) {\n                lanes.push(i + 1);\n            }\n            bit++;\n        }\n        return lanes.length ? lanes : [GlyphMarginLane.Center];\n    }\n    countAtLine(lineNumber) {\n        let bit = MAX_LANE * lineNumber;\n        let count = 0;\n        for (let i = 0; i < MAX_LANE; i++) {\n            if (this.persist & (1 << i) || this.lanes[bit >>> 3] & (1 << (bit % 8))) {\n                count++;\n            }\n            bit++;\n        }\n        return count;\n    }\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, getWindow, h } from '../../../../base/browser/dom.js';\nimport { findLast } from '../../../../base/common/arraysFind.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { toDisposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, autorunWithStore, derived, observableFromEvent, observableValue, recomputeInitiallyAndOnChange, subtransaction, transaction } from '../../../../base/common/observable.js';\nimport { derivedDisposable } from '../../../../base/common/observableInternal/derived.js';\nimport './style.css';\nimport { EditorExtensionsRegistry } from '../../editorExtensions.js';\nimport { ICodeEditorService } from '../../services/codeEditorService.js';\nimport { StableEditorScrollState } from '../../stableEditorScroll.js';\nimport { CodeEditorWidget } from '../codeEditorWidget.js';\nimport { AccessibleDiffViewer, AccessibleDiffViewerModelFromEditors } from './components/accessibleDiffViewer.js';\nimport { DiffEditorDecorations } from './components/diffEditorDecorations.js';\nimport { DiffEditorSash } from './components/diffEditorSash.js';\nimport { HideUnchangedRegionsFeature } from './features/hideUnchangedRegionsFeature.js';\nimport { DiffEditorViewZones } from './components/diffEditorViewZones/diffEditorViewZones.js';\nimport { MovedBlocksLinesFeature } from './features/movedBlocksLinesFeature.js';\nimport { OverviewRulerFeature } from './features/overviewRulerFeature.js';\nimport { ObservableElementSizeObserver, applyStyle, applyViewZones, bindContextKey, readHotReloadableExport, translatePosition } from './utils.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EditorType } from '../../../common/editorCommon.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { AccessibilitySignal, IAccessibilitySignalService } from '../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ServiceCollection } from '../../../../platform/instantiation/common/serviceCollection.js';\nimport { IEditorProgressService } from '../../../../platform/progress/common/progress.js';\nimport { DelegatingEditor } from './delegatingEditorImpl.js';\nimport { DiffEditorEditors } from './components/diffEditorEditors.js';\nimport { DiffEditorOptions } from './diffEditorOptions.js';\nimport { DiffEditorViewModel } from './diffEditorViewModel.js';\nimport { RevertButtonsFeature } from './features/revertButtonsFeature.js';\nlet DiffEditorWidget = class DiffEditorWidget extends DelegatingEditor {\n    get onDidContentSizeChange() { return this._editors.onDidContentSizeChange; }\n    constructor(_domElement, options, codeEditorWidgetOptions, _parentContextKeyService, _parentInstantiationService, codeEditorService, _accessibilitySignalService, _editorProgressService) {\n        var _a;\n        super();\n        this._domElement = _domElement;\n        this._parentContextKeyService = _parentContextKeyService;\n        this._parentInstantiationService = _parentInstantiationService;\n        this._accessibilitySignalService = _accessibilitySignalService;\n        this._editorProgressService = _editorProgressService;\n        this.elements = h('div.monaco-diff-editor.side-by-side', { style: { position: 'relative', height: '100%' } }, [\n            h('div.noModificationsOverlay@overlay', { style: { position: 'absolute', height: '100%', visibility: 'hidden', } }, [$('span', {}, 'No Changes')]),\n            h('div.editor.original@original', { style: { position: 'absolute', height: '100%' } }),\n            h('div.editor.modified@modified', { style: { position: 'absolute', height: '100%' } }),\n            h('div.accessibleDiffViewer@accessibleDiffViewer', { style: { position: 'absolute', height: '100%' } }),\n        ]);\n        this._diffModel = observableValue(this, undefined);\n        this._shouldDisposeDiffModel = false;\n        this.onDidChangeModel = Event.fromObservableLight(this._diffModel);\n        this._contextKeyService = this._register(this._parentContextKeyService.createScoped(this._domElement));\n        this._instantiationService = this._parentInstantiationService.createChild(new ServiceCollection([IContextKeyService, this._contextKeyService]));\n        this._boundarySashes = observableValue(this, undefined);\n        this._accessibleDiffViewerShouldBeVisible = observableValue(this, false);\n        this._accessibleDiffViewerVisible = derived(this, reader => this._options.onlyShowAccessibleDiffViewer.read(reader)\n            ? true\n            : this._accessibleDiffViewerShouldBeVisible.read(reader));\n        this._movedBlocksLinesPart = observableValue(this, undefined);\n        this._layoutInfo = derived(this, reader => {\n            var _a, _b, _c, _d, _e;\n            const width = this._rootSizeObserver.width.read(reader);\n            const height = this._rootSizeObserver.height.read(reader);\n            const sashLeft = (_a = this._sash.read(reader)) === null || _a === void 0 ? void 0 : _a.sashLeft.read(reader);\n            const originalWidth = sashLeft !== null && sashLeft !== void 0 ? sashLeft : Math.max(5, this._editors.original.getLayoutInfo().decorationsLeft);\n            const modifiedWidth = width - originalWidth - ((_c = (_b = this._overviewRulerPart.read(reader)) === null || _b === void 0 ? void 0 : _b.width) !== null && _c !== void 0 ? _c : 0);\n            const movedBlocksLinesWidth = (_e = (_d = this._movedBlocksLinesPart.read(reader)) === null || _d === void 0 ? void 0 : _d.width.read(reader)) !== null && _e !== void 0 ? _e : 0;\n            const originalWidthWithoutMovedBlockLines = originalWidth - movedBlocksLinesWidth;\n            this.elements.original.style.width = originalWidthWithoutMovedBlockLines + 'px';\n            this.elements.original.style.left = '0px';\n            this.elements.modified.style.width = modifiedWidth + 'px';\n            this.elements.modified.style.left = originalWidth + 'px';\n            this._editors.original.layout({ width: originalWidthWithoutMovedBlockLines, height }, true);\n            this._editors.modified.layout({ width: modifiedWidth, height }, true);\n            return {\n                modifiedEditor: this._editors.modified.getLayoutInfo(),\n                originalEditor: this._editors.original.getLayoutInfo(),\n            };\n        });\n        this._diffValue = this._diffModel.map((m, r) => m === null || m === void 0 ? void 0 : m.diff.read(r));\n        this.onDidUpdateDiff = Event.fromObservableLight(this._diffValue);\n        codeEditorService.willCreateDiffEditor();\n        this._contextKeyService.createKey('isInDiffEditor', true);\n        this._domElement.appendChild(this.elements.root);\n        this._register(toDisposable(() => this._domElement.removeChild(this.elements.root)));\n        this._rootSizeObserver = this._register(new ObservableElementSizeObserver(this.elements.root, options.dimension));\n        this._rootSizeObserver.setAutomaticLayout((_a = options.automaticLayout) !== null && _a !== void 0 ? _a : false);\n        this._options = new DiffEditorOptions(options);\n        this._register(autorun(reader => {\n            this._options.setWidth(this._rootSizeObserver.width.read(reader));\n        }));\n        this._contextKeyService.createKey(EditorContextKeys.isEmbeddedDiffEditor.key, false);\n        this._register(bindContextKey(EditorContextKeys.isEmbeddedDiffEditor, this._contextKeyService, reader => this._options.isInEmbeddedEditor.read(reader)));\n        this._register(bindContextKey(EditorContextKeys.comparingMovedCode, this._contextKeyService, reader => { var _a; return !!((_a = this._diffModel.read(reader)) === null || _a === void 0 ? void 0 : _a.movedTextToCompare.read(reader)); }));\n        this._register(bindContextKey(EditorContextKeys.diffEditorRenderSideBySideInlineBreakpointReached, this._contextKeyService, reader => this._options.couldShowInlineViewBecauseOfSize.read(reader)));\n        this._register(bindContextKey(EditorContextKeys.hasChanges, this._contextKeyService, reader => { var _a, _b, _c; return ((_c = (_b = (_a = this._diffModel.read(reader)) === null || _a === void 0 ? void 0 : _a.diff.read(reader)) === null || _b === void 0 ? void 0 : _b.mappings.length) !== null && _c !== void 0 ? _c : 0) > 0; }));\n        this._editors = this._register(this._instantiationService.createInstance(DiffEditorEditors, this.elements.original, this.elements.modified, this._options, codeEditorWidgetOptions, (i, c, o, o2) => this._createInnerEditor(i, c, o, o2)));\n        this._overviewRulerPart = derivedDisposable(this, reader => !this._options.renderOverviewRuler.read(reader)\n            ? undefined\n            : this._instantiationService.createInstance(readHotReloadableExport(OverviewRulerFeature, reader), this._editors, this.elements.root, this._diffModel, this._rootSizeObserver.width, this._rootSizeObserver.height, this._layoutInfo.map(i => i.modifiedEditor))).recomputeInitiallyAndOnChange(this._store);\n        this._sash = derivedDisposable(this, reader => {\n            const showSash = this._options.renderSideBySide.read(reader);\n            this.elements.root.classList.toggle('side-by-side', showSash);\n            return !showSash ? undefined : new DiffEditorSash(this._options, this.elements.root, {\n                height: this._rootSizeObserver.height,\n                width: this._rootSizeObserver.width.map((w, reader) => { var _a, _b; return w - ((_b = (_a = this._overviewRulerPart.read(reader)) === null || _a === void 0 ? void 0 : _a.width) !== null && _b !== void 0 ? _b : 0); }),\n            }, this._boundarySashes);\n        }).recomputeInitiallyAndOnChange(this._store);\n        const unchangedRangesFeature = derivedDisposable(this, reader => /** @description UnchangedRangesFeature */ this._instantiationService.createInstance(readHotReloadableExport(HideUnchangedRegionsFeature, reader), this._editors, this._diffModel, this._options)).recomputeInitiallyAndOnChange(this._store);\n        derivedDisposable(this, reader => /** @description DiffEditorDecorations */ this._instantiationService.createInstance(readHotReloadableExport(DiffEditorDecorations, reader), this._editors, this._diffModel, this._options, this)).recomputeInitiallyAndOnChange(this._store);\n        const origViewZoneIdsToIgnore = new Set();\n        const modViewZoneIdsToIgnore = new Set();\n        let isUpdatingViewZones = false;\n        const viewZoneManager = derivedDisposable(this, reader => /** @description ViewZoneManager */ this._instantiationService.createInstance(readHotReloadableExport(DiffEditorViewZones, reader), getWindow(this._domElement), this._editors, this._diffModel, this._options, this, () => isUpdatingViewZones || unchangedRangesFeature.get().isUpdatingHiddenAreas, origViewZoneIdsToIgnore, modViewZoneIdsToIgnore)).recomputeInitiallyAndOnChange(this._store);\n        const originalViewZones = derived(this, (reader) => {\n            const orig = viewZoneManager.read(reader).viewZones.read(reader).orig;\n            const orig2 = unchangedRangesFeature.read(reader).viewZones.read(reader).origViewZones;\n            return orig.concat(orig2);\n        });\n        const modifiedViewZones = derived(this, (reader) => {\n            const mod = viewZoneManager.read(reader).viewZones.read(reader).mod;\n            const mod2 = unchangedRangesFeature.read(reader).viewZones.read(reader).modViewZones;\n            return mod.concat(mod2);\n        });\n        this._register(applyViewZones(this._editors.original, originalViewZones, isUpdatingOrigViewZones => {\n            isUpdatingViewZones = isUpdatingOrigViewZones;\n        }, origViewZoneIdsToIgnore));\n        let scrollState;\n        this._register(applyViewZones(this._editors.modified, modifiedViewZones, isUpdatingModViewZones => {\n            isUpdatingViewZones = isUpdatingModViewZones;\n            if (isUpdatingViewZones) {\n                scrollState = StableEditorScrollState.capture(this._editors.modified);\n            }\n            else {\n                scrollState === null || scrollState === void 0 ? void 0 : scrollState.restore(this._editors.modified);\n                scrollState = undefined;\n            }\n        }, modViewZoneIdsToIgnore));\n        this._accessibleDiffViewer = derivedDisposable(this, reader => this._instantiationService.createInstance(readHotReloadableExport(AccessibleDiffViewer, reader), this.elements.accessibleDiffViewer, this._accessibleDiffViewerVisible, (visible, tx) => this._accessibleDiffViewerShouldBeVisible.set(visible, tx), this._options.onlyShowAccessibleDiffViewer.map(v => !v), this._rootSizeObserver.width, this._rootSizeObserver.height, this._diffModel.map((m, r) => { var _a; return (_a = m === null || m === void 0 ? void 0 : m.diff.read(r)) === null || _a === void 0 ? void 0 : _a.mappings.map(m => m.lineRangeMapping); }), new AccessibleDiffViewerModelFromEditors(this._editors))).recomputeInitiallyAndOnChange(this._store);\n        const visibility = this._accessibleDiffViewerVisible.map(v => v ? 'hidden' : 'visible');\n        this._register(applyStyle(this.elements.modified, { visibility }));\n        this._register(applyStyle(this.elements.original, { visibility }));\n        this._createDiffEditorContributions();\n        codeEditorService.addDiffEditor(this);\n        this._register(recomputeInitiallyAndOnChange(this._layoutInfo));\n        derivedDisposable(this, reader => /** @description MovedBlocksLinesPart */ new (readHotReloadableExport(MovedBlocksLinesFeature, reader))(this.elements.root, this._diffModel, this._layoutInfo.map(i => i.originalEditor), this._layoutInfo.map(i => i.modifiedEditor), this._editors)).recomputeInitiallyAndOnChange(this._store, value => {\n            // This is to break the layout info <-> moved blocks lines part dependency cycle.\n            this._movedBlocksLinesPart.set(value, undefined);\n        });\n        this._register(applyStyle(this.elements.overlay, {\n            width: this._layoutInfo.map((i, r) => i.originalEditor.width + (this._options.renderSideBySide.read(r) ? 0 : i.modifiedEditor.width)),\n            visibility: derived(reader => /** @description visibility */ {\n                var _a, _b;\n                return (this._options.hideUnchangedRegions.read(reader) && ((_b = (_a = this._diffModel.read(reader)) === null || _a === void 0 ? void 0 : _a.diff.read(reader)) === null || _b === void 0 ? void 0 : _b.mappings.length) === 0)\n                    ? 'visible' : 'hidden';\n            }),\n        }));\n        this._register(Event.runAndSubscribe(this._editors.modified.onDidChangeCursorPosition, (e) => {\n            var _a, _b;\n            if ((e === null || e === void 0 ? void 0 : e.reason) === 3 /* CursorChangeReason.Explicit */) {\n                const diff = (_b = (_a = this._diffModel.get()) === null || _a === void 0 ? void 0 : _a.diff.get()) === null || _b === void 0 ? void 0 : _b.mappings.find(m => m.lineRangeMapping.modified.contains(e.position.lineNumber));\n                if (diff === null || diff === void 0 ? void 0 : diff.lineRangeMapping.modified.isEmpty) {\n                    this._accessibilitySignalService.playSignal(AccessibilitySignal.diffLineDeleted, { source: 'diffEditor.cursorPositionChanged' });\n                }\n                else if (diff === null || diff === void 0 ? void 0 : diff.lineRangeMapping.original.isEmpty) {\n                    this._accessibilitySignalService.playSignal(AccessibilitySignal.diffLineInserted, { source: 'diffEditor.cursorPositionChanged' });\n                }\n                else if (diff) {\n                    this._accessibilitySignalService.playSignal(AccessibilitySignal.diffLineModified, { source: 'diffEditor.cursorPositionChanged' });\n                }\n            }\n        }));\n        const isInitializingDiff = this._diffModel.map(this, (m, reader) => {\n            /** @isInitializingDiff isDiffUpToDate */\n            if (!m) {\n                return undefined;\n            }\n            return m.diff.read(reader) === undefined && !m.isDiffUpToDate.read(reader);\n        });\n        this._register(autorunWithStore((reader, store) => {\n            /** @description DiffEditorWidgetHelper.ShowProgress */\n            if (isInitializingDiff.read(reader) === true) {\n                const r = this._editorProgressService.show(true, 1000);\n                store.add(toDisposable(() => r.done()));\n            }\n        }));\n        this._register(toDisposable(() => {\n            var _a;\n            if (this._shouldDisposeDiffModel) {\n                (_a = this._diffModel.get()) === null || _a === void 0 ? void 0 : _a.dispose();\n            }\n        }));\n        this._register(new RevertButtonsFeature(this._editors, this._diffModel, this._options, this));\n    }\n    _createInnerEditor(instantiationService, container, options, editorWidgetOptions) {\n        const editor = instantiationService.createInstance(CodeEditorWidget, container, options, editorWidgetOptions);\n        return editor;\n    }\n    _createDiffEditorContributions() {\n        const contributions = EditorExtensionsRegistry.getDiffEditorContributions();\n        for (const desc of contributions) {\n            try {\n                this._register(this._instantiationService.createInstance(desc.ctor, this));\n            }\n            catch (err) {\n                onUnexpectedError(err);\n            }\n        }\n    }\n    get _targetEditor() { return this._editors.modified; }\n    getEditorType() { return EditorType.IDiffEditor; }\n    layout(dimension) {\n        this._rootSizeObserver.observe(dimension);\n    }\n    hasTextFocus() { return this._editors.original.hasTextFocus() || this._editors.modified.hasTextFocus(); }\n    saveViewState() {\n        var _a;\n        const originalViewState = this._editors.original.saveViewState();\n        const modifiedViewState = this._editors.modified.saveViewState();\n        return {\n            original: originalViewState,\n            modified: modifiedViewState,\n            modelState: (_a = this._diffModel.get()) === null || _a === void 0 ? void 0 : _a.serializeState(),\n        };\n    }\n    restoreViewState(s) {\n        var _a;\n        if (s && s.original && s.modified) {\n            const diffEditorState = s;\n            this._editors.original.restoreViewState(diffEditorState.original);\n            this._editors.modified.restoreViewState(diffEditorState.modified);\n            if (diffEditorState.modelState) {\n                (_a = this._diffModel.get()) === null || _a === void 0 ? void 0 : _a.restoreSerializedState(diffEditorState.modelState);\n            }\n        }\n    }\n    handleInitialized() {\n        this._editors.original.handleInitialized();\n        this._editors.modified.handleInitialized();\n    }\n    createViewModel(model) {\n        return this._instantiationService.createInstance(DiffEditorViewModel, model, this._options);\n    }\n    getModel() { var _a, _b; return (_b = (_a = this._diffModel.get()) === null || _a === void 0 ? void 0 : _a.model) !== null && _b !== void 0 ? _b : null; }\n    setModel(model, tx) {\n        if (!model && this._diffModel.get()) {\n            // Transitioning from a model to no-model\n            this._accessibleDiffViewer.get().close();\n        }\n        const vm = model ? ('model' in model) ? { model, shouldDispose: false } : { model: this.createViewModel(model), shouldDispose: true } : undefined;\n        if (this._diffModel.get() !== (vm === null || vm === void 0 ? void 0 : vm.model)) {\n            subtransaction(tx, tx => {\n                var _a;\n                /** @description DiffEditorWidget.setModel */\n                observableFromEvent.batchEventsGlobally(tx, () => {\n                    this._editors.original.setModel(vm ? vm.model.model.original : null);\n                    this._editors.modified.setModel(vm ? vm.model.model.modified : null);\n                });\n                const prevValue = this._diffModel.get();\n                const shouldDispose = this._shouldDisposeDiffModel;\n                this._shouldDisposeDiffModel = (_a = vm === null || vm === void 0 ? void 0 : vm.shouldDispose) !== null && _a !== void 0 ? _a : false;\n                this._diffModel.set(vm === null || vm === void 0 ? void 0 : vm.model, tx);\n                if (shouldDispose) {\n                    prevValue === null || prevValue === void 0 ? void 0 : prevValue.dispose();\n                }\n            });\n        }\n    }\n    /**\n     * @param changedOptions Only has values for top-level options that have actually changed.\n     */\n    updateOptions(changedOptions) {\n        this._options.updateOptions(changedOptions);\n    }\n    getContainerDomNode() { return this._domElement; }\n    getOriginalEditor() { return this._editors.original; }\n    getModifiedEditor() { return this._editors.modified; }\n    /**\n     * @deprecated Use `this.getDiffComputationResult().changes2` instead.\n     */\n    getLineChanges() {\n        var _a;\n        const diffState = (_a = this._diffModel.get()) === null || _a === void 0 ? void 0 : _a.diff.get();\n        if (!diffState) {\n            return null;\n        }\n        return toLineChanges(diffState);\n    }\n    revert(diff) {\n        if (diff.innerChanges) {\n            this.revertRangeMappings(diff.innerChanges);\n            return;\n        }\n        const model = this._diffModel.get();\n        if (!model || !model.isDiffUpToDate.get()) {\n            return;\n        }\n        this._editors.modified.executeEdits('diffEditor', [\n            {\n                range: diff.modified.toExclusiveRange(),\n                text: model.model.original.getValueInRange(diff.original.toExclusiveRange())\n            }\n        ]);\n    }\n    revertRangeMappings(diffs) {\n        const model = this._diffModel.get();\n        if (!model || !model.isDiffUpToDate.get()) {\n            return;\n        }\n        const changes = diffs.map(c => ({\n            range: c.modifiedRange,\n            text: model.model.original.getValueInRange(c.originalRange)\n        }));\n        this._editors.modified.executeEdits('diffEditor', changes);\n    }\n    _goTo(diff) {\n        this._editors.modified.setPosition(new Position(diff.lineRangeMapping.modified.startLineNumber, 1));\n        this._editors.modified.revealRangeInCenter(diff.lineRangeMapping.modified.toExclusiveRange());\n    }\n    goToDiff(target) {\n        var _a, _b, _c, _d;\n        const diffs = (_b = (_a = this._diffModel.get()) === null || _a === void 0 ? void 0 : _a.diff.get()) === null || _b === void 0 ? void 0 : _b.mappings;\n        if (!diffs || diffs.length === 0) {\n            return;\n        }\n        const curLineNumber = this._editors.modified.getPosition().lineNumber;\n        let diff;\n        if (target === 'next') {\n            diff = (_c = diffs.find(d => d.lineRangeMapping.modified.startLineNumber > curLineNumber)) !== null && _c !== void 0 ? _c : diffs[0];\n        }\n        else {\n            diff = (_d = findLast(diffs, d => d.lineRangeMapping.modified.startLineNumber < curLineNumber)) !== null && _d !== void 0 ? _d : diffs[diffs.length - 1];\n        }\n        this._goTo(diff);\n        if (diff.lineRangeMapping.modified.isEmpty) {\n            this._accessibilitySignalService.playSignal(AccessibilitySignal.diffLineDeleted, { source: 'diffEditor.goToDiff' });\n        }\n        else if (diff.lineRangeMapping.original.isEmpty) {\n            this._accessibilitySignalService.playSignal(AccessibilitySignal.diffLineInserted, { source: 'diffEditor.goToDiff' });\n        }\n        else if (diff) {\n            this._accessibilitySignalService.playSignal(AccessibilitySignal.diffLineModified, { source: 'diffEditor.goToDiff' });\n        }\n    }\n    revealFirstDiff() {\n        const diffModel = this._diffModel.get();\n        if (!diffModel) {\n            return;\n        }\n        // wait for the diff computation to finish\n        this.waitForDiff().then(() => {\n            var _a;\n            const diffs = (_a = diffModel.diff.get()) === null || _a === void 0 ? void 0 : _a.mappings;\n            if (!diffs || diffs.length === 0) {\n                return;\n            }\n            this._goTo(diffs[0]);\n        });\n    }\n    accessibleDiffViewerNext() { this._accessibleDiffViewer.get().next(); }\n    accessibleDiffViewerPrev() { this._accessibleDiffViewer.get().prev(); }\n    async waitForDiff() {\n        const diffModel = this._diffModel.get();\n        if (!diffModel) {\n            return;\n        }\n        await diffModel.waitForDiff();\n    }\n    mapToOtherSide() {\n        var _a, _b;\n        const isModifiedFocus = this._editors.modified.hasWidgetFocus();\n        const source = isModifiedFocus ? this._editors.modified : this._editors.original;\n        const destination = isModifiedFocus ? this._editors.original : this._editors.modified;\n        let destinationSelection;\n        const sourceSelection = source.getSelection();\n        if (sourceSelection) {\n            const mappings = (_b = (_a = this._diffModel.get()) === null || _a === void 0 ? void 0 : _a.diff.get()) === null || _b === void 0 ? void 0 : _b.mappings.map(m => isModifiedFocus ? m.lineRangeMapping.flip() : m.lineRangeMapping);\n            if (mappings) {\n                const newRange1 = translatePosition(sourceSelection.getStartPosition(), mappings);\n                const newRange2 = translatePosition(sourceSelection.getEndPosition(), mappings);\n                destinationSelection = Range.plusRange(newRange1, newRange2);\n            }\n        }\n        return { destination, destinationSelection };\n    }\n    switchSide() {\n        const { destination, destinationSelection } = this.mapToOtherSide();\n        destination.focus();\n        if (destinationSelection) {\n            destination.setSelection(destinationSelection);\n        }\n    }\n    exitCompareMove() {\n        const model = this._diffModel.get();\n        if (!model) {\n            return;\n        }\n        model.movedTextToCompare.set(undefined, undefined);\n    }\n    collapseAllUnchangedRegions() {\n        var _a;\n        const unchangedRegions = (_a = this._diffModel.get()) === null || _a === void 0 ? void 0 : _a.unchangedRegions.get();\n        if (!unchangedRegions) {\n            return;\n        }\n        transaction(tx => {\n            for (const region of unchangedRegions) {\n                region.collapseAll(tx);\n            }\n        });\n    }\n    showAllUnchangedRegions() {\n        var _a;\n        const unchangedRegions = (_a = this._diffModel.get()) === null || _a === void 0 ? void 0 : _a.unchangedRegions.get();\n        if (!unchangedRegions) {\n            return;\n        }\n        transaction(tx => {\n            for (const region of unchangedRegions) {\n                region.showAll(tx);\n            }\n        });\n    }\n};\nDiffEditorWidget = __decorate([\n    __param(3, IContextKeyService),\n    __param(4, IInstantiationService),\n    __param(5, ICodeEditorService),\n    __param(6, IAccessibilitySignalService),\n    __param(7, IEditorProgressService)\n], DiffEditorWidget);\nexport { DiffEditorWidget };\nfunction toLineChanges(state) {\n    return state.mappings.map(x => {\n        const m = x.lineRangeMapping;\n        let originalStartLineNumber;\n        let originalEndLineNumber;\n        let modifiedStartLineNumber;\n        let modifiedEndLineNumber;\n        let innerChanges = m.innerChanges;\n        if (m.original.isEmpty) {\n            // Insertion\n            originalStartLineNumber = m.original.startLineNumber - 1;\n            originalEndLineNumber = 0;\n            innerChanges = undefined;\n        }\n        else {\n            originalStartLineNumber = m.original.startLineNumber;\n            originalEndLineNumber = m.original.endLineNumberExclusive - 1;\n        }\n        if (m.modified.isEmpty) {\n            // Deletion\n            modifiedStartLineNumber = m.modified.startLineNumber - 1;\n            modifiedEndLineNumber = 0;\n            innerChanges = undefined;\n        }\n        else {\n            modifiedStartLineNumber = m.modified.startLineNumber;\n            modifiedEndLineNumber = m.modified.endLineNumberExclusive - 1;\n        }\n        return {\n            originalStartLineNumber,\n            originalEndLineNumber,\n            modifiedStartLineNumber,\n            modifiedEndLineNumber,\n            charChanges: innerChanges === null || innerChanges === void 0 ? void 0 : innerChanges.map(m => ({\n                originalStartLineNumber: m.originalRange.startLineNumber,\n                originalStartColumn: m.originalRange.startColumn,\n                originalEndLineNumber: m.originalRange.endLineNumber,\n                originalEndColumn: m.originalRange.endColumn,\n                modifiedStartLineNumber: m.modifiedRange.startLineNumber,\n                modifiedStartColumn: m.modifiedRange.startColumn,\n                modifiedEndLineNumber: m.modifiedRange.endLineNumber,\n                modifiedEndColumn: m.modifiedRange.endColumn,\n            }))\n        };\n    });\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class StableEditorScrollState {\n    static capture(editor) {\n        if (editor.getScrollTop() === 0 || editor.hasPendingScrollAnimation()) {\n            // Never mess with the scroll top if the editor is at the top of the file or if there is a pending scroll animation\n            return new StableEditorScrollState(editor.getScrollTop(), editor.getContentHeight(), null, 0, null);\n        }\n        let visiblePosition = null;\n        let visiblePositionScrollDelta = 0;\n        const visibleRanges = editor.getVisibleRanges();\n        if (visibleRanges.length > 0) {\n            visiblePosition = visibleRanges[0].getStartPosition();\n            const visiblePositionScrollTop = editor.getTopForPosition(visiblePosition.lineNumber, visiblePosition.column);\n            visiblePositionScrollDelta = editor.getScrollTop() - visiblePositionScrollTop;\n        }\n        return new StableEditorScrollState(editor.getScrollTop(), editor.getContentHeight(), visiblePosition, visiblePositionScrollDelta, editor.getPosition());\n    }\n    constructor(_initialScrollTop, _initialContentHeight, _visiblePosition, _visiblePositionScrollDelta, _cursorPosition) {\n        this._initialScrollTop = _initialScrollTop;\n        this._initialContentHeight = _initialContentHeight;\n        this._visiblePosition = _visiblePosition;\n        this._visiblePositionScrollDelta = _visiblePositionScrollDelta;\n        this._cursorPosition = _cursorPosition;\n    }\n    restore(editor) {\n        if (this._initialContentHeight === editor.getContentHeight() && this._initialScrollTop === editor.getScrollTop()) {\n            // The editor's content height and scroll top haven't changed, so we don't need to do anything\n            return;\n        }\n        if (this._visiblePosition) {\n            const visiblePositionScrollTop = editor.getTopForPosition(this._visiblePosition.lineNumber, this._visiblePosition.column);\n            editor.setScrollTop(visiblePositionScrollTop + this._visiblePositionScrollDelta);\n        }\n    }\n    restoreRelativeVerticalPositionOfCursor(editor) {\n        if (this._initialContentHeight === editor.getContentHeight() && this._initialScrollTop === editor.getScrollTop()) {\n            // The editor's content height and scroll top haven't changed, so we don't need to do anything\n            return;\n        }\n        const currentCursorPosition = editor.getPosition();\n        if (!this._cursorPosition || !currentCursorPosition) {\n            return;\n        }\n        const offset = editor.getTopForLineNumber(currentCursorPosition.lineNumber) - editor.getTopForLineNumber(this._cursorPosition.lineNumber);\n        editor.setScrollTop(editor.getScrollTop() + offset);\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { addDisposableListener, addStandardDisposableListener, reset } from '../../../../../base/browser/dom.js';\nimport { createTrustedTypesPolicy } from '../../../../../base/browser/trustedTypes.js';\nimport { ActionBar } from '../../../../../base/browser/ui/actionbar/actionbar.js';\nimport { DomScrollableElement } from '../../../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { Action } from '../../../../../base/common/actions.js';\nimport { forEachAdjacent, groupAdjacentBy } from '../../../../../base/common/arrays.js';\nimport { Codicon } from '../../../../../base/common/codicons.js';\nimport { Disposable, toDisposable } from '../../../../../base/common/lifecycle.js';\nimport { autorun, autorunWithStore, derived, derivedWithStore, observableValue, subtransaction, transaction } from '../../../../../base/common/observable.js';\nimport { ThemeIcon } from '../../../../../base/common/themables.js';\nimport { applyFontInfo } from '../../../config/domFontInfo.js';\nimport { applyStyle } from '../utils.js';\nimport { EditorFontLigatures } from '../../../../common/config/editorOptions.js';\nimport { LineRange } from '../../../../common/core/lineRange.js';\nimport { OffsetRange } from '../../../../common/core/offsetRange.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { LineRangeMapping } from '../../../../common/diff/rangeMapping.js';\nimport { ILanguageService } from '../../../../common/languages/language.js';\nimport { LineTokens } from '../../../../common/tokens/lineTokens.js';\nimport { RenderLineInput, renderViewLine2 } from '../../../../common/viewLayout/viewLineRenderer.js';\nimport { ViewLineRenderingData } from '../../../../common/viewModel.js';\nimport { localize } from '../../../../../nls.js';\nimport { AccessibilitySignal, IAccessibilitySignalService } from '../../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { registerIcon } from '../../../../../platform/theme/common/iconRegistry.js';\nimport './accessibleDiffViewer.css';\nconst accessibleDiffViewerInsertIcon = registerIcon('diff-review-insert', Codicon.add, localize('accessibleDiffViewerInsertIcon', 'Icon for \\'Insert\\' in accessible diff viewer.'));\nconst accessibleDiffViewerRemoveIcon = registerIcon('diff-review-remove', Codicon.remove, localize('accessibleDiffViewerRemoveIcon', 'Icon for \\'Remove\\' in accessible diff viewer.'));\nconst accessibleDiffViewerCloseIcon = registerIcon('diff-review-close', Codicon.close, localize('accessibleDiffViewerCloseIcon', 'Icon for \\'Close\\' in accessible diff viewer.'));\nlet AccessibleDiffViewer = class AccessibleDiffViewer extends Disposable {\n    constructor(_parentNode, _visible, _setVisible, _canClose, _width, _height, _diffs, _models, _instantiationService) {\n        super();\n        this._parentNode = _parentNode;\n        this._visible = _visible;\n        this._setVisible = _setVisible;\n        this._canClose = _canClose;\n        this._width = _width;\n        this._height = _height;\n        this._diffs = _diffs;\n        this._models = _models;\n        this._instantiationService = _instantiationService;\n        this._state = derivedWithStore(this, (reader, store) => {\n            const visible = this._visible.read(reader);\n            this._parentNode.style.visibility = visible ? 'visible' : 'hidden';\n            if (!visible) {\n                return null;\n            }\n            const model = store.add(this._instantiationService.createInstance(ViewModel, this._diffs, this._models, this._setVisible, this._canClose));\n            const view = store.add(this._instantiationService.createInstance(View, this._parentNode, model, this._width, this._height, this._models));\n            return { model, view, };\n        }).recomputeInitiallyAndOnChange(this._store);\n    }\n    next() {\n        transaction(tx => {\n            const isVisible = this._visible.get();\n            this._setVisible(true, tx);\n            if (isVisible) {\n                this._state.get().model.nextGroup(tx);\n            }\n        });\n    }\n    prev() {\n        transaction(tx => {\n            this._setVisible(true, tx);\n            this._state.get().model.previousGroup(tx);\n        });\n    }\n    close() {\n        transaction(tx => {\n            this._setVisible(false, tx);\n        });\n    }\n};\nAccessibleDiffViewer._ttPolicy = createTrustedTypesPolicy('diffReview', { createHTML: value => value });\nAccessibleDiffViewer = __decorate([\n    __param(8, IInstantiationService)\n], AccessibleDiffViewer);\nexport { AccessibleDiffViewer };\nlet ViewModel = class ViewModel extends Disposable {\n    constructor(_diffs, _models, _setVisible, canClose, _accessibilitySignalService) {\n        super();\n        this._diffs = _diffs;\n        this._models = _models;\n        this._setVisible = _setVisible;\n        this.canClose = canClose;\n        this._accessibilitySignalService = _accessibilitySignalService;\n        this._groups = observableValue(this, []);\n        this._currentGroupIdx = observableValue(this, 0);\n        this._currentElementIdx = observableValue(this, 0);\n        this.groups = this._groups;\n        this.currentGroup = this._currentGroupIdx.map((idx, r) => this._groups.read(r)[idx]);\n        this.currentGroupIndex = this._currentGroupIdx;\n        this.currentElement = this._currentElementIdx.map((idx, r) => { var _a; return (_a = this.currentGroup.read(r)) === null || _a === void 0 ? void 0 : _a.lines[idx]; });\n        this._register(autorun(reader => {\n            /** @description update groups */\n            const diffs = this._diffs.read(reader);\n            if (!diffs) {\n                this._groups.set([], undefined);\n                return;\n            }\n            const groups = computeViewElementGroups(diffs, this._models.getOriginalModel().getLineCount(), this._models.getModifiedModel().getLineCount());\n            transaction(tx => {\n                const p = this._models.getModifiedPosition();\n                if (p) {\n                    const nextGroup = groups.findIndex(g => (p === null || p === void 0 ? void 0 : p.lineNumber) < g.range.modified.endLineNumberExclusive);\n                    if (nextGroup !== -1) {\n                        this._currentGroupIdx.set(nextGroup, tx);\n                    }\n                }\n                this._groups.set(groups, tx);\n            });\n        }));\n        this._register(autorun(reader => {\n            /** @description play audio-cue for diff */\n            const currentViewItem = this.currentElement.read(reader);\n            if ((currentViewItem === null || currentViewItem === void 0 ? void 0 : currentViewItem.type) === LineType.Deleted) {\n                this._accessibilitySignalService.playSignal(AccessibilitySignal.diffLineDeleted, { source: 'accessibleDiffViewer.currentElementChanged' });\n            }\n            else if ((currentViewItem === null || currentViewItem === void 0 ? void 0 : currentViewItem.type) === LineType.Added) {\n                this._accessibilitySignalService.playSignal(AccessibilitySignal.diffLineInserted, { source: 'accessibleDiffViewer.currentElementChanged' });\n            }\n        }));\n        this._register(autorun(reader => {\n            var _a;\n            /** @description select lines in editor */\n            // This ensures editor commands (like revert/stage) work\n            const currentViewItem = this.currentElement.read(reader);\n            if (currentViewItem && currentViewItem.type !== LineType.Header) {\n                const lineNumber = (_a = currentViewItem.modifiedLineNumber) !== null && _a !== void 0 ? _a : currentViewItem.diff.modified.startLineNumber;\n                this._models.modifiedSetSelection(Range.fromPositions(new Position(lineNumber, 1)));\n            }\n        }));\n    }\n    _goToGroupDelta(delta, tx) {\n        const groups = this.groups.get();\n        if (!groups || groups.length <= 1) {\n            return;\n        }\n        subtransaction(tx, tx => {\n            this._currentGroupIdx.set(OffsetRange.ofLength(groups.length).clipCyclic(this._currentGroupIdx.get() + delta), tx);\n            this._currentElementIdx.set(0, tx);\n        });\n    }\n    nextGroup(tx) { this._goToGroupDelta(1, tx); }\n    previousGroup(tx) { this._goToGroupDelta(-1, tx); }\n    _goToLineDelta(delta) {\n        const group = this.currentGroup.get();\n        if (!group || group.lines.length <= 1) {\n            return;\n        }\n        transaction(tx => {\n            this._currentElementIdx.set(OffsetRange.ofLength(group.lines.length).clip(this._currentElementIdx.get() + delta), tx);\n        });\n    }\n    goToNextLine() { this._goToLineDelta(1); }\n    goToPreviousLine() { this._goToLineDelta(-1); }\n    goToLine(line) {\n        const group = this.currentGroup.get();\n        if (!group) {\n            return;\n        }\n        const idx = group.lines.indexOf(line);\n        if (idx === -1) {\n            return;\n        }\n        transaction(tx => {\n            this._currentElementIdx.set(idx, tx);\n        });\n    }\n    revealCurrentElementInEditor() {\n        if (!this.canClose.get()) {\n            return;\n        }\n        this._setVisible(false, undefined);\n        const curElem = this.currentElement.get();\n        if (curElem) {\n            if (curElem.type === LineType.Deleted) {\n                this._models.originalReveal(Range.fromPositions(new Position(curElem.originalLineNumber, 1)));\n            }\n            else {\n                this._models.modifiedReveal(curElem.type !== LineType.Header\n                    ? Range.fromPositions(new Position(curElem.modifiedLineNumber, 1))\n                    : undefined);\n            }\n        }\n    }\n    close() {\n        if (!this.canClose.get()) {\n            return;\n        }\n        this._setVisible(false, undefined);\n        this._models.modifiedFocus();\n    }\n};\nViewModel = __decorate([\n    __param(4, IAccessibilitySignalService)\n], ViewModel);\nconst viewElementGroupLineMargin = 3;\nfunction computeViewElementGroups(diffs, originalLineCount, modifiedLineCount) {\n    const result = [];\n    for (const g of groupAdjacentBy(diffs, (a, b) => (b.modified.startLineNumber - a.modified.endLineNumberExclusive < 2 * viewElementGroupLineMargin))) {\n        const viewElements = [];\n        viewElements.push(new HeaderViewElement());\n        const origFullRange = new LineRange(Math.max(1, g[0].original.startLineNumber - viewElementGroupLineMargin), Math.min(g[g.length - 1].original.endLineNumberExclusive + viewElementGroupLineMargin, originalLineCount + 1));\n        const modifiedFullRange = new LineRange(Math.max(1, g[0].modified.startLineNumber - viewElementGroupLineMargin), Math.min(g[g.length - 1].modified.endLineNumberExclusive + viewElementGroupLineMargin, modifiedLineCount + 1));\n        forEachAdjacent(g, (a, b) => {\n            const origRange = new LineRange(a ? a.original.endLineNumberExclusive : origFullRange.startLineNumber, b ? b.original.startLineNumber : origFullRange.endLineNumberExclusive);\n            const modifiedRange = new LineRange(a ? a.modified.endLineNumberExclusive : modifiedFullRange.startLineNumber, b ? b.modified.startLineNumber : modifiedFullRange.endLineNumberExclusive);\n            origRange.forEach(origLineNumber => {\n                viewElements.push(new UnchangedLineViewElement(origLineNumber, modifiedRange.startLineNumber + (origLineNumber - origRange.startLineNumber)));\n            });\n            if (b) {\n                b.original.forEach(origLineNumber => {\n                    viewElements.push(new DeletedLineViewElement(b, origLineNumber));\n                });\n                b.modified.forEach(modifiedLineNumber => {\n                    viewElements.push(new AddedLineViewElement(b, modifiedLineNumber));\n                });\n            }\n        });\n        const modifiedRange = g[0].modified.join(g[g.length - 1].modified);\n        const originalRange = g[0].original.join(g[g.length - 1].original);\n        result.push(new ViewElementGroup(new LineRangeMapping(modifiedRange, originalRange), viewElements));\n    }\n    return result;\n}\nvar LineType;\n(function (LineType) {\n    LineType[LineType[\"Header\"] = 0] = \"Header\";\n    LineType[LineType[\"Unchanged\"] = 1] = \"Unchanged\";\n    LineType[LineType[\"Deleted\"] = 2] = \"Deleted\";\n    LineType[LineType[\"Added\"] = 3] = \"Added\";\n})(LineType || (LineType = {}));\nclass ViewElementGroup {\n    constructor(range, lines) {\n        this.range = range;\n        this.lines = lines;\n    }\n}\nclass HeaderViewElement {\n    constructor() {\n        this.type = LineType.Header;\n    }\n}\nclass DeletedLineViewElement {\n    constructor(diff, originalLineNumber) {\n        this.diff = diff;\n        this.originalLineNumber = originalLineNumber;\n        this.type = LineType.Deleted;\n        this.modifiedLineNumber = undefined;\n    }\n}\nclass AddedLineViewElement {\n    constructor(diff, modifiedLineNumber) {\n        this.diff = diff;\n        this.modifiedLineNumber = modifiedLineNumber;\n        this.type = LineType.Added;\n        this.originalLineNumber = undefined;\n    }\n}\nclass UnchangedLineViewElement {\n    constructor(originalLineNumber, modifiedLineNumber) {\n        this.originalLineNumber = originalLineNumber;\n        this.modifiedLineNumber = modifiedLineNumber;\n        this.type = LineType.Unchanged;\n    }\n}\nlet View = class View extends Disposable {\n    constructor(_element, _model, _width, _height, _models, _languageService) {\n        super();\n        this._element = _element;\n        this._model = _model;\n        this._width = _width;\n        this._height = _height;\n        this._models = _models;\n        this._languageService = _languageService;\n        this.domNode = this._element;\n        this.domNode.className = 'monaco-component diff-review monaco-editor-background';\n        const actionBarContainer = document.createElement('div');\n        actionBarContainer.className = 'diff-review-actions';\n        this._actionBar = this._register(new ActionBar(actionBarContainer));\n        this._register(autorun(reader => {\n            /** @description update actions */\n            this._actionBar.clear();\n            if (this._model.canClose.read(reader)) {\n                this._actionBar.push(new Action('diffreview.close', localize('label.close', \"Close\"), 'close-diff-review ' + ThemeIcon.asClassName(accessibleDiffViewerCloseIcon), true, async () => _model.close()), { label: false, icon: true });\n            }\n        }));\n        this._content = document.createElement('div');\n        this._content.className = 'diff-review-content';\n        this._content.setAttribute('role', 'code');\n        this._scrollbar = this._register(new DomScrollableElement(this._content, {}));\n        reset(this.domNode, this._scrollbar.getDomNode(), actionBarContainer);\n        this._register(autorun(r => {\n            this._height.read(r);\n            this._width.read(r);\n            this._scrollbar.scanDomNode();\n        }));\n        this._register(toDisposable(() => { reset(this.domNode); }));\n        this._register(applyStyle(this.domNode, { width: this._width, height: this._height }));\n        this._register(applyStyle(this._content, { width: this._width, height: this._height }));\n        this._register(autorunWithStore((reader, store) => {\n            /** @description render */\n            this._model.currentGroup.read(reader);\n            this._render(store);\n        }));\n        // TODO@hediet use commands\n        this._register(addStandardDisposableListener(this.domNode, 'keydown', (e) => {\n            if (e.equals(18 /* KeyCode.DownArrow */)\n                || e.equals(2048 /* KeyMod.CtrlCmd */ | 18 /* KeyCode.DownArrow */)\n                || e.equals(512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */)) {\n                e.preventDefault();\n                this._model.goToNextLine();\n            }\n            if (e.equals(16 /* KeyCode.UpArrow */)\n                || e.equals(2048 /* KeyMod.CtrlCmd */ | 16 /* KeyCode.UpArrow */)\n                || e.equals(512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */)) {\n                e.preventDefault();\n                this._model.goToPreviousLine();\n            }\n            if (e.equals(9 /* KeyCode.Escape */)\n                || e.equals(2048 /* KeyMod.CtrlCmd */ | 9 /* KeyCode.Escape */)\n                || e.equals(512 /* KeyMod.Alt */ | 9 /* KeyCode.Escape */)\n                || e.equals(1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */)) {\n                e.preventDefault();\n                this._model.close();\n            }\n            if (e.equals(10 /* KeyCode.Space */)\n                || e.equals(3 /* KeyCode.Enter */)) {\n                e.preventDefault();\n                this._model.revealCurrentElementInEditor();\n            }\n        }));\n    }\n    _render(store) {\n        const originalOptions = this._models.getOriginalOptions();\n        const modifiedOptions = this._models.getModifiedOptions();\n        const container = document.createElement('div');\n        container.className = 'diff-review-table';\n        container.setAttribute('role', 'list');\n        container.setAttribute('aria-label', localize('ariaLabel', 'Accessible Diff Viewer. Use arrow up and down to navigate.'));\n        applyFontInfo(container, modifiedOptions.get(50 /* EditorOption.fontInfo */));\n        reset(this._content, container);\n        const originalModel = this._models.getOriginalModel();\n        const modifiedModel = this._models.getModifiedModel();\n        if (!originalModel || !modifiedModel) {\n            return;\n        }\n        const originalModelOpts = originalModel.getOptions();\n        const modifiedModelOpts = modifiedModel.getOptions();\n        const lineHeight = modifiedOptions.get(67 /* EditorOption.lineHeight */);\n        const group = this._model.currentGroup.get();\n        for (const viewItem of (group === null || group === void 0 ? void 0 : group.lines) || []) {\n            if (!group) {\n                break;\n            }\n            let row;\n            if (viewItem.type === LineType.Header) {\n                const header = document.createElement('div');\n                header.className = 'diff-review-row';\n                header.setAttribute('role', 'listitem');\n                const r = group.range;\n                const diffIndex = this._model.currentGroupIndex.get();\n                const diffsLength = this._model.groups.get().length;\n                const getAriaLines = (lines) => lines === 0 ? localize('no_lines_changed', \"no lines changed\")\n                    : lines === 1 ? localize('one_line_changed', \"1 line changed\")\n                        : localize('more_lines_changed', \"{0} lines changed\", lines);\n                const originalChangedLinesCntAria = getAriaLines(r.original.length);\n                const modifiedChangedLinesCntAria = getAriaLines(r.modified.length);\n                header.setAttribute('aria-label', localize({\n                    key: 'header',\n                    comment: [\n                        'This is the ARIA label for a git diff header.',\n                        'A git diff header looks like this: @@ -154,12 +159,39 @@.',\n                        'That encodes that at original line 154 (which is now line 159), 12 lines were removed/changed with 39 lines.',\n                        'Variables 0 and 1 refer to the diff index out of total number of diffs.',\n                        'Variables 2 and 4 will be numbers (a line number).',\n                        'Variables 3 and 5 will be \"no lines changed\", \"1 line changed\" or \"X lines changed\", localized separately.'\n                    ]\n                }, \"Difference {0} of {1}: original line {2}, {3}, modified line {4}, {5}\", (diffIndex + 1), diffsLength, r.original.startLineNumber, originalChangedLinesCntAria, r.modified.startLineNumber, modifiedChangedLinesCntAria));\n                const cell = document.createElement('div');\n                cell.className = 'diff-review-cell diff-review-summary';\n                // e.g.: `1/10: @@ -504,7 +517,7 @@`\n                cell.appendChild(document.createTextNode(`${diffIndex + 1}/${diffsLength}: @@ -${r.original.startLineNumber},${r.original.length} +${r.modified.startLineNumber},${r.modified.length} @@`));\n                header.appendChild(cell);\n                row = header;\n            }\n            else {\n                row = this._createRow(viewItem, lineHeight, this._width.get(), originalOptions, originalModel, originalModelOpts, modifiedOptions, modifiedModel, modifiedModelOpts);\n            }\n            container.appendChild(row);\n            const isSelectedObs = derived(reader => /** @description isSelected */ this._model.currentElement.read(reader) === viewItem);\n            store.add(autorun(reader => {\n                /** @description update tab index */\n                const isSelected = isSelectedObs.read(reader);\n                row.tabIndex = isSelected ? 0 : -1;\n                if (isSelected) {\n                    row.focus();\n                }\n            }));\n            store.add(addDisposableListener(row, 'focus', () => {\n                this._model.goToLine(viewItem);\n            }));\n        }\n        this._scrollbar.scanDomNode();\n    }\n    _createRow(item, lineHeight, width, originalOptions, originalModel, originalModelOpts, modifiedOptions, modifiedModel, modifiedModelOpts) {\n        const originalLayoutInfo = originalOptions.get(144 /* EditorOption.layoutInfo */);\n        const originalLineNumbersWidth = originalLayoutInfo.glyphMarginWidth + originalLayoutInfo.lineNumbersWidth;\n        const modifiedLayoutInfo = modifiedOptions.get(144 /* EditorOption.layoutInfo */);\n        const modifiedLineNumbersWidth = 10 + modifiedLayoutInfo.glyphMarginWidth + modifiedLayoutInfo.lineNumbersWidth;\n        let rowClassName = 'diff-review-row';\n        let lineNumbersExtraClassName = '';\n        const spacerClassName = 'diff-review-spacer';\n        let spacerIcon = null;\n        switch (item.type) {\n            case LineType.Added:\n                rowClassName = 'diff-review-row line-insert';\n                lineNumbersExtraClassName = ' char-insert';\n                spacerIcon = accessibleDiffViewerInsertIcon;\n                break;\n            case LineType.Deleted:\n                rowClassName = 'diff-review-row line-delete';\n                lineNumbersExtraClassName = ' char-delete';\n                spacerIcon = accessibleDiffViewerRemoveIcon;\n                break;\n        }\n        const row = document.createElement('div');\n        row.style.minWidth = width + 'px';\n        row.className = rowClassName;\n        row.setAttribute('role', 'listitem');\n        row.ariaLevel = '';\n        const cell = document.createElement('div');\n        cell.className = 'diff-review-cell';\n        cell.style.height = `${lineHeight}px`;\n        row.appendChild(cell);\n        const originalLineNumber = document.createElement('span');\n        originalLineNumber.style.width = (originalLineNumbersWidth + 'px');\n        originalLineNumber.style.minWidth = (originalLineNumbersWidth + 'px');\n        originalLineNumber.className = 'diff-review-line-number' + lineNumbersExtraClassName;\n        if (item.originalLineNumber !== undefined) {\n            originalLineNumber.appendChild(document.createTextNode(String(item.originalLineNumber)));\n        }\n        else {\n            originalLineNumber.innerText = '\\u00a0';\n        }\n        cell.appendChild(originalLineNumber);\n        const modifiedLineNumber = document.createElement('span');\n        modifiedLineNumber.style.width = (modifiedLineNumbersWidth + 'px');\n        modifiedLineNumber.style.minWidth = (modifiedLineNumbersWidth + 'px');\n        modifiedLineNumber.style.paddingRight = '10px';\n        modifiedLineNumber.className = 'diff-review-line-number' + lineNumbersExtraClassName;\n        if (item.modifiedLineNumber !== undefined) {\n            modifiedLineNumber.appendChild(document.createTextNode(String(item.modifiedLineNumber)));\n        }\n        else {\n            modifiedLineNumber.innerText = '\\u00a0';\n        }\n        cell.appendChild(modifiedLineNumber);\n        const spacer = document.createElement('span');\n        spacer.className = spacerClassName;\n        if (spacerIcon) {\n            const spacerCodicon = document.createElement('span');\n            spacerCodicon.className = ThemeIcon.asClassName(spacerIcon);\n            spacerCodicon.innerText = '\\u00a0\\u00a0';\n            spacer.appendChild(spacerCodicon);\n        }\n        else {\n            spacer.innerText = '\\u00a0\\u00a0';\n        }\n        cell.appendChild(spacer);\n        let lineContent;\n        if (item.modifiedLineNumber !== undefined) {\n            let html = this._getLineHtml(modifiedModel, modifiedOptions, modifiedModelOpts.tabSize, item.modifiedLineNumber, this._languageService.languageIdCodec);\n            if (AccessibleDiffViewer._ttPolicy) {\n                html = AccessibleDiffViewer._ttPolicy.createHTML(html);\n            }\n            cell.insertAdjacentHTML('beforeend', html);\n            lineContent = modifiedModel.getLineContent(item.modifiedLineNumber);\n        }\n        else {\n            let html = this._getLineHtml(originalModel, originalOptions, originalModelOpts.tabSize, item.originalLineNumber, this._languageService.languageIdCodec);\n            if (AccessibleDiffViewer._ttPolicy) {\n                html = AccessibleDiffViewer._ttPolicy.createHTML(html);\n            }\n            cell.insertAdjacentHTML('beforeend', html);\n            lineContent = originalModel.getLineContent(item.originalLineNumber);\n        }\n        if (lineContent.length === 0) {\n            lineContent = localize('blankLine', \"blank\");\n        }\n        let ariaLabel = '';\n        switch (item.type) {\n            case LineType.Unchanged:\n                if (item.originalLineNumber === item.modifiedLineNumber) {\n                    ariaLabel = localize({ key: 'unchangedLine', comment: ['The placeholders are contents of the line and should not be translated.'] }, \"{0} unchanged line {1}\", lineContent, item.originalLineNumber);\n                }\n                else {\n                    ariaLabel = localize('equalLine', \"{0} original line {1} modified line {2}\", lineContent, item.originalLineNumber, item.modifiedLineNumber);\n                }\n                break;\n            case LineType.Added:\n                ariaLabel = localize('insertLine', \"+ {0} modified line {1}\", lineContent, item.modifiedLineNumber);\n                break;\n            case LineType.Deleted:\n                ariaLabel = localize('deleteLine', \"- {0} original line {1}\", lineContent, item.originalLineNumber);\n                break;\n        }\n        row.setAttribute('aria-label', ariaLabel);\n        return row;\n    }\n    _getLineHtml(model, options, tabSize, lineNumber, languageIdCodec) {\n        const lineContent = model.getLineContent(lineNumber);\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const lineTokens = LineTokens.createEmpty(lineContent, languageIdCodec);\n        const isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, model.mightContainNonBasicASCII());\n        const containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, model.mightContainRTL());\n        const r = renderViewLine2(new RenderLineInput((fontInfo.isMonospace && !options.get(33 /* EditorOption.disableMonospaceOptimizations */)), fontInfo.canUseHalfwidthRightwardsArrow, lineContent, false, isBasicASCII, containsRTL, 0, lineTokens, [], tabSize, 0, fontInfo.spaceWidth, fontInfo.middotWidth, fontInfo.wsmiddotWidth, options.get(117 /* EditorOption.stopRenderingLineAfter */), options.get(99 /* EditorOption.renderWhitespace */), options.get(94 /* EditorOption.renderControlCharacters */), options.get(51 /* EditorOption.fontLigatures */) !== EditorFontLigatures.OFF, null));\n        return r.html;\n    }\n};\nView = __decorate([\n    __param(5, ILanguageService)\n], View);\nexport class AccessibleDiffViewerModelFromEditors {\n    constructor(editors) {\n        this.editors = editors;\n    }\n    getOriginalModel() {\n        return this.editors.original.getModel();\n    }\n    getOriginalOptions() {\n        return this.editors.original.getOptions();\n    }\n    originalReveal(range) {\n        this.editors.original.revealRange(range);\n        this.editors.original.setSelection(range);\n        this.editors.original.focus();\n    }\n    getModifiedModel() {\n        return this.editors.modified.getModel();\n    }\n    getModifiedOptions() {\n        return this.editors.modified.getOptions();\n    }\n    modifiedReveal(range) {\n        if (range) {\n            this.editors.modified.revealRange(range);\n            this.editors.modified.setSelection(range);\n        }\n        this.editors.modified.focus();\n    }\n    modifiedSetSelection(range) {\n        this.editors.modified.setSelection(range);\n    }\n    modifiedFocus() {\n        this.editors.modified.focus();\n    }\n    getModifiedPosition() {\n        var _a;\n        return (_a = this.editors.modified.getPosition()) !== null && _a !== void 0 ? _a : undefined;\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { derived } from '../../../../../base/common/observable.js';\nimport { MovedBlocksLinesFeature } from '../features/movedBlocksLinesFeature.js';\nimport { diffAddDecoration, diffAddDecorationEmpty, diffDeleteDecoration, diffDeleteDecorationEmpty, diffLineAddDecorationBackground, diffLineAddDecorationBackgroundWithIndicator, diffLineDeleteDecorationBackground, diffLineDeleteDecorationBackgroundWithIndicator, diffWholeLineAddDecoration, diffWholeLineDeleteDecoration } from '../registrations.contribution.js';\nimport { applyObservableDecorations } from '../utils.js';\nexport class DiffEditorDecorations extends Disposable {\n    constructor(_editors, _diffModel, _options, widget) {\n        super();\n        this._editors = _editors;\n        this._diffModel = _diffModel;\n        this._options = _options;\n        this._decorations = derived(this, (reader) => {\n            var _a;\n            const diff = (_a = this._diffModel.read(reader)) === null || _a === void 0 ? void 0 : _a.diff.read(reader);\n            if (!diff) {\n                return null;\n            }\n            const movedTextToCompare = this._diffModel.read(reader).movedTextToCompare.read(reader);\n            const renderIndicators = this._options.renderIndicators.read(reader);\n            const showEmptyDecorations = this._options.showEmptyDecorations.read(reader);\n            const originalDecorations = [];\n            const modifiedDecorations = [];\n            if (!movedTextToCompare) {\n                for (const m of diff.mappings) {\n                    if (!m.lineRangeMapping.original.isEmpty) {\n                        originalDecorations.push({ range: m.lineRangeMapping.original.toInclusiveRange(), options: renderIndicators ? diffLineDeleteDecorationBackgroundWithIndicator : diffLineDeleteDecorationBackground });\n                    }\n                    if (!m.lineRangeMapping.modified.isEmpty) {\n                        modifiedDecorations.push({ range: m.lineRangeMapping.modified.toInclusiveRange(), options: renderIndicators ? diffLineAddDecorationBackgroundWithIndicator : diffLineAddDecorationBackground });\n                    }\n                    if (m.lineRangeMapping.modified.isEmpty || m.lineRangeMapping.original.isEmpty) {\n                        if (!m.lineRangeMapping.original.isEmpty) {\n                            originalDecorations.push({ range: m.lineRangeMapping.original.toInclusiveRange(), options: diffWholeLineDeleteDecoration });\n                        }\n                        if (!m.lineRangeMapping.modified.isEmpty) {\n                            modifiedDecorations.push({ range: m.lineRangeMapping.modified.toInclusiveRange(), options: diffWholeLineAddDecoration });\n                        }\n                    }\n                    else {\n                        for (const i of m.lineRangeMapping.innerChanges || []) {\n                            // Don't show empty markers outside the line range\n                            if (m.lineRangeMapping.original.contains(i.originalRange.startLineNumber)) {\n                                originalDecorations.push({ range: i.originalRange, options: (i.originalRange.isEmpty() && showEmptyDecorations) ? diffDeleteDecorationEmpty : diffDeleteDecoration });\n                            }\n                            if (m.lineRangeMapping.modified.contains(i.modifiedRange.startLineNumber)) {\n                                modifiedDecorations.push({ range: i.modifiedRange, options: (i.modifiedRange.isEmpty() && showEmptyDecorations) ? diffAddDecorationEmpty : diffAddDecoration });\n                            }\n                        }\n                    }\n                }\n            }\n            if (movedTextToCompare) {\n                for (const m of movedTextToCompare.changes) {\n                    const fullRangeOriginal = m.original.toInclusiveRange();\n                    if (fullRangeOriginal) {\n                        originalDecorations.push({ range: fullRangeOriginal, options: renderIndicators ? diffLineDeleteDecorationBackgroundWithIndicator : diffLineDeleteDecorationBackground });\n                    }\n                    const fullRangeModified = m.modified.toInclusiveRange();\n                    if (fullRangeModified) {\n                        modifiedDecorations.push({ range: fullRangeModified, options: renderIndicators ? diffLineAddDecorationBackgroundWithIndicator : diffLineAddDecorationBackground });\n                    }\n                    for (const i of m.innerChanges || []) {\n                        originalDecorations.push({ range: i.originalRange, options: diffDeleteDecoration });\n                        modifiedDecorations.push({ range: i.modifiedRange, options: diffAddDecoration });\n                    }\n                }\n            }\n            const activeMovedText = this._diffModel.read(reader).activeMovedText.read(reader);\n            for (const m of diff.movedTexts) {\n                originalDecorations.push({\n                    range: m.lineRangeMapping.original.toInclusiveRange(), options: {\n                        description: 'moved',\n                        blockClassName: 'movedOriginal' + (m === activeMovedText ? ' currentMove' : ''),\n                        blockPadding: [MovedBlocksLinesFeature.movedCodeBlockPadding, 0, MovedBlocksLinesFeature.movedCodeBlockPadding, MovedBlocksLinesFeature.movedCodeBlockPadding],\n                    }\n                });\n                modifiedDecorations.push({\n                    range: m.lineRangeMapping.modified.toInclusiveRange(), options: {\n                        description: 'moved',\n                        blockClassName: 'movedModified' + (m === activeMovedText ? ' currentMove' : ''),\n                        blockPadding: [4, 0, 4, 4],\n                    }\n                });\n            }\n            return { originalDecorations, modifiedDecorations };\n        });\n        this._register(applyObservableDecorations(this._editors.original, this._decorations.map(d => (d === null || d === void 0 ? void 0 : d.originalDecorations) || [])));\n        this._register(applyObservableDecorations(this._editors.modified, this._decorations.map(d => (d === null || d === void 0 ? void 0 : d.modifiedDecorations) || [])));\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { h } from '../../../../../base/browser/dom.js';\nimport { ActionBar } from '../../../../../base/browser/ui/actionbar/actionbar.js';\nimport { Action } from '../../../../../base/common/actions.js';\nimport { booleanComparator, compareBy, numberComparator, tieBreakComparators } from '../../../../../base/common/arrays.js';\nimport { findMaxIdxBy } from '../../../../../base/common/arraysFind.js';\nimport { Codicon } from '../../../../../base/common/codicons.js';\nimport { Disposable, toDisposable } from '../../../../../base/common/lifecycle.js';\nimport { autorun, autorunHandleChanges, autorunWithStore, constObservable, derived, derivedWithStore, observableFromEvent, observableSignalFromEvent, observableValue, recomputeInitiallyAndOnChange } from '../../../../../base/common/observable.js';\nimport { ThemeIcon } from '../../../../../base/common/themables.js';\nimport { PlaceholderViewZone, ViewZoneOverlayWidget, applyStyle, applyViewZones } from '../utils.js';\nimport { OffsetRange, OffsetRangeSet } from '../../../../common/core/offsetRange.js';\nimport { localize } from '../../../../../nls.js';\nexport class MovedBlocksLinesFeature extends Disposable {\n    constructor(_rootElement, _diffModel, _originalEditorLayoutInfo, _modifiedEditorLayoutInfo, _editors) {\n        super();\n        this._rootElement = _rootElement;\n        this._diffModel = _diffModel;\n        this._originalEditorLayoutInfo = _originalEditorLayoutInfo;\n        this._modifiedEditorLayoutInfo = _modifiedEditorLayoutInfo;\n        this._editors = _editors;\n        this._originalScrollTop = observableFromEvent(this._editors.original.onDidScrollChange, () => this._editors.original.getScrollTop());\n        this._modifiedScrollTop = observableFromEvent(this._editors.modified.onDidScrollChange, () => this._editors.modified.getScrollTop());\n        this._viewZonesChanged = observableSignalFromEvent('onDidChangeViewZones', this._editors.modified.onDidChangeViewZones);\n        this.width = observableValue(this, 0);\n        this._modifiedViewZonesChangedSignal = observableSignalFromEvent('modified.onDidChangeViewZones', this._editors.modified.onDidChangeViewZones);\n        this._originalViewZonesChangedSignal = observableSignalFromEvent('original.onDidChangeViewZones', this._editors.original.onDidChangeViewZones);\n        this._state = derivedWithStore(this, (reader, store) => {\n            /** @description state */\n            var _a;\n            this._element.replaceChildren();\n            const model = this._diffModel.read(reader);\n            const moves = (_a = model === null || model === void 0 ? void 0 : model.diff.read(reader)) === null || _a === void 0 ? void 0 : _a.movedTexts;\n            if (!moves || moves.length === 0) {\n                this.width.set(0, undefined);\n                return;\n            }\n            this._viewZonesChanged.read(reader);\n            const infoOrig = this._originalEditorLayoutInfo.read(reader);\n            const infoMod = this._modifiedEditorLayoutInfo.read(reader);\n            if (!infoOrig || !infoMod) {\n                this.width.set(0, undefined);\n                return;\n            }\n            this._modifiedViewZonesChangedSignal.read(reader);\n            this._originalViewZonesChangedSignal.read(reader);\n            const lines = moves.map((move) => {\n                function computeLineStart(range, editor) {\n                    const t1 = editor.getTopForLineNumber(range.startLineNumber, true);\n                    const t2 = editor.getTopForLineNumber(range.endLineNumberExclusive, true);\n                    return (t1 + t2) / 2;\n                }\n                const start = computeLineStart(move.lineRangeMapping.original, this._editors.original);\n                const startOffset = this._originalScrollTop.read(reader);\n                const end = computeLineStart(move.lineRangeMapping.modified, this._editors.modified);\n                const endOffset = this._modifiedScrollTop.read(reader);\n                const from = start - startOffset;\n                const to = end - endOffset;\n                const top = Math.min(start, end);\n                const bottom = Math.max(start, end);\n                return { range: new OffsetRange(top, bottom), from, to, fromWithoutScroll: start, toWithoutScroll: end, move };\n            });\n            lines.sort(tieBreakComparators(compareBy(l => l.fromWithoutScroll > l.toWithoutScroll, booleanComparator), compareBy(l => l.fromWithoutScroll > l.toWithoutScroll ? l.fromWithoutScroll : -l.toWithoutScroll, numberComparator)));\n            const layout = LinesLayout.compute(lines.map(l => l.range));\n            const padding = 10;\n            const lineAreaLeft = infoOrig.verticalScrollbarWidth;\n            const lineAreaWidth = (layout.getTrackCount() - 1) * 10 + padding * 2;\n            const width = lineAreaLeft + lineAreaWidth + (infoMod.contentLeft - MovedBlocksLinesFeature.movedCodeBlockPadding);\n            let idx = 0;\n            for (const line of lines) {\n                const track = layout.getTrack(idx);\n                const verticalY = lineAreaLeft + padding + track * 10;\n                const arrowHeight = 15;\n                const arrowWidth = 15;\n                const right = width;\n                const rectWidth = infoMod.glyphMarginWidth + infoMod.lineNumbersWidth;\n                const rectHeight = 18;\n                const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n                rect.classList.add('arrow-rectangle');\n                rect.setAttribute('x', `${right - rectWidth}`);\n                rect.setAttribute('y', `${line.to - rectHeight / 2}`);\n                rect.setAttribute('width', `${rectWidth}`);\n                rect.setAttribute('height', `${rectHeight}`);\n                this._element.appendChild(rect);\n                const g = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n                const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                path.setAttribute('d', `M ${0} ${line.from} L ${verticalY} ${line.from} L ${verticalY} ${line.to} L ${right - arrowWidth} ${line.to}`);\n                path.setAttribute('fill', 'none');\n                g.appendChild(path);\n                const arrowRight = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');\n                arrowRight.classList.add('arrow');\n                store.add(autorun(reader => {\n                    path.classList.toggle('currentMove', line.move === model.activeMovedText.read(reader));\n                    arrowRight.classList.toggle('currentMove', line.move === model.activeMovedText.read(reader));\n                }));\n                arrowRight.setAttribute('points', `${right - arrowWidth},${line.to - arrowHeight / 2} ${right},${line.to} ${right - arrowWidth},${line.to + arrowHeight / 2}`);\n                g.appendChild(arrowRight);\n                this._element.appendChild(g);\n                /*\n                TODO@hediet\n                path.addEventListener('mouseenter', () => {\n                    model.setHoveredMovedText(line.move);\n                });\n                path.addEventListener('mouseleave', () => {\n                    model.setHoveredMovedText(undefined);\n                });*/\n                idx++;\n            }\n            this.width.set(lineAreaWidth, undefined);\n        });\n        this._element = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        this._element.setAttribute('class', 'moved-blocks-lines');\n        this._rootElement.appendChild(this._element);\n        this._register(toDisposable(() => this._element.remove()));\n        this._register(autorun(reader => {\n            /** @description update moved blocks lines positioning */\n            const info = this._originalEditorLayoutInfo.read(reader);\n            const info2 = this._modifiedEditorLayoutInfo.read(reader);\n            if (!info || !info2) {\n                return;\n            }\n            this._element.style.left = `${info.width - info.verticalScrollbarWidth}px`;\n            this._element.style.height = `${info.height}px`;\n            this._element.style.width = `${info.verticalScrollbarWidth + info.contentLeft - MovedBlocksLinesFeature.movedCodeBlockPadding + this.width.read(reader)}px`;\n        }));\n        this._register(recomputeInitiallyAndOnChange(this._state));\n        const movedBlockViewZones = derived(reader => {\n            const model = this._diffModel.read(reader);\n            const d = model === null || model === void 0 ? void 0 : model.diff.read(reader);\n            if (!d) {\n                return [];\n            }\n            return d.movedTexts.map(move => ({\n                move,\n                original: new PlaceholderViewZone(constObservable(move.lineRangeMapping.original.startLineNumber - 1), 18),\n                modified: new PlaceholderViewZone(constObservable(move.lineRangeMapping.modified.startLineNumber - 1), 18),\n            }));\n        });\n        this._register(applyViewZones(this._editors.original, movedBlockViewZones.map(zones => /** @description movedBlockViewZones.original */ zones.map(z => z.original))));\n        this._register(applyViewZones(this._editors.modified, movedBlockViewZones.map(zones => /** @description movedBlockViewZones.modified */ zones.map(z => z.modified))));\n        this._register(autorunWithStore((reader, store) => {\n            const blocks = movedBlockViewZones.read(reader);\n            for (const b of blocks) {\n                store.add(new MovedBlockOverlayWidget(this._editors.original, b.original, b.move, 'original', this._diffModel.get()));\n                store.add(new MovedBlockOverlayWidget(this._editors.modified, b.modified, b.move, 'modified', this._diffModel.get()));\n            }\n        }));\n        const originalHasFocus = observableSignalFromEvent('original.onDidFocusEditorWidget', e => this._editors.original.onDidFocusEditorWidget(() => setTimeout(() => e(undefined), 0)));\n        const modifiedHasFocus = observableSignalFromEvent('modified.onDidFocusEditorWidget', e => this._editors.modified.onDidFocusEditorWidget(() => setTimeout(() => e(undefined), 0)));\n        let lastChangedEditor = 'modified';\n        this._register(autorunHandleChanges({\n            createEmptyChangeSummary: () => undefined,\n            handleChange: (ctx, summary) => {\n                if (ctx.didChange(originalHasFocus)) {\n                    lastChangedEditor = 'original';\n                }\n                if (ctx.didChange(modifiedHasFocus)) {\n                    lastChangedEditor = 'modified';\n                }\n                return true;\n            }\n        }, reader => {\n            /** @description MovedBlocksLines.setActiveMovedTextFromCursor */\n            originalHasFocus.read(reader);\n            modifiedHasFocus.read(reader);\n            const m = this._diffModel.read(reader);\n            if (!m) {\n                return;\n            }\n            const diff = m.diff.read(reader);\n            let movedText = undefined;\n            if (diff && lastChangedEditor === 'original') {\n                const originalPos = this._editors.originalCursor.read(reader);\n                if (originalPos) {\n                    movedText = diff.movedTexts.find(m => m.lineRangeMapping.original.contains(originalPos.lineNumber));\n                }\n            }\n            if (diff && lastChangedEditor === 'modified') {\n                const modifiedPos = this._editors.modifiedCursor.read(reader);\n                if (modifiedPos) {\n                    movedText = diff.movedTexts.find(m => m.lineRangeMapping.modified.contains(modifiedPos.lineNumber));\n                }\n            }\n            if (movedText !== m.movedTextToCompare.get()) {\n                m.movedTextToCompare.set(undefined, undefined);\n            }\n            m.setActiveMovedText(movedText);\n        }));\n    }\n}\nMovedBlocksLinesFeature.movedCodeBlockPadding = 4;\nclass LinesLayout {\n    static compute(lines) {\n        const setsPerTrack = [];\n        const trackPerLineIdx = [];\n        for (const line of lines) {\n            let trackIdx = setsPerTrack.findIndex(set => !set.intersectsStrict(line));\n            if (trackIdx === -1) {\n                const maxTrackCount = 6;\n                if (setsPerTrack.length >= maxTrackCount) {\n                    trackIdx = findMaxIdxBy(setsPerTrack, compareBy(set => set.intersectWithRangeLength(line), numberComparator));\n                }\n                else {\n                    trackIdx = setsPerTrack.length;\n                    setsPerTrack.push(new OffsetRangeSet());\n                }\n            }\n            setsPerTrack[trackIdx].addRange(line);\n            trackPerLineIdx.push(trackIdx);\n        }\n        return new LinesLayout(setsPerTrack.length, trackPerLineIdx);\n    }\n    constructor(_trackCount, trackPerLineIdx) {\n        this._trackCount = _trackCount;\n        this.trackPerLineIdx = trackPerLineIdx;\n    }\n    getTrack(lineIdx) {\n        return this.trackPerLineIdx[lineIdx];\n    }\n    getTrackCount() {\n        return this._trackCount;\n    }\n}\nclass MovedBlockOverlayWidget extends ViewZoneOverlayWidget {\n    constructor(_editor, _viewZone, _move, _kind, _diffModel) {\n        const root = h('div.diff-hidden-lines-widget');\n        super(_editor, _viewZone, root.root);\n        this._editor = _editor;\n        this._move = _move;\n        this._kind = _kind;\n        this._diffModel = _diffModel;\n        this._nodes = h('div.diff-moved-code-block', { style: { marginRight: '4px' } }, [\n            h('div.text-content@textContent'),\n            h('div.action-bar@actionBar'),\n        ]);\n        root.root.appendChild(this._nodes.root);\n        const editorLayout = observableFromEvent(this._editor.onDidLayoutChange, () => this._editor.getLayoutInfo());\n        this._register(applyStyle(this._nodes.root, {\n            paddingRight: editorLayout.map(l => l.verticalScrollbarWidth)\n        }));\n        let text;\n        if (_move.changes.length > 0) {\n            text = this._kind === 'original' ? localize('codeMovedToWithChanges', 'Code moved with changes to line {0}-{1}', this._move.lineRangeMapping.modified.startLineNumber, this._move.lineRangeMapping.modified.endLineNumberExclusive - 1) : localize('codeMovedFromWithChanges', 'Code moved with changes from line {0}-{1}', this._move.lineRangeMapping.original.startLineNumber, this._move.lineRangeMapping.original.endLineNumberExclusive - 1);\n        }\n        else {\n            text = this._kind === 'original' ? localize('codeMovedTo', 'Code moved to line {0}-{1}', this._move.lineRangeMapping.modified.startLineNumber, this._move.lineRangeMapping.modified.endLineNumberExclusive - 1) : localize('codeMovedFrom', 'Code moved from line {0}-{1}', this._move.lineRangeMapping.original.startLineNumber, this._move.lineRangeMapping.original.endLineNumberExclusive - 1);\n        }\n        const actionBar = this._register(new ActionBar(this._nodes.actionBar, {\n            highlightToggledItems: true,\n        }));\n        const caption = new Action('', text, '', false);\n        actionBar.push(caption, { icon: false, label: true });\n        const actionCompare = new Action('', 'Compare', ThemeIcon.asClassName(Codicon.compareChanges), true, () => {\n            this._editor.focus();\n            this._diffModel.movedTextToCompare.set(this._diffModel.movedTextToCompare.get() === _move ? undefined : this._move, undefined);\n        });\n        this._register(autorun(reader => {\n            const isActive = this._diffModel.movedTextToCompare.read(reader) === _move;\n            actionCompare.checked = isActive;\n        }));\n        actionBar.push(actionCompare, { icon: false, label: true });\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { ModelDecorationOptions } from '../../../common/model/textModel.js';\nimport { localize } from '../../../../nls.js';\nimport { registerColor } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerIcon } from '../../../../platform/theme/common/iconRegistry.js';\nexport const diffMoveBorder = registerColor('diffEditor.move.border', { dark: '#8b8b8b9c', light: '#8b8b8b9c', hcDark: '#8b8b8b9c', hcLight: '#8b8b8b9c', }, localize('diffEditor.move.border', 'The border color for text that got moved in the diff editor.'));\nexport const diffMoveBorderActive = registerColor('diffEditor.moveActive.border', { dark: '#FFA500', light: '#FFA500', hcDark: '#FFA500', hcLight: '#FFA500', }, localize('diffEditor.moveActive.border', 'The active border color for text that got moved in the diff editor.'));\nexport const diffEditorUnchangedRegionShadow = registerColor('diffEditor.unchangedRegionShadow', { dark: '#000000', light: '#737373BF', hcDark: '#000000', hcLight: '#737373BF', }, localize('diffEditor.unchangedRegionShadow', 'The color of the shadow around unchanged region widgets.'));\nexport const diffInsertIcon = registerIcon('diff-insert', Codicon.add, localize('diffInsertIcon', 'Line decoration for inserts in the diff editor.'));\nexport const diffRemoveIcon = registerIcon('diff-remove', Codicon.remove, localize('diffRemoveIcon', 'Line decoration for removals in the diff editor.'));\nexport const diffLineAddDecorationBackgroundWithIndicator = ModelDecorationOptions.register({\n    className: 'line-insert',\n    description: 'line-insert',\n    isWholeLine: true,\n    linesDecorationsClassName: 'insert-sign ' + ThemeIcon.asClassName(diffInsertIcon),\n    marginClassName: 'gutter-insert',\n});\nexport const diffLineDeleteDecorationBackgroundWithIndicator = ModelDecorationOptions.register({\n    className: 'line-delete',\n    description: 'line-delete',\n    isWholeLine: true,\n    linesDecorationsClassName: 'delete-sign ' + ThemeIcon.asClassName(diffRemoveIcon),\n    marginClassName: 'gutter-delete',\n});\nexport const diffLineAddDecorationBackground = ModelDecorationOptions.register({\n    className: 'line-insert',\n    description: 'line-insert',\n    isWholeLine: true,\n    marginClassName: 'gutter-insert',\n});\nexport const diffLineDeleteDecorationBackground = ModelDecorationOptions.register({\n    className: 'line-delete',\n    description: 'line-delete',\n    isWholeLine: true,\n    marginClassName: 'gutter-delete',\n});\nexport const diffAddDecoration = ModelDecorationOptions.register({\n    className: 'char-insert',\n    description: 'char-insert',\n    shouldFillLineOnLineBreak: true,\n});\nexport const diffWholeLineAddDecoration = ModelDecorationOptions.register({\n    className: 'char-insert',\n    description: 'char-insert',\n    isWholeLine: true,\n});\nexport const diffAddDecorationEmpty = ModelDecorationOptions.register({\n    className: 'char-insert diff-range-empty',\n    description: 'char-insert diff-range-empty',\n});\nexport const diffDeleteDecoration = ModelDecorationOptions.register({\n    className: 'char-delete',\n    description: 'char-delete',\n    shouldFillLineOnLineBreak: true,\n});\nexport const diffWholeLineDeleteDecoration = ModelDecorationOptions.register({\n    className: 'char-delete',\n    description: 'char-delete',\n    isWholeLine: true,\n});\nexport const diffDeleteDecorationEmpty = ModelDecorationOptions.register({\n    className: 'char-delete diff-range-empty',\n    description: 'char-delete diff-range-empty',\n});\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Sash } from '../../../../../base/browser/ui/sash/sash.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { autorun, derived, observableValue } from '../../../../../base/common/observable.js';\nexport class DiffEditorSash extends Disposable {\n    constructor(_options, _domNode, _dimensions, _sashes) {\n        super();\n        this._options = _options;\n        this._domNode = _domNode;\n        this._dimensions = _dimensions;\n        this._sashes = _sashes;\n        this._sashRatio = observableValue(this, undefined);\n        this.sashLeft = derived(this, reader => {\n            var _a;\n            const ratio = (_a = this._sashRatio.read(reader)) !== null && _a !== void 0 ? _a : this._options.splitViewDefaultRatio.read(reader);\n            return this._computeSashLeft(ratio, reader);\n        });\n        this._sash = this._register(new Sash(this._domNode, {\n            getVerticalSashTop: (_sash) => 0,\n            getVerticalSashLeft: (_sash) => this.sashLeft.get(),\n            getVerticalSashHeight: (_sash) => this._dimensions.height.get(),\n        }, { orientation: 0 /* Orientation.VERTICAL */ }));\n        this._startSashPosition = undefined;\n        this._register(this._sash.onDidStart(() => {\n            this._startSashPosition = this.sashLeft.get();\n        }));\n        this._register(this._sash.onDidChange((e) => {\n            const contentWidth = this._dimensions.width.get();\n            const sashPosition = this._computeSashLeft((this._startSashPosition + (e.currentX - e.startX)) / contentWidth, undefined);\n            this._sashRatio.set(sashPosition / contentWidth, undefined);\n        }));\n        this._register(this._sash.onDidEnd(() => this._sash.layout()));\n        this._register(this._sash.onDidReset(() => this._sashRatio.set(undefined, undefined)));\n        this._register(autorun(reader => {\n            const sashes = this._sashes.read(reader);\n            if (sashes) {\n                this._sash.orthogonalEndSash = sashes.bottom;\n            }\n        }));\n        this._register(autorun(reader => {\n            /** @description DiffEditorSash.layoutSash */\n            const enabled = this._options.enableSplitViewResizing.read(reader);\n            this._sash.state = enabled ? 3 /* SashState.Enabled */ : 0 /* SashState.Disabled */;\n            this.sashLeft.read(reader);\n            this._dimensions.height.read(reader);\n            this._sash.layout();\n        }));\n    }\n    /** @pure */\n    _computeSashLeft(desiredRatio, reader) {\n        const contentWidth = this._dimensions.width.read(reader);\n        const midPoint = Math.floor(this._options.splitViewDefaultRatio.read(reader) * contentWidth);\n        const sashLeft = this._options.enableSplitViewResizing.read(reader) ? Math.floor(desiredRatio * contentWidth) : midPoint;\n        const MINIMUM_EDITOR_WIDTH = 100;\n        if (contentWidth <= MINIMUM_EDITOR_WIDTH * 2) {\n            return midPoint;\n        }\n        if (sashLeft < MINIMUM_EDITOR_WIDTH) {\n            return MINIMUM_EDITOR_WIDTH;\n        }\n        if (sashLeft > contentWidth - MINIMUM_EDITOR_WIDTH) {\n            return contentWidth - MINIMUM_EDITOR_WIDTH;\n        }\n        return sashLeft;\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { $, addDisposableListener } from '../../../../../../base/browser/dom.js';\nimport { ArrayQueue } from '../../../../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../../../../base/common/async.js';\nimport { Codicon } from '../../../../../../base/common/codicons.js';\nimport { Disposable, DisposableStore } from '../../../../../../base/common/lifecycle.js';\nimport { autorun, derived, derivedWithStore, observableFromEvent, observableValue } from '../../../../../../base/common/observable.js';\nimport { ThemeIcon } from '../../../../../../base/common/themables.js';\nimport { assertIsDefined } from '../../../../../../base/common/types.js';\nimport { applyFontInfo } from '../../../../config/domFontInfo.js';\nimport { diffDeleteDecoration, diffRemoveIcon } from '../../registrations.contribution.js';\nimport { DiffMapping } from '../../diffEditorViewModel.js';\nimport { InlineDiffDeletedCodeMargin } from './inlineDiffDeletedCodeMargin.js';\nimport { LineSource, RenderOptions, renderLines } from './renderLines.js';\nimport { animatedObservable, joinCombine } from '../../utils.js';\nimport { LineRange } from '../../../../../common/core/lineRange.js';\nimport { Position } from '../../../../../common/core/position.js';\nimport { InlineDecoration } from '../../../../../common/viewModel.js';\nimport { IClipboardService } from '../../../../../../platform/clipboard/common/clipboardService.js';\nimport { IContextMenuService } from '../../../../../../platform/contextview/browser/contextView.js';\n/**\n * Ensures both editors have the same height by aligning unchanged lines.\n * In inline view mode, inserts viewzones to show deleted code from the original text model in the modified code editor.\n * Synchronizes scrolling.\n *\n * Make sure to add the view zones!\n */\nlet DiffEditorViewZones = class DiffEditorViewZones extends Disposable {\n    constructor(_targetWindow, _editors, _diffModel, _options, _diffEditorWidget, _canIgnoreViewZoneUpdateEvent, _origViewZonesToIgnore, _modViewZonesToIgnore, _clipboardService, _contextMenuService) {\n        super();\n        this._targetWindow = _targetWindow;\n        this._editors = _editors;\n        this._diffModel = _diffModel;\n        this._options = _options;\n        this._diffEditorWidget = _diffEditorWidget;\n        this._canIgnoreViewZoneUpdateEvent = _canIgnoreViewZoneUpdateEvent;\n        this._origViewZonesToIgnore = _origViewZonesToIgnore;\n        this._modViewZonesToIgnore = _modViewZonesToIgnore;\n        this._clipboardService = _clipboardService;\n        this._contextMenuService = _contextMenuService;\n        this._originalTopPadding = observableValue(this, 0);\n        this._originalScrollOffset = observableValue(this, 0);\n        this._originalScrollOffsetAnimated = animatedObservable(this._targetWindow, this._originalScrollOffset, this._store);\n        this._modifiedTopPadding = observableValue(this, 0);\n        this._modifiedScrollOffset = observableValue(this, 0);\n        this._modifiedScrollOffsetAnimated = animatedObservable(this._targetWindow, this._modifiedScrollOffset, this._store);\n        const state = observableValue('invalidateAlignmentsState', 0);\n        const updateImmediately = this._register(new RunOnceScheduler(() => {\n            state.set(state.get() + 1, undefined);\n        }, 0));\n        this._register(this._editors.original.onDidChangeViewZones((_args) => { if (!this._canIgnoreViewZoneUpdateEvent()) {\n            updateImmediately.schedule();\n        } }));\n        this._register(this._editors.modified.onDidChangeViewZones((_args) => { if (!this._canIgnoreViewZoneUpdateEvent()) {\n            updateImmediately.schedule();\n        } }));\n        this._register(this._editors.original.onDidChangeConfiguration((args) => {\n            if (args.hasChanged(145 /* EditorOption.wrappingInfo */) || args.hasChanged(67 /* EditorOption.lineHeight */)) {\n                updateImmediately.schedule();\n            }\n        }));\n        this._register(this._editors.modified.onDidChangeConfiguration((args) => {\n            if (args.hasChanged(145 /* EditorOption.wrappingInfo */) || args.hasChanged(67 /* EditorOption.lineHeight */)) {\n                updateImmediately.schedule();\n            }\n        }));\n        const originalModelTokenizationCompleted = this._diffModel.map(m => m ? observableFromEvent(m.model.original.onDidChangeTokens, () => m.model.original.tokenization.backgroundTokenizationState === 2 /* BackgroundTokenizationState.Completed */) : undefined).map((m, reader) => m === null || m === void 0 ? void 0 : m.read(reader));\n        const alignments = derived((reader) => {\n            /** @description alignments */\n            const diffModel = this._diffModel.read(reader);\n            const diff = diffModel === null || diffModel === void 0 ? void 0 : diffModel.diff.read(reader);\n            if (!diffModel || !diff) {\n                return null;\n            }\n            state.read(reader);\n            const renderSideBySide = this._options.renderSideBySide.read(reader);\n            const innerHunkAlignment = renderSideBySide;\n            return computeRangeAlignment(this._editors.original, this._editors.modified, diff.mappings, this._origViewZonesToIgnore, this._modViewZonesToIgnore, innerHunkAlignment);\n        });\n        const alignmentsSyncedMovedText = derived((reader) => {\n            var _a;\n            /** @description alignmentsSyncedMovedText */\n            const syncedMovedText = (_a = this._diffModel.read(reader)) === null || _a === void 0 ? void 0 : _a.movedTextToCompare.read(reader);\n            if (!syncedMovedText) {\n                return null;\n            }\n            state.read(reader);\n            const mappings = syncedMovedText.changes.map(c => new DiffMapping(c));\n            // TODO dont include alignments outside syncedMovedText\n            return computeRangeAlignment(this._editors.original, this._editors.modified, mappings, this._origViewZonesToIgnore, this._modViewZonesToIgnore, true);\n        });\n        function createFakeLinesDiv() {\n            const r = document.createElement('div');\n            r.className = 'diagonal-fill';\n            return r;\n        }\n        const alignmentViewZonesDisposables = this._register(new DisposableStore());\n        this.viewZones = derivedWithStore(this, (reader, store) => {\n            var _a, _b, _c, _d, _e, _f, _g, _h;\n            alignmentViewZonesDisposables.clear();\n            const alignmentsVal = alignments.read(reader) || [];\n            const origViewZones = [];\n            const modViewZones = [];\n            const modifiedTopPaddingVal = this._modifiedTopPadding.read(reader);\n            if (modifiedTopPaddingVal > 0) {\n                modViewZones.push({\n                    afterLineNumber: 0,\n                    domNode: document.createElement('div'),\n                    heightInPx: modifiedTopPaddingVal,\n                    showInHiddenAreas: true,\n                    suppressMouseDown: true,\n                });\n            }\n            const originalTopPaddingVal = this._originalTopPadding.read(reader);\n            if (originalTopPaddingVal > 0) {\n                origViewZones.push({\n                    afterLineNumber: 0,\n                    domNode: document.createElement('div'),\n                    heightInPx: originalTopPaddingVal,\n                    showInHiddenAreas: true,\n                    suppressMouseDown: true,\n                });\n            }\n            const renderSideBySide = this._options.renderSideBySide.read(reader);\n            const deletedCodeLineBreaksComputer = !renderSideBySide ? (_a = this._editors.modified._getViewModel()) === null || _a === void 0 ? void 0 : _a.createLineBreaksComputer() : undefined;\n            if (deletedCodeLineBreaksComputer) {\n                const originalModel = this._editors.original.getModel();\n                for (const a of alignmentsVal) {\n                    if (a.diff) {\n                        for (let i = a.originalRange.startLineNumber; i < a.originalRange.endLineNumberExclusive; i++) {\n                            // `i` can be out of bound when the diff has not been updated yet.\n                            // In this case, we do an early return.\n                            // TODO@hediet: Fix this by applying the edit directly to the diff model, so that the diff is always valid.\n                            if (i > originalModel.getLineCount()) {\n                                return { orig: origViewZones, mod: modViewZones };\n                            }\n                            deletedCodeLineBreaksComputer === null || deletedCodeLineBreaksComputer === void 0 ? void 0 : deletedCodeLineBreaksComputer.addRequest(originalModel.getLineContent(i), null, null);\n                        }\n                    }\n                }\n            }\n            const lineBreakData = (_b = deletedCodeLineBreaksComputer === null || deletedCodeLineBreaksComputer === void 0 ? void 0 : deletedCodeLineBreaksComputer.finalize()) !== null && _b !== void 0 ? _b : [];\n            let lineBreakDataIdx = 0;\n            const modLineHeight = this._editors.modified.getOption(67 /* EditorOption.lineHeight */);\n            const syncedMovedText = (_c = this._diffModel.read(reader)) === null || _c === void 0 ? void 0 : _c.movedTextToCompare.read(reader);\n            const mightContainNonBasicASCII = (_e = (_d = this._editors.original.getModel()) === null || _d === void 0 ? void 0 : _d.mightContainNonBasicASCII()) !== null && _e !== void 0 ? _e : false;\n            const mightContainRTL = (_g = (_f = this._editors.original.getModel()) === null || _f === void 0 ? void 0 : _f.mightContainRTL()) !== null && _g !== void 0 ? _g : false;\n            const renderOptions = RenderOptions.fromEditor(this._editors.modified);\n            for (const a of alignmentsVal) {\n                if (a.diff && !renderSideBySide) {\n                    if (!a.originalRange.isEmpty) {\n                        originalModelTokenizationCompleted.read(reader); // Update view-zones once tokenization completes\n                        const deletedCodeDomNode = document.createElement('div');\n                        deletedCodeDomNode.classList.add('view-lines', 'line-delete', 'monaco-mouse-cursor-text');\n                        const originalModel = this._editors.original.getModel();\n                        // `a.originalRange` can be out of bound when the diff has not been updated yet.\n                        // In this case, we do an early return.\n                        // TODO@hediet: Fix this by applying the edit directly to the diff model, so that the diff is always valid.\n                        if (a.originalRange.endLineNumberExclusive - 1 > originalModel.getLineCount()) {\n                            return { orig: origViewZones, mod: modViewZones };\n                        }\n                        const source = new LineSource(a.originalRange.mapToLineArray(l => originalModel.tokenization.getLineTokens(l)), a.originalRange.mapToLineArray(_ => lineBreakData[lineBreakDataIdx++]), mightContainNonBasicASCII, mightContainRTL);\n                        const decorations = [];\n                        for (const i of a.diff.innerChanges || []) {\n                            decorations.push(new InlineDecoration(i.originalRange.delta(-(a.diff.original.startLineNumber - 1)), diffDeleteDecoration.className, 0 /* InlineDecorationType.Regular */));\n                        }\n                        const result = renderLines(source, renderOptions, decorations, deletedCodeDomNode);\n                        const marginDomNode = document.createElement('div');\n                        marginDomNode.className = 'inline-deleted-margin-view-zone';\n                        applyFontInfo(marginDomNode, renderOptions.fontInfo);\n                        if (this._options.renderIndicators.read(reader)) {\n                            for (let i = 0; i < result.heightInLines; i++) {\n                                const marginElement = document.createElement('div');\n                                marginElement.className = `delete-sign ${ThemeIcon.asClassName(diffRemoveIcon)}`;\n                                marginElement.setAttribute('style', `position:absolute;top:${i * modLineHeight}px;width:${renderOptions.lineDecorationsWidth}px;height:${modLineHeight}px;right:0;`);\n                                marginDomNode.appendChild(marginElement);\n                            }\n                        }\n                        let zoneId = undefined;\n                        alignmentViewZonesDisposables.add(new InlineDiffDeletedCodeMargin(() => assertIsDefined(zoneId), marginDomNode, this._editors.modified, a.diff, this._diffEditorWidget, result.viewLineCounts, this._editors.original.getModel(), this._contextMenuService, this._clipboardService));\n                        for (let i = 0; i < result.viewLineCounts.length; i++) {\n                            const count = result.viewLineCounts[i];\n                            // Account for wrapped lines in the (collapsed) original editor (which doesn't wrap lines).\n                            if (count > 1) {\n                                origViewZones.push({\n                                    afterLineNumber: a.originalRange.startLineNumber + i,\n                                    domNode: createFakeLinesDiv(),\n                                    heightInPx: (count - 1) * modLineHeight,\n                                    showInHiddenAreas: true,\n                                    suppressMouseDown: true,\n                                });\n                            }\n                        }\n                        modViewZones.push({\n                            afterLineNumber: a.modifiedRange.startLineNumber - 1,\n                            domNode: deletedCodeDomNode,\n                            heightInPx: result.heightInLines * modLineHeight,\n                            minWidthInPx: result.minWidthInPx,\n                            marginDomNode,\n                            setZoneId(id) { zoneId = id; },\n                            showInHiddenAreas: true,\n                            suppressMouseDown: true,\n                        });\n                    }\n                    const marginDomNode = document.createElement('div');\n                    marginDomNode.className = 'gutter-delete';\n                    origViewZones.push({\n                        afterLineNumber: a.originalRange.endLineNumberExclusive - 1,\n                        domNode: createFakeLinesDiv(),\n                        heightInPx: a.modifiedHeightInPx,\n                        marginDomNode,\n                        showInHiddenAreas: true,\n                        suppressMouseDown: true,\n                    });\n                }\n                else {\n                    const delta = a.modifiedHeightInPx - a.originalHeightInPx;\n                    if (delta > 0) {\n                        if (syncedMovedText === null || syncedMovedText === void 0 ? void 0 : syncedMovedText.lineRangeMapping.original.delta(-1).deltaLength(2).contains(a.originalRange.endLineNumberExclusive - 1)) {\n                            continue;\n                        }\n                        origViewZones.push({\n                            afterLineNumber: a.originalRange.endLineNumberExclusive - 1,\n                            domNode: createFakeLinesDiv(),\n                            heightInPx: delta,\n                            showInHiddenAreas: true,\n                            suppressMouseDown: true,\n                        });\n                    }\n                    else {\n                        if (syncedMovedText === null || syncedMovedText === void 0 ? void 0 : syncedMovedText.lineRangeMapping.modified.delta(-1).deltaLength(2).contains(a.modifiedRange.endLineNumberExclusive - 1)) {\n                            continue;\n                        }\n                        function createViewZoneMarginArrow() {\n                            const arrow = document.createElement('div');\n                            arrow.className = 'arrow-revert-change ' + ThemeIcon.asClassName(Codicon.arrowRight);\n                            store.add(addDisposableListener(arrow, 'mousedown', e => e.stopPropagation()));\n                            store.add(addDisposableListener(arrow, 'click', e => {\n                                e.stopPropagation();\n                                _diffEditorWidget.revert(a.diff);\n                            }));\n                            return $('div', {}, arrow);\n                        }\n                        let marginDomNode = undefined;\n                        if (a.diff && a.diff.modified.isEmpty && this._options.shouldRenderRevertArrows.read(reader)) {\n                            marginDomNode = createViewZoneMarginArrow();\n                        }\n                        modViewZones.push({\n                            afterLineNumber: a.modifiedRange.endLineNumberExclusive - 1,\n                            domNode: createFakeLinesDiv(),\n                            heightInPx: -delta,\n                            marginDomNode,\n                            showInHiddenAreas: true,\n                            suppressMouseDown: true,\n                        });\n                    }\n                }\n            }\n            for (const a of (_h = alignmentsSyncedMovedText.read(reader)) !== null && _h !== void 0 ? _h : []) {\n                if (!(syncedMovedText === null || syncedMovedText === void 0 ? void 0 : syncedMovedText.lineRangeMapping.original.intersect(a.originalRange))\n                    || !(syncedMovedText === null || syncedMovedText === void 0 ? void 0 : syncedMovedText.lineRangeMapping.modified.intersect(a.modifiedRange))) {\n                    // ignore unrelated alignments outside the synced moved text\n                    continue;\n                }\n                const delta = a.modifiedHeightInPx - a.originalHeightInPx;\n                if (delta > 0) {\n                    origViewZones.push({\n                        afterLineNumber: a.originalRange.endLineNumberExclusive - 1,\n                        domNode: createFakeLinesDiv(),\n                        heightInPx: delta,\n                        showInHiddenAreas: true,\n                        suppressMouseDown: true,\n                    });\n                }\n                else {\n                    modViewZones.push({\n                        afterLineNumber: a.modifiedRange.endLineNumberExclusive - 1,\n                        domNode: createFakeLinesDiv(),\n                        heightInPx: -delta,\n                        showInHiddenAreas: true,\n                        suppressMouseDown: true,\n                    });\n                }\n            }\n            return { orig: origViewZones, mod: modViewZones };\n        });\n        let ignoreChange = false;\n        this._register(this._editors.original.onDidScrollChange(e => {\n            if (e.scrollLeftChanged && !ignoreChange) {\n                ignoreChange = true;\n                this._editors.modified.setScrollLeft(e.scrollLeft);\n                ignoreChange = false;\n            }\n        }));\n        this._register(this._editors.modified.onDidScrollChange(e => {\n            if (e.scrollLeftChanged && !ignoreChange) {\n                ignoreChange = true;\n                this._editors.original.setScrollLeft(e.scrollLeft);\n                ignoreChange = false;\n            }\n        }));\n        this._originalScrollTop = observableFromEvent(this._editors.original.onDidScrollChange, () => /** @description original.getScrollTop */ this._editors.original.getScrollTop());\n        this._modifiedScrollTop = observableFromEvent(this._editors.modified.onDidScrollChange, () => /** @description modified.getScrollTop */ this._editors.modified.getScrollTop());\n        // origExtraHeight + origOffset - origScrollTop = modExtraHeight + modOffset - modScrollTop\n        // origScrollTop = origExtraHeight + origOffset - modExtraHeight - modOffset + modScrollTop\n        // modScrollTop = modExtraHeight + modOffset - origExtraHeight - origOffset + origScrollTop\n        // origOffset - modOffset = heightOfLines(1..Y) - heightOfLines(1..X)\n        // origScrollTop >= 0, modScrollTop >= 0\n        this._register(autorun(reader => {\n            /** @description update scroll modified */\n            const newScrollTopModified = this._originalScrollTop.read(reader)\n                - (this._originalScrollOffsetAnimated.get() - this._modifiedScrollOffsetAnimated.read(reader))\n                - (this._originalTopPadding.get() - this._modifiedTopPadding.read(reader));\n            if (newScrollTopModified !== this._editors.modified.getScrollTop()) {\n                this._editors.modified.setScrollTop(newScrollTopModified, 1 /* ScrollType.Immediate */);\n            }\n        }));\n        this._register(autorun(reader => {\n            /** @description update scroll original */\n            const newScrollTopOriginal = this._modifiedScrollTop.read(reader)\n                - (this._modifiedScrollOffsetAnimated.get() - this._originalScrollOffsetAnimated.read(reader))\n                - (this._modifiedTopPadding.get() - this._originalTopPadding.read(reader));\n            if (newScrollTopOriginal !== this._editors.original.getScrollTop()) {\n                this._editors.original.setScrollTop(newScrollTopOriginal, 1 /* ScrollType.Immediate */);\n            }\n        }));\n        this._register(autorun(reader => {\n            var _a;\n            /** @description update editor top offsets */\n            const m = (_a = this._diffModel.read(reader)) === null || _a === void 0 ? void 0 : _a.movedTextToCompare.read(reader);\n            let deltaOrigToMod = 0;\n            if (m) {\n                const trueTopOriginal = this._editors.original.getTopForLineNumber(m.lineRangeMapping.original.startLineNumber, true) - this._originalTopPadding.get();\n                const trueTopModified = this._editors.modified.getTopForLineNumber(m.lineRangeMapping.modified.startLineNumber, true) - this._modifiedTopPadding.get();\n                deltaOrigToMod = trueTopModified - trueTopOriginal;\n            }\n            if (deltaOrigToMod > 0) {\n                this._modifiedTopPadding.set(0, undefined);\n                this._originalTopPadding.set(deltaOrigToMod, undefined);\n            }\n            else if (deltaOrigToMod < 0) {\n                this._modifiedTopPadding.set(-deltaOrigToMod, undefined);\n                this._originalTopPadding.set(0, undefined);\n            }\n            else {\n                setTimeout(() => {\n                    this._modifiedTopPadding.set(0, undefined);\n                    this._originalTopPadding.set(0, undefined);\n                }, 400);\n            }\n            if (this._editors.modified.hasTextFocus()) {\n                this._originalScrollOffset.set(this._modifiedScrollOffset.get() - deltaOrigToMod, undefined, true);\n            }\n            else {\n                this._modifiedScrollOffset.set(this._originalScrollOffset.get() + deltaOrigToMod, undefined, true);\n            }\n        }));\n    }\n};\nDiffEditorViewZones = __decorate([\n    __param(8, IClipboardService),\n    __param(9, IContextMenuService)\n], DiffEditorViewZones);\nexport { DiffEditorViewZones };\nfunction computeRangeAlignment(originalEditor, modifiedEditor, diffs, originalEditorAlignmentViewZones, modifiedEditorAlignmentViewZones, innerHunkAlignment) {\n    const originalLineHeightOverrides = new ArrayQueue(getAdditionalLineHeights(originalEditor, originalEditorAlignmentViewZones));\n    const modifiedLineHeightOverrides = new ArrayQueue(getAdditionalLineHeights(modifiedEditor, modifiedEditorAlignmentViewZones));\n    const origLineHeight = originalEditor.getOption(67 /* EditorOption.lineHeight */);\n    const modLineHeight = modifiedEditor.getOption(67 /* EditorOption.lineHeight */);\n    const result = [];\n    let lastOriginalLineNumber = 0;\n    let lastModifiedLineNumber = 0;\n    function handleAlignmentsOutsideOfDiffs(untilOriginalLineNumberExclusive, untilModifiedLineNumberExclusive) {\n        while (true) {\n            let origNext = originalLineHeightOverrides.peek();\n            let modNext = modifiedLineHeightOverrides.peek();\n            if (origNext && origNext.lineNumber >= untilOriginalLineNumberExclusive) {\n                origNext = undefined;\n            }\n            if (modNext && modNext.lineNumber >= untilModifiedLineNumberExclusive) {\n                modNext = undefined;\n            }\n            if (!origNext && !modNext) {\n                break;\n            }\n            const distOrig = origNext ? origNext.lineNumber - lastOriginalLineNumber : Number.MAX_VALUE;\n            const distNext = modNext ? modNext.lineNumber - lastModifiedLineNumber : Number.MAX_VALUE;\n            if (distOrig < distNext) {\n                originalLineHeightOverrides.dequeue();\n                modNext = {\n                    lineNumber: origNext.lineNumber - lastOriginalLineNumber + lastModifiedLineNumber,\n                    heightInPx: 0,\n                };\n            }\n            else if (distOrig > distNext) {\n                modifiedLineHeightOverrides.dequeue();\n                origNext = {\n                    lineNumber: modNext.lineNumber - lastModifiedLineNumber + lastOriginalLineNumber,\n                    heightInPx: 0,\n                };\n            }\n            else {\n                originalLineHeightOverrides.dequeue();\n                modifiedLineHeightOverrides.dequeue();\n            }\n            result.push({\n                originalRange: LineRange.ofLength(origNext.lineNumber, 1),\n                modifiedRange: LineRange.ofLength(modNext.lineNumber, 1),\n                originalHeightInPx: origLineHeight + origNext.heightInPx,\n                modifiedHeightInPx: modLineHeight + modNext.heightInPx,\n                diff: undefined,\n            });\n        }\n    }\n    for (const m of diffs) {\n        const c = m.lineRangeMapping;\n        handleAlignmentsOutsideOfDiffs(c.original.startLineNumber, c.modified.startLineNumber);\n        let first = true;\n        let lastModLineNumber = c.modified.startLineNumber;\n        let lastOrigLineNumber = c.original.startLineNumber;\n        function emitAlignment(origLineNumberExclusive, modLineNumberExclusive) {\n            var _a, _b, _c, _d;\n            if (origLineNumberExclusive < lastOrigLineNumber || modLineNumberExclusive < lastModLineNumber) {\n                return;\n            }\n            if (first) {\n                first = false;\n            }\n            else if (origLineNumberExclusive === lastOrigLineNumber || modLineNumberExclusive === lastModLineNumber) {\n                return;\n            }\n            const originalRange = new LineRange(lastOrigLineNumber, origLineNumberExclusive);\n            const modifiedRange = new LineRange(lastModLineNumber, modLineNumberExclusive);\n            if (originalRange.isEmpty && modifiedRange.isEmpty) {\n                return;\n            }\n            const originalAdditionalHeight = (_b = (_a = originalLineHeightOverrides\n                .takeWhile(v => v.lineNumber < origLineNumberExclusive)) === null || _a === void 0 ? void 0 : _a.reduce((p, c) => p + c.heightInPx, 0)) !== null && _b !== void 0 ? _b : 0;\n            const modifiedAdditionalHeight = (_d = (_c = modifiedLineHeightOverrides\n                .takeWhile(v => v.lineNumber < modLineNumberExclusive)) === null || _c === void 0 ? void 0 : _c.reduce((p, c) => p + c.heightInPx, 0)) !== null && _d !== void 0 ? _d : 0;\n            result.push({\n                originalRange,\n                modifiedRange,\n                originalHeightInPx: originalRange.length * origLineHeight + originalAdditionalHeight,\n                modifiedHeightInPx: modifiedRange.length * modLineHeight + modifiedAdditionalHeight,\n                diff: m.lineRangeMapping,\n            });\n            lastOrigLineNumber = origLineNumberExclusive;\n            lastModLineNumber = modLineNumberExclusive;\n        }\n        if (innerHunkAlignment) {\n            for (const i of c.innerChanges || []) {\n                if (i.originalRange.startColumn > 1 && i.modifiedRange.startColumn > 1) {\n                    // There is some unmodified text on this line before the diff\n                    emitAlignment(i.originalRange.startLineNumber, i.modifiedRange.startLineNumber);\n                }\n                const originalModel = originalEditor.getModel();\n                // When the diff is invalid, the ranges might be out of bounds (this should be fixed in the diff model by applying edits directly).\n                const maxColumn = i.originalRange.endLineNumber <= originalModel.getLineCount() ? originalModel.getLineMaxColumn(i.originalRange.endLineNumber) : Number.MAX_SAFE_INTEGER;\n                if (i.originalRange.endColumn < maxColumn) {\n                    // // There is some unmodified text on this line after the diff\n                    emitAlignment(i.originalRange.endLineNumber, i.modifiedRange.endLineNumber);\n                }\n            }\n        }\n        emitAlignment(c.original.endLineNumberExclusive, c.modified.endLineNumberExclusive);\n        lastOriginalLineNumber = c.original.endLineNumberExclusive;\n        lastModifiedLineNumber = c.modified.endLineNumberExclusive;\n    }\n    handleAlignmentsOutsideOfDiffs(Number.MAX_VALUE, Number.MAX_VALUE);\n    return result;\n}\nfunction getAdditionalLineHeights(editor, viewZonesToIgnore) {\n    const viewZoneHeights = [];\n    const wrappingZoneHeights = [];\n    const hasWrapping = editor.getOption(145 /* EditorOption.wrappingInfo */).wrappingColumn !== -1;\n    const coordinatesConverter = editor._getViewModel().coordinatesConverter;\n    const editorLineHeight = editor.getOption(67 /* EditorOption.lineHeight */);\n    if (hasWrapping) {\n        for (let i = 1; i <= editor.getModel().getLineCount(); i++) {\n            const lineCount = coordinatesConverter.getModelLineViewLineCount(i);\n            if (lineCount > 1) {\n                wrappingZoneHeights.push({ lineNumber: i, heightInPx: editorLineHeight * (lineCount - 1) });\n            }\n        }\n    }\n    for (const w of editor.getWhitespaces()) {\n        if (viewZonesToIgnore.has(w.id)) {\n            continue;\n        }\n        const modelLineNumber = w.afterLineNumber === 0 ? 0 : coordinatesConverter.convertViewPositionToModelPosition(new Position(w.afterLineNumber, 1)).lineNumber;\n        viewZoneHeights.push({ lineNumber: modelLineNumber, heightInPx: w.height });\n    }\n    const result = joinCombine(viewZoneHeights, wrappingZoneHeights, v => v.lineNumber, (v1, v2) => ({ lineNumber: v1.lineNumber, heightInPx: v1.heightInPx + v2.heightInPx }));\n    return result;\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { Disposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, autorunWithStore, derived, observableSignal, observableSignalFromEvent, observableValue, transaction, waitForState } from '../../../../base/common/observable.js';\nimport { IDiffProviderFactoryService } from './diffProviderFactoryService.js';\nimport { filterWithPrevious, readHotReloadableExport } from './utils.js';\nimport { LineRange, LineRangeSet } from '../../../common/core/lineRange.js';\nimport { DefaultLinesDiffComputer } from '../../../common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js';\nimport { DetailedLineRangeMapping, LineRangeMapping, RangeMapping } from '../../../common/diff/rangeMapping.js';\nimport { TextEditInfo } from '../../../common/model/bracketPairsTextModelPart/bracketPairsTree/beforeEditPositionMapper.js';\nimport { combineTextEditInfos } from '../../../common/model/bracketPairsTextModelPart/bracketPairsTree/combineTextEditInfos.js';\nimport { optimizeSequenceDiffs } from '../../../common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { groupAdjacentBy } from '../../../../base/common/arrays.js';\nimport { softAssert } from '../../../../base/common/assert.js';\nlet DiffEditorViewModel = class DiffEditorViewModel extends Disposable {\n    setActiveMovedText(movedText) {\n        this._activeMovedText.set(movedText, undefined);\n    }\n    constructor(model, _options, _diffProviderFactoryService) {\n        super();\n        this.model = model;\n        this._options = _options;\n        this._diffProviderFactoryService = _diffProviderFactoryService;\n        this._isDiffUpToDate = observableValue(this, false);\n        this.isDiffUpToDate = this._isDiffUpToDate;\n        this._diff = observableValue(this, undefined);\n        this.diff = this._diff;\n        this._unchangedRegions = observableValue(this, undefined);\n        this.unchangedRegions = derived(this, r => {\n            var _a, _b;\n            if (this._options.hideUnchangedRegions.read(r)) {\n                return (_b = (_a = this._unchangedRegions.read(r)) === null || _a === void 0 ? void 0 : _a.regions) !== null && _b !== void 0 ? _b : [];\n            }\n            else {\n                // Reset state\n                transaction(tx => {\n                    var _a;\n                    for (const r of ((_a = this._unchangedRegions.get()) === null || _a === void 0 ? void 0 : _a.regions) || []) {\n                        r.collapseAll(tx);\n                    }\n                });\n                return [];\n            }\n        });\n        this.movedTextToCompare = observableValue(this, undefined);\n        this._activeMovedText = observableValue(this, undefined);\n        this._hoveredMovedText = observableValue(this, undefined);\n        this.activeMovedText = derived(this, r => { var _a, _b; return (_b = (_a = this.movedTextToCompare.read(r)) !== null && _a !== void 0 ? _a : this._hoveredMovedText.read(r)) !== null && _b !== void 0 ? _b : this._activeMovedText.read(r); });\n        this._cancellationTokenSource = new CancellationTokenSource();\n        this._diffProvider = derived(this, reader => {\n            const diffProvider = this._diffProviderFactoryService.createDiffProvider({\n                diffAlgorithm: this._options.diffAlgorithm.read(reader)\n            });\n            const onChangeSignal = observableSignalFromEvent('onDidChange', diffProvider.onDidChange);\n            return {\n                diffProvider,\n                onChangeSignal,\n            };\n        });\n        this._register(toDisposable(() => this._cancellationTokenSource.cancel()));\n        const contentChangedSignal = observableSignal('contentChangedSignal');\n        const debouncer = this._register(new RunOnceScheduler(() => contentChangedSignal.trigger(undefined), 200));\n        this._register(autorun(reader => {\n            /** @description collapse touching unchanged ranges */\n            const lastUnchangedRegions = this._unchangedRegions.read(reader);\n            if (!lastUnchangedRegions || lastUnchangedRegions.regions.some(r => r.isDragged.read(reader))) {\n                return;\n            }\n            const lastUnchangedRegionsOrigRanges = lastUnchangedRegions.originalDecorationIds\n                .map(id => model.original.getDecorationRange(id))\n                .map(r => r ? LineRange.fromRangeInclusive(r) : undefined);\n            const lastUnchangedRegionsModRanges = lastUnchangedRegions.modifiedDecorationIds\n                .map(id => model.modified.getDecorationRange(id))\n                .map(r => r ? LineRange.fromRangeInclusive(r) : undefined);\n            const updatedLastUnchangedRegions = lastUnchangedRegions.regions.map((r, idx) => (!lastUnchangedRegionsOrigRanges[idx] || !lastUnchangedRegionsModRanges[idx]) ? undefined :\n                new UnchangedRegion(lastUnchangedRegionsOrigRanges[idx].startLineNumber, lastUnchangedRegionsModRanges[idx].startLineNumber, lastUnchangedRegionsOrigRanges[idx].length, r.visibleLineCountTop.read(reader), r.visibleLineCountBottom.read(reader))).filter(isDefined);\n            const newRanges = [];\n            let didChange = false;\n            for (const touching of groupAdjacentBy(updatedLastUnchangedRegions, (a, b) => a.getHiddenModifiedRange(reader).endLineNumberExclusive === b.getHiddenModifiedRange(reader).startLineNumber)) {\n                if (touching.length > 1) {\n                    didChange = true;\n                    const sumLineCount = touching.reduce((sum, r) => sum + r.lineCount, 0);\n                    const r = new UnchangedRegion(touching[0].originalLineNumber, touching[0].modifiedLineNumber, sumLineCount, touching[0].visibleLineCountTop.get(), touching[touching.length - 1].visibleLineCountBottom.get());\n                    newRanges.push(r);\n                }\n                else {\n                    newRanges.push(touching[0]);\n                }\n            }\n            if (didChange) {\n                const originalDecorationIds = model.original.deltaDecorations(lastUnchangedRegions.originalDecorationIds, newRanges.map(r => ({ range: r.originalUnchangedRange.toInclusiveRange(), options: { description: 'unchanged' } })));\n                const modifiedDecorationIds = model.modified.deltaDecorations(lastUnchangedRegions.modifiedDecorationIds, newRanges.map(r => ({ range: r.modifiedUnchangedRange.toInclusiveRange(), options: { description: 'unchanged' } })));\n                transaction(tx => {\n                    this._unchangedRegions.set({\n                        regions: newRanges,\n                        originalDecorationIds,\n                        modifiedDecorationIds\n                    }, tx);\n                });\n            }\n        }));\n        const updateUnchangedRegions = (result, tx, reader) => {\n            const newUnchangedRegions = UnchangedRegion.fromDiffs(result.changes, model.original.getLineCount(), model.modified.getLineCount(), this._options.hideUnchangedRegionsMinimumLineCount.read(reader), this._options.hideUnchangedRegionsContextLineCount.read(reader));\n            // Transfer state from cur state\n            let visibleRegions = undefined;\n            const lastUnchangedRegions = this._unchangedRegions.get();\n            if (lastUnchangedRegions) {\n                const lastUnchangedRegionsOrigRanges = lastUnchangedRegions.originalDecorationIds\n                    .map(id => model.original.getDecorationRange(id))\n                    .map(r => r ? LineRange.fromRangeInclusive(r) : undefined);\n                const lastUnchangedRegionsModRanges = lastUnchangedRegions.modifiedDecorationIds\n                    .map(id => model.modified.getDecorationRange(id))\n                    .map(r => r ? LineRange.fromRangeInclusive(r) : undefined);\n                const updatedLastUnchangedRegions = filterWithPrevious(lastUnchangedRegions.regions\n                    .map((r, idx) => {\n                    if (!lastUnchangedRegionsOrigRanges[idx] || !lastUnchangedRegionsModRanges[idx]) {\n                        return undefined;\n                    }\n                    const length = lastUnchangedRegionsOrigRanges[idx].length;\n                    return new UnchangedRegion(lastUnchangedRegionsOrigRanges[idx].startLineNumber, lastUnchangedRegionsModRanges[idx].startLineNumber, length, \n                    // The visible area can shrink by edits -> we have to account for this\n                    Math.min(r.visibleLineCountTop.get(), length), Math.min(r.visibleLineCountBottom.get(), length - r.visibleLineCountTop.get()));\n                }).filter(isDefined), (cur, prev) => !prev || (cur.modifiedLineNumber >= prev.modifiedLineNumber + prev.lineCount && cur.originalLineNumber >= prev.originalLineNumber + prev.lineCount));\n                let hiddenRegions = updatedLastUnchangedRegions.map(r => new LineRangeMapping(r.getHiddenOriginalRange(reader), r.getHiddenModifiedRange(reader)));\n                hiddenRegions = LineRangeMapping.clip(hiddenRegions, LineRange.ofLength(1, model.original.getLineCount()), LineRange.ofLength(1, model.modified.getLineCount()));\n                visibleRegions = LineRangeMapping.inverse(hiddenRegions, model.original.getLineCount(), model.modified.getLineCount());\n            }\n            const newUnchangedRegions2 = [];\n            if (visibleRegions) {\n                for (const r of newUnchangedRegions) {\n                    const intersecting = visibleRegions.filter(f => f.original.intersectsStrict(r.originalUnchangedRange) && f.modified.intersectsStrict(r.modifiedUnchangedRange));\n                    newUnchangedRegions2.push(...r.setVisibleRanges(intersecting, tx));\n                }\n            }\n            else {\n                newUnchangedRegions2.push(...newUnchangedRegions);\n            }\n            const originalDecorationIds = model.original.deltaDecorations((lastUnchangedRegions === null || lastUnchangedRegions === void 0 ? void 0 : lastUnchangedRegions.originalDecorationIds) || [], newUnchangedRegions2.map(r => ({ range: r.originalUnchangedRange.toInclusiveRange(), options: { description: 'unchanged' } })));\n            const modifiedDecorationIds = model.modified.deltaDecorations((lastUnchangedRegions === null || lastUnchangedRegions === void 0 ? void 0 : lastUnchangedRegions.modifiedDecorationIds) || [], newUnchangedRegions2.map(r => ({ range: r.modifiedUnchangedRange.toInclusiveRange(), options: { description: 'unchanged' } })));\n            this._unchangedRegions.set({\n                regions: newUnchangedRegions2,\n                originalDecorationIds,\n                modifiedDecorationIds\n            }, tx);\n        };\n        this._register(model.modified.onDidChangeContent((e) => {\n            const diff = this._diff.get();\n            if (diff) {\n                const textEdits = TextEditInfo.fromModelContentChanges(e.changes);\n                const result = applyModifiedEdits(this._lastDiff, textEdits, model.original, model.modified);\n                if (result) {\n                    this._lastDiff = result;\n                    transaction(tx => {\n                        this._diff.set(DiffState.fromDiffResult(this._lastDiff), tx);\n                        updateUnchangedRegions(result, tx);\n                        const currentSyncedMovedText = this.movedTextToCompare.get();\n                        this.movedTextToCompare.set(currentSyncedMovedText ? this._lastDiff.moves.find(m => m.lineRangeMapping.modified.intersect(currentSyncedMovedText.lineRangeMapping.modified)) : undefined, tx);\n                    });\n                }\n            }\n            this._isDiffUpToDate.set(false, undefined);\n            debouncer.schedule();\n        }));\n        this._register(model.original.onDidChangeContent((e) => {\n            const diff = this._diff.get();\n            if (diff) {\n                const textEdits = TextEditInfo.fromModelContentChanges(e.changes);\n                const result = applyOriginalEdits(this._lastDiff, textEdits, model.original, model.modified);\n                if (result) {\n                    this._lastDiff = result;\n                    transaction(tx => {\n                        this._diff.set(DiffState.fromDiffResult(this._lastDiff), tx);\n                        updateUnchangedRegions(result, tx);\n                        const currentSyncedMovedText = this.movedTextToCompare.get();\n                        this.movedTextToCompare.set(currentSyncedMovedText ? this._lastDiff.moves.find(m => m.lineRangeMapping.modified.intersect(currentSyncedMovedText.lineRangeMapping.modified)) : undefined, tx);\n                    });\n                }\n            }\n            this._isDiffUpToDate.set(false, undefined);\n            debouncer.schedule();\n        }));\n        this._register(autorunWithStore(async (reader, store) => {\n            /** @description compute diff */\n            var _a, _b;\n            // So that they get recomputed when these settings change\n            this._options.hideUnchangedRegionsMinimumLineCount.read(reader);\n            this._options.hideUnchangedRegionsContextLineCount.read(reader);\n            debouncer.cancel();\n            contentChangedSignal.read(reader);\n            const documentDiffProvider = this._diffProvider.read(reader);\n            documentDiffProvider.onChangeSignal.read(reader);\n            readHotReloadableExport(DefaultLinesDiffComputer, reader);\n            readHotReloadableExport(optimizeSequenceDiffs, reader);\n            this._isDiffUpToDate.set(false, undefined);\n            let originalTextEditInfos = [];\n            store.add(model.original.onDidChangeContent((e) => {\n                const edits = TextEditInfo.fromModelContentChanges(e.changes);\n                originalTextEditInfos = combineTextEditInfos(originalTextEditInfos, edits);\n            }));\n            let modifiedTextEditInfos = [];\n            store.add(model.modified.onDidChangeContent((e) => {\n                const edits = TextEditInfo.fromModelContentChanges(e.changes);\n                modifiedTextEditInfos = combineTextEditInfos(modifiedTextEditInfos, edits);\n            }));\n            let result = await documentDiffProvider.diffProvider.computeDiff(model.original, model.modified, {\n                ignoreTrimWhitespace: this._options.ignoreTrimWhitespace.read(reader),\n                maxComputationTimeMs: this._options.maxComputationTimeMs.read(reader),\n                computeMoves: this._options.showMoves.read(reader),\n            }, this._cancellationTokenSource.token);\n            if (this._cancellationTokenSource.token.isCancellationRequested) {\n                return;\n            }\n            result = normalizeDocumentDiff(result, model.original, model.modified);\n            result = (_a = applyOriginalEdits(result, originalTextEditInfos, model.original, model.modified)) !== null && _a !== void 0 ? _a : result;\n            result = (_b = applyModifiedEdits(result, modifiedTextEditInfos, model.original, model.modified)) !== null && _b !== void 0 ? _b : result;\n            transaction(tx => {\n                /** @description write diff result */\n                updateUnchangedRegions(result, tx);\n                this._lastDiff = result;\n                const state = DiffState.fromDiffResult(result);\n                this._diff.set(state, tx);\n                this._isDiffUpToDate.set(true, tx);\n                const currentSyncedMovedText = this.movedTextToCompare.get();\n                this.movedTextToCompare.set(currentSyncedMovedText ? this._lastDiff.moves.find(m => m.lineRangeMapping.modified.intersect(currentSyncedMovedText.lineRangeMapping.modified)) : undefined, tx);\n            });\n        }));\n    }\n    ensureModifiedLineIsVisible(lineNumber, preference, tx) {\n        var _a, _b;\n        if (((_a = this.diff.get()) === null || _a === void 0 ? void 0 : _a.mappings.length) === 0) {\n            return;\n        }\n        const unchangedRegions = ((_b = this._unchangedRegions.get()) === null || _b === void 0 ? void 0 : _b.regions) || [];\n        for (const r of unchangedRegions) {\n            if (r.getHiddenModifiedRange(undefined).contains(lineNumber)) {\n                r.showModifiedLine(lineNumber, preference, tx);\n                return;\n            }\n        }\n    }\n    ensureOriginalLineIsVisible(lineNumber, preference, tx) {\n        var _a, _b;\n        if (((_a = this.diff.get()) === null || _a === void 0 ? void 0 : _a.mappings.length) === 0) {\n            return;\n        }\n        const unchangedRegions = ((_b = this._unchangedRegions.get()) === null || _b === void 0 ? void 0 : _b.regions) || [];\n        for (const r of unchangedRegions) {\n            if (r.getHiddenOriginalRange(undefined).contains(lineNumber)) {\n                r.showOriginalLine(lineNumber, preference, tx);\n                return;\n            }\n        }\n    }\n    async waitForDiff() {\n        await waitForState(this.isDiffUpToDate, s => s);\n    }\n    serializeState() {\n        const regions = this._unchangedRegions.get();\n        return {\n            collapsedRegions: regions === null || regions === void 0 ? void 0 : regions.regions.map(r => ({ range: r.getHiddenModifiedRange(undefined).serialize() }))\n        };\n    }\n    restoreSerializedState(state) {\n        var _a;\n        const ranges = (_a = state.collapsedRegions) === null || _a === void 0 ? void 0 : _a.map(r => LineRange.deserialize(r.range));\n        const regions = this._unchangedRegions.get();\n        if (!regions || !ranges) {\n            return;\n        }\n        transaction(tx => {\n            for (const r of regions.regions) {\n                for (const range of ranges) {\n                    if (r.modifiedUnchangedRange.intersect(range)) {\n                        r.setHiddenModifiedRange(range, tx);\n                        break;\n                    }\n                }\n            }\n        });\n    }\n};\nDiffEditorViewModel = __decorate([\n    __param(2, IDiffProviderFactoryService)\n], DiffEditorViewModel);\nexport { DiffEditorViewModel };\nfunction normalizeDocumentDiff(diff, original, modified) {\n    return {\n        changes: diff.changes.map(c => new DetailedLineRangeMapping(c.original, c.modified, c.innerChanges ? c.innerChanges.map(i => normalizeRangeMapping(i, original, modified)) : undefined)),\n        moves: diff.moves,\n        identical: diff.identical,\n        quitEarly: diff.quitEarly,\n    };\n}\nfunction normalizeRangeMapping(rangeMapping, original, modified) {\n    let originalRange = rangeMapping.originalRange;\n    let modifiedRange = rangeMapping.modifiedRange;\n    if ((originalRange.endColumn !== 1 || modifiedRange.endColumn !== 1) &&\n        originalRange.endColumn === original.getLineMaxColumn(originalRange.endLineNumber)\n        && modifiedRange.endColumn === modified.getLineMaxColumn(modifiedRange.endLineNumber)\n        && originalRange.endLineNumber < original.getLineCount()\n        && modifiedRange.endLineNumber < modified.getLineCount()) {\n        originalRange = originalRange.setEndPosition(originalRange.endLineNumber + 1, 1);\n        modifiedRange = modifiedRange.setEndPosition(modifiedRange.endLineNumber + 1, 1);\n    }\n    return new RangeMapping(originalRange, modifiedRange);\n}\nexport class DiffState {\n    static fromDiffResult(result) {\n        return new DiffState(result.changes.map(c => new DiffMapping(c)), result.moves || [], result.identical, result.quitEarly);\n    }\n    constructor(mappings, movedTexts, identical, quitEarly) {\n        this.mappings = mappings;\n        this.movedTexts = movedTexts;\n        this.identical = identical;\n        this.quitEarly = quitEarly;\n    }\n}\nexport class DiffMapping {\n    constructor(lineRangeMapping) {\n        this.lineRangeMapping = lineRangeMapping;\n        /*\n        readonly movedTo: MovedText | undefined,\n        readonly movedFrom: MovedText | undefined,\n\n        if (movedTo) {\n            assertFn(() =>\n                movedTo.lineRangeMapping.modifiedRange.equals(lineRangeMapping.modifiedRange)\n                && lineRangeMapping.originalRange.isEmpty\n                && !movedFrom\n            );\n        } else if (movedFrom) {\n            assertFn(() =>\n                movedFrom.lineRangeMapping.originalRange.equals(lineRangeMapping.originalRange)\n                && lineRangeMapping.modifiedRange.isEmpty\n                && !movedTo\n            );\n        }\n        */\n    }\n}\nexport class UnchangedRegion {\n    static fromDiffs(changes, originalLineCount, modifiedLineCount, minHiddenLineCount, minContext) {\n        const inversedMappings = DetailedLineRangeMapping.inverse(changes, originalLineCount, modifiedLineCount);\n        const result = [];\n        for (const mapping of inversedMappings) {\n            let origStart = mapping.original.startLineNumber;\n            let modStart = mapping.modified.startLineNumber;\n            let length = mapping.original.length;\n            const atStart = origStart === 1 && modStart === 1;\n            const atEnd = origStart + length === originalLineCount + 1 && modStart + length === modifiedLineCount + 1;\n            if ((atStart || atEnd) && length >= minContext + minHiddenLineCount) {\n                if (atStart && !atEnd) {\n                    length -= minContext;\n                }\n                if (atEnd && !atStart) {\n                    origStart += minContext;\n                    modStart += minContext;\n                    length -= minContext;\n                }\n                result.push(new UnchangedRegion(origStart, modStart, length, 0, 0));\n            }\n            else if (length >= minContext * 2 + minHiddenLineCount) {\n                origStart += minContext;\n                modStart += minContext;\n                length -= minContext * 2;\n                result.push(new UnchangedRegion(origStart, modStart, length, 0, 0));\n            }\n        }\n        return result;\n    }\n    get originalUnchangedRange() {\n        return LineRange.ofLength(this.originalLineNumber, this.lineCount);\n    }\n    get modifiedUnchangedRange() {\n        return LineRange.ofLength(this.modifiedLineNumber, this.lineCount);\n    }\n    constructor(originalLineNumber, modifiedLineNumber, lineCount, visibleLineCountTop, visibleLineCountBottom) {\n        this.originalLineNumber = originalLineNumber;\n        this.modifiedLineNumber = modifiedLineNumber;\n        this.lineCount = lineCount;\n        this._visibleLineCountTop = observableValue(this, 0);\n        this.visibleLineCountTop = this._visibleLineCountTop;\n        this._visibleLineCountBottom = observableValue(this, 0);\n        this.visibleLineCountBottom = this._visibleLineCountBottom;\n        this._shouldHideControls = derived(this, reader => /** @description isVisible */ this.visibleLineCountTop.read(reader) + this.visibleLineCountBottom.read(reader) === this.lineCount && !this.isDragged.read(reader));\n        this.isDragged = observableValue(this, undefined);\n        const visibleLineCountTop2 = Math.max(Math.min(visibleLineCountTop, this.lineCount), 0);\n        const visibleLineCountBottom2 = Math.max(Math.min(visibleLineCountBottom, this.lineCount - visibleLineCountTop), 0);\n        softAssert(visibleLineCountTop === visibleLineCountTop2);\n        softAssert(visibleLineCountBottom === visibleLineCountBottom2);\n        this._visibleLineCountTop.set(visibleLineCountTop2, undefined);\n        this._visibleLineCountBottom.set(visibleLineCountBottom2, undefined);\n    }\n    setVisibleRanges(visibleRanges, tx) {\n        const result = [];\n        const hiddenModified = new LineRangeSet(visibleRanges.map(r => r.modified)).subtractFrom(this.modifiedUnchangedRange);\n        let originalStartLineNumber = this.originalLineNumber;\n        let modifiedStartLineNumber = this.modifiedLineNumber;\n        const modifiedEndLineNumberEx = this.modifiedLineNumber + this.lineCount;\n        if (hiddenModified.ranges.length === 0) {\n            this.showAll(tx);\n            result.push(this);\n        }\n        else {\n            let i = 0;\n            for (const r of hiddenModified.ranges) {\n                const isLast = i === hiddenModified.ranges.length - 1;\n                i++;\n                const length = (isLast ? modifiedEndLineNumberEx : r.endLineNumberExclusive) - modifiedStartLineNumber;\n                const newR = new UnchangedRegion(originalStartLineNumber, modifiedStartLineNumber, length, 0, 0);\n                newR.setHiddenModifiedRange(r, tx);\n                result.push(newR);\n                originalStartLineNumber = newR.originalUnchangedRange.endLineNumberExclusive;\n                modifiedStartLineNumber = newR.modifiedUnchangedRange.endLineNumberExclusive;\n            }\n        }\n        return result;\n    }\n    shouldHideControls(reader) {\n        return this._shouldHideControls.read(reader);\n    }\n    getHiddenOriginalRange(reader) {\n        return LineRange.ofLength(this.originalLineNumber + this._visibleLineCountTop.read(reader), this.lineCount - this._visibleLineCountTop.read(reader) - this._visibleLineCountBottom.read(reader));\n    }\n    getHiddenModifiedRange(reader) {\n        return LineRange.ofLength(this.modifiedLineNumber + this._visibleLineCountTop.read(reader), this.lineCount - this._visibleLineCountTop.read(reader) - this._visibleLineCountBottom.read(reader));\n    }\n    setHiddenModifiedRange(range, tx) {\n        const visibleLineCountTop = range.startLineNumber - this.modifiedLineNumber;\n        const visibleLineCountBottom = (this.modifiedLineNumber + this.lineCount) - range.endLineNumberExclusive;\n        this.setState(visibleLineCountTop, visibleLineCountBottom, tx);\n    }\n    getMaxVisibleLineCountTop() {\n        return this.lineCount - this._visibleLineCountBottom.get();\n    }\n    getMaxVisibleLineCountBottom() {\n        return this.lineCount - this._visibleLineCountTop.get();\n    }\n    showMoreAbove(count = 10, tx) {\n        const maxVisibleLineCountTop = this.getMaxVisibleLineCountTop();\n        this._visibleLineCountTop.set(Math.min(this._visibleLineCountTop.get() + count, maxVisibleLineCountTop), tx);\n    }\n    showMoreBelow(count = 10, tx) {\n        const maxVisibleLineCountBottom = this.lineCount - this._visibleLineCountTop.get();\n        this._visibleLineCountBottom.set(Math.min(this._visibleLineCountBottom.get() + count, maxVisibleLineCountBottom), tx);\n    }\n    showAll(tx) {\n        this._visibleLineCountBottom.set(this.lineCount - this._visibleLineCountTop.get(), tx);\n    }\n    showModifiedLine(lineNumber, preference, tx) {\n        const top = lineNumber + 1 - (this.modifiedLineNumber + this._visibleLineCountTop.get());\n        const bottom = (this.modifiedLineNumber - this._visibleLineCountBottom.get() + this.lineCount) - lineNumber;\n        if (preference === 0 /* RevealPreference.FromCloserSide */ && top < bottom || preference === 1 /* RevealPreference.FromTop */) {\n            this._visibleLineCountTop.set(this._visibleLineCountTop.get() + top, tx);\n        }\n        else {\n            this._visibleLineCountBottom.set(this._visibleLineCountBottom.get() + bottom, tx);\n        }\n    }\n    showOriginalLine(lineNumber, preference, tx) {\n        const top = lineNumber - this.originalLineNumber;\n        const bottom = (this.originalLineNumber + this.lineCount) - lineNumber;\n        if (preference === 0 /* RevealPreference.FromCloserSide */ && top < bottom || preference === 1 /* RevealPreference.FromTop */) {\n            this._visibleLineCountTop.set(Math.min(this._visibleLineCountTop.get() + bottom - top, this.getMaxVisibleLineCountTop()), tx);\n        }\n        else {\n            this._visibleLineCountBottom.set(Math.min(this._visibleLineCountBottom.get() + top - bottom, this.getMaxVisibleLineCountBottom()), tx);\n        }\n    }\n    collapseAll(tx) {\n        this._visibleLineCountTop.set(0, tx);\n        this._visibleLineCountBottom.set(0, tx);\n    }\n    setState(visibleLineCountTop, visibleLineCountBottom, tx) {\n        visibleLineCountTop = Math.max(Math.min(visibleLineCountTop, this.lineCount), 0);\n        visibleLineCountBottom = Math.max(Math.min(visibleLineCountBottom, this.lineCount - visibleLineCountTop), 0);\n        this._visibleLineCountTop.set(visibleLineCountTop, tx);\n        this._visibleLineCountBottom.set(visibleLineCountBottom, tx);\n    }\n}\nfunction applyOriginalEdits(diff, textEdits, originalTextModel, modifiedTextModel) {\n    return undefined;\n    /*\n    TODO@hediet\n    if (textEdits.length === 0) {\n        return diff;\n    }\n\n    const diff2 = flip(diff);\n    const diff3 = applyModifiedEdits(diff2, textEdits, modifiedTextModel, originalTextModel);\n    if (!diff3) {\n        return undefined;\n    }\n    return flip(diff3);*/\n}\n/*\nfunction flip(diff: IDocumentDiff): IDocumentDiff {\n    return {\n        changes: diff.changes.map(c => c.flip()),\n        moves: diff.moves.map(m => m.flip()),\n        identical: diff.identical,\n        quitEarly: diff.quitEarly,\n    };\n}\n*/\nfunction applyModifiedEdits(diff, textEdits, originalTextModel, modifiedTextModel) {\n    return undefined;\n    /*\n    TODO@hediet\n    if (textEdits.length === 0) {\n        return diff;\n    }\n    if (diff.changes.some(c => !c.innerChanges) || diff.moves.length > 0) {\n        // TODO support these cases\n        return undefined;\n    }\n\n    const changes = applyModifiedEditsToLineRangeMappings(diff.changes, textEdits, originalTextModel, modifiedTextModel);\n\n    const moves = diff.moves.map(m => {\n        const newModifiedRange = applyEditToLineRange(m.lineRangeMapping.modified, textEdits);\n        return newModifiedRange ? new MovedText(\n            new SimpleLineRangeMapping(m.lineRangeMapping.original, newModifiedRange),\n            applyModifiedEditsToLineRangeMappings(m.changes, textEdits, originalTextModel, modifiedTextModel),\n        ) : undefined;\n    }).filter(isDefined);\n\n    return {\n        identical: false,\n        quitEarly: false,\n        changes,\n        moves,\n    };*/\n}\n/*\nfunction applyEditToLineRange(range: LineRange, textEdits: TextEditInfo[]): LineRange | undefined {\n    let rangeStartLineNumber = range.startLineNumber;\n    let rangeEndLineNumberEx = range.endLineNumberExclusive;\n\n    for (let i = textEdits.length - 1; i >= 0; i--) {\n        const textEdit = textEdits[i];\n        const textEditStartLineNumber = lengthGetLineCount(textEdit.startOffset) + 1;\n        const textEditEndLineNumber = lengthGetLineCount(textEdit.endOffset) + 1;\n        const newLengthLineCount = lengthGetLineCount(textEdit.newLength);\n        const delta = newLengthLineCount - (textEditEndLineNumber - textEditStartLineNumber);\n\n        if (textEditEndLineNumber < rangeStartLineNumber) {\n            // the text edit is before us\n            rangeStartLineNumber += delta;\n            rangeEndLineNumberEx += delta;\n        } else if (textEditStartLineNumber > rangeEndLineNumberEx) {\n            // the text edit is after us\n            // NOOP\n        } else if (textEditStartLineNumber < rangeStartLineNumber && rangeEndLineNumberEx < textEditEndLineNumber) {\n            // the range is fully contained in the text edit\n            return undefined;\n        } else if (textEditStartLineNumber < rangeStartLineNumber && textEditEndLineNumber <= rangeEndLineNumberEx) {\n            // the text edit ends inside our range\n            rangeStartLineNumber = textEditEndLineNumber + 1;\n            rangeStartLineNumber += delta;\n            rangeEndLineNumberEx += delta;\n        } else if (rangeStartLineNumber <= textEditStartLineNumber && textEditEndLineNumber < rangeStartLineNumber) {\n            // the text edit starts inside our range\n            rangeEndLineNumberEx = textEditStartLineNumber;\n        } else {\n            rangeEndLineNumberEx += delta;\n        }\n    }\n\n    return new LineRange(rangeStartLineNumber, rangeEndLineNumberEx);\n}\n\nfunction applyModifiedEditsToLineRangeMappings(changes: readonly LineRangeMapping[], textEdits: TextEditInfo[], originalTextModel: ITextModel, modifiedTextModel: ITextModel): LineRangeMapping[] {\n    const diffTextEdits = changes.flatMap(c => c.innerChanges!.map(c => new TextEditInfo(\n        positionToLength(c.originalRange.getStartPosition()),\n        positionToLength(c.originalRange.getEndPosition()),\n        lengthOfRange(c.modifiedRange).toLength(),\n    )));\n\n    const combined = combineTextEditInfos(diffTextEdits, textEdits);\n\n    let lastOriginalEndOffset = lengthZero;\n    let lastModifiedEndOffset = lengthZero;\n    const rangeMappings = combined.map(c => {\n        const modifiedStartOffset = lengthAdd(lastModifiedEndOffset, lengthDiffNonNegative(lastOriginalEndOffset, c.startOffset));\n        lastOriginalEndOffset = c.endOffset;\n        lastModifiedEndOffset = lengthAdd(modifiedStartOffset, c.newLength);\n\n        return new RangeMapping(\n            Range.fromPositions(lengthToPosition(c.startOffset), lengthToPosition(c.endOffset)),\n            Range.fromPositions(lengthToPosition(modifiedStartOffset), lengthToPosition(lastModifiedEndOffset)),\n        );\n    });\n\n    const newChanges = lineRangeMappingFromRangeMappings(\n        rangeMappings,\n        originalTextModel.getLinesContent(),\n        modifiedTextModel.getLinesContent(),\n    );\n    return newChanges;\n}\n*/\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar WorkerBasedDocumentDiffProvider_1;\nimport { registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { IInstantiationService, createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { LineRange } from '../../../common/core/lineRange.js';\nimport { DetailedLineRangeMapping, RangeMapping } from '../../../common/diff/rangeMapping.js';\nimport { IEditorWorkerService } from '../../../common/services/editorWorker.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nexport const IDiffProviderFactoryService = createDecorator('diffProviderFactoryService');\nlet WorkerBasedDiffProviderFactoryService = class WorkerBasedDiffProviderFactoryService {\n    constructor(instantiationService) {\n        this.instantiationService = instantiationService;\n    }\n    createDiffProvider(options) {\n        return this.instantiationService.createInstance(WorkerBasedDocumentDiffProvider, options);\n    }\n};\nWorkerBasedDiffProviderFactoryService = __decorate([\n    __param(0, IInstantiationService)\n], WorkerBasedDiffProviderFactoryService);\nexport { WorkerBasedDiffProviderFactoryService };\nregisterSingleton(IDiffProviderFactoryService, WorkerBasedDiffProviderFactoryService, 1 /* InstantiationType.Delayed */);\nlet WorkerBasedDocumentDiffProvider = WorkerBasedDocumentDiffProvider_1 = class WorkerBasedDocumentDiffProvider {\n    constructor(options, editorWorkerService, telemetryService) {\n        this.editorWorkerService = editorWorkerService;\n        this.telemetryService = telemetryService;\n        this.onDidChangeEventEmitter = new Emitter();\n        this.onDidChange = this.onDidChangeEventEmitter.event;\n        this.diffAlgorithm = 'advanced';\n        this.diffAlgorithmOnDidChangeSubscription = undefined;\n        this.setOptions(options);\n    }\n    dispose() {\n        var _a;\n        (_a = this.diffAlgorithmOnDidChangeSubscription) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n    async computeDiff(original, modified, options, cancellationToken) {\n        var _a, _b;\n        if (typeof this.diffAlgorithm !== 'string') {\n            return this.diffAlgorithm.computeDiff(original, modified, options, cancellationToken);\n        }\n        // This significantly speeds up the case when the original file is empty\n        if (original.getLineCount() === 1 && original.getLineMaxColumn(1) === 1) {\n            if (modified.getLineCount() === 1 && modified.getLineMaxColumn(1) === 1) {\n                return {\n                    changes: [],\n                    identical: true,\n                    quitEarly: false,\n                    moves: [],\n                };\n            }\n            return {\n                changes: [\n                    new DetailedLineRangeMapping(new LineRange(1, 2), new LineRange(1, modified.getLineCount() + 1), [\n                        new RangeMapping(original.getFullModelRange(), modified.getFullModelRange())\n                    ])\n                ],\n                identical: false,\n                quitEarly: false,\n                moves: [],\n            };\n        }\n        const uriKey = JSON.stringify([original.uri.toString(), modified.uri.toString()]);\n        const context = JSON.stringify([original.id, modified.id, original.getAlternativeVersionId(), modified.getAlternativeVersionId(), JSON.stringify(options)]);\n        const c = WorkerBasedDocumentDiffProvider_1.diffCache.get(uriKey);\n        if (c && c.context === context) {\n            return c.result;\n        }\n        const sw = StopWatch.create();\n        const result = await this.editorWorkerService.computeDiff(original.uri, modified.uri, options, this.diffAlgorithm);\n        const timeMs = sw.elapsed();\n        this.telemetryService.publicLog2('diffEditor.computeDiff', {\n            timeMs,\n            timedOut: (_a = result === null || result === void 0 ? void 0 : result.quitEarly) !== null && _a !== void 0 ? _a : true,\n            detectedMoves: options.computeMoves ? ((_b = result === null || result === void 0 ? void 0 : result.moves.length) !== null && _b !== void 0 ? _b : 0) : -1,\n        });\n        if (cancellationToken.isCancellationRequested) {\n            // Text models might be disposed!\n            return {\n                changes: [],\n                identical: false,\n                quitEarly: true,\n                moves: [],\n            };\n        }\n        if (!result) {\n            throw new Error('no diff result available');\n        }\n        // max 10 items in cache\n        if (WorkerBasedDocumentDiffProvider_1.diffCache.size > 10) {\n            WorkerBasedDocumentDiffProvider_1.diffCache.delete(WorkerBasedDocumentDiffProvider_1.diffCache.keys().next().value);\n        }\n        WorkerBasedDocumentDiffProvider_1.diffCache.set(uriKey, { result, context });\n        return result;\n    }\n    setOptions(newOptions) {\n        var _a;\n        let didChange = false;\n        if (newOptions.diffAlgorithm) {\n            if (this.diffAlgorithm !== newOptions.diffAlgorithm) {\n                (_a = this.diffAlgorithmOnDidChangeSubscription) === null || _a === void 0 ? void 0 : _a.dispose();\n                this.diffAlgorithmOnDidChangeSubscription = undefined;\n                this.diffAlgorithm = newOptions.diffAlgorithm;\n                if (typeof newOptions.diffAlgorithm !== 'string') {\n                    this.diffAlgorithmOnDidChangeSubscription = newOptions.diffAlgorithm.onDidChange(() => this.onDidChangeEventEmitter.fire());\n                }\n                didChange = true;\n            }\n        }\n        if (didChange) {\n            this.onDidChangeEventEmitter.fire();\n        }\n    }\n};\nWorkerBasedDocumentDiffProvider.diffCache = new Map();\nWorkerBasedDocumentDiffProvider = WorkerBasedDocumentDiffProvider_1 = __decorate([\n    __param(1, IEditorWorkerService),\n    __param(2, ITelemetryService)\n], WorkerBasedDocumentDiffProvider);\nexport { WorkerBasedDocumentDiffProvider };\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { addStandardDisposableListener, getDomNodePagePosition } from '../../../../../../base/browser/dom.js';\nimport { Action } from '../../../../../../base/common/actions.js';\nimport { Codicon } from '../../../../../../base/common/codicons.js';\nimport { Disposable } from '../../../../../../base/common/lifecycle.js';\nimport { isIOS } from '../../../../../../base/common/platform.js';\nimport { ThemeIcon } from '../../../../../../base/common/themables.js';\nimport { localize } from '../../../../../../nls.js';\nexport class InlineDiffDeletedCodeMargin extends Disposable {\n    get visibility() {\n        return this._visibility;\n    }\n    set visibility(_visibility) {\n        if (this._visibility !== _visibility) {\n            this._visibility = _visibility;\n            this._diffActions.style.visibility = _visibility ? 'visible' : 'hidden';\n        }\n    }\n    constructor(_getViewZoneId, _marginDomNode, _modifiedEditor, _diff, _editor, _viewLineCounts, _originalTextModel, _contextMenuService, _clipboardService) {\n        super();\n        this._getViewZoneId = _getViewZoneId;\n        this._marginDomNode = _marginDomNode;\n        this._modifiedEditor = _modifiedEditor;\n        this._diff = _diff;\n        this._editor = _editor;\n        this._viewLineCounts = _viewLineCounts;\n        this._originalTextModel = _originalTextModel;\n        this._contextMenuService = _contextMenuService;\n        this._clipboardService = _clipboardService;\n        this._visibility = false;\n        // make sure the diff margin shows above overlay.\n        this._marginDomNode.style.zIndex = '10';\n        this._diffActions = document.createElement('div');\n        this._diffActions.className = ThemeIcon.asClassName(Codicon.lightBulb) + ' lightbulb-glyph';\n        this._diffActions.style.position = 'absolute';\n        const lineHeight = this._modifiedEditor.getOption(67 /* EditorOption.lineHeight */);\n        this._diffActions.style.right = '0px';\n        this._diffActions.style.visibility = 'hidden';\n        this._diffActions.style.height = `${lineHeight}px`;\n        this._diffActions.style.lineHeight = `${lineHeight}px`;\n        this._marginDomNode.appendChild(this._diffActions);\n        let currentLineNumberOffset = 0;\n        const useShadowDOM = _modifiedEditor.getOption(127 /* EditorOption.useShadowDOM */) && !isIOS; // Do not use shadow dom on IOS #122035\n        const showContextMenu = (x, y) => {\n            var _a;\n            this._contextMenuService.showContextMenu({\n                domForShadowRoot: useShadowDOM ? (_a = _modifiedEditor.getDomNode()) !== null && _a !== void 0 ? _a : undefined : undefined,\n                getAnchor: () => ({ x, y }),\n                getActions: () => {\n                    const actions = [];\n                    const isDeletion = _diff.modified.isEmpty;\n                    // default action\n                    actions.push(new Action('diff.clipboard.copyDeletedContent', isDeletion\n                        ? (_diff.original.length > 1\n                            ? localize('diff.clipboard.copyDeletedLinesContent.label', \"Copy deleted lines\")\n                            : localize('diff.clipboard.copyDeletedLinesContent.single.label', \"Copy deleted line\"))\n                        : (_diff.original.length > 1\n                            ? localize('diff.clipboard.copyChangedLinesContent.label', \"Copy changed lines\")\n                            : localize('diff.clipboard.copyChangedLinesContent.single.label', \"Copy changed line\")), undefined, true, async () => {\n                        const originalText = this._originalTextModel.getValueInRange(_diff.original.toExclusiveRange());\n                        await this._clipboardService.writeText(originalText);\n                    }));\n                    if (_diff.original.length > 1) {\n                        actions.push(new Action('diff.clipboard.copyDeletedLineContent', isDeletion\n                            ? localize('diff.clipboard.copyDeletedLineContent.label', \"Copy deleted line ({0})\", _diff.original.startLineNumber + currentLineNumberOffset)\n                            : localize('diff.clipboard.copyChangedLineContent.label', \"Copy changed line ({0})\", _diff.original.startLineNumber + currentLineNumberOffset), undefined, true, async () => {\n                            let lineContent = this._originalTextModel.getLineContent(_diff.original.startLineNumber + currentLineNumberOffset);\n                            if (lineContent === '') {\n                                // empty line -> new line\n                                const eof = this._originalTextModel.getEndOfLineSequence();\n                                lineContent = eof === 0 /* EndOfLineSequence.LF */ ? '\\n' : '\\r\\n';\n                            }\n                            await this._clipboardService.writeText(lineContent);\n                        }));\n                    }\n                    const readOnly = _modifiedEditor.getOption(91 /* EditorOption.readOnly */);\n                    if (!readOnly) {\n                        actions.push(new Action('diff.inline.revertChange', localize('diff.inline.revertChange.label', \"Revert this change\"), undefined, true, async () => {\n                            this._editor.revert(this._diff);\n                        }));\n                    }\n                    return actions;\n                },\n                autoSelectFirstItem: true\n            });\n        };\n        this._register(addStandardDisposableListener(this._diffActions, 'mousedown', e => {\n            if (!e.leftButton) {\n                return;\n            }\n            const { top, height } = getDomNodePagePosition(this._diffActions);\n            const pad = Math.floor(lineHeight / 3);\n            e.preventDefault();\n            showContextMenu(e.posx, top + height + pad);\n        }));\n        this._register(_modifiedEditor.onMouseMove((e) => {\n            if ((e.target.type === 8 /* MouseTargetType.CONTENT_VIEW_ZONE */ || e.target.type === 5 /* MouseTargetType.GUTTER_VIEW_ZONE */) && e.target.detail.viewZoneId === this._getViewZoneId()) {\n                currentLineNumberOffset = this._updateLightBulbPosition(this._marginDomNode, e.event.browserEvent.y, lineHeight);\n                this.visibility = true;\n            }\n            else {\n                this.visibility = false;\n            }\n        }));\n        this._register(_modifiedEditor.onMouseDown((e) => {\n            if (!e.event.leftButton) {\n                return;\n            }\n            if (e.target.type === 8 /* MouseTargetType.CONTENT_VIEW_ZONE */ || e.target.type === 5 /* MouseTargetType.GUTTER_VIEW_ZONE */) {\n                const viewZoneId = e.target.detail.viewZoneId;\n                if (viewZoneId === this._getViewZoneId()) {\n                    e.event.preventDefault();\n                    currentLineNumberOffset = this._updateLightBulbPosition(this._marginDomNode, e.event.browserEvent.y, lineHeight);\n                    showContextMenu(e.event.posx, e.event.posy + lineHeight);\n                }\n            }\n        }));\n    }\n    _updateLightBulbPosition(marginDomNode, y, lineHeight) {\n        const { top } = getDomNodePagePosition(marginDomNode);\n        const offset = y - top;\n        const lineNumberOffset = Math.floor(offset / lineHeight);\n        const newTop = lineNumberOffset * lineHeight;\n        this._diffActions.style.top = `${newTop}px`;\n        if (this._viewLineCounts) {\n            let acc = 0;\n            for (let i = 0; i < this._viewLineCounts.length; i++) {\n                acc += this._viewLineCounts[i];\n                if (lineNumberOffset < acc) {\n                    return i;\n                }\n            }\n        }\n        return lineNumberOffset;\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createTrustedTypesPolicy } from '../../../../../../base/browser/trustedTypes.js';\nimport { applyFontInfo } from '../../../../config/domFontInfo.js';\nimport { EditorFontLigatures } from '../../../../../common/config/editorOptions.js';\nimport { StringBuilder } from '../../../../../common/core/stringBuilder.js';\nimport { LineDecoration } from '../../../../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine } from '../../../../../common/viewLayout/viewLineRenderer.js';\nimport { ViewLineRenderingData } from '../../../../../common/viewModel.js';\nconst ttPolicy = createTrustedTypesPolicy('diffEditorWidget', { createHTML: value => value });\nexport function renderLines(source, options, decorations, domNode) {\n    applyFontInfo(domNode, options.fontInfo);\n    const hasCharChanges = (decorations.length > 0);\n    const sb = new StringBuilder(10000);\n    let maxCharsPerLine = 0;\n    let renderedLineCount = 0;\n    const viewLineCounts = [];\n    for (let lineIndex = 0; lineIndex < source.lineTokens.length; lineIndex++) {\n        const lineNumber = lineIndex + 1;\n        const lineTokens = source.lineTokens[lineIndex];\n        const lineBreakData = source.lineBreakData[lineIndex];\n        const actualDecorations = LineDecoration.filter(decorations, lineNumber, 1, Number.MAX_SAFE_INTEGER);\n        if (lineBreakData) {\n            let lastBreakOffset = 0;\n            for (const breakOffset of lineBreakData.breakOffsets) {\n                const viewLineTokens = lineTokens.sliceAndInflate(lastBreakOffset, breakOffset, 0);\n                maxCharsPerLine = Math.max(maxCharsPerLine, renderOriginalLine(renderedLineCount, viewLineTokens, LineDecoration.extractWrapped(actualDecorations, lastBreakOffset, breakOffset), hasCharChanges, source.mightContainNonBasicASCII, source.mightContainRTL, options, sb));\n                renderedLineCount++;\n                lastBreakOffset = breakOffset;\n            }\n            viewLineCounts.push(lineBreakData.breakOffsets.length);\n        }\n        else {\n            viewLineCounts.push(1);\n            maxCharsPerLine = Math.max(maxCharsPerLine, renderOriginalLine(renderedLineCount, lineTokens, actualDecorations, hasCharChanges, source.mightContainNonBasicASCII, source.mightContainRTL, options, sb));\n            renderedLineCount++;\n        }\n    }\n    maxCharsPerLine += options.scrollBeyondLastColumn;\n    const html = sb.build();\n    const trustedhtml = ttPolicy ? ttPolicy.createHTML(html) : html;\n    domNode.innerHTML = trustedhtml;\n    const minWidthInPx = (maxCharsPerLine * options.typicalHalfwidthCharacterWidth);\n    return {\n        heightInLines: renderedLineCount,\n        minWidthInPx,\n        viewLineCounts,\n    };\n}\nexport class LineSource {\n    constructor(lineTokens, lineBreakData, mightContainNonBasicASCII, mightContainRTL) {\n        this.lineTokens = lineTokens;\n        this.lineBreakData = lineBreakData;\n        this.mightContainNonBasicASCII = mightContainNonBasicASCII;\n        this.mightContainRTL = mightContainRTL;\n    }\n}\nexport class RenderOptions {\n    static fromEditor(editor) {\n        var _a;\n        const modifiedEditorOptions = editor.getOptions();\n        const fontInfo = modifiedEditorOptions.get(50 /* EditorOption.fontInfo */);\n        const layoutInfo = modifiedEditorOptions.get(144 /* EditorOption.layoutInfo */);\n        return new RenderOptions(((_a = editor.getModel()) === null || _a === void 0 ? void 0 : _a.getOptions().tabSize) || 0, fontInfo, modifiedEditorOptions.get(33 /* EditorOption.disableMonospaceOptimizations */), fontInfo.typicalHalfwidthCharacterWidth, modifiedEditorOptions.get(104 /* EditorOption.scrollBeyondLastColumn */), modifiedEditorOptions.get(67 /* EditorOption.lineHeight */), layoutInfo.decorationsWidth, modifiedEditorOptions.get(117 /* EditorOption.stopRenderingLineAfter */), modifiedEditorOptions.get(99 /* EditorOption.renderWhitespace */), modifiedEditorOptions.get(94 /* EditorOption.renderControlCharacters */), modifiedEditorOptions.get(51 /* EditorOption.fontLigatures */));\n    }\n    constructor(tabSize, fontInfo, disableMonospaceOptimizations, typicalHalfwidthCharacterWidth, scrollBeyondLastColumn, lineHeight, lineDecorationsWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures) {\n        this.tabSize = tabSize;\n        this.fontInfo = fontInfo;\n        this.disableMonospaceOptimizations = disableMonospaceOptimizations;\n        this.typicalHalfwidthCharacterWidth = typicalHalfwidthCharacterWidth;\n        this.scrollBeyondLastColumn = scrollBeyondLastColumn;\n        this.lineHeight = lineHeight;\n        this.lineDecorationsWidth = lineDecorationsWidth;\n        this.stopRenderingLineAfter = stopRenderingLineAfter;\n        this.renderWhitespace = renderWhitespace;\n        this.renderControlCharacters = renderControlCharacters;\n        this.fontLigatures = fontLigatures;\n    }\n}\nfunction renderOriginalLine(viewLineIdx, lineTokens, decorations, hasCharChanges, mightContainNonBasicASCII, mightContainRTL, options, sb) {\n    sb.appendString('<div class=\"view-line');\n    if (!hasCharChanges) {\n        // No char changes\n        sb.appendString(' char-delete');\n    }\n    sb.appendString('\" style=\"top:');\n    sb.appendString(String(viewLineIdx * options.lineHeight));\n    sb.appendString('px;width:1000000px;\">');\n    const lineContent = lineTokens.getLineContent();\n    const isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, mightContainNonBasicASCII);\n    const containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, mightContainRTL);\n    const output = renderViewLine(new RenderLineInput((options.fontInfo.isMonospace && !options.disableMonospaceOptimizations), options.fontInfo.canUseHalfwidthRightwardsArrow, lineContent, false, isBasicASCII, containsRTL, 0, lineTokens, decorations, options.tabSize, 0, options.fontInfo.spaceWidth, options.fontInfo.middotWidth, options.fontInfo.wsmiddotWidth, options.stopRenderingLineAfter, options.renderWhitespace, options.renderControlCharacters, options.fontLigatures !== EditorFontLigatures.OFF, null // Send no selections, original line cannot be selected\n    ), sb);\n    sb.appendString('</div>');\n    return output.characterMapping.getHorizontalOffset(output.characterMapping.length);\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar OverviewRulerFeature_1;\nimport { EventType, addDisposableListener, addStandardDisposableListener, h } from '../../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../../base/browser/fastDomNode.js';\nimport { ScrollbarState } from '../../../../../base/browser/ui/scrollbar/scrollbarState.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { autorun, autorunWithStore, derived, observableFromEvent, observableSignalFromEvent } from '../../../../../base/common/observable.js';\nimport { appendRemoveOnDispose } from '../utils.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { OverviewRulerZone } from '../../../../common/viewModel/overviewZoneManager.js';\nimport { defaultInsertColor, defaultRemoveColor, diffInserted, diffOverviewRulerInserted, diffOverviewRulerRemoved, diffRemoved } from '../../../../../platform/theme/common/colorRegistry.js';\nimport { IThemeService } from '../../../../../platform/theme/common/themeService.js';\nlet OverviewRulerFeature = OverviewRulerFeature_1 = class OverviewRulerFeature extends Disposable {\n    constructor(_editors, _rootElement, _diffModel, _rootWidth, _rootHeight, _modifiedEditorLayoutInfo, _themeService) {\n        super();\n        this._editors = _editors;\n        this._rootElement = _rootElement;\n        this._diffModel = _diffModel;\n        this._rootWidth = _rootWidth;\n        this._rootHeight = _rootHeight;\n        this._modifiedEditorLayoutInfo = _modifiedEditorLayoutInfo;\n        this._themeService = _themeService;\n        this.width = OverviewRulerFeature_1.ENTIRE_DIFF_OVERVIEW_WIDTH;\n        const currentColorTheme = observableFromEvent(this._themeService.onDidColorThemeChange, () => this._themeService.getColorTheme());\n        const currentColors = derived(reader => {\n            /** @description colors */\n            const theme = currentColorTheme.read(reader);\n            const insertColor = theme.getColor(diffOverviewRulerInserted) || (theme.getColor(diffInserted) || defaultInsertColor).transparent(2);\n            const removeColor = theme.getColor(diffOverviewRulerRemoved) || (theme.getColor(diffRemoved) || defaultRemoveColor).transparent(2);\n            return { insertColor, removeColor };\n        });\n        const viewportDomElement = createFastDomNode(document.createElement('div'));\n        viewportDomElement.setClassName('diffViewport');\n        viewportDomElement.setPosition('absolute');\n        const diffOverviewRoot = h('div.diffOverview', {\n            style: { position: 'absolute', top: '0px', width: OverviewRulerFeature_1.ENTIRE_DIFF_OVERVIEW_WIDTH + 'px' }\n        }).root;\n        this._register(appendRemoveOnDispose(diffOverviewRoot, viewportDomElement.domNode));\n        this._register(addStandardDisposableListener(diffOverviewRoot, EventType.POINTER_DOWN, (e) => {\n            this._editors.modified.delegateVerticalScrollbarPointerDown(e);\n        }));\n        this._register(addDisposableListener(diffOverviewRoot, EventType.MOUSE_WHEEL, (e) => {\n            this._editors.modified.delegateScrollFromMouseWheelEvent(e);\n        }, { passive: false }));\n        this._register(appendRemoveOnDispose(this._rootElement, diffOverviewRoot));\n        this._register(autorunWithStore((reader, store) => {\n            /** @description recreate overview rules when model changes */\n            const m = this._diffModel.read(reader);\n            const originalOverviewRuler = this._editors.original.createOverviewRuler('original diffOverviewRuler');\n            if (originalOverviewRuler) {\n                store.add(originalOverviewRuler);\n                store.add(appendRemoveOnDispose(diffOverviewRoot, originalOverviewRuler.getDomNode()));\n            }\n            const modifiedOverviewRuler = this._editors.modified.createOverviewRuler('modified diffOverviewRuler');\n            if (modifiedOverviewRuler) {\n                store.add(modifiedOverviewRuler);\n                store.add(appendRemoveOnDispose(diffOverviewRoot, modifiedOverviewRuler.getDomNode()));\n            }\n            if (!originalOverviewRuler || !modifiedOverviewRuler) {\n                // probably no model\n                return;\n            }\n            const origViewZonesChanged = observableSignalFromEvent('viewZoneChanged', this._editors.original.onDidChangeViewZones);\n            const modViewZonesChanged = observableSignalFromEvent('viewZoneChanged', this._editors.modified.onDidChangeViewZones);\n            const origHiddenRangesChanged = observableSignalFromEvent('hiddenRangesChanged', this._editors.original.onDidChangeHiddenAreas);\n            const modHiddenRangesChanged = observableSignalFromEvent('hiddenRangesChanged', this._editors.modified.onDidChangeHiddenAreas);\n            store.add(autorun(reader => {\n                var _a;\n                /** @description set overview ruler zones */\n                origViewZonesChanged.read(reader);\n                modViewZonesChanged.read(reader);\n                origHiddenRangesChanged.read(reader);\n                modHiddenRangesChanged.read(reader);\n                const colors = currentColors.read(reader);\n                const diff = (_a = m === null || m === void 0 ? void 0 : m.diff.read(reader)) === null || _a === void 0 ? void 0 : _a.mappings;\n                function createZones(ranges, color, editor) {\n                    const vm = editor._getViewModel();\n                    if (!vm) {\n                        return [];\n                    }\n                    return ranges\n                        .filter(d => d.length > 0)\n                        .map(r => {\n                        const start = vm.coordinatesConverter.convertModelPositionToViewPosition(new Position(r.startLineNumber, 1));\n                        const end = vm.coordinatesConverter.convertModelPositionToViewPosition(new Position(r.endLineNumberExclusive, 1));\n                        // By computing the lineCount, we won't ask the view model later for the bottom vertical position.\n                        // (The view model will take into account the alignment viewzones, which will give\n                        // modifications and deletetions always the same height.)\n                        const lineCount = end.lineNumber - start.lineNumber;\n                        return new OverviewRulerZone(start.lineNumber, end.lineNumber, lineCount, color.toString());\n                    });\n                }\n                const originalZones = createZones((diff || []).map(d => d.lineRangeMapping.original), colors.removeColor, this._editors.original);\n                const modifiedZones = createZones((diff || []).map(d => d.lineRangeMapping.modified), colors.insertColor, this._editors.modified);\n                originalOverviewRuler === null || originalOverviewRuler === void 0 ? void 0 : originalOverviewRuler.setZones(originalZones);\n                modifiedOverviewRuler === null || modifiedOverviewRuler === void 0 ? void 0 : modifiedOverviewRuler.setZones(modifiedZones);\n            }));\n            store.add(autorun(reader => {\n                /** @description layout overview ruler */\n                const height = this._rootHeight.read(reader);\n                const width = this._rootWidth.read(reader);\n                const layoutInfo = this._modifiedEditorLayoutInfo.read(reader);\n                if (layoutInfo) {\n                    const freeSpace = OverviewRulerFeature_1.ENTIRE_DIFF_OVERVIEW_WIDTH - 2 * OverviewRulerFeature_1.ONE_OVERVIEW_WIDTH;\n                    originalOverviewRuler.setLayout({\n                        top: 0,\n                        height: height,\n                        right: freeSpace + OverviewRulerFeature_1.ONE_OVERVIEW_WIDTH,\n                        width: OverviewRulerFeature_1.ONE_OVERVIEW_WIDTH,\n                    });\n                    modifiedOverviewRuler.setLayout({\n                        top: 0,\n                        height: height,\n                        right: 0,\n                        width: OverviewRulerFeature_1.ONE_OVERVIEW_WIDTH,\n                    });\n                    const scrollTop = this._editors.modifiedScrollTop.read(reader);\n                    const scrollHeight = this._editors.modifiedScrollHeight.read(reader);\n                    const scrollBarOptions = this._editors.modified.getOption(103 /* EditorOption.scrollbar */);\n                    const state = new ScrollbarState(scrollBarOptions.verticalHasArrows ? scrollBarOptions.arrowSize : 0, scrollBarOptions.verticalScrollbarSize, 0, layoutInfo.height, scrollHeight, scrollTop);\n                    viewportDomElement.setTop(state.getSliderPosition());\n                    viewportDomElement.setHeight(state.getSliderSize());\n                }\n                else {\n                    viewportDomElement.setTop(0);\n                    viewportDomElement.setHeight(0);\n                }\n                diffOverviewRoot.style.height = height + 'px';\n                diffOverviewRoot.style.left = (width - OverviewRulerFeature_1.ENTIRE_DIFF_OVERVIEW_WIDTH) + 'px';\n                viewportDomElement.setWidth(OverviewRulerFeature_1.ENTIRE_DIFF_OVERVIEW_WIDTH);\n            }));\n        }));\n    }\n};\nOverviewRulerFeature.ONE_OVERVIEW_WIDTH = 15;\nOverviewRulerFeature.ENTIRE_DIFF_OVERVIEW_WIDTH = OverviewRulerFeature_1.ONE_OVERVIEW_WIDTH * 2;\nOverviewRulerFeature = OverviewRulerFeature_1 = __decorate([\n    __param(6, IThemeService)\n], OverviewRulerFeature);\nexport { OverviewRulerFeature };\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nexport class DelegatingEditor extends Disposable {\n    constructor() {\n        super(...arguments);\n        this._id = ++DelegatingEditor.idCounter;\n        this._onDidDispose = this._register(new Emitter());\n        this.onDidDispose = this._onDidDispose.event;\n        // #endregion\n    }\n    getId() { return this.getEditorType() + ':v2:' + this._id; }\n    // #region editorBrowser.IDiffEditor: Delegating to modified Editor\n    getVisibleColumnFromPosition(position) {\n        return this._targetEditor.getVisibleColumnFromPosition(position);\n    }\n    getPosition() {\n        return this._targetEditor.getPosition();\n    }\n    setPosition(position, source = 'api') {\n        this._targetEditor.setPosition(position, source);\n    }\n    revealLine(lineNumber, scrollType = 0 /* ScrollType.Smooth */) {\n        this._targetEditor.revealLine(lineNumber, scrollType);\n    }\n    revealLineInCenter(lineNumber, scrollType = 0 /* ScrollType.Smooth */) {\n        this._targetEditor.revealLineInCenter(lineNumber, scrollType);\n    }\n    revealLineInCenterIfOutsideViewport(lineNumber, scrollType = 0 /* ScrollType.Smooth */) {\n        this._targetEditor.revealLineInCenterIfOutsideViewport(lineNumber, scrollType);\n    }\n    revealLineNearTop(lineNumber, scrollType = 0 /* ScrollType.Smooth */) {\n        this._targetEditor.revealLineNearTop(lineNumber, scrollType);\n    }\n    revealPosition(position, scrollType = 0 /* ScrollType.Smooth */) {\n        this._targetEditor.revealPosition(position, scrollType);\n    }\n    revealPositionInCenter(position, scrollType = 0 /* ScrollType.Smooth */) {\n        this._targetEditor.revealPositionInCenter(position, scrollType);\n    }\n    revealPositionInCenterIfOutsideViewport(position, scrollType = 0 /* ScrollType.Smooth */) {\n        this._targetEditor.revealPositionInCenterIfOutsideViewport(position, scrollType);\n    }\n    revealPositionNearTop(position, scrollType = 0 /* ScrollType.Smooth */) {\n        this._targetEditor.revealPositionNearTop(position, scrollType);\n    }\n    getSelection() {\n        return this._targetEditor.getSelection();\n    }\n    getSelections() {\n        return this._targetEditor.getSelections();\n    }\n    setSelection(something, source = 'api') {\n        this._targetEditor.setSelection(something, source);\n    }\n    setSelections(ranges, source = 'api') {\n        this._targetEditor.setSelections(ranges, source);\n    }\n    revealLines(startLineNumber, endLineNumber, scrollType = 0 /* ScrollType.Smooth */) {\n        this._targetEditor.revealLines(startLineNumber, endLineNumber, scrollType);\n    }\n    revealLinesInCenter(startLineNumber, endLineNumber, scrollType = 0 /* ScrollType.Smooth */) {\n        this._targetEditor.revealLinesInCenter(startLineNumber, endLineNumber, scrollType);\n    }\n    revealLinesInCenterIfOutsideViewport(startLineNumber, endLineNumber, scrollType = 0 /* ScrollType.Smooth */) {\n        this._targetEditor.revealLinesInCenterIfOutsideViewport(startLineNumber, endLineNumber, scrollType);\n    }\n    revealLinesNearTop(startLineNumber, endLineNumber, scrollType = 0 /* ScrollType.Smooth */) {\n        this._targetEditor.revealLinesNearTop(startLineNumber, endLineNumber, scrollType);\n    }\n    revealRange(range, scrollType = 0 /* ScrollType.Smooth */, revealVerticalInCenter = false, revealHorizontal = true) {\n        this._targetEditor.revealRange(range, scrollType, revealVerticalInCenter, revealHorizontal);\n    }\n    revealRangeInCenter(range, scrollType = 0 /* ScrollType.Smooth */) {\n        this._targetEditor.revealRangeInCenter(range, scrollType);\n    }\n    revealRangeInCenterIfOutsideViewport(range, scrollType = 0 /* ScrollType.Smooth */) {\n        this._targetEditor.revealRangeInCenterIfOutsideViewport(range, scrollType);\n    }\n    revealRangeNearTop(range, scrollType = 0 /* ScrollType.Smooth */) {\n        this._targetEditor.revealRangeNearTop(range, scrollType);\n    }\n    revealRangeNearTopIfOutsideViewport(range, scrollType = 0 /* ScrollType.Smooth */) {\n        this._targetEditor.revealRangeNearTopIfOutsideViewport(range, scrollType);\n    }\n    revealRangeAtTop(range, scrollType = 0 /* ScrollType.Smooth */) {\n        this._targetEditor.revealRangeAtTop(range, scrollType);\n    }\n    getSupportedActions() {\n        return this._targetEditor.getSupportedActions();\n    }\n    focus() {\n        this._targetEditor.focus();\n    }\n    trigger(source, handlerId, payload) {\n        this._targetEditor.trigger(source, handlerId, payload);\n    }\n    createDecorationsCollection(decorations) {\n        return this._targetEditor.createDecorationsCollection(decorations);\n    }\n    changeDecorations(callback) {\n        return this._targetEditor.changeDecorations(callback);\n    }\n}\nDelegatingEditor.idCounter = 0;\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Emitter } from '../../../../../base/common/event.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { autorunHandleChanges, derivedOpts, observableFromEvent } from '../../../../../base/common/observable.js';\nimport { OverviewRulerFeature } from '../features/overviewRulerFeature.js';\nimport { EditorOptions } from '../../../../common/config/editorOptions.js';\nimport { localize } from '../../../../../nls.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../../platform/keybinding/common/keybinding.js';\nimport { Position } from '../../../../common/core/position.js';\nlet DiffEditorEditors = class DiffEditorEditors extends Disposable {\n    get onDidContentSizeChange() { return this._onDidContentSizeChange.event; }\n    constructor(originalEditorElement, modifiedEditorElement, _options, codeEditorWidgetOptions, _createInnerEditor, _instantiationService, _keybindingService) {\n        super();\n        this.originalEditorElement = originalEditorElement;\n        this.modifiedEditorElement = modifiedEditorElement;\n        this._options = _options;\n        this._createInnerEditor = _createInnerEditor;\n        this._instantiationService = _instantiationService;\n        this._keybindingService = _keybindingService;\n        this._onDidContentSizeChange = this._register(new Emitter());\n        this.original = this._register(this._createLeftHandSideEditor(_options.editorOptions.get(), codeEditorWidgetOptions.originalEditor || {}));\n        this.modified = this._register(this._createRightHandSideEditor(_options.editorOptions.get(), codeEditorWidgetOptions.modifiedEditor || {}));\n        this.modifiedModel = observableFromEvent(this.modified.onDidChangeModel, () => /** @description modified.model */ this.modified.getModel());\n        this.modifiedScrollTop = observableFromEvent(this.modified.onDidScrollChange, () => /** @description modified.getScrollTop */ this.modified.getScrollTop());\n        this.modifiedScrollHeight = observableFromEvent(this.modified.onDidScrollChange, () => /** @description modified.getScrollHeight */ this.modified.getScrollHeight());\n        this.modifiedSelections = observableFromEvent(this.modified.onDidChangeCursorSelection, () => { var _a; return (_a = this.modified.getSelections()) !== null && _a !== void 0 ? _a : []; });\n        this.modifiedCursor = derivedOpts({ owner: this, equalityComparer: Position.equals }, reader => { var _a, _b; return (_b = (_a = this.modifiedSelections.read(reader)[0]) === null || _a === void 0 ? void 0 : _a.getPosition()) !== null && _b !== void 0 ? _b : new Position(1, 1); });\n        this.originalCursor = observableFromEvent(this.original.onDidChangeCursorPosition, () => { var _a; return (_a = this.original.getPosition()) !== null && _a !== void 0 ? _a : new Position(1, 1); });\n        this._register(autorunHandleChanges({\n            createEmptyChangeSummary: () => ({}),\n            handleChange: (ctx, changeSummary) => {\n                if (ctx.didChange(_options.editorOptions)) {\n                    Object.assign(changeSummary, ctx.change.changedOptions);\n                }\n                return true;\n            }\n        }, (reader, changeSummary) => {\n            /** @description update editor options */\n            _options.editorOptions.read(reader);\n            this._options.renderSideBySide.read(reader);\n            this.modified.updateOptions(this._adjustOptionsForRightHandSide(reader, changeSummary));\n            this.original.updateOptions(this._adjustOptionsForLeftHandSide(reader, changeSummary));\n        }));\n    }\n    _createLeftHandSideEditor(options, codeEditorWidgetOptions) {\n        const leftHandSideOptions = this._adjustOptionsForLeftHandSide(undefined, options);\n        const editor = this._constructInnerEditor(this._instantiationService, this.originalEditorElement, leftHandSideOptions, codeEditorWidgetOptions);\n        editor.setContextValue('isInDiffLeftEditor', true);\n        return editor;\n    }\n    _createRightHandSideEditor(options, codeEditorWidgetOptions) {\n        const rightHandSideOptions = this._adjustOptionsForRightHandSide(undefined, options);\n        const editor = this._constructInnerEditor(this._instantiationService, this.modifiedEditorElement, rightHandSideOptions, codeEditorWidgetOptions);\n        editor.setContextValue('isInDiffRightEditor', true);\n        return editor;\n    }\n    _constructInnerEditor(instantiationService, container, options, editorWidgetOptions) {\n        const editor = this._createInnerEditor(instantiationService, container, options, editorWidgetOptions);\n        this._register(editor.onDidContentSizeChange(e => {\n            const width = this.original.getContentWidth() + this.modified.getContentWidth() + OverviewRulerFeature.ENTIRE_DIFF_OVERVIEW_WIDTH;\n            const height = Math.max(this.modified.getContentHeight(), this.original.getContentHeight());\n            this._onDidContentSizeChange.fire({\n                contentHeight: height,\n                contentWidth: width,\n                contentHeightChanged: e.contentHeightChanged,\n                contentWidthChanged: e.contentWidthChanged\n            });\n        }));\n        return editor;\n    }\n    _adjustOptionsForLeftHandSide(_reader, changedOptions) {\n        const result = this._adjustOptionsForSubEditor(changedOptions);\n        if (!this._options.renderSideBySide.get()) {\n            // never wrap hidden editor\n            result.wordWrapOverride1 = 'off';\n            result.wordWrapOverride2 = 'off';\n            result.stickyScroll = { enabled: false };\n            // Disable unicode highlighting for the original side in inline mode, as they are not shown anyway.\n            result.unicodeHighlight = { nonBasicASCII: false, ambiguousCharacters: false, invisibleCharacters: false };\n        }\n        else {\n            result.unicodeHighlight = this._options.editorOptions.get().unicodeHighlight || {};\n            result.wordWrapOverride1 = this._options.diffWordWrap.get();\n        }\n        result.glyphMargin = this._options.renderSideBySide.get();\n        if (changedOptions.originalAriaLabel) {\n            result.ariaLabel = changedOptions.originalAriaLabel;\n        }\n        result.ariaLabel = this._updateAriaLabel(result.ariaLabel);\n        result.readOnly = !this._options.originalEditable.get();\n        result.dropIntoEditor = { enabled: !result.readOnly };\n        result.extraEditorClassName = 'original-in-monaco-diff-editor';\n        return result;\n    }\n    _adjustOptionsForRightHandSide(reader, changedOptions) {\n        const result = this._adjustOptionsForSubEditor(changedOptions);\n        if (changedOptions.modifiedAriaLabel) {\n            result.ariaLabel = changedOptions.modifiedAriaLabel;\n        }\n        result.ariaLabel = this._updateAriaLabel(result.ariaLabel);\n        result.wordWrapOverride1 = this._options.diffWordWrap.get();\n        result.revealHorizontalRightPadding = EditorOptions.revealHorizontalRightPadding.defaultValue + OverviewRulerFeature.ENTIRE_DIFF_OVERVIEW_WIDTH;\n        result.scrollbar.verticalHasArrows = false;\n        result.extraEditorClassName = 'modified-in-monaco-diff-editor';\n        return result;\n    }\n    _adjustOptionsForSubEditor(options) {\n        const clonedOptions = {\n            ...options,\n            dimension: {\n                height: 0,\n                width: 0\n            },\n        };\n        clonedOptions.inDiffEditor = true;\n        clonedOptions.automaticLayout = false;\n        // Clone scrollbar options before changing them\n        clonedOptions.scrollbar = { ...(clonedOptions.scrollbar || {}) };\n        clonedOptions.folding = false;\n        clonedOptions.codeLens = this._options.diffCodeLens.get();\n        clonedOptions.fixedOverflowWidgets = true;\n        // Clone minimap options before changing them\n        clonedOptions.minimap = { ...(clonedOptions.minimap || {}) };\n        clonedOptions.minimap.enabled = false;\n        if (this._options.hideUnchangedRegions.get()) {\n            clonedOptions.stickyScroll = { enabled: false };\n        }\n        else {\n            clonedOptions.stickyScroll = this._options.editorOptions.get().stickyScroll;\n        }\n        return clonedOptions;\n    }\n    _updateAriaLabel(ariaLabel) {\n        var _a;\n        if (!ariaLabel) {\n            ariaLabel = '';\n        }\n        const ariaNavigationTip = localize('diff-aria-navigation-tip', ' use {0} to open the accessibility help.', (_a = this._keybindingService.lookupKeybinding('editor.action.accessibilityHelp')) === null || _a === void 0 ? void 0 : _a.getAriaLabel());\n        if (this._options.accessibilityVerbose.get()) {\n            return ariaLabel + ariaNavigationTip;\n        }\n        else if (ariaLabel) {\n            return ariaLabel.replaceAll(ariaNavigationTip, '');\n        }\n        return '';\n    }\n};\nDiffEditorEditors = __decorate([\n    __param(5, IInstantiationService),\n    __param(6, IKeybindingService)\n], DiffEditorEditors);\nexport { DiffEditorEditors };\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { derived, observableValue } from '../../../../base/common/observable.js';\nimport { diffEditorDefaultOptions } from '../../../common/config/diffEditor.js';\nimport { clampedFloat, clampedInt, boolean as validateBooleanOption, stringSet as validateStringSetOption } from '../../../common/config/editorOptions.js';\nexport class DiffEditorOptions {\n    get editorOptions() { return this._options; }\n    constructor(options) {\n        this._diffEditorWidth = observableValue(this, 0);\n        this.couldShowInlineViewBecauseOfSize = derived(this, reader => this._options.read(reader).renderSideBySide && this._diffEditorWidth.read(reader) <= this._options.read(reader).renderSideBySideInlineBreakpoint);\n        this.renderOverviewRuler = derived(this, reader => this._options.read(reader).renderOverviewRuler);\n        this.renderSideBySide = derived(this, reader => this._options.read(reader).renderSideBySide\n            && !(this._options.read(reader).useInlineViewWhenSpaceIsLimited && this.couldShowInlineViewBecauseOfSize.read(reader)));\n        this.readOnly = derived(this, reader => this._options.read(reader).readOnly);\n        this.shouldRenderRevertArrows = derived(this, reader => {\n            if (!this._options.read(reader).renderMarginRevertIcon) {\n                return false;\n            }\n            if (!this.renderSideBySide.read(reader)) {\n                return false;\n            }\n            if (this.readOnly.read(reader)) {\n                return false;\n            }\n            return true;\n        });\n        this.renderIndicators = derived(this, reader => this._options.read(reader).renderIndicators);\n        this.enableSplitViewResizing = derived(this, reader => this._options.read(reader).enableSplitViewResizing);\n        this.splitViewDefaultRatio = derived(this, reader => this._options.read(reader).splitViewDefaultRatio);\n        this.ignoreTrimWhitespace = derived(this, reader => this._options.read(reader).ignoreTrimWhitespace);\n        this.maxComputationTimeMs = derived(this, reader => this._options.read(reader).maxComputationTime);\n        this.showMoves = derived(this, reader => this._options.read(reader).experimental.showMoves && this.renderSideBySide.read(reader));\n        this.isInEmbeddedEditor = derived(this, reader => this._options.read(reader).isInEmbeddedEditor);\n        this.diffWordWrap = derived(this, reader => this._options.read(reader).diffWordWrap);\n        this.originalEditable = derived(this, reader => this._options.read(reader).originalEditable);\n        this.diffCodeLens = derived(this, reader => this._options.read(reader).diffCodeLens);\n        this.accessibilityVerbose = derived(this, reader => this._options.read(reader).accessibilityVerbose);\n        this.diffAlgorithm = derived(this, reader => this._options.read(reader).diffAlgorithm);\n        this.showEmptyDecorations = derived(this, reader => this._options.read(reader).experimental.showEmptyDecorations);\n        this.onlyShowAccessibleDiffViewer = derived(this, reader => this._options.read(reader).onlyShowAccessibleDiffViewer);\n        this.hideUnchangedRegions = derived(this, reader => this._options.read(reader).hideUnchangedRegions.enabled);\n        this.hideUnchangedRegionsRevealLineCount = derived(this, reader => this._options.read(reader).hideUnchangedRegions.revealLineCount);\n        this.hideUnchangedRegionsContextLineCount = derived(this, reader => this._options.read(reader).hideUnchangedRegions.contextLineCount);\n        this.hideUnchangedRegionsMinimumLineCount = derived(this, reader => this._options.read(reader).hideUnchangedRegions.minimumLineCount);\n        const optionsCopy = { ...options, ...validateDiffEditorOptions(options, diffEditorDefaultOptions) };\n        this._options = observableValue(this, optionsCopy);\n    }\n    updateOptions(changedOptions) {\n        const newDiffEditorOptions = validateDiffEditorOptions(changedOptions, this._options.get());\n        const newOptions = { ...this._options.get(), ...changedOptions, ...newDiffEditorOptions };\n        this._options.set(newOptions, undefined, { changedOptions: changedOptions });\n    }\n    setWidth(width) {\n        this._diffEditorWidth.set(width, undefined);\n    }\n}\nfunction validateDiffEditorOptions(options, defaults) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    return {\n        enableSplitViewResizing: validateBooleanOption(options.enableSplitViewResizing, defaults.enableSplitViewResizing),\n        splitViewDefaultRatio: clampedFloat(options.splitViewDefaultRatio, 0.5, 0.1, 0.9),\n        renderSideBySide: validateBooleanOption(options.renderSideBySide, defaults.renderSideBySide),\n        renderMarginRevertIcon: validateBooleanOption(options.renderMarginRevertIcon, defaults.renderMarginRevertIcon),\n        maxComputationTime: clampedInt(options.maxComputationTime, defaults.maxComputationTime, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n        maxFileSize: clampedInt(options.maxFileSize, defaults.maxFileSize, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n        ignoreTrimWhitespace: validateBooleanOption(options.ignoreTrimWhitespace, defaults.ignoreTrimWhitespace),\n        renderIndicators: validateBooleanOption(options.renderIndicators, defaults.renderIndicators),\n        originalEditable: validateBooleanOption(options.originalEditable, defaults.originalEditable),\n        diffCodeLens: validateBooleanOption(options.diffCodeLens, defaults.diffCodeLens),\n        renderOverviewRuler: validateBooleanOption(options.renderOverviewRuler, defaults.renderOverviewRuler),\n        diffWordWrap: validateStringSetOption(options.diffWordWrap, defaults.diffWordWrap, ['off', 'on', 'inherit']),\n        diffAlgorithm: validateStringSetOption(options.diffAlgorithm, defaults.diffAlgorithm, ['legacy', 'advanced'], { 'smart': 'legacy', 'experimental': 'advanced' }),\n        accessibilityVerbose: validateBooleanOption(options.accessibilityVerbose, defaults.accessibilityVerbose),\n        experimental: {\n            showMoves: validateBooleanOption((_a = options.experimental) === null || _a === void 0 ? void 0 : _a.showMoves, defaults.experimental.showMoves),\n            showEmptyDecorations: validateBooleanOption((_b = options.experimental) === null || _b === void 0 ? void 0 : _b.showEmptyDecorations, defaults.experimental.showEmptyDecorations),\n        },\n        hideUnchangedRegions: {\n            enabled: validateBooleanOption((_d = (_c = options.hideUnchangedRegions) === null || _c === void 0 ? void 0 : _c.enabled) !== null && _d !== void 0 ? _d : (_e = options.experimental) === null || _e === void 0 ? void 0 : _e.collapseUnchangedRegions, defaults.hideUnchangedRegions.enabled),\n            contextLineCount: clampedInt((_f = options.hideUnchangedRegions) === null || _f === void 0 ? void 0 : _f.contextLineCount, defaults.hideUnchangedRegions.contextLineCount, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n            minimumLineCount: clampedInt((_g = options.hideUnchangedRegions) === null || _g === void 0 ? void 0 : _g.minimumLineCount, defaults.hideUnchangedRegions.minimumLineCount, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n            revealLineCount: clampedInt((_h = options.hideUnchangedRegions) === null || _h === void 0 ? void 0 : _h.revealLineCount, defaults.hideUnchangedRegions.revealLineCount, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n        },\n        isInEmbeddedEditor: validateBooleanOption(options.isInEmbeddedEditor, defaults.isInEmbeddedEditor),\n        onlyShowAccessibleDiffViewer: validateBooleanOption(options.onlyShowAccessibleDiffViewer, defaults.onlyShowAccessibleDiffViewer),\n        renderSideBySideInlineBreakpoint: clampedInt(options.renderSideBySideInlineBreakpoint, defaults.renderSideBySideInlineBreakpoint, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */),\n        useInlineViewWhenSpaceIsLimited: validateBooleanOption(options.useInlineViewWhenSpaceIsLimited, defaults.useInlineViewWhenSpaceIsLimited),\n    };\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { addDisposableListener, h, EventType } from '../../../../../base/browser/dom.js';\nimport { renderIcon } from '../../../../../base/browser/ui/iconLabel/iconLabels.js';\nimport { Codicon } from '../../../../../base/common/codicons.js';\nimport { Disposable, toDisposable } from '../../../../../base/common/lifecycle.js';\nimport { autorunWithStore, derived } from '../../../../../base/common/observable.js';\nimport { LineRange, LineRangeSet } from '../../../../common/core/lineRange.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { GlyphMarginLane } from '../../../../common/model.js';\nimport { localize } from '../../../../../nls.js';\nconst emptyArr = [];\nexport class RevertButtonsFeature extends Disposable {\n    constructor(_editors, _diffModel, _options, _widget) {\n        super();\n        this._editors = _editors;\n        this._diffModel = _diffModel;\n        this._options = _options;\n        this._widget = _widget;\n        this._selectedDiffs = derived(this, (reader) => {\n            /** @description selectedDiffs */\n            const model = this._diffModel.read(reader);\n            const diff = model === null || model === void 0 ? void 0 : model.diff.read(reader);\n            // Return `emptyArr` because it is a constant. [] is always a new array and would trigger a change.\n            if (!diff) {\n                return emptyArr;\n            }\n            const selections = this._editors.modifiedSelections.read(reader);\n            if (selections.every(s => s.isEmpty())) {\n                return emptyArr;\n            }\n            const selectedLineNumbers = new LineRangeSet(selections.map(s => LineRange.fromRangeInclusive(s)));\n            const selectedMappings = diff.mappings.filter(m => m.lineRangeMapping.innerChanges && selectedLineNumbers.intersects(m.lineRangeMapping.modified));\n            const result = selectedMappings.map(mapping => ({\n                mapping,\n                rangeMappings: mapping.lineRangeMapping.innerChanges.filter(c => selections.some(s => Range.areIntersecting(c.modifiedRange, s)))\n            }));\n            if (result.length === 0 || result.every(r => r.rangeMappings.length === 0)) {\n                return emptyArr;\n            }\n            return result;\n        });\n        this._register(autorunWithStore((reader, store) => {\n            if (!this._options.shouldRenderRevertArrows.read(reader)) {\n                return;\n            }\n            const model = this._diffModel.read(reader);\n            const diff = model === null || model === void 0 ? void 0 : model.diff.read(reader);\n            if (!model || !diff) {\n                return;\n            }\n            if (model.movedTextToCompare.read(reader)) {\n                return;\n            }\n            const glyphWidgetsModified = [];\n            const selectedDiffs = this._selectedDiffs.read(reader);\n            const selectedDiffsSet = new Set(selectedDiffs.map(d => d.mapping));\n            if (selectedDiffs.length > 0) {\n                // The button to revert the selection\n                const selections = this._editors.modifiedSelections.read(reader);\n                const btn = store.add(new RevertButton(selections[selections.length - 1].positionLineNumber, this._widget, selectedDiffs.flatMap(d => d.rangeMappings), true));\n                this._editors.modified.addGlyphMarginWidget(btn);\n                glyphWidgetsModified.push(btn);\n            }\n            for (const m of diff.mappings) {\n                if (selectedDiffsSet.has(m)) {\n                    continue;\n                }\n                if (!m.lineRangeMapping.modified.isEmpty && m.lineRangeMapping.innerChanges) {\n                    const btn = store.add(new RevertButton(m.lineRangeMapping.modified.startLineNumber, this._widget, m.lineRangeMapping.innerChanges, false));\n                    this._editors.modified.addGlyphMarginWidget(btn);\n                    glyphWidgetsModified.push(btn);\n                }\n            }\n            store.add(toDisposable(() => {\n                for (const w of glyphWidgetsModified) {\n                    this._editors.modified.removeGlyphMarginWidget(w);\n                }\n            }));\n        }));\n    }\n}\nexport class RevertButton extends Disposable {\n    getId() { return this._id; }\n    constructor(_lineNumber, _widget, _diffs, _revertSelection) {\n        super();\n        this._lineNumber = _lineNumber;\n        this._widget = _widget;\n        this._diffs = _diffs;\n        this._revertSelection = _revertSelection;\n        this._id = `revertButton${RevertButton.counter++}`;\n        this._domNode = h('div.revertButton', {\n            title: this._revertSelection\n                ? localize('revertSelectedChanges', 'Revert Selected Changes')\n                : localize('revertChange', 'Revert Change')\n        }, [renderIcon(Codicon.arrowRight)]).root;\n        this._register(addDisposableListener(this._domNode, EventType.MOUSE_DOWN, e => {\n            // don't prevent context menu from showing up\n            if (e.button !== 2) {\n                e.stopPropagation();\n                e.preventDefault();\n            }\n        }));\n        this._register(addDisposableListener(this._domNode, EventType.MOUSE_UP, e => {\n            e.stopPropagation();\n            e.preventDefault();\n        }));\n        this._register(addDisposableListener(this._domNode, EventType.CLICK, (e) => {\n            this._widget.revertRangeMappings(this._diffs);\n            e.stopPropagation();\n            e.preventDefault();\n        }));\n    }\n    /**\n     * Get the dom node of the glyph widget.\n     */\n    getDomNode() {\n        return this._domNode;\n    }\n    /**\n     * Get the placement of the glyph widget.\n     */\n    getPosition() {\n        return {\n            lane: GlyphMarginLane.Right,\n            range: {\n                startColumn: 1,\n                startLineNumber: this._lineNumber,\n                endColumn: 1,\n                endLineNumber: this._lineNumber,\n            },\n            zIndex: 10001,\n        };\n    }\n}\nRevertButton.counter = 0;\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { derivedWithStore, observableValue, recomputeInitiallyAndOnChange } from '../../../../base/common/observable.js';\nimport { readHotReloadableExport } from '../diffEditor/utils.js';\nimport { MultiDiffEditorWidgetImpl } from './multiDiffEditorWidgetImpl.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport './colors.js';\nimport { DiffEditorItemTemplate } from './diffEditorItemTemplate.js';\nlet MultiDiffEditorWidget = class MultiDiffEditorWidget extends Disposable {\n    constructor(_element, _workbenchUIElementFactory, _instantiationService) {\n        super();\n        this._element = _element;\n        this._workbenchUIElementFactory = _workbenchUIElementFactory;\n        this._instantiationService = _instantiationService;\n        this._dimension = observableValue(this, undefined);\n        this._viewModel = observableValue(this, undefined);\n        this._widgetImpl = derivedWithStore(this, (reader, store) => {\n            readHotReloadableExport(DiffEditorItemTemplate, reader);\n            return store.add(this._instantiationService.createInstance((readHotReloadableExport(MultiDiffEditorWidgetImpl, reader)), this._element, this._dimension, this._viewModel, this._workbenchUIElementFactory));\n        });\n        this._register(recomputeInitiallyAndOnChange(this._widgetImpl));\n    }\n};\nMultiDiffEditorWidget = __decorate([\n    __param(2, IInstantiationService)\n], MultiDiffEditorWidget);\nexport { MultiDiffEditorWidget };\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { getWindow, h, scheduleAtNextAnimationFrame } from '../../../../base/browser/dom.js';\nimport { SmoothScrollableElement } from '../../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { findFirstMaxBy } from '../../../../base/common/arraysFind.js';\nimport { Disposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, autorunWithStore, derived, derivedObservableWithCache, derivedWithStore, observableFromEvent, observableValue } from '../../../../base/common/observable.js';\nimport { disposableObservableValue, globalTransaction, transaction } from '../../../../base/common/observableInternal/base.js';\nimport { Scrollable } from '../../../../base/common/scrollable.js';\nimport './style.css';\nimport { ObservableElementSizeObserver } from '../diffEditor/utils.js';\nimport { OffsetRange } from '../../../common/core/offsetRange.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ServiceCollection } from '../../../../platform/instantiation/common/serviceCollection.js';\nimport { DiffEditorItemTemplate, TemplateData } from './diffEditorItemTemplate.js';\nimport { ObjectPool } from './objectPool.js';\nlet MultiDiffEditorWidgetImpl = class MultiDiffEditorWidgetImpl extends Disposable {\n    constructor(_element, _dimension, _viewModel, _workbenchUIElementFactory, _parentContextKeyService, _parentInstantiationService) {\n        super();\n        this._element = _element;\n        this._dimension = _dimension;\n        this._viewModel = _viewModel;\n        this._workbenchUIElementFactory = _workbenchUIElementFactory;\n        this._parentContextKeyService = _parentContextKeyService;\n        this._parentInstantiationService = _parentInstantiationService;\n        this._elements = h('div.monaco-component.multiDiffEditor', [\n            h('div@content', {\n                style: {\n                    overflow: 'hidden',\n                }\n            }),\n            h('div.monaco-editor@overflowWidgetsDomNode', {}),\n        ]);\n        this._sizeObserver = this._register(new ObservableElementSizeObserver(this._element, undefined));\n        this._objectPool = this._register(new ObjectPool((data) => {\n            const template = this._instantiationService.createInstance(DiffEditorItemTemplate, this._elements.content, this._elements.overflowWidgetsDomNode, this._workbenchUIElementFactory);\n            template.setData(data);\n            return template;\n        }));\n        this._scrollable = this._register(new Scrollable({\n            forceIntegerValues: false,\n            scheduleAtNextAnimationFrame: (cb) => scheduleAtNextAnimationFrame(getWindow(this._element), cb),\n            smoothScrollDuration: 100,\n        }));\n        this._scrollableElement = this._register(new SmoothScrollableElement(this._elements.root, {\n            vertical: 1 /* ScrollbarVisibility.Auto */,\n            horizontal: 1 /* ScrollbarVisibility.Auto */,\n            useShadows: false,\n        }, this._scrollable));\n        this.scrollTop = observableFromEvent(this._scrollableElement.onScroll, () => /** @description scrollTop */ this._scrollableElement.getScrollPosition().scrollTop);\n        this.scrollLeft = observableFromEvent(this._scrollableElement.onScroll, () => /** @description scrollLeft */ this._scrollableElement.getScrollPosition().scrollLeft);\n        this._viewItems = derivedWithStore(this, (reader, store) => {\n            const vm = this._viewModel.read(reader);\n            if (!vm) {\n                return [];\n            }\n            const items = vm.items.read(reader);\n            return items.map(d => {\n                var _a;\n                const item = store.add(new VirtualizedViewItem(d, this._objectPool, this.scrollLeft, delta => {\n                    this._scrollableElement.setScrollPosition({ scrollTop: this._scrollableElement.getScrollPosition().scrollTop + delta });\n                }));\n                const data = (_a = this._lastDocStates) === null || _a === void 0 ? void 0 : _a[item.getKey()];\n                if (data) {\n                    transaction(tx => {\n                        item.setViewState(data, tx);\n                    });\n                }\n                return item;\n            });\n        });\n        this._spaceBetweenPx = 0;\n        this._totalHeight = this._viewItems.map(this, (items, reader) => items.reduce((r, i) => r + i.contentHeight.read(reader) + this._spaceBetweenPx, 0));\n        this.activeDiffItem = derived(this, reader => this._viewItems.read(reader).find(i => { var _a; return (_a = i.template.read(reader)) === null || _a === void 0 ? void 0 : _a.isFocused.read(reader); }));\n        this.lastActiveDiffItem = derivedObservableWithCache((reader, lastValue) => { var _a; return (_a = this.activeDiffItem.read(reader)) !== null && _a !== void 0 ? _a : lastValue; });\n        this._contextKeyService = this._register(this._parentContextKeyService.createScoped(this._element));\n        this._instantiationService = this._parentInstantiationService.createChild(new ServiceCollection([IContextKeyService, this._contextKeyService]));\n        /** This accounts for documents that are not loaded yet. */\n        this._lastDocStates = {};\n        this._contextKeyService.createKey(EditorContextKeys.inMultiDiffEditor.key, true);\n        this._register(autorunWithStore((reader, store) => {\n            const viewModel = this._viewModel.read(reader);\n            if (viewModel && viewModel.contextKeys) {\n                for (const [key, value] of Object.entries(viewModel.contextKeys)) {\n                    const contextKey = this._contextKeyService.createKey(key, undefined);\n                    contextKey.set(value);\n                    store.add(toDisposable(() => contextKey.reset()));\n                }\n            }\n        }));\n        const ctxAllCollapsed = this._parentContextKeyService.createKey(EditorContextKeys.multiDiffEditorAllCollapsed.key, false);\n        this._register(autorun((reader) => {\n            const viewModel = this._viewModel.read(reader);\n            if (viewModel) {\n                const allCollapsed = viewModel.items.read(reader).every(item => item.collapsed.read(reader));\n                ctxAllCollapsed.set(allCollapsed);\n            }\n        }));\n        this._register(autorun((reader) => {\n            const lastActiveDiffItem = this.lastActiveDiffItem.read(reader);\n            transaction(tx => {\n                var _a;\n                (_a = this._viewModel.read(reader)) === null || _a === void 0 ? void 0 : _a.activeDiffItem.set(lastActiveDiffItem === null || lastActiveDiffItem === void 0 ? void 0 : lastActiveDiffItem.viewModel, tx);\n            });\n        }));\n        this._register(autorun((reader) => {\n            /** @description Update widget dimension */\n            const dimension = this._dimension.read(reader);\n            this._sizeObserver.observe(dimension);\n        }));\n        this._elements.content.style.position = 'relative';\n        this._register(autorun((reader) => {\n            /** @description Update scroll dimensions */\n            const height = this._sizeObserver.height.read(reader);\n            this._elements.root.style.height = `${height}px`;\n            const totalHeight = this._totalHeight.read(reader);\n            this._elements.content.style.height = `${totalHeight}px`;\n            const width = this._sizeObserver.width.read(reader);\n            let scrollWidth = width;\n            const viewItems = this._viewItems.read(reader);\n            const max = findFirstMaxBy(viewItems, i => i.maxScroll.read(reader).maxScroll);\n            if (max) {\n                const maxScroll = max.maxScroll.read(reader);\n                scrollWidth = width + maxScroll.maxScroll;\n            }\n            this._scrollableElement.setScrollDimensions({\n                width: width,\n                height: height,\n                scrollHeight: totalHeight,\n                scrollWidth,\n            });\n        }));\n        _element.replaceChildren(this._scrollableElement.getDomNode());\n        this._register(toDisposable(() => {\n            _element.replaceChildren();\n        }));\n        this._register(this._register(autorun(reader => {\n            /** @description Render all */\n            globalTransaction(tx => {\n                this.render(reader);\n            });\n        })));\n    }\n    render(reader) {\n        const scrollTop = this.scrollTop.read(reader);\n        let contentScrollOffsetToScrollOffset = 0;\n        let itemHeightSumBefore = 0;\n        let itemContentHeightSumBefore = 0;\n        const viewPortHeight = this._sizeObserver.height.read(reader);\n        const contentViewPort = OffsetRange.ofStartAndLength(scrollTop, viewPortHeight);\n        const width = this._sizeObserver.width.read(reader);\n        for (const v of this._viewItems.read(reader)) {\n            const itemContentHeight = v.contentHeight.read(reader);\n            const itemHeight = Math.min(itemContentHeight, viewPortHeight);\n            const itemRange = OffsetRange.ofStartAndLength(itemHeightSumBefore, itemHeight);\n            const itemContentRange = OffsetRange.ofStartAndLength(itemContentHeightSumBefore, itemContentHeight);\n            if (itemContentRange.isBefore(contentViewPort)) {\n                contentScrollOffsetToScrollOffset -= itemContentHeight - itemHeight;\n                v.hide();\n            }\n            else if (itemContentRange.isAfter(contentViewPort)) {\n                v.hide();\n            }\n            else {\n                const scroll = Math.max(0, Math.min(contentViewPort.start - itemContentRange.start, itemContentHeight - itemHeight));\n                contentScrollOffsetToScrollOffset -= scroll;\n                const viewPort = OffsetRange.ofStartAndLength(scrollTop + contentScrollOffsetToScrollOffset, viewPortHeight);\n                v.render(itemRange, scroll, width, viewPort);\n            }\n            itemHeightSumBefore += itemHeight + this._spaceBetweenPx;\n            itemContentHeightSumBefore += itemContentHeight + this._spaceBetweenPx;\n        }\n        this._elements.content.style.transform = `translateY(${-(scrollTop + contentScrollOffsetToScrollOffset)}px)`;\n    }\n};\nMultiDiffEditorWidgetImpl = __decorate([\n    __param(4, IContextKeyService),\n    __param(5, IInstantiationService)\n], MultiDiffEditorWidgetImpl);\nexport { MultiDiffEditorWidgetImpl };\nclass VirtualizedViewItem extends Disposable {\n    constructor(viewModel, _objectPool, _scrollLeft, _deltaScrollVertical) {\n        super();\n        this.viewModel = viewModel;\n        this._objectPool = _objectPool;\n        this._scrollLeft = _scrollLeft;\n        this._deltaScrollVertical = _deltaScrollVertical;\n        this._templateRef = this._register(disposableObservableValue(this, undefined));\n        this.contentHeight = derived(this, reader => { var _a, _b, _c; return (_c = (_b = (_a = this._templateRef.read(reader)) === null || _a === void 0 ? void 0 : _a.object.contentHeight) === null || _b === void 0 ? void 0 : _b.read(reader)) !== null && _c !== void 0 ? _c : this.viewModel.lastTemplateData.read(reader).contentHeight; });\n        this.maxScroll = derived(this, reader => { var _a, _b; return (_b = (_a = this._templateRef.read(reader)) === null || _a === void 0 ? void 0 : _a.object.maxScroll.read(reader)) !== null && _b !== void 0 ? _b : { maxScroll: 0, scrollWidth: 0 }; });\n        this.template = derived(this, reader => { var _a; return (_a = this._templateRef.read(reader)) === null || _a === void 0 ? void 0 : _a.object; });\n        this._isHidden = observableValue(this, false);\n        this._register(autorun((reader) => {\n            var _a;\n            const scrollLeft = this._scrollLeft.read(reader);\n            (_a = this._templateRef.read(reader)) === null || _a === void 0 ? void 0 : _a.object.setScrollLeft(scrollLeft);\n        }));\n        this._register(autorun(reader => {\n            const ref = this._templateRef.read(reader);\n            if (!ref) {\n                return;\n            }\n            const isHidden = this._isHidden.read(reader);\n            if (!isHidden) {\n                return;\n            }\n            const isFocused = ref.object.isFocused.read(reader);\n            if (isFocused) {\n                return;\n            }\n            this._clear();\n        }));\n    }\n    dispose() {\n        this._clear();\n        super.dispose();\n    }\n    toString() {\n        var _a;\n        return `VirtualViewItem(${(_a = this.viewModel.entry.value.modified) === null || _a === void 0 ? void 0 : _a.uri.toString()})`;\n    }\n    getKey() {\n        return this.viewModel.getKey();\n    }\n    setViewState(viewState, tx) {\n        var _a;\n        this.viewModel.collapsed.set(viewState.collapsed, tx);\n        this._updateTemplateData(tx);\n        const data = this.viewModel.lastTemplateData.get();\n        const selections = (_a = viewState.selections) === null || _a === void 0 ? void 0 : _a.map(Selection.liftSelection);\n        this.viewModel.lastTemplateData.set({\n            ...data,\n            selections,\n        }, tx);\n        const ref = this._templateRef.get();\n        if (ref) {\n            if (selections) {\n                ref.object.editor.setSelections(selections);\n            }\n        }\n    }\n    _updateTemplateData(tx) {\n        var _a;\n        const ref = this._templateRef.get();\n        if (!ref) {\n            return;\n        }\n        this.viewModel.lastTemplateData.set({\n            contentHeight: ref.object.contentHeight.get(),\n            selections: (_a = ref.object.editor.getSelections()) !== null && _a !== void 0 ? _a : undefined,\n        }, tx);\n    }\n    _clear() {\n        const ref = this._templateRef.get();\n        if (!ref) {\n            return;\n        }\n        transaction(tx => {\n            this._updateTemplateData(tx);\n            ref.object.hide();\n            this._templateRef.set(undefined, tx);\n        });\n    }\n    hide() {\n        this._isHidden.set(true, undefined);\n    }\n    render(verticalSpace, offset, width, viewPort) {\n        this._isHidden.set(false, undefined);\n        let ref = this._templateRef.get();\n        if (!ref) {\n            ref = this._objectPool.getUnusedObj(new TemplateData(this.viewModel, this._deltaScrollVertical));\n            this._templateRef.set(ref, undefined);\n            const selections = this.viewModel.lastTemplateData.get().selections;\n            if (selections) {\n                ref.object.editor.setSelections(selections);\n            }\n        }\n        ref.object.render(verticalSpace, width, offset, viewPort);\n    }\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { h } from '../../../../base/browser/dom.js';\nimport { Button } from '../../../../base/browser/ui/button/button.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { autorun, derived, observableFromEvent } from '../../../../base/common/observable.js';\nimport { globalTransaction, observableValue } from '../../../../base/common/observableInternal/base.js';\nimport { DiffEditorWidget } from '../diffEditor/diffEditorWidget.js';\nimport { MenuWorkbenchToolBar } from '../../../../platform/actions/browser/toolbar.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ActionRunnerWithContext } from './utils.js';\nimport { createActionViewItem } from '../../../../platform/actions/browser/menuEntryActionViewItem.js';\nexport class TemplateData {\n    constructor(viewModel, deltaScrollVertical) {\n        this.viewModel = viewModel;\n        this.deltaScrollVertical = deltaScrollVertical;\n    }\n    getId() {\n        return this.viewModel;\n    }\n}\nlet DiffEditorItemTemplate = class DiffEditorItemTemplate extends Disposable {\n    constructor(_container, _overflowWidgetsDomNode, _workbenchUIElementFactory, _instantiationService) {\n        super();\n        this._container = _container;\n        this._overflowWidgetsDomNode = _overflowWidgetsDomNode;\n        this._workbenchUIElementFactory = _workbenchUIElementFactory;\n        this._instantiationService = _instantiationService;\n        this._viewModel = observableValue(this, undefined);\n        this._collapsed = derived(this, reader => { var _a; return (_a = this._viewModel.read(reader)) === null || _a === void 0 ? void 0 : _a.collapsed.read(reader); });\n        this._editorContentHeight = observableValue(this, 500);\n        this.contentHeight = derived(this, reader => {\n            const h = this._collapsed.read(reader) ? 0 : this._editorContentHeight.read(reader);\n            return h + this._outerEditorHeight;\n        });\n        this._modifiedContentWidth = observableValue(this, 0);\n        this._modifiedWidth = observableValue(this, 0);\n        this._originalContentWidth = observableValue(this, 0);\n        this._originalWidth = observableValue(this, 0);\n        this.maxScroll = derived(this, reader => {\n            const scroll1 = this._modifiedContentWidth.read(reader) - this._modifiedWidth.read(reader);\n            const scroll2 = this._originalContentWidth.read(reader) - this._originalWidth.read(reader);\n            if (scroll1 > scroll2) {\n                return { maxScroll: scroll1, width: this._modifiedWidth.read(reader) };\n            }\n            else {\n                return { maxScroll: scroll2, width: this._originalWidth.read(reader) };\n            }\n        });\n        this._elements = h('div.multiDiffEntry', [\n            h('div.header@header', [\n                h('div.header-content', [\n                    h('div.collapse-button@collapseButton'),\n                    h('div.file-path', [\n                        h('div.title.modified.show-file-icons@primaryPath', []),\n                        h('div.status.deleted@status', ['R']),\n                        h('div.title.original.show-file-icons@secondaryPath', []),\n                    ]),\n                    h('div.actions@actions'),\n                ]),\n            ]),\n            h('div.editorParent', [\n                h('div.editorContainer@editor'),\n            ])\n        ]);\n        this.editor = this._register(this._instantiationService.createInstance(DiffEditorWidget, this._elements.editor, {\n            overflowWidgetsDomNode: this._overflowWidgetsDomNode,\n        }, {}));\n        this.isModifedFocused = isFocused(this.editor.getModifiedEditor());\n        this.isOriginalFocused = isFocused(this.editor.getOriginalEditor());\n        this.isFocused = derived(this, reader => this.isModifedFocused.read(reader) || this.isOriginalFocused.read(reader));\n        this._resourceLabel = this._workbenchUIElementFactory.createResourceLabel\n            ? this._register(this._workbenchUIElementFactory.createResourceLabel(this._elements.primaryPath))\n            : undefined;\n        this._resourceLabel2 = this._workbenchUIElementFactory.createResourceLabel\n            ? this._register(this._workbenchUIElementFactory.createResourceLabel(this._elements.secondaryPath))\n            : undefined;\n        this._dataStore = new DisposableStore();\n        this._headerHeight = 48;\n        this._lastScrollTop = -1;\n        this._isSettingScrollTop = false;\n        const btn = new Button(this._elements.collapseButton, {});\n        this._register(autorun(reader => {\n            btn.element.className = '';\n            btn.icon = this._collapsed.read(reader) ? Codicon.chevronRight : Codicon.chevronDown;\n        }));\n        this._register(btn.onDidClick(() => {\n            var _a;\n            (_a = this._viewModel.get()) === null || _a === void 0 ? void 0 : _a.collapsed.set(!this._collapsed.get(), undefined);\n        }));\n        this._register(autorun(reader => {\n            this._elements.editor.style.display = this._collapsed.read(reader) ? 'none' : 'block';\n        }));\n        this._register(this.editor.getModifiedEditor().onDidLayoutChange(e => {\n            const width = this.editor.getModifiedEditor().getLayoutInfo().contentWidth;\n            this._modifiedWidth.set(width, undefined);\n        }));\n        this._register(this.editor.getOriginalEditor().onDidLayoutChange(e => {\n            const width = this.editor.getOriginalEditor().getLayoutInfo().contentWidth;\n            this._originalWidth.set(width, undefined);\n        }));\n        this._register(this.editor.onDidContentSizeChange(e => {\n            globalTransaction(tx => {\n                this._editorContentHeight.set(e.contentHeight, tx);\n                this._modifiedContentWidth.set(this.editor.getModifiedEditor().getContentWidth(), tx);\n                this._originalContentWidth.set(this.editor.getOriginalEditor().getContentWidth(), tx);\n            });\n        }));\n        this._register(this.editor.getOriginalEditor().onDidScrollChange(e => {\n            if (this._isSettingScrollTop) {\n                return;\n            }\n            if (!e.scrollTopChanged || !this._data) {\n                return;\n            }\n            const delta = e.scrollTop - this._lastScrollTop;\n            this._data.deltaScrollVertical(delta);\n        }));\n        this._register(autorun(reader => {\n            const isFocused = this.isFocused.read(reader);\n            this._elements.root.classList.toggle('focused', isFocused);\n        }));\n        this._container.appendChild(this._elements.root);\n        this._outerEditorHeight = this._headerHeight;\n        this._register(this._instantiationService.createInstance(MenuWorkbenchToolBar, this._elements.actions, MenuId.MultiDiffEditorFileToolbar, {\n            actionRunner: this._register(new ActionRunnerWithContext(() => { var _a; return ((_a = this._viewModel.get()) === null || _a === void 0 ? void 0 : _a.modifiedUri); })),\n            menuOptions: {\n                shouldForwardArgs: true,\n            },\n            toolbarOptions: { primaryGroup: g => g.startsWith('navigation') },\n            actionViewItemProvider: (action, options) => createActionViewItem(_instantiationService, action, options),\n        }));\n    }\n    setScrollLeft(left) {\n        if (this._modifiedContentWidth.get() - this._modifiedWidth.get() > this._originalContentWidth.get() - this._originalWidth.get()) {\n            this.editor.getModifiedEditor().setScrollLeft(left);\n        }\n        else {\n            this.editor.getOriginalEditor().setScrollLeft(left);\n        }\n    }\n    setData(data) {\n        this._data = data;\n        function updateOptions(options) {\n            return {\n                ...options,\n                scrollBeyondLastLine: false,\n                hideUnchangedRegions: {\n                    enabled: true,\n                },\n                scrollbar: {\n                    vertical: 'hidden',\n                    horizontal: 'hidden',\n                    handleMouseWheel: false,\n                    useShadows: false,\n                },\n                renderOverviewRuler: false,\n                fixedOverflowWidgets: true,\n                overviewRulerBorder: false,\n            };\n        }\n        const value = data.viewModel.entry.value; // TODO\n        if (value.onOptionsDidChange) {\n            this._dataStore.add(value.onOptionsDidChange(() => {\n                var _a;\n                this.editor.updateOptions(updateOptions((_a = value.options) !== null && _a !== void 0 ? _a : {}));\n            }));\n        }\n        globalTransaction(tx => {\n            var _a, _b, _c, _d;\n            (_a = this._resourceLabel) === null || _a === void 0 ? void 0 : _a.setUri((_b = data.viewModel.modifiedUri) !== null && _b !== void 0 ? _b : data.viewModel.originalUri, { strikethrough: data.viewModel.modifiedUri === undefined });\n            let isRenamed = false;\n            let isDeleted = false;\n            let isAdded = false;\n            let flag = '';\n            if (data.viewModel.modifiedUri && data.viewModel.originalUri && data.viewModel.modifiedUri.path !== data.viewModel.originalUri.path) {\n                flag = 'R';\n                isRenamed = true;\n            }\n            else if (!data.viewModel.modifiedUri) {\n                flag = 'D';\n                isDeleted = true;\n            }\n            else if (!data.viewModel.originalUri) {\n                flag = 'A';\n                isAdded = true;\n            }\n            this._elements.status.classList.toggle('renamed', isRenamed);\n            this._elements.status.classList.toggle('deleted', isDeleted);\n            this._elements.status.classList.toggle('added', isAdded);\n            this._elements.status.innerText = flag;\n            (_c = this._resourceLabel2) === null || _c === void 0 ? void 0 : _c.setUri(isRenamed ? data.viewModel.originalUri : undefined, { strikethrough: true });\n            this._dataStore.clear();\n            this._viewModel.set(data.viewModel, tx);\n            this.editor.setModel(data.viewModel.diffEditorViewModel, tx);\n            this.editor.updateOptions(updateOptions((_d = value.options) !== null && _d !== void 0 ? _d : {}));\n        });\n    }\n    render(verticalRange, width, editorScroll, viewPort) {\n        this._elements.root.style.visibility = 'visible';\n        this._elements.root.style.top = `${verticalRange.start}px`;\n        this._elements.root.style.height = `${verticalRange.length}px`;\n        this._elements.root.style.width = `${width}px`;\n        this._elements.root.style.position = 'absolute';\n        // For sticky scroll\n        const maxDelta = verticalRange.length - this._headerHeight;\n        const delta = Math.max(0, Math.min(viewPort.start - verticalRange.start, maxDelta));\n        this._elements.header.style.transform = `translateY(${delta}px)`;\n        globalTransaction(tx => {\n            this.editor.layout({\n                width: width - 2 * 8 - 2 * 1,\n                height: verticalRange.length - this._outerEditorHeight,\n            });\n        });\n        try {\n            this._isSettingScrollTop = true;\n            this._lastScrollTop = editorScroll;\n            this.editor.getOriginalEditor().setScrollTop(editorScroll);\n        }\n        finally {\n            this._isSettingScrollTop = false;\n        }\n        this._elements.header.classList.toggle('shadow', delta > 0 || editorScroll > 0);\n        this._elements.header.classList.toggle('collapsed', delta === maxDelta);\n    }\n    hide() {\n        this._elements.root.style.top = `-100000px`;\n        this._elements.root.style.visibility = 'hidden'; // Some editor parts are still visible\n    }\n};\nDiffEditorItemTemplate = __decorate([\n    __param(3, IInstantiationService)\n], DiffEditorItemTemplate);\nexport { DiffEditorItemTemplate };\nfunction isFocused(editor) {\n    return observableFromEvent(h => {\n        const store = new DisposableStore();\n        store.add(editor.onDidFocusEditorWidget(() => h(true)));\n        store.add(editor.onDidBlurEditorWidget(() => h(false)));\n        return store;\n    }, () => editor.hasWidgetFocus());\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { addDisposableListener, getWindow } from '../../../base/browser/dom.js';\nimport { StandardMouseEvent } from '../../../base/browser/mouseEvent.js';\nimport { ToolBar } from '../../../base/browser/ui/toolbar/toolbar.js';\nimport { Separator, toAction } from '../../../base/common/actions.js';\nimport { coalesceInPlace } from '../../../base/common/arrays.js';\nimport { intersection } from '../../../base/common/collections.js';\nimport { BugIndicatingError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Iterable } from '../../../base/common/iterator.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { localize } from '../../../nls.js';\nimport { createAndFillInActionBarActions } from './menuEntryActionViewItem.js';\nimport { IMenuService, MenuItemAction, SubmenuItemAction } from '../common/actions.js';\nimport { IContextKeyService } from '../../contextkey/common/contextkey.js';\nimport { IContextMenuService } from '../../contextview/browser/contextView.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\n/**\n * The `WorkbenchToolBar` does\n * - support hiding of menu items\n * - lookup keybindings for each actions automatically\n * - send `workbenchActionExecuted`-events for each action\n *\n * See {@link MenuWorkbenchToolBar} for a toolbar that is backed by a menu.\n */\nlet WorkbenchToolBar = class WorkbenchToolBar extends ToolBar {\n    constructor(container, _options, _menuService, _contextKeyService, _contextMenuService, keybindingService, telemetryService) {\n        super(container, _contextMenuService, {\n            // defaults\n            getKeyBinding: (action) => { var _a; return (_a = keybindingService.lookupKeybinding(action.id)) !== null && _a !== void 0 ? _a : undefined; },\n            // options (override defaults)\n            ..._options,\n            // mandatory (overide options)\n            allowContextMenu: true,\n            skipTelemetry: typeof (_options === null || _options === void 0 ? void 0 : _options.telemetrySource) === 'string',\n        });\n        this._options = _options;\n        this._menuService = _menuService;\n        this._contextKeyService = _contextKeyService;\n        this._contextMenuService = _contextMenuService;\n        this._sessionDisposables = this._store.add(new DisposableStore());\n        // telemetry logic\n        const telemetrySource = _options === null || _options === void 0 ? void 0 : _options.telemetrySource;\n        if (telemetrySource) {\n            this._store.add(this.actionBar.onDidRun(e => telemetryService.publicLog2('workbenchActionExecuted', { id: e.action.id, from: telemetrySource })));\n        }\n    }\n    setActions(_primary, _secondary = [], menuIds) {\n        var _a, _b, _c;\n        this._sessionDisposables.clear();\n        const primary = _primary.slice(); // for hiding and overflow we set some items to undefined\n        const secondary = _secondary.slice();\n        const toggleActions = [];\n        let toggleActionsCheckedCount = 0;\n        const extraSecondary = [];\n        let someAreHidden = false;\n        // unless disabled, move all hidden items to secondary group or ignore them\n        if (((_a = this._options) === null || _a === void 0 ? void 0 : _a.hiddenItemStrategy) !== -1 /* HiddenItemStrategy.NoHide */) {\n            for (let i = 0; i < primary.length; i++) {\n                const action = primary[i];\n                if (!(action instanceof MenuItemAction) && !(action instanceof SubmenuItemAction)) {\n                    // console.warn(`Action ${action.id}/${action.label} is not a MenuItemAction`);\n                    continue;\n                }\n                if (!action.hideActions) {\n                    continue;\n                }\n                // collect all toggle actions\n                toggleActions.push(action.hideActions.toggle);\n                if (action.hideActions.toggle.checked) {\n                    toggleActionsCheckedCount++;\n                }\n                // hidden items move into overflow or ignore\n                if (action.hideActions.isHidden) {\n                    someAreHidden = true;\n                    primary[i] = undefined;\n                    if (((_b = this._options) === null || _b === void 0 ? void 0 : _b.hiddenItemStrategy) !== 0 /* HiddenItemStrategy.Ignore */) {\n                        extraSecondary[i] = action;\n                    }\n                }\n            }\n        }\n        // count for max\n        if (((_c = this._options) === null || _c === void 0 ? void 0 : _c.overflowBehavior) !== undefined) {\n            const exemptedIds = intersection(new Set(this._options.overflowBehavior.exempted), Iterable.map(primary, a => a === null || a === void 0 ? void 0 : a.id));\n            const maxItems = this._options.overflowBehavior.maxItems - exemptedIds.size;\n            let count = 0;\n            for (let i = 0; i < primary.length; i++) {\n                const action = primary[i];\n                if (!action) {\n                    continue;\n                }\n                count++;\n                if (exemptedIds.has(action.id)) {\n                    continue;\n                }\n                if (count >= maxItems) {\n                    primary[i] = undefined;\n                    extraSecondary[i] = action;\n                }\n            }\n        }\n        // coalesce turns Array<IAction|undefined> into IAction[]\n        coalesceInPlace(primary);\n        coalesceInPlace(extraSecondary);\n        super.setActions(primary, Separator.join(extraSecondary, secondary));\n        // add context menu for toggle actions\n        if (toggleActions.length > 0) {\n            this._sessionDisposables.add(addDisposableListener(this.getElement(), 'contextmenu', e => {\n                var _a, _b, _c, _d, _e;\n                const event = new StandardMouseEvent(getWindow(this.getElement()), e);\n                const action = this.getItemAction(event.target);\n                if (!(action)) {\n                    return;\n                }\n                event.preventDefault();\n                event.stopPropagation();\n                let noHide = false;\n                // last item cannot be hidden when using ignore strategy\n                if (toggleActionsCheckedCount === 1 && ((_a = this._options) === null || _a === void 0 ? void 0 : _a.hiddenItemStrategy) === 0 /* HiddenItemStrategy.Ignore */) {\n                    noHide = true;\n                    for (let i = 0; i < toggleActions.length; i++) {\n                        if (toggleActions[i].checked) {\n                            toggleActions[i] = toAction({\n                                id: action.id,\n                                label: action.label,\n                                checked: true,\n                                enabled: false,\n                                run() { }\n                            });\n                            break; // there is only one\n                        }\n                    }\n                }\n                // add \"hide foo\" actions\n                let hideAction;\n                if (!noHide && (action instanceof MenuItemAction || action instanceof SubmenuItemAction)) {\n                    if (!action.hideActions) {\n                        // no context menu for MenuItemAction instances that support no hiding\n                        // those are fake actions and need to be cleaned up\n                        return;\n                    }\n                    hideAction = action.hideActions.hide;\n                }\n                else {\n                    hideAction = toAction({\n                        id: 'label',\n                        label: localize('hide', \"Hide\"),\n                        enabled: false,\n                        run() { }\n                    });\n                }\n                const actions = Separator.join([hideAction], toggleActions);\n                // add \"Reset Menu\" action\n                if (((_b = this._options) === null || _b === void 0 ? void 0 : _b.resetMenu) && !menuIds) {\n                    menuIds = [this._options.resetMenu];\n                }\n                if (someAreHidden && menuIds) {\n                    actions.push(new Separator());\n                    actions.push(toAction({\n                        id: 'resetThisMenu',\n                        label: localize('resetThisMenu', \"Reset Menu\"),\n                        run: () => this._menuService.resetHiddenStates(menuIds)\n                    }));\n                }\n                this._contextMenuService.showContextMenu({\n                    getAnchor: () => event,\n                    getActions: () => actions,\n                    // add context menu actions (iff appicable)\n                    menuId: (_c = this._options) === null || _c === void 0 ? void 0 : _c.contextMenu,\n                    menuActionOptions: { renderShortTitle: true, ...(_d = this._options) === null || _d === void 0 ? void 0 : _d.menuOptions },\n                    skipTelemetry: typeof ((_e = this._options) === null || _e === void 0 ? void 0 : _e.telemetrySource) === 'string',\n                    contextKeyService: this._contextKeyService,\n                });\n            }));\n        }\n    }\n};\nWorkbenchToolBar = __decorate([\n    __param(2, IMenuService),\n    __param(3, IContextKeyService),\n    __param(4, IContextMenuService),\n    __param(5, IKeybindingService),\n    __param(6, ITelemetryService)\n], WorkbenchToolBar);\nexport { WorkbenchToolBar };\n/**\n * A {@link WorkbenchToolBar workbench toolbar} that is purely driven from a {@link MenuId menu}-identifier.\n *\n * *Note* that Manual updates via `setActions` are NOT supported.\n */\nlet MenuWorkbenchToolBar = class MenuWorkbenchToolBar extends WorkbenchToolBar {\n    constructor(container, menuId, options, menuService, contextKeyService, contextMenuService, keybindingService, telemetryService) {\n        super(container, { resetMenu: menuId, ...options }, menuService, contextKeyService, contextMenuService, keybindingService, telemetryService);\n        this._onDidChangeMenuItems = this._store.add(new Emitter());\n        // update logic\n        const menu = this._store.add(menuService.createMenu(menuId, contextKeyService, { emitEventsForSubmenuChanges: true }));\n        const updateToolbar = () => {\n            var _a, _b, _c;\n            const primary = [];\n            const secondary = [];\n            createAndFillInActionBarActions(menu, options === null || options === void 0 ? void 0 : options.menuOptions, { primary, secondary }, (_a = options === null || options === void 0 ? void 0 : options.toolbarOptions) === null || _a === void 0 ? void 0 : _a.primaryGroup, (_b = options === null || options === void 0 ? void 0 : options.toolbarOptions) === null || _b === void 0 ? void 0 : _b.shouldInlineSubmenu, (_c = options === null || options === void 0 ? void 0 : options.toolbarOptions) === null || _c === void 0 ? void 0 : _c.useSeparatorsInPrimaryActions);\n            container.classList.toggle('has-no-actions', primary.length === 0 && secondary.length === 0);\n            super.setActions(primary, secondary);\n        };\n        this._store.add(menu.onDidChange(() => {\n            updateToolbar();\n            this._onDidChangeMenuItems.fire(this);\n        }));\n        updateToolbar();\n    }\n    /**\n     * @deprecated The WorkbenchToolBar does not support this method because it works with menus.\n     */\n    setActions() {\n        throw new BugIndicatingError('This toolbar is populated from a menu.');\n    }\n};\nMenuWorkbenchToolBar = __decorate([\n    __param(3, IMenuService),\n    __param(4, IContextKeyService),\n    __param(5, IContextMenuService),\n    __param(6, IKeybindingService),\n    __param(7, ITelemetryService)\n], MenuWorkbenchToolBar);\nexport { MenuWorkbenchToolBar };\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ActionBar } from '../actionbar/actionbar.js';\nimport { DropdownMenuActionViewItem } from '../dropdown/dropdownActionViewItem.js';\nimport { Action, SubmenuAction } from '../../../common/actions.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport { ThemeIcon } from '../../../common/themables.js';\nimport { EventMultiplexer } from '../../../common/event.js';\nimport { Disposable, DisposableStore } from '../../../common/lifecycle.js';\nimport './toolbar.css';\nimport * as nls from '../../../../nls.js';\nimport { getDefaultHoverDelegate } from '../hover/hoverDelegate.js';\n/**\n * A widget that combines an action bar for primary actions and a dropdown for secondary actions.\n */\nexport class ToolBar extends Disposable {\n    constructor(container, contextMenuProvider, options = { orientation: 0 /* ActionsOrientation.HORIZONTAL */ }) {\n        var _a;\n        super();\n        this.submenuActionViewItems = [];\n        this.hasSecondaryActions = false;\n        this._onDidChangeDropdownVisibility = this._register(new EventMultiplexer());\n        this.onDidChangeDropdownVisibility = this._onDidChangeDropdownVisibility.event;\n        this.disposables = this._register(new DisposableStore());\n        options.hoverDelegate = (_a = options.hoverDelegate) !== null && _a !== void 0 ? _a : this._register(getDefaultHoverDelegate('element', true));\n        this.options = options;\n        this.lookupKeybindings = typeof this.options.getKeyBinding === 'function';\n        this.toggleMenuAction = this._register(new ToggleMenuAction(() => { var _a; return (_a = this.toggleMenuActionViewItem) === null || _a === void 0 ? void 0 : _a.show(); }, options.toggleMenuTitle));\n        this.element = document.createElement('div');\n        this.element.className = 'monaco-toolbar';\n        container.appendChild(this.element);\n        this.actionBar = this._register(new ActionBar(this.element, {\n            orientation: options.orientation,\n            ariaLabel: options.ariaLabel,\n            actionRunner: options.actionRunner,\n            allowContextMenu: options.allowContextMenu,\n            highlightToggledItems: options.highlightToggledItems,\n            hoverDelegate: options.hoverDelegate,\n            actionViewItemProvider: (action, viewItemOptions) => {\n                var _a;\n                if (action.id === ToggleMenuAction.ID) {\n                    this.toggleMenuActionViewItem = new DropdownMenuActionViewItem(action, action.menuActions, contextMenuProvider, {\n                        actionViewItemProvider: this.options.actionViewItemProvider,\n                        actionRunner: this.actionRunner,\n                        keybindingProvider: this.options.getKeyBinding,\n                        classNames: ThemeIcon.asClassNameArray((_a = options.moreIcon) !== null && _a !== void 0 ? _a : Codicon.toolBarMore),\n                        anchorAlignmentProvider: this.options.anchorAlignmentProvider,\n                        menuAsChild: !!this.options.renderDropdownAsChildElement,\n                        skipTelemetry: this.options.skipTelemetry,\n                        isMenu: true,\n                        hoverDelegate: this.options.hoverDelegate\n                    });\n                    this.toggleMenuActionViewItem.setActionContext(this.actionBar.context);\n                    this.disposables.add(this._onDidChangeDropdownVisibility.add(this.toggleMenuActionViewItem.onDidChangeVisibility));\n                    return this.toggleMenuActionViewItem;\n                }\n                if (options.actionViewItemProvider) {\n                    const result = options.actionViewItemProvider(action, viewItemOptions);\n                    if (result) {\n                        return result;\n                    }\n                }\n                if (action instanceof SubmenuAction) {\n                    const result = new DropdownMenuActionViewItem(action, action.actions, contextMenuProvider, {\n                        actionViewItemProvider: this.options.actionViewItemProvider,\n                        actionRunner: this.actionRunner,\n                        keybindingProvider: this.options.getKeyBinding,\n                        classNames: action.class,\n                        anchorAlignmentProvider: this.options.anchorAlignmentProvider,\n                        menuAsChild: !!this.options.renderDropdownAsChildElement,\n                        skipTelemetry: this.options.skipTelemetry,\n                        hoverDelegate: this.options.hoverDelegate\n                    });\n                    result.setActionContext(this.actionBar.context);\n                    this.submenuActionViewItems.push(result);\n                    this.disposables.add(this._onDidChangeDropdownVisibility.add(result.onDidChangeVisibility));\n                    return result;\n                }\n                return undefined;\n            }\n        }));\n    }\n    set actionRunner(actionRunner) {\n        this.actionBar.actionRunner = actionRunner;\n    }\n    get actionRunner() {\n        return this.actionBar.actionRunner;\n    }\n    getElement() {\n        return this.element;\n    }\n    getItemAction(indexOrElement) {\n        return this.actionBar.getAction(indexOrElement);\n    }\n    setActions(primaryActions, secondaryActions) {\n        this.clear();\n        const primaryActionsToSet = primaryActions ? primaryActions.slice(0) : [];\n        // Inject additional action to open secondary actions if present\n        this.hasSecondaryActions = !!(secondaryActions && secondaryActions.length > 0);\n        if (this.hasSecondaryActions && secondaryActions) {\n            this.toggleMenuAction.menuActions = secondaryActions.slice(0);\n            primaryActionsToSet.push(this.toggleMenuAction);\n        }\n        primaryActionsToSet.forEach(action => {\n            this.actionBar.push(action, { icon: true, label: false, keybinding: this.getKeybindingLabel(action) });\n        });\n    }\n    getKeybindingLabel(action) {\n        var _a, _b, _c;\n        const key = this.lookupKeybindings ? (_b = (_a = this.options).getKeyBinding) === null || _b === void 0 ? void 0 : _b.call(_a, action) : undefined;\n        return (_c = key === null || key === void 0 ? void 0 : key.getLabel()) !== null && _c !== void 0 ? _c : undefined;\n    }\n    clear() {\n        this.submenuActionViewItems = [];\n        this.disposables.clear();\n        this.actionBar.clear();\n    }\n    dispose() {\n        this.clear();\n        this.disposables.dispose();\n        super.dispose();\n    }\n}\nexport class ToggleMenuAction extends Action {\n    constructor(toggleDropdownMenu, title) {\n        title = title || nls.localize('moreActions', \"More Actions...\");\n        super(ToggleMenuAction.ID, title, undefined, true);\n        this._menuActions = [];\n        this.toggleDropdownMenu = toggleDropdownMenu;\n    }\n    async run() {\n        this.toggleDropdownMenu();\n    }\n    get menuActions() {\n        return this._menuActions;\n    }\n    set menuActions(actions) {\n        this._menuActions = actions;\n    }\n}\nToggleMenuAction.ID = 'toolbar.toggle.more';\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ActionRunner } from '../../../../base/common/actions.js';\nexport class ActionRunnerWithContext extends ActionRunner {\n    constructor(_getContext) {\n        super();\n        this._getContext = _getContext;\n    }\n    runAction(action, _context) {\n        return super.runAction(action, this._getContext());\n    }\n}\n", "export class ObjectPool {\n    constructor(_create) {\n        this._create = _create;\n        this._unused = new Set();\n        this._used = new Set();\n        this._itemData = new Map();\n    }\n    getUnusedObj(data) {\n        var _a;\n        let obj;\n        if (this._unused.size === 0) {\n            obj = this._create(data);\n            this._itemData.set(obj, data);\n        }\n        else {\n            const values = [...this._unused.values()];\n            obj = (_a = values.find(obj => this._itemData.get(obj).getId() === data.getId())) !== null && _a !== void 0 ? _a : values[0];\n            this._unused.delete(obj);\n            this._itemData.set(obj, data);\n            obj.setData(data);\n        }\n        this._used.add(obj);\n        return {\n            object: obj,\n            dispose: () => {\n                this._used.delete(obj);\n                if (this._unused.size > 5) {\n                    obj.dispose();\n                }\n                else {\n                    this._unused.add(obj);\n                }\n            }\n        };\n    }\n    dispose() {\n        for (const obj of this._used) {\n            obj.dispose();\n        }\n        for (const obj of this._unused) {\n            obj.dispose();\n        }\n        this._used.clear();\n        this._unused.clear();\n    }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { localize } from '../../../../nls.js';\nimport { registerColor } from '../../../../platform/theme/common/colorRegistry.js';\nexport const multiDiffEditorHeaderBackground = registerColor('multiDiffEditor.headerBackground', { dark: '#262626', light: 'tab.inactiveBackground', hcDark: 'tab.inactiveBackground', hcLight: 'tab.inactiveBackground', }, localize('multiDiffEditor.headerBackground', 'The background color of the diff editor\\'s header'));\nexport const multiDiffEditorBackground = registerColor('multiDiffEditor.background', { dark: 'editorBackground', light: 'editorBackground', hcDark: 'editorBackground', hcLight: 'editorBackground', }, localize('multiDiffEditor.background', 'The background color of the multi file diff editor'));\nexport const multiDiffEditorBorder = registerColor('multiDiffEditor.border', { dark: 'sideBarSectionHeader.border', light: '#cccccc', hcDark: 'sideBarSectionHeader.border', hcLight: '#cccccc', }, localize('multiDiffEditor.border', 'The border color of the multi file diff editor'));\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Color } from '../../../base/common/color.js';\nimport { Range } from '../../common/core/range.js';\nimport * as languages from '../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry.js';\nimport { ModesRegistry } from '../../common/languages/modesRegistry.js';\nimport { ILanguageService } from '../../common/languages/language.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { StandaloneServices } from './standaloneServices.js';\nimport { compile } from '../common/monarch/monarchCompile.js';\nimport { MonarchTokenizer } from '../common/monarch/monarchLexer.js';\nimport { IStandaloneThemeService } from '../common/standaloneTheme.js';\nimport { IMarkerService } from '../../../platform/markers/common/markers.js';\nimport { ILanguageFeaturesService } from '../../common/services/languageFeatures.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\n/**\n * Register information about a new language.\n */\nexport function register(language) {\n    // Intentionally using the `ModesRegistry` here to avoid\n    // instantiating services too quickly in the standalone editor.\n    ModesRegistry.registerLanguage(language);\n}\n/**\n * Get the information of all the registered languages.\n */\nexport function getLanguages() {\n    let result = [];\n    result = result.concat(ModesRegistry.getLanguages());\n    return result;\n}\nexport function getEncodedLanguageId(languageId) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    return languageService.languageIdCodec.encodeLanguageId(languageId);\n}\n/**\n * An event emitted when a language is associated for the first time with a text model.\n * @event\n */\nexport function onLanguage(languageId, callback) {\n    return StandaloneServices.withServices(() => {\n        const languageService = StandaloneServices.get(ILanguageService);\n        const disposable = languageService.onDidRequestRichLanguageFeatures((encounteredLanguageId) => {\n            if (encounteredLanguageId === languageId) {\n                // stop listening\n                disposable.dispose();\n                // invoke actual listener\n                callback();\n            }\n        });\n        return disposable;\n    });\n}\n/**\n * An event emitted when a language is associated for the first time with a text model or\n * when a language is encountered during the tokenization of another language.\n * @event\n */\nexport function onLanguageEncountered(languageId, callback) {\n    return StandaloneServices.withServices(() => {\n        const languageService = StandaloneServices.get(ILanguageService);\n        const disposable = languageService.onDidRequestBasicLanguageFeatures((encounteredLanguageId) => {\n            if (encounteredLanguageId === languageId) {\n                // stop listening\n                disposable.dispose();\n                // invoke actual listener\n                callback();\n            }\n        });\n        return disposable;\n    });\n}\n/**\n * Set the editing configuration for a language.\n */\nexport function setLanguageConfiguration(languageId, configuration) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    if (!languageService.isRegisteredLanguageId(languageId)) {\n        throw new Error(`Cannot set configuration for unknown language ${languageId}`);\n    }\n    const languageConfigurationService = StandaloneServices.get(ILanguageConfigurationService);\n    return languageConfigurationService.register(languageId, configuration, 100);\n}\n/**\n * @internal\n */\nexport class EncodedTokenizationSupportAdapter {\n    constructor(languageId, actual) {\n        this._languageId = languageId;\n        this._actual = actual;\n    }\n    dispose() {\n        // NOOP\n    }\n    getInitialState() {\n        return this._actual.getInitialState();\n    }\n    tokenize(line, hasEOL, state) {\n        if (typeof this._actual.tokenize === 'function') {\n            return TokenizationSupportAdapter.adaptTokenize(this._languageId, this._actual, line, state);\n        }\n        throw new Error('Not supported!');\n    }\n    tokenizeEncoded(line, hasEOL, state) {\n        const result = this._actual.tokenizeEncoded(line, state);\n        return new languages.EncodedTokenizationResult(result.tokens, result.endState);\n    }\n}\n/**\n * @internal\n */\nexport class TokenizationSupportAdapter {\n    constructor(_languageId, _actual, _languageService, _standaloneThemeService) {\n        this._languageId = _languageId;\n        this._actual = _actual;\n        this._languageService = _languageService;\n        this._standaloneThemeService = _standaloneThemeService;\n    }\n    dispose() {\n        // NOOP\n    }\n    getInitialState() {\n        return this._actual.getInitialState();\n    }\n    static _toClassicTokens(tokens, language) {\n        const result = [];\n        let previousStartIndex = 0;\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const t = tokens[i];\n            let startIndex = t.startIndex;\n            // Prevent issues stemming from a buggy external tokenizer.\n            if (i === 0) {\n                // Force first token to start at first index!\n                startIndex = 0;\n            }\n            else if (startIndex < previousStartIndex) {\n                // Force tokens to be after one another!\n                startIndex = previousStartIndex;\n            }\n            result[i] = new languages.Token(startIndex, t.scopes, language);\n            previousStartIndex = startIndex;\n        }\n        return result;\n    }\n    static adaptTokenize(language, actual, line, state) {\n        const actualResult = actual.tokenize(line, state);\n        const tokens = TokenizationSupportAdapter._toClassicTokens(actualResult.tokens, language);\n        let endState;\n        // try to save an object if possible\n        if (actualResult.endState.equals(state)) {\n            endState = state;\n        }\n        else {\n            endState = actualResult.endState;\n        }\n        return new languages.TokenizationResult(tokens, endState);\n    }\n    tokenize(line, hasEOL, state) {\n        return TokenizationSupportAdapter.adaptTokenize(this._languageId, this._actual, line, state);\n    }\n    _toBinaryTokens(languageIdCodec, tokens) {\n        const languageId = languageIdCodec.encodeLanguageId(this._languageId);\n        const tokenTheme = this._standaloneThemeService.getColorTheme().tokenTheme;\n        const result = [];\n        let resultLen = 0;\n        let previousStartIndex = 0;\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const t = tokens[i];\n            const metadata = tokenTheme.match(languageId, t.scopes) | 1024 /* MetadataConsts.BALANCED_BRACKETS_MASK */;\n            if (resultLen > 0 && result[resultLen - 1] === metadata) {\n                // same metadata\n                continue;\n            }\n            let startIndex = t.startIndex;\n            // Prevent issues stemming from a buggy external tokenizer.\n            if (i === 0) {\n                // Force first token to start at first index!\n                startIndex = 0;\n            }\n            else if (startIndex < previousStartIndex) {\n                // Force tokens to be after one another!\n                startIndex = previousStartIndex;\n            }\n            result[resultLen++] = startIndex;\n            result[resultLen++] = metadata;\n            previousStartIndex = startIndex;\n        }\n        const actualResult = new Uint32Array(resultLen);\n        for (let i = 0; i < resultLen; i++) {\n            actualResult[i] = result[i];\n        }\n        return actualResult;\n    }\n    tokenizeEncoded(line, hasEOL, state) {\n        const actualResult = this._actual.tokenize(line, state);\n        const tokens = this._toBinaryTokens(this._languageService.languageIdCodec, actualResult.tokens);\n        let endState;\n        // try to save an object if possible\n        if (actualResult.endState.equals(state)) {\n            endState = state;\n        }\n        else {\n            endState = actualResult.endState;\n        }\n        return new languages.EncodedTokenizationResult(tokens, endState);\n    }\n}\nfunction isATokensProvider(provider) {\n    return (typeof provider.getInitialState === 'function');\n}\nfunction isEncodedTokensProvider(provider) {\n    return 'tokenizeEncoded' in provider;\n}\nfunction isThenable(obj) {\n    return obj && typeof obj.then === 'function';\n}\n/**\n * Change the color map that is used for token colors.\n * Supported formats (hex): #RRGGBB, $RRGGBBAA, #RGB, #RGBA\n */\nexport function setColorMap(colorMap) {\n    const standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n    if (colorMap) {\n        const result = [null];\n        for (let i = 1, len = colorMap.length; i < len; i++) {\n            result[i] = Color.fromHex(colorMap[i]);\n        }\n        standaloneThemeService.setColorMapOverride(result);\n    }\n    else {\n        standaloneThemeService.setColorMapOverride(null);\n    }\n}\n/**\n * @internal\n */\nfunction createTokenizationSupportAdapter(languageId, provider) {\n    if (isEncodedTokensProvider(provider)) {\n        return new EncodedTokenizationSupportAdapter(languageId, provider);\n    }\n    else {\n        return new TokenizationSupportAdapter(languageId, provider, StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService));\n    }\n}\n/**\n * Register a tokens provider factory for a language. This tokenizer will be exclusive with a tokenizer\n * set using `setTokensProvider` or one created using `setMonarchTokensProvider`, but will work together\n * with a tokens provider set using `registerDocumentSemanticTokensProvider` or `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function registerTokensProviderFactory(languageId, factory) {\n    const adaptedFactory = new languages.LazyTokenizationSupport(async () => {\n        const result = await Promise.resolve(factory.create());\n        if (!result) {\n            return null;\n        }\n        if (isATokensProvider(result)) {\n            return createTokenizationSupportAdapter(languageId, result);\n        }\n        return new MonarchTokenizer(StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService), languageId, compile(languageId, result), StandaloneServices.get(IConfigurationService));\n    });\n    return languages.TokenizationRegistry.registerFactory(languageId, adaptedFactory);\n}\n/**\n * Set the tokens provider for a language (manual implementation). This tokenizer will be exclusive\n * with a tokenizer created using `setMonarchTokensProvider`, or with `registerTokensProviderFactory`,\n * but will work together with a tokens provider set using `registerDocumentSemanticTokensProvider`\n * or `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function setTokensProvider(languageId, provider) {\n    const languageService = StandaloneServices.get(ILanguageService);\n    if (!languageService.isRegisteredLanguageId(languageId)) {\n        throw new Error(`Cannot set tokens provider for unknown language ${languageId}`);\n    }\n    if (isThenable(provider)) {\n        return registerTokensProviderFactory(languageId, { create: () => provider });\n    }\n    return languages.TokenizationRegistry.register(languageId, createTokenizationSupportAdapter(languageId, provider));\n}\n/**\n * Set the tokens provider for a language (monarch implementation). This tokenizer will be exclusive\n * with a tokenizer set using `setTokensProvider`, or with `registerTokensProviderFactory`, but will\n * work together with a tokens provider set using `registerDocumentSemanticTokensProvider` or\n * `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function setMonarchTokensProvider(languageId, languageDef) {\n    const create = (languageDef) => {\n        return new MonarchTokenizer(StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService), languageId, compile(languageId, languageDef), StandaloneServices.get(IConfigurationService));\n    };\n    if (isThenable(languageDef)) {\n        return registerTokensProviderFactory(languageId, { create: () => languageDef });\n    }\n    return languages.TokenizationRegistry.register(languageId, create(languageDef));\n}\n/**\n * Register a reference provider (used by e.g. reference search).\n */\nexport function registerReferenceProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.referenceProvider.register(languageSelector, provider);\n}\n/**\n * Register a rename provider (used by e.g. rename symbol).\n */\nexport function registerRenameProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.renameProvider.register(languageSelector, provider);\n}\n/**\n * Register a new symbol-name provider (e.g., when a symbol is being renamed, show new possible symbol-names)\n */\nexport function registerNewSymbolNameProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.newSymbolNamesProvider.register(languageSelector, provider);\n}\n/**\n * Register a signature help provider (used by e.g. parameter hints).\n */\nexport function registerSignatureHelpProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.signatureHelpProvider.register(languageSelector, provider);\n}\n/**\n * Register a hover provider (used by e.g. editor hover).\n */\nexport function registerHoverProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.hoverProvider.register(languageSelector, {\n        provideHover: (model, position, token) => {\n            const word = model.getWordAtPosition(position);\n            return Promise.resolve(provider.provideHover(model, position, token)).then((value) => {\n                if (!value) {\n                    return undefined;\n                }\n                if (!value.range && word) {\n                    value.range = new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n                }\n                if (!value.range) {\n                    value.range = new Range(position.lineNumber, position.column, position.lineNumber, position.column);\n                }\n                return value;\n            });\n        }\n    });\n}\n/**\n * Register a document symbol provider (used by e.g. outline).\n */\nexport function registerDocumentSymbolProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.documentSymbolProvider.register(languageSelector, provider);\n}\n/**\n * Register a document highlight provider (used by e.g. highlight occurrences).\n */\nexport function registerDocumentHighlightProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.documentHighlightProvider.register(languageSelector, provider);\n}\n/**\n * Register an linked editing range provider.\n */\nexport function registerLinkedEditingRangeProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.linkedEditingRangeProvider.register(languageSelector, provider);\n}\n/**\n * Register a definition provider (used by e.g. go to definition).\n */\nexport function registerDefinitionProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.definitionProvider.register(languageSelector, provider);\n}\n/**\n * Register a implementation provider (used by e.g. go to implementation).\n */\nexport function registerImplementationProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.implementationProvider.register(languageSelector, provider);\n}\n/**\n * Register a type definition provider (used by e.g. go to type definition).\n */\nexport function registerTypeDefinitionProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.typeDefinitionProvider.register(languageSelector, provider);\n}\n/**\n * Register a code lens provider (used by e.g. inline code lenses).\n */\nexport function registerCodeLensProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.codeLensProvider.register(languageSelector, provider);\n}\n/**\n * Register a code action provider (used by e.g. quick fix).\n */\nexport function registerCodeActionProvider(languageSelector, provider, metadata) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.codeActionProvider.register(languageSelector, {\n        providedCodeActionKinds: metadata === null || metadata === void 0 ? void 0 : metadata.providedCodeActionKinds,\n        documentation: metadata === null || metadata === void 0 ? void 0 : metadata.documentation,\n        provideCodeActions: (model, range, context, token) => {\n            const markerService = StandaloneServices.get(IMarkerService);\n            const markers = markerService.read({ resource: model.uri }).filter(m => {\n                return Range.areIntersectingOrTouching(m, range);\n            });\n            return provider.provideCodeActions(model, range, { markers, only: context.only, trigger: context.trigger }, token);\n        },\n        resolveCodeAction: provider.resolveCodeAction\n    });\n}\n/**\n * Register a formatter that can handle only entire models.\n */\nexport function registerDocumentFormattingEditProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.documentFormattingEditProvider.register(languageSelector, provider);\n}\n/**\n * Register a formatter that can handle a range inside a model.\n */\nexport function registerDocumentRangeFormattingEditProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.documentRangeFormattingEditProvider.register(languageSelector, provider);\n}\n/**\n * Register a formatter than can do formatting as the user types.\n */\nexport function registerOnTypeFormattingEditProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.onTypeFormattingEditProvider.register(languageSelector, provider);\n}\n/**\n * Register a link provider that can find links in text.\n */\nexport function registerLinkProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.linkProvider.register(languageSelector, provider);\n}\n/**\n * Register a completion item provider (use by e.g. suggestions).\n */\nexport function registerCompletionItemProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.completionProvider.register(languageSelector, provider);\n}\n/**\n * Register a document color provider (used by Color Picker, Color Decorator).\n */\nexport function registerColorProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.colorProvider.register(languageSelector, provider);\n}\n/**\n * Register a folding range provider\n */\nexport function registerFoldingRangeProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.foldingRangeProvider.register(languageSelector, provider);\n}\n/**\n * Register a declaration provider\n */\nexport function registerDeclarationProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.declarationProvider.register(languageSelector, provider);\n}\n/**\n * Register a selection range provider\n */\nexport function registerSelectionRangeProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.selectionRangeProvider.register(languageSelector, provider);\n}\n/**\n * Register a document semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\nexport function registerDocumentSemanticTokensProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.documentSemanticTokensProvider.register(languageSelector, provider);\n}\n/**\n * Register a document range semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\nexport function registerDocumentRangeSemanticTokensProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.documentRangeSemanticTokensProvider.register(languageSelector, provider);\n}\n/**\n * Register an inline completions provider.\n */\nexport function registerInlineCompletionsProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.inlineCompletionsProvider.register(languageSelector, provider);\n}\nexport function registerInlineEditProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.inlineEditProvider.register(languageSelector, provider);\n}\n/**\n * Register an inlay hints provider.\n */\nexport function registerInlayHintsProvider(languageSelector, provider) {\n    const languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n    return languageFeaturesService.inlayHintsProvider.register(languageSelector, provider);\n}\n/**\n * @internal\n */\nexport function createMonacoLanguagesAPI() {\n    return {\n        register: register,\n        getLanguages: getLanguages,\n        onLanguage: onLanguage,\n        onLanguageEncountered: onLanguageEncountered,\n        getEncodedLanguageId: getEncodedLanguageId,\n        // provider methods\n        setLanguageConfiguration: setLanguageConfiguration,\n        setColorMap: setColorMap,\n        registerTokensProviderFactory: registerTokensProviderFactory,\n        setTokensProvider: setTokensProvider,\n        setMonarchTokensProvider: setMonarchTokensProvider,\n        registerReferenceProvider: registerReferenceProvider,\n        registerRenameProvider: registerRenameProvider,\n        registerNewSymbolNameProvider: registerNewSymbolNameProvider,\n        registerCompletionItemProvider: registerCompletionItemProvider,\n        registerSignatureHelpProvider: registerSignatureHelpProvider,\n        registerHoverProvider: registerHoverProvider,\n        registerDocumentSymbolProvider: registerDocumentSymbolProvider,\n        registerDocumentHighlightProvider: registerDocumentHighlightProvider,\n        registerLinkedEditingRangeProvider: registerLinkedEditingRangeProvider,\n        registerDefinitionProvider: registerDefinitionProvider,\n        registerImplementationProvider: registerImplementationProvider,\n        registerTypeDefinitionProvider: registerTypeDefinitionProvider,\n        registerCodeLensProvider: registerCodeLensProvider,\n        registerCodeActionProvider: registerCodeActionProvider,\n        registerDocumentFormattingEditProvider: registerDocumentFormattingEditProvider,\n        registerDocumentRangeFormattingEditProvider: registerDocumentRangeFormattingEditProvider,\n        registerOnTypeFormattingEditProvider: registerOnTypeFormattingEditProvider,\n        registerLinkProvider: registerLinkProvider,\n        registerColorProvider: registerColorProvider,\n        registerFoldingRangeProvider: registerFoldingRangeProvider,\n        registerDeclarationProvider: registerDeclarationProvider,\n        registerSelectionRangeProvider: registerSelectionRangeProvider,\n        registerDocumentSemanticTokensProvider: registerDocumentSemanticTokensProvider,\n        registerDocumentRangeSemanticTokensProvider: registerDocumentRangeSemanticTokensProvider,\n        registerInlineCompletionsProvider: registerInlineCompletionsProvider,\n        registerInlineEditProvider: registerInlineEditProvider,\n        registerInlayHintsProvider: registerInlayHintsProvider,\n        // enums\n        DocumentHighlightKind: standaloneEnums.DocumentHighlightKind,\n        CompletionItemKind: standaloneEnums.CompletionItemKind,\n        CompletionItemTag: standaloneEnums.CompletionItemTag,\n        CompletionItemInsertTextRule: standaloneEnums.CompletionItemInsertTextRule,\n        SymbolKind: standaloneEnums.SymbolKind,\n        SymbolTag: standaloneEnums.SymbolTag,\n        IndentAction: standaloneEnums.IndentAction,\n        CompletionTriggerKind: standaloneEnums.CompletionTriggerKind,\n        SignatureHelpTriggerKind: standaloneEnums.SignatureHelpTriggerKind,\n        InlayHintKind: standaloneEnums.InlayHintKind,\n        InlineCompletionTriggerKind: standaloneEnums.InlineCompletionTriggerKind,\n        InlineEditTriggerKind: standaloneEnums.InlineEditTriggerKind,\n        CodeActionTriggerType: standaloneEnums.CodeActionTriggerType,\n        NewSymbolNameTag: standaloneEnums.NewSymbolNameTag,\n        // classes\n        FoldingRangeKind: languages.FoldingRangeKind,\n        SelectedSuggestionInfo: languages.SelectedSuggestionInfo,\n    };\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*\n * This module only exports 'compile' which compiles a JSON language definition\n * into a typed and checked ILexer definition.\n */\nimport * as monarchCommon from './monarchCommon.js';\n/*\n * Type helpers\n *\n * Note: this is just for sanity checks on the JSON description which is\n * helpful for the programmer. No checks are done anymore once the lexer is\n * already 'compiled and checked'.\n *\n */\nfunction isArrayOf(elemType, obj) {\n    if (!obj) {\n        return false;\n    }\n    if (!(Array.isArray(obj))) {\n        return false;\n    }\n    for (const el of obj) {\n        if (!(elemType(el))) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction bool(prop, defValue) {\n    if (typeof prop === 'boolean') {\n        return prop;\n    }\n    return defValue;\n}\nfunction string(prop, defValue) {\n    if (typeof (prop) === 'string') {\n        return prop;\n    }\n    return defValue;\n}\nfunction arrayToHash(array) {\n    const result = {};\n    for (const e of array) {\n        result[e] = true;\n    }\n    return result;\n}\nfunction createKeywordMatcher(arr, caseInsensitive = false) {\n    if (caseInsensitive) {\n        arr = arr.map(function (x) { return x.toLowerCase(); });\n    }\n    const hash = arrayToHash(arr);\n    if (caseInsensitive) {\n        return function (word) {\n            return hash[word.toLowerCase()] !== undefined && hash.hasOwnProperty(word.toLowerCase());\n        };\n    }\n    else {\n        return function (word) {\n            return hash[word] !== undefined && hash.hasOwnProperty(word);\n        };\n    }\n}\n// Lexer helpers\n/**\n * Compiles a regular expression string, adding the 'i' flag if 'ignoreCase' is set, and the 'u' flag if 'unicode' is set.\n * Also replaces @\\w+ or sequences with the content of the specified attribute\n * @\\w+ replacement can be avoided by escaping `@` signs with another `@` sign.\n * @example /@attr/ will be replaced with the value of lexer[attr]\n * @example /@@text/ will not be replaced and will become /@text/.\n */\nfunction compileRegExp(lexer, str) {\n    // @@ must be interpreted as a literal @, so we replace all occurences of @@ with a placeholder character\n    str = str.replace(/@@/g, `\\x01`);\n    let n = 0;\n    let hadExpansion;\n    do {\n        hadExpansion = false;\n        str = str.replace(/@(\\w+)/g, function (s, attr) {\n            hadExpansion = true;\n            let sub = '';\n            if (typeof (lexer[attr]) === 'string') {\n                sub = lexer[attr];\n            }\n            else if (lexer[attr] && lexer[attr] instanceof RegExp) {\n                sub = lexer[attr].source;\n            }\n            else {\n                if (lexer[attr] === undefined) {\n                    throw monarchCommon.createError(lexer, 'language definition does not contain attribute \\'' + attr + '\\', used at: ' + str);\n                }\n                else {\n                    throw monarchCommon.createError(lexer, 'attribute reference \\'' + attr + '\\' must be a string, used at: ' + str);\n                }\n            }\n            return (monarchCommon.empty(sub) ? '' : '(?:' + sub + ')');\n        });\n        n++;\n    } while (hadExpansion && n < 5);\n    // handle escaped @@\n    str = str.replace(/\\x01/g, '@');\n    const flags = (lexer.ignoreCase ? 'i' : '') + (lexer.unicode ? 'u' : '');\n    return new RegExp(str, flags);\n}\n/**\n * Compiles guard functions for case matches.\n * This compiles 'cases' attributes into efficient match functions.\n *\n */\nfunction selectScrutinee(id, matches, state, num) {\n    if (num < 0) {\n        return id;\n    }\n    if (num < matches.length) {\n        return matches[num];\n    }\n    if (num >= 100) {\n        num = num - 100;\n        const parts = state.split('.');\n        parts.unshift(state);\n        if (num < parts.length) {\n            return parts[num];\n        }\n    }\n    return null;\n}\nfunction createGuard(lexer, ruleName, tkey, val) {\n    // get the scrutinee and pattern\n    let scrut = -1; // -1: $!, 0-99: $n, 100+n: $Sn\n    let oppat = tkey;\n    let matches = tkey.match(/^\\$(([sS]?)(\\d\\d?)|#)(.*)$/);\n    if (matches) {\n        if (matches[3]) { // if digits\n            scrut = parseInt(matches[3]);\n            if (matches[2]) {\n                scrut = scrut + 100; // if [sS] present\n            }\n        }\n        oppat = matches[4];\n    }\n    // get operator\n    let op = '~';\n    let pat = oppat;\n    if (!oppat || oppat.length === 0) {\n        op = '!=';\n        pat = '';\n    }\n    else if (/^\\w*$/.test(pat)) { // just a word\n        op = '==';\n    }\n    else {\n        matches = oppat.match(/^(@|!@|~|!~|==|!=)(.*)$/);\n        if (matches) {\n            op = matches[1];\n            pat = matches[2];\n        }\n    }\n    // set the tester function\n    let tester;\n    // special case a regexp that matches just words\n    if ((op === '~' || op === '!~') && /^(\\w|\\|)*$/.test(pat)) {\n        const inWords = createKeywordMatcher(pat.split('|'), lexer.ignoreCase);\n        tester = function (s) { return (op === '~' ? inWords(s) : !inWords(s)); };\n    }\n    else if (op === '@' || op === '!@') {\n        const words = lexer[pat];\n        if (!words) {\n            throw monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' is not defined, in rule: ' + ruleName);\n        }\n        if (!(isArrayOf(function (elem) { return (typeof (elem) === 'string'); }, words))) {\n            throw monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' must be an array of strings, in rule: ' + ruleName);\n        }\n        const inWords = createKeywordMatcher(words, lexer.ignoreCase);\n        tester = function (s) { return (op === '@' ? inWords(s) : !inWords(s)); };\n    }\n    else if (op === '~' || op === '!~') {\n        if (pat.indexOf('$') < 0) {\n            // precompile regular expression\n            const re = compileRegExp(lexer, '^' + pat + '$');\n            tester = function (s) { return (op === '~' ? re.test(s) : !re.test(s)); };\n        }\n        else {\n            tester = function (s, id, matches, state) {\n                const re = compileRegExp(lexer, '^' + monarchCommon.substituteMatches(lexer, pat, id, matches, state) + '$');\n                return re.test(s);\n            };\n        }\n    }\n    else { // if (op==='==' || op==='!=') {\n        if (pat.indexOf('$') < 0) {\n            const patx = monarchCommon.fixCase(lexer, pat);\n            tester = function (s) { return (op === '==' ? s === patx : s !== patx); };\n        }\n        else {\n            const patx = monarchCommon.fixCase(lexer, pat);\n            tester = function (s, id, matches, state, eos) {\n                const patexp = monarchCommon.substituteMatches(lexer, patx, id, matches, state);\n                return (op === '==' ? s === patexp : s !== patexp);\n            };\n        }\n    }\n    // return the branch object\n    if (scrut === -1) {\n        return {\n            name: tkey, value: val, test: function (id, matches, state, eos) {\n                return tester(id, id, matches, state, eos);\n            }\n        };\n    }\n    else {\n        return {\n            name: tkey, value: val, test: function (id, matches, state, eos) {\n                const scrutinee = selectScrutinee(id, matches, state, scrut);\n                return tester(!scrutinee ? '' : scrutinee, id, matches, state, eos);\n            }\n        };\n    }\n}\n/**\n * Compiles an action: i.e. optimize regular expressions and case matches\n * and do many sanity checks.\n *\n * This is called only during compilation but if the lexer definition\n * contains user functions as actions (which is usually not allowed), then this\n * may be called during lexing. It is important therefore to compile common cases efficiently\n */\nfunction compileAction(lexer, ruleName, action) {\n    if (!action) {\n        return { token: '' };\n    }\n    else if (typeof (action) === 'string') {\n        return action; // { token: action };\n    }\n    else if (action.token || action.token === '') {\n        if (typeof (action.token) !== 'string') {\n            throw monarchCommon.createError(lexer, 'a \\'token\\' attribute must be of type string, in rule: ' + ruleName);\n        }\n        else {\n            // only copy specific typed fields (only happens once during compile Lexer)\n            const newAction = { token: action.token };\n            if (action.token.indexOf('$') >= 0) {\n                newAction.tokenSubst = true;\n            }\n            if (typeof (action.bracket) === 'string') {\n                if (action.bracket === '@open') {\n                    newAction.bracket = 1 /* monarchCommon.MonarchBracket.Open */;\n                }\n                else if (action.bracket === '@close') {\n                    newAction.bracket = -1 /* monarchCommon.MonarchBracket.Close */;\n                }\n                else {\n                    throw monarchCommon.createError(lexer, 'a \\'bracket\\' attribute must be either \\'@open\\' or \\'@close\\', in rule: ' + ruleName);\n                }\n            }\n            if (action.next) {\n                if (typeof (action.next) !== 'string') {\n                    throw monarchCommon.createError(lexer, 'the next state must be a string value in rule: ' + ruleName);\n                }\n                else {\n                    let next = action.next;\n                    if (!/^(@pop|@push|@popall)$/.test(next)) {\n                        if (next[0] === '@') {\n                            next = next.substr(1); // peel off starting @ sign\n                        }\n                        if (next.indexOf('$') < 0) { // no dollar substitution, we can check if the state exists\n                            if (!monarchCommon.stateExists(lexer, monarchCommon.substituteMatches(lexer, next, '', [], ''))) {\n                                throw monarchCommon.createError(lexer, 'the next state \\'' + action.next + '\\' is not defined in rule: ' + ruleName);\n                            }\n                        }\n                    }\n                    newAction.next = next;\n                }\n            }\n            if (typeof (action.goBack) === 'number') {\n                newAction.goBack = action.goBack;\n            }\n            if (typeof (action.switchTo) === 'string') {\n                newAction.switchTo = action.switchTo;\n            }\n            if (typeof (action.log) === 'string') {\n                newAction.log = action.log;\n            }\n            if (typeof (action.nextEmbedded) === 'string') {\n                newAction.nextEmbedded = action.nextEmbedded;\n                lexer.usesEmbedded = true;\n            }\n            return newAction;\n        }\n    }\n    else if (Array.isArray(action)) {\n        const results = [];\n        for (let i = 0, len = action.length; i < len; i++) {\n            results[i] = compileAction(lexer, ruleName, action[i]);\n        }\n        return { group: results };\n    }\n    else if (action.cases) {\n        // build an array of test cases\n        const cases = [];\n        // for each case, push a test function and result value\n        for (const tkey in action.cases) {\n            if (action.cases.hasOwnProperty(tkey)) {\n                const val = compileAction(lexer, ruleName, action.cases[tkey]);\n                // what kind of case\n                if (tkey === '@default' || tkey === '@' || tkey === '') {\n                    cases.push({ test: undefined, value: val, name: tkey });\n                }\n                else if (tkey === '@eos') {\n                    cases.push({ test: function (id, matches, state, eos) { return eos; }, value: val, name: tkey });\n                }\n                else {\n                    cases.push(createGuard(lexer, ruleName, tkey, val)); // call separate function to avoid local variable capture\n                }\n            }\n        }\n        // create a matching function\n        const def = lexer.defaultToken;\n        return {\n            test: function (id, matches, state, eos) {\n                for (const _case of cases) {\n                    const didmatch = (!_case.test || _case.test(id, matches, state, eos));\n                    if (didmatch) {\n                        return _case.value;\n                    }\n                }\n                return def;\n            }\n        };\n    }\n    else {\n        throw monarchCommon.createError(lexer, 'an action must be a string, an object with a \\'token\\' or \\'cases\\' attribute, or an array of actions; in rule: ' + ruleName);\n    }\n}\n/**\n * Helper class for creating matching rules\n */\nclass Rule {\n    constructor(name) {\n        this.regex = new RegExp('');\n        this.action = { token: '' };\n        this.matchOnlyAtLineStart = false;\n        this.name = '';\n        this.name = name;\n    }\n    setRegex(lexer, re) {\n        let sregex;\n        if (typeof (re) === 'string') {\n            sregex = re;\n        }\n        else if (re instanceof RegExp) {\n            sregex = re.source;\n        }\n        else {\n            throw monarchCommon.createError(lexer, 'rules must start with a match string or regular expression: ' + this.name);\n        }\n        this.matchOnlyAtLineStart = (sregex.length > 0 && sregex[0] === '^');\n        this.name = this.name + ': ' + sregex;\n        this.regex = compileRegExp(lexer, '^(?:' + (this.matchOnlyAtLineStart ? sregex.substr(1) : sregex) + ')');\n    }\n    setAction(lexer, act) {\n        this.action = compileAction(lexer, this.name, act);\n    }\n}\n/**\n * Compiles a json description function into json where all regular expressions,\n * case matches etc, are compiled and all include rules are expanded.\n * We also compile the bracket definitions, supply defaults, and do many sanity checks.\n * If the 'jsonStrict' parameter is 'false', we allow at certain locations\n * regular expression objects and functions that get called during lexing.\n * (Currently we have no samples that need this so perhaps we should always have\n * jsonStrict to true).\n */\nexport function compile(languageId, json) {\n    if (!json || typeof (json) !== 'object') {\n        throw new Error('Monarch: expecting a language definition object');\n    }\n    // Create our lexer\n    const lexer = {};\n    lexer.languageId = languageId;\n    lexer.includeLF = bool(json.includeLF, false);\n    lexer.noThrow = false; // raise exceptions during compilation\n    lexer.maxStack = 100;\n    // Set standard fields: be defensive about types\n    lexer.start = (typeof json.start === 'string' ? json.start : null);\n    lexer.ignoreCase = bool(json.ignoreCase, false);\n    lexer.unicode = bool(json.unicode, false);\n    lexer.tokenPostfix = string(json.tokenPostfix, '.' + lexer.languageId);\n    lexer.defaultToken = string(json.defaultToken, 'source');\n    lexer.usesEmbedded = false; // becomes true if we find a nextEmbedded action\n    // For calling compileAction later on\n    const lexerMin = json;\n    lexerMin.languageId = languageId;\n    lexerMin.includeLF = lexer.includeLF;\n    lexerMin.ignoreCase = lexer.ignoreCase;\n    lexerMin.unicode = lexer.unicode;\n    lexerMin.noThrow = lexer.noThrow;\n    lexerMin.usesEmbedded = lexer.usesEmbedded;\n    lexerMin.stateNames = json.tokenizer;\n    lexerMin.defaultToken = lexer.defaultToken;\n    // Compile an array of rules into newrules where RegExp objects are created.\n    function addRules(state, newrules, rules) {\n        for (const rule of rules) {\n            let include = rule.include;\n            if (include) {\n                if (typeof (include) !== 'string') {\n                    throw monarchCommon.createError(lexer, 'an \\'include\\' attribute must be a string at: ' + state);\n                }\n                if (include[0] === '@') {\n                    include = include.substr(1); // peel off starting @\n                }\n                if (!json.tokenizer[include]) {\n                    throw monarchCommon.createError(lexer, 'include target \\'' + include + '\\' is not defined at: ' + state);\n                }\n                addRules(state + '.' + include, newrules, json.tokenizer[include]);\n            }\n            else {\n                const newrule = new Rule(state);\n                // Set up new rule attributes\n                if (Array.isArray(rule) && rule.length >= 1 && rule.length <= 3) {\n                    newrule.setRegex(lexerMin, rule[0]);\n                    if (rule.length >= 3) {\n                        if (typeof (rule[1]) === 'string') {\n                            newrule.setAction(lexerMin, { token: rule[1], next: rule[2] });\n                        }\n                        else if (typeof (rule[1]) === 'object') {\n                            const rule1 = rule[1];\n                            rule1.next = rule[2];\n                            newrule.setAction(lexerMin, rule1);\n                        }\n                        else {\n                            throw monarchCommon.createError(lexer, 'a next state as the last element of a rule can only be given if the action is either an object or a string, at: ' + state);\n                        }\n                    }\n                    else {\n                        newrule.setAction(lexerMin, rule[1]);\n                    }\n                }\n                else {\n                    if (!rule.regex) {\n                        throw monarchCommon.createError(lexer, 'a rule must either be an array, or an object with a \\'regex\\' or \\'include\\' field at: ' + state);\n                    }\n                    if (rule.name) {\n                        if (typeof rule.name === 'string') {\n                            newrule.name = rule.name;\n                        }\n                    }\n                    if (rule.matchOnlyAtStart) {\n                        newrule.matchOnlyAtLineStart = bool(rule.matchOnlyAtLineStart, false);\n                    }\n                    newrule.setRegex(lexerMin, rule.regex);\n                    newrule.setAction(lexerMin, rule.action);\n                }\n                newrules.push(newrule);\n            }\n        }\n    }\n    // compile the tokenizer rules\n    if (!json.tokenizer || typeof (json.tokenizer) !== 'object') {\n        throw monarchCommon.createError(lexer, 'a language definition must define the \\'tokenizer\\' attribute as an object');\n    }\n    lexer.tokenizer = [];\n    for (const key in json.tokenizer) {\n        if (json.tokenizer.hasOwnProperty(key)) {\n            if (!lexer.start) {\n                lexer.start = key;\n            }\n            const rules = json.tokenizer[key];\n            lexer.tokenizer[key] = new Array();\n            addRules('tokenizer.' + key, lexer.tokenizer[key], rules);\n        }\n    }\n    lexer.usesEmbedded = lexerMin.usesEmbedded; // can be set during compileAction\n    // Set simple brackets\n    if (json.brackets) {\n        if (!(Array.isArray(json.brackets))) {\n            throw monarchCommon.createError(lexer, 'the \\'brackets\\' attribute must be defined as an array');\n        }\n    }\n    else {\n        json.brackets = [\n            { open: '{', close: '}', token: 'delimiter.curly' },\n            { open: '[', close: ']', token: 'delimiter.square' },\n            { open: '(', close: ')', token: 'delimiter.parenthesis' },\n            { open: '<', close: '>', token: 'delimiter.angle' }\n        ];\n    }\n    const brackets = [];\n    for (const el of json.brackets) {\n        let desc = el;\n        if (desc && Array.isArray(desc) && desc.length === 3) {\n            desc = { token: desc[2], open: desc[0], close: desc[1] };\n        }\n        if (desc.open === desc.close) {\n            throw monarchCommon.createError(lexer, 'open and close brackets in a \\'brackets\\' attribute must be different: ' + desc.open +\n                '\\n hint: use the \\'bracket\\' attribute if matching on equal brackets is required.');\n        }\n        if (typeof desc.open === 'string' && typeof desc.token === 'string' && typeof desc.close === 'string') {\n            brackets.push({\n                token: desc.token + lexer.tokenPostfix,\n                open: monarchCommon.fixCase(lexer, desc.open),\n                close: monarchCommon.fixCase(lexer, desc.close)\n            });\n        }\n        else {\n            throw monarchCommon.createError(lexer, 'every element in the \\'brackets\\' array must be a \\'{open,close,token}\\' object or array');\n        }\n    }\n    lexer.brackets = brackets;\n    // Disable throw so the syntax highlighter goes, no matter what\n    lexer.noThrow = true;\n    return lexer;\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { asArray, isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { LinkedList } from '../../../../base/common/linkedList.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { EditorStateCancellationTokenSource, TextModelCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport { isCodeEditor } from '../../../browser/editorBrowser.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { IEditorWorkerService } from '../../../common/services/editorWorker.js';\nimport { ITextModelService } from '../../../common/services/resolverService.js';\nimport { FormattingEdit } from './formattingEdit.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { ExtensionIdentifierSet } from '../../../../platform/extensions/common/extensions.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { AccessibilitySignal, IAccessibilitySignalService } from '../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js';\nexport function getRealAndSyntheticDocumentFormattersOrdered(documentFormattingEditProvider, documentRangeFormattingEditProvider, model) {\n    const result = [];\n    const seen = new ExtensionIdentifierSet();\n    // (1) add all document formatter\n    const docFormatter = documentFormattingEditProvider.ordered(model);\n    for (const formatter of docFormatter) {\n        result.push(formatter);\n        if (formatter.extensionId) {\n            seen.add(formatter.extensionId);\n        }\n    }\n    // (2) add all range formatter as document formatter (unless the same extension already did that)\n    const rangeFormatter = documentRangeFormattingEditProvider.ordered(model);\n    for (const formatter of rangeFormatter) {\n        if (formatter.extensionId) {\n            if (seen.has(formatter.extensionId)) {\n                continue;\n            }\n            seen.add(formatter.extensionId);\n        }\n        result.push({\n            displayName: formatter.displayName,\n            extensionId: formatter.extensionId,\n            provideDocumentFormattingEdits(model, options, token) {\n                return formatter.provideDocumentRangeFormattingEdits(model, model.getFullModelRange(), options, token);\n            }\n        });\n    }\n    return result;\n}\nexport class FormattingConflicts {\n    static setFormatterSelector(selector) {\n        const remove = FormattingConflicts._selectors.unshift(selector);\n        return { dispose: remove };\n    }\n    static async select(formatter, document, mode, kind) {\n        if (formatter.length === 0) {\n            return undefined;\n        }\n        const selector = Iterable.first(FormattingConflicts._selectors);\n        if (selector) {\n            return await selector(formatter, document, mode, kind);\n        }\n        return undefined;\n    }\n}\nFormattingConflicts._selectors = new LinkedList();\nexport async function formatDocumentRangesWithSelectedProvider(accessor, editorOrModel, rangeOrRanges, mode, progress, token, userGesture) {\n    const instaService = accessor.get(IInstantiationService);\n    const { documentRangeFormattingEditProvider: documentRangeFormattingEditProviderRegistry } = accessor.get(ILanguageFeaturesService);\n    const model = isCodeEditor(editorOrModel) ? editorOrModel.getModel() : editorOrModel;\n    const provider = documentRangeFormattingEditProviderRegistry.ordered(model);\n    const selected = await FormattingConflicts.select(provider, model, mode, 2 /* FormattingKind.Selection */);\n    if (selected) {\n        progress.report(selected);\n        await instaService.invokeFunction(formatDocumentRangesWithProvider, selected, editorOrModel, rangeOrRanges, token, userGesture);\n    }\n}\nexport async function formatDocumentRangesWithProvider(accessor, provider, editorOrModel, rangeOrRanges, token, userGesture) {\n    var _a, _b;\n    const workerService = accessor.get(IEditorWorkerService);\n    const logService = accessor.get(ILogService);\n    const accessibilitySignalService = accessor.get(IAccessibilitySignalService);\n    let model;\n    let cts;\n    if (isCodeEditor(editorOrModel)) {\n        model = editorOrModel.getModel();\n        cts = new EditorStateCancellationTokenSource(editorOrModel, 1 /* CodeEditorStateFlag.Value */ | 4 /* CodeEditorStateFlag.Position */, undefined, token);\n    }\n    else {\n        model = editorOrModel;\n        cts = new TextModelCancellationTokenSource(editorOrModel, token);\n    }\n    // make sure that ranges don't overlap nor touch each other\n    const ranges = [];\n    let len = 0;\n    for (const range of asArray(rangeOrRanges).sort(Range.compareRangesUsingStarts)) {\n        if (len > 0 && Range.areIntersectingOrTouching(ranges[len - 1], range)) {\n            ranges[len - 1] = Range.fromPositions(ranges[len - 1].getStartPosition(), range.getEndPosition());\n        }\n        else {\n            len = ranges.push(range);\n        }\n    }\n    const computeEdits = async (range) => {\n        var _a, _b;\n        logService.trace(`[format][provideDocumentRangeFormattingEdits] (request)`, (_a = provider.extensionId) === null || _a === void 0 ? void 0 : _a.value, range);\n        const result = (await provider.provideDocumentRangeFormattingEdits(model, range, model.getFormattingOptions(), cts.token)) || [];\n        logService.trace(`[format][provideDocumentRangeFormattingEdits] (response)`, (_b = provider.extensionId) === null || _b === void 0 ? void 0 : _b.value, result);\n        return result;\n    };\n    const hasIntersectingEdit = (a, b) => {\n        if (!a.length || !b.length) {\n            return false;\n        }\n        // quick exit if the list of ranges are completely unrelated [O(n)]\n        const mergedA = a.reduce((acc, val) => { return Range.plusRange(acc, val.range); }, a[0].range);\n        if (!b.some(x => { return Range.intersectRanges(mergedA, x.range); })) {\n            return false;\n        }\n        // fallback to a complete check [O(n^2)]\n        for (const edit of a) {\n            for (const otherEdit of b) {\n                if (Range.intersectRanges(edit.range, otherEdit.range)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    const allEdits = [];\n    const rawEditsList = [];\n    try {\n        if (typeof provider.provideDocumentRangesFormattingEdits === 'function') {\n            logService.trace(`[format][provideDocumentRangeFormattingEdits] (request)`, (_a = provider.extensionId) === null || _a === void 0 ? void 0 : _a.value, ranges);\n            const result = (await provider.provideDocumentRangesFormattingEdits(model, ranges, model.getFormattingOptions(), cts.token)) || [];\n            logService.trace(`[format][provideDocumentRangeFormattingEdits] (response)`, (_b = provider.extensionId) === null || _b === void 0 ? void 0 : _b.value, result);\n            rawEditsList.push(result);\n        }\n        else {\n            for (const range of ranges) {\n                if (cts.token.isCancellationRequested) {\n                    return true;\n                }\n                rawEditsList.push(await computeEdits(range));\n            }\n            for (let i = 0; i < ranges.length; ++i) {\n                for (let j = i + 1; j < ranges.length; ++j) {\n                    if (cts.token.isCancellationRequested) {\n                        return true;\n                    }\n                    if (hasIntersectingEdit(rawEditsList[i], rawEditsList[j])) {\n                        // Merge ranges i and j into a single range, recompute the associated edits\n                        const mergedRange = Range.plusRange(ranges[i], ranges[j]);\n                        const edits = await computeEdits(mergedRange);\n                        ranges.splice(j, 1);\n                        ranges.splice(i, 1);\n                        ranges.push(mergedRange);\n                        rawEditsList.splice(j, 1);\n                        rawEditsList.splice(i, 1);\n                        rawEditsList.push(edits);\n                        // Restart scanning\n                        i = 0;\n                        j = 0;\n                    }\n                }\n            }\n        }\n        for (const rawEdits of rawEditsList) {\n            if (cts.token.isCancellationRequested) {\n                return true;\n            }\n            const minimalEdits = await workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n            if (minimalEdits) {\n                allEdits.push(...minimalEdits);\n            }\n        }\n    }\n    finally {\n        cts.dispose();\n    }\n    if (allEdits.length === 0) {\n        return false;\n    }\n    if (isCodeEditor(editorOrModel)) {\n        // use editor to apply edits\n        FormattingEdit.execute(editorOrModel, allEdits, true);\n        editorOrModel.revealPositionInCenterIfOutsideViewport(editorOrModel.getPosition(), 1 /* ScrollType.Immediate */);\n    }\n    else {\n        // use model to apply edits\n        const [{ range }] = allEdits;\n        const initialSelection = new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n        model.pushEditOperations([initialSelection], allEdits.map(edit => {\n            return {\n                text: edit.text,\n                range: Range.lift(edit.range),\n                forceMoveMarkers: true\n            };\n        }), undoEdits => {\n            for (const { range } of undoEdits) {\n                if (Range.areIntersectingOrTouching(range, initialSelection)) {\n                    return [new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn)];\n                }\n            }\n            return null;\n        });\n    }\n    accessibilitySignalService.playSignal(AccessibilitySignal.format, { userGesture });\n    return true;\n}\nexport async function formatDocumentWithSelectedProvider(accessor, editorOrModel, mode, progress, token, userGesture) {\n    const instaService = accessor.get(IInstantiationService);\n    const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n    const model = isCodeEditor(editorOrModel) ? editorOrModel.getModel() : editorOrModel;\n    const provider = getRealAndSyntheticDocumentFormattersOrdered(languageFeaturesService.documentFormattingEditProvider, languageFeaturesService.documentRangeFormattingEditProvider, model);\n    const selected = await FormattingConflicts.select(provider, model, mode, 1 /* FormattingKind.File */);\n    if (selected) {\n        progress.report(selected);\n        await instaService.invokeFunction(formatDocumentWithProvider, selected, editorOrModel, mode, token, userGesture);\n    }\n}\nexport async function formatDocumentWithProvider(accessor, provider, editorOrModel, mode, token, userGesture) {\n    const workerService = accessor.get(IEditorWorkerService);\n    const accessibilitySignalService = accessor.get(IAccessibilitySignalService);\n    let model;\n    let cts;\n    if (isCodeEditor(editorOrModel)) {\n        model = editorOrModel.getModel();\n        cts = new EditorStateCancellationTokenSource(editorOrModel, 1 /* CodeEditorStateFlag.Value */ | 4 /* CodeEditorStateFlag.Position */, undefined, token);\n    }\n    else {\n        model = editorOrModel;\n        cts = new TextModelCancellationTokenSource(editorOrModel, token);\n    }\n    let edits;\n    try {\n        const rawEdits = await provider.provideDocumentFormattingEdits(model, model.getFormattingOptions(), cts.token);\n        edits = await workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n        if (cts.token.isCancellationRequested) {\n            return true;\n        }\n    }\n    finally {\n        cts.dispose();\n    }\n    if (!edits || edits.length === 0) {\n        return false;\n    }\n    if (isCodeEditor(editorOrModel)) {\n        // use editor to apply edits\n        FormattingEdit.execute(editorOrModel, edits, mode !== 2 /* FormattingMode.Silent */);\n        if (mode !== 2 /* FormattingMode.Silent */) {\n            editorOrModel.revealPositionInCenterIfOutsideViewport(editorOrModel.getPosition(), 1 /* ScrollType.Immediate */);\n        }\n    }\n    else {\n        // use model to apply edits\n        const [{ range }] = edits;\n        const initialSelection = new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n        model.pushEditOperations([initialSelection], edits.map(edit => {\n            return {\n                text: edit.text,\n                range: Range.lift(edit.range),\n                forceMoveMarkers: true\n            };\n        }), undoEdits => {\n            for (const { range } of undoEdits) {\n                if (Range.areIntersectingOrTouching(range, initialSelection)) {\n                    return [new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn)];\n                }\n            }\n            return null;\n        });\n    }\n    accessibilitySignalService.playSignal(AccessibilitySignal.format, { userGesture });\n    return true;\n}\nexport async function getDocumentRangeFormattingEditsUntilResult(workerService, languageFeaturesService, model, range, options, token) {\n    const providers = languageFeaturesService.documentRangeFormattingEditProvider.ordered(model);\n    for (const provider of providers) {\n        const rawEdits = await Promise.resolve(provider.provideDocumentRangeFormattingEdits(model, range, options, token)).catch(onUnexpectedExternalError);\n        if (isNonEmptyArray(rawEdits)) {\n            return await workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n        }\n    }\n    return undefined;\n}\nexport async function getDocumentFormattingEditsUntilResult(workerService, languageFeaturesService, model, options, token) {\n    const providers = getRealAndSyntheticDocumentFormattersOrdered(languageFeaturesService.documentFormattingEditProvider, languageFeaturesService.documentRangeFormattingEditProvider, model);\n    for (const provider of providers) {\n        const rawEdits = await Promise.resolve(provider.provideDocumentFormattingEdits(model, options, token)).catch(onUnexpectedExternalError);\n        if (isNonEmptyArray(rawEdits)) {\n            return await workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n        }\n    }\n    return undefined;\n}\nexport function getOnTypeFormattingEdits(workerService, languageFeaturesService, model, position, ch, options, token) {\n    const providers = languageFeaturesService.onTypeFormattingEditProvider.ordered(model);\n    if (providers.length === 0) {\n        return Promise.resolve(undefined);\n    }\n    if (providers[0].autoFormatTriggerCharacters.indexOf(ch) < 0) {\n        return Promise.resolve(undefined);\n    }\n    return Promise.resolve(providers[0].provideOnTypeFormattingEdits(model, position, ch, options, token)).catch(onUnexpectedExternalError).then(edits => {\n        return workerService.computeMoreMinimalEdits(model.uri, edits);\n    });\n}\nCommandsRegistry.registerCommand('_executeFormatRangeProvider', async function (accessor, ...args) {\n    const [resource, range, options] = args;\n    assertType(URI.isUri(resource));\n    assertType(Range.isIRange(range));\n    const resolverService = accessor.get(ITextModelService);\n    const workerService = accessor.get(IEditorWorkerService);\n    const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n    const reference = await resolverService.createModelReference(resource);\n    try {\n        return getDocumentRangeFormattingEditsUntilResult(workerService, languageFeaturesService, reference.object.textEditorModel, Range.lift(range), options, CancellationToken.None);\n    }\n    finally {\n        reference.dispose();\n    }\n});\nCommandsRegistry.registerCommand('_executeFormatDocumentProvider', async function (accessor, ...args) {\n    const [resource, options] = args;\n    assertType(URI.isUri(resource));\n    const resolverService = accessor.get(ITextModelService);\n    const workerService = accessor.get(IEditorWorkerService);\n    const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n    const reference = await resolverService.createModelReference(resource);\n    try {\n        return getDocumentFormattingEditsUntilResult(workerService, languageFeaturesService, reference.object.textEditorModel, options, CancellationToken.None);\n    }\n    finally {\n        reference.dispose();\n    }\n});\nCommandsRegistry.registerCommand('_executeFormatOnTypeProvider', async function (accessor, ...args) {\n    const [resource, position, ch, options] = args;\n    assertType(URI.isUri(resource));\n    assertType(Position.isIPosition(position));\n    assertType(typeof ch === 'string');\n    const resolverService = accessor.get(ITextModelService);\n    const workerService = accessor.get(IEditorWorkerService);\n    const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n    const reference = await resolverService.createModelReference(resource);\n    try {\n        return getOnTypeFormattingEdits(workerService, languageFeaturesService, reference.object.textEditorModel, Position.lift(position), ch, options, CancellationToken.None);\n    }\n    finally {\n        reference.dispose();\n    }\n});\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as editorCommon from '../common/editorCommon.js';\n/**\n *@internal\n */\nexport function isCodeEditor(thing) {\n    if (thing && typeof thing.getEditorType === 'function') {\n        return thing.getEditorType() === editorCommon.EditorType.ICodeEditor;\n    }\n    else {\n        return false;\n    }\n}\n/**\n *@internal\n */\nexport function isDiffEditor(thing) {\n    if (thing && typeof thing.getEditorType === 'function') {\n        return thing.getEditorType() === editorCommon.EditorType.IDiffEditor;\n    }\n    else {\n        return false;\n    }\n}\n/**\n *@internal\n */\nexport function isCompositeEditor(thing) {\n    return !!thing\n        && typeof thing === 'object'\n        && typeof thing.onDidChangeActiveEditor === 'function';\n}\n/**\n *@internal\n */\nexport function getCodeEditor(thing) {\n    if (isCodeEditor(thing)) {\n        return thing;\n    }\n    if (isDiffEditor(thing)) {\n        return thing.getModifiedEditor();\n    }\n    if (isCompositeEditor(thing) && isCodeEditor(thing.activeCodeEditor)) {\n        return thing.activeCodeEditor;\n    }\n    return null;\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Range } from '../../../common/core/range.js';\nimport { StableEditorScrollState } from '../../../browser/stableEditorScroll.js';\nexport class FormattingEdit {\n    static _handleEolEdits(editor, edits) {\n        let newEol = undefined;\n        const singleEdits = [];\n        for (const edit of edits) {\n            if (typeof edit.eol === 'number') {\n                newEol = edit.eol;\n            }\n            if (edit.range && typeof edit.text === 'string') {\n                singleEdits.push(edit);\n            }\n        }\n        if (typeof newEol === 'number') {\n            if (editor.hasModel()) {\n                editor.getModel().pushEOL(newEol);\n            }\n        }\n        return singleEdits;\n    }\n    static _isFullModelReplaceEdit(editor, edit) {\n        if (!editor.hasModel()) {\n            return false;\n        }\n        const model = editor.getModel();\n        const editRange = model.validateRange(edit.range);\n        const fullModelRange = model.getFullModelRange();\n        return fullModelRange.equalsRange(editRange);\n    }\n    static execute(editor, _edits, addUndoStops) {\n        if (addUndoStops) {\n            editor.pushUndoStop();\n        }\n        const scrollState = StableEditorScrollState.capture(editor);\n        const edits = FormattingEdit._handleEolEdits(editor, _edits);\n        if (edits.length === 1 && FormattingEdit._isFullModelReplaceEdit(editor, edits[0])) {\n            // We use replace semantics and hope that markers stay put...\n            editor.executeEdits('formatEditsCommand', edits.map(edit => EditOperation.replace(Range.lift(edit.range), edit.text)));\n        }\n        else {\n            editor.executeEdits('formatEditsCommand', edits.map(edit => EditOperation.replaceMove(Range.lift(edit.range), edit.text)));\n        }\n        if (addUndoStops) {\n            editor.pushUndoStop();\n        }\n        scrollState.restoreRelativeVerticalPositionOfCursor(editor);\n    }\n}\n", "/**\n * **!Do not construct directly!**\n *\n * **!Only static methods because it gets serialized!**\n *\n * This represents the \"canonical\" version for an extension identifier. Extension ids\n * have to be case-insensitive (due to the marketplace), but we must ensure case\n * preservation because the extension API is already public at this time.\n *\n * For example, given an extension with the publisher `\"Hello\"` and the name `\"World\"`,\n * its canonical extension identifier is `\"Hello.World\"`. This extension could be\n * referenced in some other extension's dependencies using the string `\"hello.world\"`.\n *\n * To make matters more complicated, an extension can optionally have an UUID. When two\n * extensions have the same UUID, they are considered equal even if their identifier is different.\n */\nexport class ExtensionIdentifier {\n    constructor(value) {\n        this.value = value;\n        this._lower = value.toLowerCase();\n    }\n    /**\n     * Gives the value by which to index (for equality).\n     */\n    static toKey(id) {\n        if (typeof id === 'string') {\n            return id.toLowerCase();\n        }\n        return id._lower;\n    }\n}\nexport class ExtensionIdentifierSet {\n    constructor(iterable) {\n        this._set = new Set();\n        if (iterable) {\n            for (const value of iterable) {\n                this.add(value);\n            }\n        }\n    }\n    add(id) {\n        this._set.add(ExtensionIdentifier.toKey(id));\n    }\n    has(id) {\n        return this._set.has(ExtensionIdentifier.toKey(id));\n    }\n}\n"],
  "mappings": "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",
  "names": ["EditorContextKeys", "derived", "autorun", "transaction", "recomputeInitiallyAndOnChange", "keepObserved", "derived", "getDebugName", "autorun", "_a", "observableFromEvent", "tx", "h", "editor", "d", "store", "reader", "init_utils", "__decorate", "__param", "init_utils", "HideUnchangedRegionsFeature", "reader", "editor", "e", "editor", "editor", "CancellationTokenSource", "Emitter", "Position", "Range", "Selection", "Token", "proxyMethodRequest", "init_model", "containsRTL", "LineRange", "isBasicASCII", "containsRTL", "len", "tokenContainsRTL", "firstNonWhitespaceIndex", "lastNonWhitespaceIndex", "isBasicASCII", "isString", "MonarchTokenizer", "rule", "enteringEmbeddedLanguage", "embeddedLanguageData", "isString", "isBasicASCII", "containsRTL", "status", "__decorate", "__param", "MarkerDecorationsContribution", "value", "__decorate", "__param", "EditorConfiguration", "env", "env", "inputLatency", "reset", "clientRects", "LineRange", "horizontalOffset", "containsRTL", "r", "currentVisibleColumn", "HitTestResult", "lineNumber", "maxLineColumn", "lineWidth", "visibleRange", "e", "position", "replacePreviousCharacters", "__decorate", "__param", "TextAreaSyntethicEvents", "TextAreaInput", "typeInput", "EventType", "event", "__decorate", "__param", "TextAreaHandler", "isAndroid", "distanceToModelLineStart", "tabSize", "widthOfHiddenTextBefore", "distanceToModelLineEnd", "top", "left", "firstNonWhitespaceIndex", "position", "startColumn", "endColumn", "CursorMove", "IndentAction", "__decorate", "__param", "ShiftCommand", "IndentAction", "IndentAction", "lineText", "indentation", "commands", "editor", "EditorScroll_", "RevealLine_", "CoreNavigationCommands", "CoreEditingCommands", "affinity", "init_model", "i", "GlyphMarginLane", "colors", "init_model", "sliderHeight", "maxMinimapSliderTop", "computedSliderRatio", "sliderTop", "result", "EventType", "intersection", "MinimapPosition", "colorZone", "className", "width", "top", "LineRange", "firstNonWhitespaceIndex", "lastNonWhitespaceIndex", "p", "init_model", "__decorate", "__param", "View", "GlyphMarginLane", "init_model", "InjectedTextCursorStops", "ttPolicy", "result", "firstNonWhitespaceIndex", "i", "editor", "createLineBreaks", "firstNonWhitespaceIndex", "isFocused", "ViewZonesChangedEvent", "selections", "result", "scheduleAtNextAnimationFrame", "viewRange", "p", "deltaLineNumber", "ownerId", "init_model", "GlyphMarginLane", "scheduleAtNextAnimationFrame", "result", "ViewZonesChangedEvent", "__decorate", "__param", "CodeEditorWidget", "options", "editor", "init_actions", "editor", "init_utils", "__decorate", "__param", "AccessibleDiffViewer", "ViewModel", "View", "ViewModel", "tx", "__decorate", "__param", "modifiedRange", "LineType", "View", "isBasicASCII", "containsRTL", "init_utils", "editor", "LinesLayout", "reader", "m", "init_utils", "__decorate", "__param", "WorkerBasedDiffProviderFactoryService", "WorkerBasedDocumentDiffProvider", "__decorate", "__param", "init_utils", "__decorate", "__param", "DiffEditorViewModel", "_a", "r", "ttPolicy", "editor", "isBasicASCII", "containsRTL", "init_utils", "__decorate", "__param", "DiffEditorViewZones", "marginDomNode", "c", "editor", "init_utils", "__decorate", "__param", "OverviewRulerFeature", "reader", "editor", "init_utils", "__decorate", "__param", "DiffEditorEditors", "editor", "init_model", "GlyphMarginLane", "__decorate", "__param", "DiffEditorWidget", "_a", "reader", "m", "editor", "tx", "m", "__decorate", "__param", "StandaloneCodeEditor", "StandaloneEditor", "__decorate", "__param", "StandaloneDiffEditor2", "__decorate", "__param", "init_actions", "init_utils", "init_utils", "_a", "init_actions", "__decorate", "__param", "WorkbenchToolBar", "_a", "_b", "_c", "MenuWorkbenchToolBar", "__decorate", "__param", "init_actions", "__decorate", "__param", "DiffEditorItemTemplate", "h", "isFocused", "editor", "h", "obj", "__decorate", "__param", "MultiDiffEditorWidgetImpl", "isFocused", "__decorate", "__param", "MultiDiffEditorWidget", "editor", "accessor", "args", "createWebWorker", "registerCommand", "TextEditorCursorStyle", "matches", "create", "languageDef", "editor", "model", "document", "_a", "_b", "range", "document", "CancellationTokenSource", "Emitter", "Position", "Range", "Selection", "Token"]
}
