import {
  INITIAL,
  StackElementMetadata
} from "./chunk-CCIYJOWU.js";
import "./chunk-BYPFWIQ6.js";

// node_modules/@shikijs/monaco/dist/index.mjs
function textmateThemeToMonacoTheme(theme) {
  let rules = "rules" in theme ? theme.rules : void 0;
  if (!rules) {
    rules = [];
    const themeSettings = theme.settings || theme.tokenColors;
    for (const { scope, settings } of themeSettings) {
      const scopes = Array.isArray(scope) ? scope : [scope];
      for (const s of scopes) {
        if (settings.foreground && s) {
          rules.push({
            token: s,
            foreground: normalizeColor(settings.foreground)
          });
        }
      }
    }
  }
  const colors = Object.fromEntries(
    Object.entries(theme.colors || {}).map(([key, value]) => [key, `#${normalizeColor(value)}`])
  );
  return {
    base: theme.type === "light" ? "vs" : "vs-dark",
    inherit: false,
    colors,
    rules
  };
}
function shikiToMonaco(highlighter, monaco) {
  const themeMap = /* @__PURE__ */ new Map();
  const themeIds = highlighter.getLoadedThemes();
  for (const themeId of themeIds) {
    const tmTheme = highlighter.getTheme(themeId);
    const monacoTheme = textmateThemeToMonacoTheme(tmTheme);
    themeMap.set(themeId, monacoTheme);
    monaco.editor.defineTheme(themeId, monacoTheme);
  }
  let currentTheme = themeIds[0];
  const _setTheme = monaco.editor.setTheme.bind(monaco.editor);
  monaco.editor.setTheme = (theme) => {
    _setTheme(theme);
    currentTheme = theme;
  };
  for (const lang of highlighter.getLoadedLanguages()) {
    if (monaco.languages.getLanguages().some((l) => l.id === lang)) {
      monaco.languages.setTokensProvider(lang, {
        getInitialState() {
          return new TokenizerState(INITIAL, highlighter);
        },
        tokenize(line, state) {
          const tokenizeMaxLineLength = 2e4;
          const tokenizeTimeLimit = 500;
          if (line.length >= tokenizeMaxLineLength) {
            return {
              endState: state,
              tokens: [{ startIndex: 0, scopes: "" }]
            };
          }
          const grammar = state.highlighter.getLanguage(lang);
          const { colorMap } = state.highlighter.setTheme(currentTheme);
          const theme = themeMap.get(currentTheme);
          const result = grammar.tokenizeLine2(line, state.ruleStack, tokenizeTimeLimit);
          if (result.stoppedEarly)
            console.warn(`Time limit reached when tokenizing line: ${line.substring(0, 100)}`);
          const colorToScopeMap = /* @__PURE__ */ new Map();
          theme.rules.forEach((rule) => {
            const c = normalizeColor(rule.foreground);
            if (c && !colorToScopeMap.has(c))
              colorToScopeMap.set(c, rule.token);
          });
          function findScopeByColor(color) {
            return colorToScopeMap.get(color);
          }
          const tokensLength = result.tokens.length / 2;
          const tokens = [];
          for (let j = 0; j < tokensLength; j++) {
            const startIndex = result.tokens[2 * j];
            const metadata = result.tokens[2 * j + 1];
            const color = normalizeColor(colorMap[StackElementMetadata.getForeground(metadata)] || "");
            const scope = findScopeByColor(color) || "";
            tokens.push({
              startIndex,
              scopes: scope
            });
          }
          return {
            endState: new TokenizerState(result.ruleStack, state.highlighter),
            tokens
          };
        }
      });
    }
  }
}
var TokenizerState = class _TokenizerState {
  constructor(_ruleStack, highlighter) {
    this._ruleStack = _ruleStack;
    this.highlighter = highlighter;
  }
  get ruleStack() {
    return this._ruleStack;
  }
  clone() {
    return new _TokenizerState(this._ruleStack, this.highlighter);
  }
  equals(other) {
    if (!other || !(other instanceof _TokenizerState) || other !== this || other._ruleStack !== this._ruleStack)
      return false;
    return true;
  }
};
function normalizeColor(color) {
  if (!color)
    return color;
  color = color.replace("#", "").toLowerCase();
  if (color.length === 3 || color.length === 4)
    color = color.split("").map((c) => c + c).join("");
  return color;
}
export {
  shikiToMonaco,
  textmateThemeToMonacoTheme
};
//# sourceMappingURL=@slidev_cli___@slidev_client___@shikijs_monaco.js.map
