import { TransitionGroupProps, ComputedRef, App, Ref } from 'vue';
import { RouteMeta, RouteComponent, Router } from 'vue-router';
import { Arrayable, Awaitable, ArgumentsType } from '@antfu/utils';
import * as monaco from 'monaco-editor';
import mermaid from 'mermaid';
import { KatexOptions } from 'katex';
import { CodeToHastOptions, CodeToHastOptionsCommon, BuiltinLanguage, CodeOptionsThemes, BuiltinTheme, CodeOptionsMeta, Highlighter, LanguageInput } from 'shiki';
import { VitePluginConfig } from 'unocss/vite';
import Vue from '@vitejs/plugin-vue';
import VueJsx from '@vitejs/plugin-vue-jsx';
import Icons from 'unplugin-icons/vite';
import Components from 'unplugin-vue-components/vite';
import Markdown from 'unplugin-vue-markdown/vite';
import RemoteAssets from 'vite-plugin-remote-assets';
import ServerRef from 'vite-plugin-vue-server-ref';

interface CommonArgs {
    entry: string;
    theme?: string;
}
interface ExportArgs extends CommonArgs {
    'output'?: string;
    'format'?: string;
    'timeout'?: number;
    'range'?: string;
    'dark'?: boolean;
    'with-clicks'?: boolean;
    'executable-path'?: string;
    'with-toc'?: boolean;
    'per-slide'?: boolean;
    'scale'?: number;
}
interface BuildArgs extends ExportArgs {
    watch: boolean;
    out: string;
    base?: string;
    download?: boolean;
    inspect: boolean;
}

interface SlidevConfig {
    title: string;
    /**
     * String template to compose title
     *
     * @example "%s - Slidev" - to suffix " - Slidev" to all pages
     * @default '%s - Slidev'
     */
    titleTemplate: string;
    /**
     * Theme to use for the slides
     *
     * @see https://sli.dev/themes/use.html
     * @default 'default'
     */
    theme: string;
    /**
     * List of Slidev addons
     *
     * @default []
     */
    addons: string[];
    /**
     * Download remote assets in local using vite-plugin-remote-assets
     *
     * @default false
     */
    remoteAssets: boolean | 'dev' | 'build';
    /**
     * Enable Monaco
     *
     * @see https://sli.dev/custom/config-monaco.html
     * @default true
     */
    monaco: boolean | 'dev' | 'build';
    /**
     * Where to load monaco types from
     *
     * - `cdn` - load from CDN with `@typescript/ata`
     * - `local` - load from local node_modules
     *
     * @default 'local'
     */
    monacoTypesSource: 'cdn' | 'local' | 'none';
    /**
     * Additional node packages to load as monaco types
     *
     * @default []
     */
    monacoTypesAdditionalPackages: string[];
    /**
     * Show a download button in the SPA build,
     * could also be a link to custom pdf
     *
     * @default false
     */
    download: boolean | string;
    /**
     * Options for export
     *
     * @default {}
     */
    export: ResolvedExportOptions;
    /**
     * Show a copy button in code blocks
     *
     * @default true
     */
    codeCopy: boolean;
    /**
     * Information shows on the built SPA
     * Can be a markdown string
     *
     * @default false
     */
    info: string | boolean;
    /**
     * Prefer highlighter
     *
     * @see https://sli.dev/custom/highlighters.html
     * @default shiki
     */
    highlighter: 'prism' | 'shiki';
    /**
     * Enable Twoslash
     *
     * @default true
     */
    twoslash: boolean | 'dev' | 'build';
    /**
     * Show line numbers in code blocks
     *
     * @default false
     */
    lineNumbers: boolean;
    /**
     * Force slides color schema
     *
     * @default 'auto'
     */
    colorSchema: 'dark' | 'light' | 'all' | 'auto';
    /**
     * Router mode for vue-router
     *
     * @default 'history'
     */
    routerMode: 'hash' | 'history';
    /**
     * Aspect ratio for slides
     * should be like `16/9` or `1:1`
     *
     * @default '16/9'
     */
    aspectRatio: number;
    /**
     * The actual width for slides canvas.
     * unit in px.
     *
     * @default '980'
     */
    canvasWidth: number;
    /**
     * Force the filename used when exporting the presentation.
     * The extension, e.g. .pdf, gets automatically added.
     *
     * @default ''
     */
    exportFilename: string | null;
    /**
     * Controls whether texts in slides are selectable
     *
     * @default true
     */
    selectable: boolean;
    /**
     * Configure for themes, will inject intro root styles as
     * `--slidev-theme-x` for attribute `x`
     *
     * This allows themes to have customization options in frontmatter
     * Refer to themes' document for options avaliable
     *
     * @default {}
     */
    themeConfig: SlidevThemeConfig;
    /**
     * Configure fonts for the slides and app
     *
     * @default {}
     */
    fonts: ResolvedFontOptions;
    /**
     * Configure the icon for app
     *
     * @default 'https://cdn.jsdelivr.net/gh/slidevjs/slidev/assets/favicon.png'
     */
    favicon: string;
    /**
     * Options for drawings
     *
     * @default {}
     */
    drawings: ResolvedDrawingsOptions;
    /**
     * URL of PlantUML server used to render diagrams
     *
     * @default https://www.plantuml.com/plantuml
     */
    plantUmlServer: string;
    /**
     * Enable slides recording
     *
     * @default 'dev'
     */
    record: boolean | 'dev' | 'build';
    /**
     * Expose the server to inbound requests (listen to `0.0.0.0`)
     *
     * Pass a string to set the password for accessing presenter mode.
     *
     * @default false
     */
    remote?: string | boolean;
    /**
     * Engine for Atomic CSS
     *
     * @see https://unocss.dev/
     * @default 'unocss'
     */
    css: 'unocss' | 'none';
    /**
     * Enable presenter mode
     *
     * @default true
     */
    presenter: boolean | 'dev' | 'build';
    /**
     * Attributes to apply to the HTML element
     *
     * @default {}
     */
    htmlAttrs: Record<string, string>;
    /**
     * Page transition, powered by Vue's <TransitionGroup/>
     *
     * Built-in transitions:
     * - fade
     * - fade-out
     * - slide-left
     * - slide-right
     * - slide-up
     * - slide-down
     *
     * @see https://sli.dev/guide/animations.html#pages-transitions
     * @see https://vuejs.org/guide/built-ins/transition.html
     */
    transition?: BuiltinSlideTransition | string | TransitionGroupProps;
    /**
     * Suppport MDC syntax
     *
     * @see https://github.com/antfu/markdown-it-mdc
     * @see https://content.nuxtjs.org/guide/writing/mdc
     * @experimental
     * @default false
     */
    mdc?: boolean;
    /**
     * Enable built-in editor
     *
     * @default true
     */
    editor: boolean;
}
interface FontOptions {
    /**
     * Sans serif fonts (default fonts for most text)
     */
    sans?: string | string[];
    /**
     * Serif fonts
     */
    serif?: string | string[];
    /**
     * Monospace fonts, for code blocks and etc.
     */
    mono?: string | string[];
    /**
     * Load webfonts for custom CSS (does not apply anywhere by default)
     */
    custom?: string | string[];
    /**
     * Weights for fonts
     *
     * @default [200, 400, 600]
     */
    weights?: string | (string | number)[];
    /**
     * Import italic fonts
     *
     * @default false
     */
    italic?: boolean;
    /**
     * @default 'google'
     */
    provider?: 'none' | 'google';
    /**
     * Specify web fonts names, will detect from `sans`, `mono`, `serif` if not provided
     */
    webfonts?: string[];
    /**
     * Specify local fonts names, be excluded from webfonts
     */
    local?: string[];
    /**
     * Use fonts fallback
     *
     * @default true
     */
    fallbacks?: boolean;
}
interface DrawingsOptions {
    /**
     * Persist the drawings to disk
     * Passing string to specify the directory (default to `.slidev/drawings`)
     *
     * @default false
     */
    persist?: boolean | string;
    /**
     * @default true
     */
    enabled?: boolean | 'dev' | 'build';
    /**
     * Only allow drawing from presenter mode
     *
     * @default false
     */
    presenterOnly?: boolean;
    /**
     * Sync drawing for all instances
     *
     * @default true
     */
    syncAll?: boolean;
}
interface ResolvedFontOptions {
    sans: string[];
    mono: string[];
    serif: string[];
    weights: string[];
    italic: boolean;
    provider: 'none' | 'google';
    webfonts: string[];
    local: string[];
}
interface ResolvedDrawingsOptions {
    persist: string | false;
    enabled: boolean | 'dev' | 'build';
    presenterOnly: boolean;
    syncAll: boolean;
}
interface ResolvedExportOptions extends Omit<ExportArgs, 'entry' | 'theme'> {
    withClicks?: boolean;
    executablePath?: string;
    withToc?: boolean;
}
type BuiltinSlideTransition = 'slide-up' | 'slide-down' | 'slide-left' | 'slide-right' | 'fade' | 'zoom' | 'none';

type FrontmatterStyle = 'frontmatter' | 'yaml';
interface SlideInfoBase {
    frontmatter: Record<string, any>;
    content: string;
    note?: string;
    title?: string;
    level?: number;
}
interface SourceSlideInfo extends SlideInfoBase {
    /**
     * The filepath of the markdown file
     */
    filepath: string;
    /**
     * The index of the slide in the markdown file
     */
    index: number;
    /**
     * The range of the slide in the markdown file
     */
    start: number;
    end: number;
    raw: string;
    frontmatterRaw?: string;
    frontmatterStyle?: FrontmatterStyle;
}
interface SlideInfo extends SlideInfoBase {
    /**
     * The index of the slide in the presentation
     */
    index: number;
    source: SourceSlideInfo;
    snippetsUsed?: LoadedSnippets;
    noteHTML?: string;
}
/**
 * Editable fields for a slide
 */
type SlidePatch = Partial<Pick<SlideInfoBase, 'content' | 'note'>>;
/**
 * Metadata for "slidev" field in themes' package.json
 */
interface SlidevThemeMeta {
    defaults?: Partial<SlidevConfig>;
    colorSchema?: 'dark' | 'light' | 'both';
    highlighter?: 'prism' | 'shiki' | 'both';
}
type SlidevThemeConfig = Record<string, string | number>;
interface SlidevFeatureFlags {
    katex: boolean;
    monaco: boolean;
    tweet: boolean;
    mermaid: boolean;
}
interface SlidevMarkdown {
    filepath: string;
    raw: string;
    /**
     * All slides in this markdown file
     */
    slides: SourceSlideInfo[];
}
interface SlidevData {
    /**
     * Slides that should be rendered (disabled slides excluded)
     */
    slides: SlideInfo[];
    entry: SlidevMarkdown;
    config: SlidevConfig;
    headmatter: Record<string, unknown>;
    features: SlidevFeatureFlags;
    themeMeta?: SlidevThemeMeta;
    markdownFiles: Record<string, SlidevMarkdown>;
    watchFiles: string[];
}
interface SlidevPreparserExtension {
    name: string;
    transformRawLines?: (lines: string[]) => Promise<void> | void;
    transformSlide?: (content: string, frontmatter: any) => Promise<string | undefined>;
}
type PreparserExtensionLoader = (headmatter?: Record<string, unknown>, filepath?: string, mode?: string) => Promise<SlidevPreparserExtension[]>;
type RenderContext = 'none' | 'slide' | 'overview' | 'presenter' | 'previewNext';
interface SlideRoute {
    no: number;
    meta: RouteMeta;
    component: () => Promise<RouteComponent>;
}
type LoadedSnippets = Record<string, string>;
type ClicksElement = Element | string;
type ClicksRelativeEls = Map<ClicksElement, number>;
interface ClicksInfo {
    /**
     * The maximum clicks, used to calculate the total clicks for current slide
     */
    max?: number;
    /**
     * The offsets added to the subsequent clicks
     * Delta is 0 when the click is absolute
     */
    delta: number;
    /**
     * Resolved clicks
     */
    clicks?: number | [number, number];
    /**
     * Computed ref of whether the click is exactly matched
     */
    isCurrent?: ComputedRef<boolean>;
    /**
     * Computed ref of whether the click is active
     */
    isActive?: ComputedRef<boolean>;
    /**
     * Computed ref of whether the click is shown, it take flagHide into account
     */
    isShown?: ComputedRef<boolean>;
    /**
     * Having the hide flag
     */
    flagHide?: boolean;
    /**
     * Having the fade flag
     */
    flagFade?: boolean;
}
type ResolvedClicksInfo = Required<ClicksInfo>;
type ClicksMap = Map<ClicksElement, ClicksInfo>;
interface ClicksContext {
    current: number;
    readonly relativeOffsets: ClicksRelativeEls;
    readonly map: ClicksMap;
    resolve: (at: string | number, size?: number) => {
        start: number;
        end: number;
        delta: number;
    };
    register: (el: ClicksElement, info: ClicksInfo) => void;
    unregister: (el: ClicksElement) => void;
    onMounted: () => void;
    readonly currentOffset: number;
    readonly total: number;
}

interface CodeRunnerContext {
    /**
     * Options passed to runner via the `runnerOptions` prop.
     */
    options: Record<string, unknown>;
    /**
     * Highlight code with shiki.
     */
    highlight: (code: string, lang: string, options?: Partial<CodeToHastOptions>) => Promise<string>;
    /**
     * Use (other) code runner to run code.
     */
    run: (code: string, lang: string) => Promise<CodeRunnerOutputs>;
}
interface CodeRunnerOutputHtml {
    /**
     * The HTML to be rendered.
     *
     * Slidev does NOT sanitize the HTML for you - make sure it's from trusted sources or sanitize it before passing it in
     */
    html: string;
}
interface CodeRunnerOutputDom {
    /**
     * The DOM element to be rendered.
     */
    element: HTMLElement;
}
interface CodeRunnerOutputError {
    /**
     * The error message to be displayed.
     */
    error: string;
}
interface CodeRunnerOutputText {
    /**
     * The text to be displayed.
     */
    text: string;
    /**
     * The class to be applied to the text.
     */
    class?: string;
    /**
     * The language to be highlighted.
     */
    highlightLang?: string;
}
type CodeRunnerOutputTextArray = CodeRunnerOutputText[];
type CodeRunnerOutput = CodeRunnerOutputHtml | CodeRunnerOutputError | CodeRunnerOutputText | CodeRunnerOutputTextArray | CodeRunnerOutputDom;
type CodeRunnerOutputs = Arrayable<CodeRunnerOutput>;
type CodeRunner = (code: string, ctx: CodeRunnerContext) => Awaitable<CodeRunnerOutputs>;
type CodeRunnerProviders = Record<string, CodeRunner>;

interface AppContext {
    app: App;
    router: Router;
}
interface MonacoSetupReturn {
    editorOptions?: monaco.editor.IEditorOptions;
}
type MermaidOptions = (typeof mermaid.initialize) extends (a: infer A) => any ? A : never;
interface NavOperations {
    next: () => void;
    prev: () => Promise<void>;
    nextSlide: () => void;
    prevSlide: () => Promise<void>;
    go: (index: number) => void;
    goFirst: () => void;
    goLast: () => void;
    downloadPDF: () => Promise<void>;
    toggleDark: () => void;
    toggleOverview: () => void;
    toggleDrawing: () => void;
    escapeOverview: () => void;
    showGotoDialog: () => void;
}
interface ShortcutOptions {
    key: string | Ref<boolean>;
    fn?: () => void;
    autoRepeat?: boolean;
    name?: string;
}
interface ShikiContext {
    /**
     * @deprecated Pass directly the theme name it's supported by Shiki.
     * For custom themes, load it manually via `JSON.parse(fs.readFileSync(path, 'utf-8'))` and pass the raw JSON object instead.
     */
    loadTheme: (path: string) => Promise<any>;
}
type ShikiSetupReturn = Partial<Omit<CodeToHastOptionsCommon<BuiltinLanguage>, 'lang'>> & CodeOptionsThemes<BuiltinTheme> & CodeOptionsMeta & {
    setup?: (highlighter: Highlighter) => Awaitable<void>;
    langs?: (LanguageInput | BuiltinLanguage)[];
};
type ShikiSetup = (shiki: ShikiContext) => Awaitable<ShikiSetupReturn | void>;
type KatexSetup = () => Awaitable<Partial<KatexOptions> | void>;
type UnoSetup = () => Awaitable<Partial<VitePluginConfig> | void>;
type PreparserSetup = (filepath: string) => SlidevPreparserExtension;
type MonacoSetup = (m: typeof monaco) => Awaitable<MonacoSetupReturn | void>;
type AppSetup = (context: AppContext) => Awaitable<void>;
type RootSetup = () => Awaitable<void>;
type MermaidSetup = () => Partial<MermaidOptions> | void;
type ShortcutsSetup = (nav: NavOperations, defaultShortcuts: ShortcutOptions[]) => Array<ShortcutOptions>;
type CodeRunnersSetup = (runners: CodeRunnerProviders) => Awaitable<CodeRunnerProviders | void>;
declare function defineShikiSetup(fn: ShikiSetup): ShikiSetup;
declare function defineUnoSetup(fn: UnoSetup): UnoSetup;
declare function defineMonacoSetup(fn: MonacoSetup): MonacoSetup;
declare function defineAppSetup(fn: AppSetup): AppSetup;
declare function defineMermaidSetup(fn: MermaidSetup): MermaidSetup;
declare function defineKatexSetup(fn: KatexSetup): KatexSetup;
declare function defineShortcutsSetup(fn: ShortcutsSetup): ShortcutsSetup;
declare function definePreparserSetup(fn: PreparserSetup): PreparserSetup;
declare function defineCodeRunnersSetup(fn: CodeRunnersSetup): CodeRunnersSetup;

interface TocItem {
    no: number;
    active?: boolean;
    activeParent?: boolean;
    children: TocItem[];
    hasActiveParent?: boolean;
    level: number;
    path: string;
    hideInToc?: boolean;
    title?: string;
}

declare module 'vite' {
    interface CustomEventMap {
        'slidev:update-slide': {
            no: number;
            data: SlideInfo;
        };
        'slidev:update-note': {
            no: number;
            note: string;
            noteHTML: string;
        };
    }
}

interface RootsInfo {
    cliRoot: string;
    clientRoot: string;
    userRoot: string;
    userPkgJson: Record<string, any>;
    userWorkspaceRoot: string;
}
interface SlidevEntryOptions {
    /**
     * Markdown entry
     */
    entry: string;
    /**
     * Theme id
     */
    theme?: string;
    /**
     * Remote password
     */
    remote?: string;
    /**
     * Enable inspect plugin
     */
    inspect?: boolean;
}
interface ResolvedSlidevOptions extends RootsInfo {
    data: SlidevData;
    entry: string;
    themeRaw: string;
    theme: string;
    themeRoots: string[];
    addonRoots: string[];
    /**
     * =`[...themeRoots, ...addonRoots, userRoot]` (`clientRoot` excluded)
     */
    roots: string[];
    mode: 'dev' | 'build' | 'export';
    remote?: string;
    inspect?: boolean;
}
interface SlidevServerOptions {
    /**
     * @returns `false` if server should be restarted
     */
    loadData?: () => Promise<SlidevData | false>;
}

interface SlidevPluginOptions {
    vue?: ArgumentsType<typeof Vue>[0];
    vuejsx?: ArgumentsType<typeof VueJsx>[0];
    markdown?: ArgumentsType<typeof Markdown>[0];
    components?: ArgumentsType<typeof Components>[0];
    icons?: ArgumentsType<typeof Icons>[0];
    remoteAssets?: ArgumentsType<typeof RemoteAssets>[0];
    serverRef?: ArgumentsType<typeof ServerRef>[0];
    unocss?: VitePluginConfig;
}
declare module 'vite' {
    interface UserConfig {
        /**
         * Custom internal plugin options for Slidev (advanced)
         *
         * @see https://github.com/slidevjs/slidev/blob/main/packages/slidev/node/options.ts#L50
         */
        slidev?: SlidevPluginOptions;
    }
}

export { type AppContext, type AppSetup, type BuildArgs, type BuiltinSlideTransition, type ClicksContext, type ClicksElement, type ClicksInfo, type ClicksMap, type ClicksRelativeEls, type CodeRunner, type CodeRunnerContext, type CodeRunnerOutput, type CodeRunnerOutputDom, type CodeRunnerOutputError, type CodeRunnerOutputHtml, type CodeRunnerOutputText, type CodeRunnerOutputTextArray, type CodeRunnerOutputs, type CodeRunnerProviders, type CodeRunnersSetup, type CommonArgs, type DrawingsOptions, type ExportArgs, type FontOptions, type FrontmatterStyle, type KatexSetup, type LoadedSnippets, type MermaidOptions, type MermaidSetup, type MonacoSetup, type MonacoSetupReturn, type NavOperations, type PreparserExtensionLoader, type PreparserSetup, type RenderContext, type ResolvedClicksInfo, type ResolvedDrawingsOptions, type ResolvedExportOptions, type ResolvedFontOptions, type ResolvedSlidevOptions, type RootSetup, type RootsInfo, type ShikiContext, type ShikiSetup, type ShikiSetupReturn, type ShortcutOptions, type ShortcutsSetup, type SlideInfo, type SlideInfoBase, type SlidePatch, type SlideRoute, type SlidevConfig, type SlidevData, type SlidevEntryOptions, type SlidevFeatureFlags, type SlidevMarkdown, type SlidevPluginOptions, type SlidevPreparserExtension, type SlidevServerOptions, type SlidevThemeConfig, type SlidevThemeMeta, type SourceSlideInfo, type TocItem, type UnoSetup, defineAppSetup, defineCodeRunnersSetup, defineKatexSetup, defineMermaidSetup, defineMonacoSetup, definePreparserSetup, defineShikiSetup, defineShortcutsSetup, defineUnoSetup };
