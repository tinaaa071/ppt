// src/core.ts
import YAML from "js-yaml";

// ../../node_modules/.pnpm/@antfu+utils@0.7.7/node_modules/@antfu/utils/dist/index.mjs
function toArray(array) {
  array = array ?? [];
  return Array.isArray(array) ? array : [array];
}
function uniq(array) {
  return Array.from(new Set(array));
}
function range(...args) {
  let start, stop, step;
  if (args.length === 1) {
    start = 0;
    step = 1;
    [stop] = args;
  } else {
    [start, stop, step = 1] = args;
  }
  const arr = [];
  let current = start;
  while (current < stop) {
    arr.push(current);
    current += step || 1;
  }
  return arr;
}
var toString = (v) => Object.prototype.toString.call(v);
function notNullish(v) {
  return v != null;
}
var isNumber = (val) => typeof val === "number";
var isObject = (val) => toString(val) === "[object Object]";
function slash(str) {
  return str.replace(/\\/g, "/");
}
function ensurePrefix(prefix, str) {
  if (!str.startsWith(prefix))
    return prefix + str;
  return str;
}
function objectMap(obj, fn) {
  return Object.fromEntries(
    Object.entries(obj).map(([k, v]) => fn(k, v)).filter(notNullish)
  );
}
var VOID = Symbol("p-void");

// src/utils.ts
function parseRangeString(total, rangeStr) {
  if (!rangeStr || rangeStr === "all" || rangeStr === "*")
    return range(1, total + 1);
  if (rangeStr === "none")
    return [];
  const pages = [];
  for (const part of rangeStr.split(/[,;]/g)) {
    if (!part.includes("-")) {
      pages.push(+part);
    } else {
      const [start, end] = part.split("-", 2);
      pages.push(
        ...range(+start, !end ? total + 1 : +end + 1)
      );
    }
  }
  return uniq(pages).filter((i) => i <= total).sort((a, b) => a - b);
}
function parseAspectRatio(str) {
  if (isNumber(str))
    return str;
  if (!Number.isNaN(+str))
    return +str;
  const [wStr = "", hStr = ""] = str.split(/[:\/x\|]/);
  const w = Number.parseFloat(wStr.trim());
  const h = Number.parseFloat(hStr.trim());
  if (Number.isNaN(w) || Number.isNaN(h) || h === 0)
    throw new Error(`Invalid aspect ratio "${str}"`);
  return w / h;
}

// src/config.ts
function getDefaultConfig() {
  return {
    theme: "default",
    title: "Slidev",
    titleTemplate: "%s - Slidev",
    addons: [],
    remoteAssets: false,
    monaco: true,
    monacoTypesSource: "local",
    monacoTypesAdditionalPackages: [],
    download: false,
    export: {},
    info: false,
    highlighter: "shiki",
    twoslash: true,
    lineNumbers: false,
    colorSchema: "auto",
    routerMode: "history",
    aspectRatio: 16 / 9,
    canvasWidth: 980,
    exportFilename: "",
    selectable: false,
    themeConfig: {},
    fonts: {},
    favicon: "https://cdn.jsdelivr.net/gh/slidevjs/slidev/assets/favicon.png",
    drawings: {},
    plantUmlServer: "https://www.plantuml.com/plantuml",
    codeCopy: true,
    record: "dev",
    css: "unocss",
    presenter: true,
    htmlAttrs: {},
    transition: void 0,
    editor: true
  };
}
function resolveConfig(headmatter, themeMeta = {}, filepath, verify = false) {
  const themeHightlighter = ["prism", "shiki", "shikiji"].includes(themeMeta.highlighter || "") ? themeMeta.highlighter : void 0;
  const themeColorSchema = ["light", "dark"].includes(themeMeta.colorSchema || "") ? themeMeta.colorSchema : void 0;
  const defaultConfig = getDefaultConfig();
  const config = {
    ...defaultConfig,
    highlighter: themeHightlighter || defaultConfig.highlighter,
    colorSchema: themeColorSchema || defaultConfig.colorSchema,
    ...themeMeta.defaults,
    ...headmatter.config,
    ...headmatter,
    fonts: resolveFonts({
      ...themeMeta.defaults?.fonts,
      ...headmatter.config?.fonts,
      ...headmatter?.fonts
    }),
    drawings: resolveDrawings(headmatter.drawings, filepath),
    htmlAttrs: {
      ...themeMeta.defaults?.htmlAttrs,
      ...headmatter.config?.htmlAttrs,
      ...headmatter?.htmlAttrs
    }
  };
  if (config.highlighter === "shikiji") {
    console.warn(`[slidev] "shikiji" is merged back to "shiki", you can safely change it "highlighter: shiki"`);
    config.highlighter = "shiki";
  }
  if (config.colorSchema !== "dark" && config.colorSchema !== "light")
    config.colorSchema = "auto";
  if (themeColorSchema && config.colorSchema === "auto")
    config.colorSchema = themeColorSchema;
  config.aspectRatio = parseAspectRatio(config.aspectRatio);
  if (verify)
    verifyConfig(config, themeMeta);
  return config;
}
function verifyConfig(config, themeMeta = {}, warn = (v) => console.warn(`[slidev] ${v}`)) {
  const themeHightlighter = ["prism", "shiki"].includes(themeMeta.highlighter || "") ? themeMeta.highlighter : void 0;
  const themeColorSchema = ["light", "dark"].includes(themeMeta.colorSchema || "") ? themeMeta.colorSchema : void 0;
  if (themeColorSchema && config.colorSchema !== themeColorSchema)
    warn(`Color schema "${config.colorSchema}" does not supported by the theme`);
  if (themeHightlighter && config.highlighter !== themeHightlighter)
    warn(`Syntax highlighter "${config.highlighter}" does not supported by the theme`);
  if (!["unocss", void 0].includes(config.css)) {
    warn(`Unsupported Atomic CSS engine "${config.css}", fallback to UnoCSS`);
    config.css = "unocss";
  }
}
function resolveFonts(fonts = {}) {
  const {
    fallbacks = true,
    italic = false,
    provider = "google"
  } = fonts;
  let sans = toArray(fonts.sans).flatMap((i) => i.split(/,\s*/g)).map((i) => i.trim());
  let serif = toArray(fonts.serif).flatMap((i) => i.split(/,\s*/g)).map((i) => i.trim());
  let mono = toArray(fonts.mono).flatMap((i) => i.split(/,\s*/g)).map((i) => i.trim());
  const weights = toArray(fonts.weights || "200,400,600").flatMap((i) => i.toString().split(/,\s*/g)).map((i) => i.trim());
  const custom = toArray(fonts.custom).flatMap((i) => i.split(/,\s*/g)).map((i) => i.trim());
  const local = toArray(fonts.local).flatMap((i) => i.split(/,\s*/g)).map((i) => i.trim());
  const webfonts = fonts.webfonts ? fonts.webfonts : fallbacks ? uniq([...sans, ...serif, ...mono, ...custom]) : [];
  webfonts.filter((i) => local.includes(i));
  function toQuoted(font) {
    if (/^(['"]).*\1$/.test(font))
      return font;
    return `"${font}"`;
  }
  if (fallbacks) {
    sans = uniq([
      ...sans.map(toQuoted),
      "ui-sans-serif",
      "system-ui",
      "-apple-system",
      "BlinkMacSystemFont",
      '"Segoe UI"',
      "Roboto",
      '"Helvetica Neue"',
      "Arial",
      '"Noto Sans"',
      "sans-serif",
      '"Apple Color Emoji"',
      '"Segoe UI Emoji"',
      '"Segoe UI Symbol"',
      '"Noto Color Emoji"'
    ]);
    serif = uniq([
      ...serif.map(toQuoted),
      "ui-serif",
      "Georgia",
      "Cambria",
      '"Times New Roman"',
      "Times",
      "serif"
    ]);
    mono = uniq([
      ...mono.map(toQuoted),
      "ui-monospace",
      "SFMono-Regular",
      "Menlo",
      "Monaco",
      "Consolas",
      '"Liberation Mono"',
      '"Courier New"',
      "monospace"
    ]);
  }
  return {
    sans,
    serif,
    mono,
    webfonts,
    provider,
    local,
    italic,
    weights
  };
}
function resolveDrawings(options = {}, filepath) {
  const {
    enabled = true,
    persist = false,
    presenterOnly = false,
    syncAll = true
  } = options;
  const persistPath = typeof persist === "string" ? persist : persist ? `.slidev/drawings${filepath ? `/${filepath.match(/([^\\\/]+?)(\.\w+)?$/)?.[1]}` : ""}` : false;
  return {
    enabled,
    persist: persistPath,
    presenterOnly,
    syncAll
  };
}

// src/core.ts
function stringify(data) {
  return `${data.slides.map(stringifySlide).join("\n").trim()}
`;
}
function stringifySlide(data, idx = 0) {
  return data.raw.startsWith("---") || idx === 0 ? data.raw : `---
${ensurePrefix("\n", data.raw)}`;
}
function prettifySlide(data) {
  const trimed = data.content.trim();
  data.content = trimed ? `
${data.content.trim()}
` : "";
  data.raw = data.frontmatterRaw ? data.frontmatterStyle === "yaml" ? `\`\`\`yaml
${data.frontmatterRaw.trim()}
\`\`\`
${data.content}` : `---
${data.frontmatterRaw.trim()}
---
${data.content}` : data.content;
  if (data.note)
    data.raw += `
<!--
${data.note.trim()}
-->
`;
  return data;
}
function prettify(data) {
  data.slides.forEach(prettifySlide);
  return data;
}
function safeParseYAML(str) {
  const res = YAML.load(str);
  return isObject(res) ? res : {};
}
function matter(code) {
  let type;
  let raw;
  const data = {};
  let content = code.replace(/^---.*\r?\n([\s\S]*?)---/, (_, f) => {
    type = "frontmatter";
    raw = f;
    Object.assign(data, safeParseYAML(f));
    return "";
  });
  if (type !== "frontmatter") {
    content = content.replace(/^\s*```ya?ml([\s\S]*?)```/, (_, d) => {
      type = "yaml";
      raw = d;
      Object.assign(data, safeParseYAML(d));
      return "";
    });
  }
  return {
    type,
    raw,
    data,
    content
  };
}
function detectFeatures(code) {
  return {
    katex: !!code.match(/\$.*?\$/) || !!code.match(/$\$\$/),
    monaco: !!code.match(/{monaco.*}/),
    tweet: !!code.match(/<Tweet\b/),
    mermaid: !!code.match(/^```mermaid/m)
  };
}
function parseSlide(raw) {
  const matterResult = matter(raw);
  let note;
  const frontmatter = matterResult.data || {};
  let content = matterResult.content.trim();
  const comments = Array.from(content.matchAll(/<!--([\s\S]*?)-->/g));
  if (comments.length) {
    const last = comments[comments.length - 1];
    if (last.index !== void 0 && last.index + last[0].length >= content.length) {
      note = last[1].trim();
      content = content.slice(0, last.index).trim();
    }
  }
  let title;
  let level;
  if (frontmatter.title || frontmatter.name) {
    title = frontmatter.title || frontmatter.name;
  } else {
    const match = content.match(/^(#+) (.*)$/m);
    title = match?.[2]?.trim();
    level = match?.[1]?.length;
  }
  if (frontmatter.level)
    level = frontmatter.level || 1;
  return {
    raw,
    title,
    level,
    content,
    frontmatter,
    frontmatterStyle: matterResult.type,
    frontmatterRaw: matterResult.raw,
    note
  };
}
async function parse(markdown, filepath, extensions) {
  const lines = markdown.split(/\r?\n/g);
  const slides = [];
  let start = 0;
  async function slice(end) {
    if (start === end)
      return;
    const raw = lines.slice(start, end).join("\n");
    const slide = {
      ...parseSlide(raw),
      filepath,
      index: slides.length,
      start,
      end
    };
    if (extensions) {
      for (const e of extensions) {
        if (e.transformSlide) {
          const newContent = await e.transformSlide(slide.content, slide.frontmatter);
          if (newContent !== void 0)
            slide.content = newContent;
        }
      }
    }
    slides.push(slide);
    start = end + 1;
  }
  if (extensions) {
    for (const e of extensions) {
      if (e.transformRawLines)
        await e.transformRawLines(lines);
    }
  }
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trimEnd();
    if (line.match(/^---+/)) {
      await slice(i);
      const next = lines[i + 1];
      if (line.match(/^---([^-].*)?$/) && !next?.match(/^\s*$/)) {
        start = i;
        for (i += 1; i < lines.length; i++) {
          if (lines[i].trimEnd().match(/^---$/))
            break;
        }
      }
    } else if (line.startsWith("```")) {
      for (i += 1; i < lines.length; i++) {
        if (lines[i].startsWith("```"))
          break;
      }
    }
  }
  if (start <= lines.length - 1)
    await slice(lines.length);
  return {
    filepath,
    raw: markdown,
    slides
  };
}
function mergeFeatureFlags(a, b) {
  return objectMap(a, (k, v) => [k, v || b[k]]);
}

export {
  slash,
  parseRangeString,
  parseAspectRatio,
  getDefaultConfig,
  resolveConfig,
  verifyConfig,
  resolveFonts,
  stringify,
  stringifySlide,
  prettifySlide,
  prettify,
  detectFeatures,
  parseSlide,
  parse,
  mergeFeatureFlags
};
